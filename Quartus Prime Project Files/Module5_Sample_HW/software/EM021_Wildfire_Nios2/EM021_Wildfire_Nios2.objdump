
EM021_Wildfire_Nios2.elf:     file format elf32-littlenios2
EM021_Wildfire_Nios2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020224

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0001907c memsz 0x0001907c flags r-x
    LOAD off    0x0001a09c vaddr 0x0003909c paddr 0x0003acc4 align 2**12
         filesz 0x00001c28 memsz 0x00001c28 flags rw-
    LOAD off    0x0001c8ec vaddr 0x0003c8ec paddr 0x0003c8ec align 2**12
         filesz 0x00000000 memsz 0x00000244 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017f5c  00020224  00020224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000f1c  00038180  00038180  00019180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c28  0003909c  0003acc4  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000244  0003c8ec  0003c8ec  0001c8ec  2**2
                  ALLOC, SMALL_DATA
  6 .nios_system_shared_memory 00000000  00002000  00002000  0001bcc4  2**0
                  CONTENTS
  7 .nios_system_onchip_memory2 00000000  0003cb30  0003cb30  0001bcc4  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  0001bcc4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001448  00000000  00000000  0001bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00035e26  00000000  00000000  0001d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000dd88  00000000  00000000  00052f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0001d33d  00000000  00000000  00060cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00003618  00000000  00000000  0007e02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00005388  00000000  00000000  00081644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0002448a  00000000  00000000  000869cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000040  00000000  00000000  000aae58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003108  00000000  00000000  000aae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000003  00000000  00000000  000b25bc  2**0
                  CONTENTS, READONLY
 19 .cpu          00000016  00000000  00000000  000b25bf  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000b25d5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000b25d6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000b25d7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000b25db  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000b25df  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000015  00000000  00000000  000b25e3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000015  00000000  00000000  000b25f8  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000015  00000000  00000000  000b260d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000b2622  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000024  00000000  00000000  000b262a  2**0
                  CONTENTS, READONLY
 30 .jdi          0000fb5a  00000000  00000000  000b264e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020224 l    d  .text	00000000 .text
00038180 l    d  .rodata	00000000 .rodata
0003909c l    d  .rwdata	00000000 .rwdata
0003c8ec l    d  .bss	00000000 .bss
00002000 l    d  .nios_system_shared_memory	00000000 .nios_system_shared_memory
0003cb30 l    d  .nios_system_onchip_memory2	00000000 .nios_system_onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 d:/HW/InnovateFPGA/Module5_Sample_HW/software/EM021_Wildfire_Nios2_bsp//obj/HAL/src/crt0.o
0002025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 AD5270.c
00000000 l    df *ABS*	00000000 AD7790.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 light_sensor.c
0003ac70 l     O .rwdata	00000004 Light_I2C_Controller_Base
00000000 l    df *ABS*	00000000 main.c
0003c93c l     O .bss	00000070 thresh
0003c9ac l     O .bss	00000020 custom_thresh
0003ac7c l     O .rwdata	00000001 g_clear_OOR_flag
0003c8fc l     O .bss	00000004 out_of_range.0
00000000 l    df *ABS*	00000000 mpu9250.c
00000000 l    df *ABS*	00000000 rh_temp.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 sf_rint.c
0003ac84 l     O .rwdata	00000008 TWO23
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 unordsf2.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0003909c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002cc10 l     F .text	000000c0 __sbprintf
00038b74 l     O .rodata	00000010 blanks.1
00038b64 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0002ce34 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0002eaa8 l     F .text	00000008 __fp_lock
0002eabc l     F .text	00000008 __fp_unlock
0002eac4 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00038c28 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00032140 l     F .text	000000f4 __sprint_r.part.0
000335ac l     F .text	000000c0 __sbprintf
00038d5c l     O .rodata	00000010 blanks.1
00038d4c l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
000339c4 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0003559c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000356b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00035718 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00035830 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0003591c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00035a84 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00035b70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00035d50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0003acb4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00036198 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000362d8 l     F .text	00000034 alt_dev_reg
00039bdc l     O .rwdata	00001060 nios_system_jtag_uart
0003ac3c l     O .rwdata	0000002c nios_system_adc_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000365e0 l     F .text	0000020c altera_avalon_jtag_uart_irq
000367ec l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0003702c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000373d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0003783c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0003798c l     F .text	0000003c alt_get_errno
000379c8 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0003c938 g     O .bss	00000004 alt_instruction_exception_handler
000236cc g     F .text	00000054 check_adc0_threshold
0002a964 g     F .text	00000018 putchar
0003174c g     F .text	00000070 _mprec_log10
00031838 g     F .text	00000060 __any_on
00033e1c g     F .text	00000058 _isatty_r
00038c34 g     O .rodata	00000028 __mprec_tinytens
00035c8c g     F .text	0000007c alt_main
0002a97c g     F .text	000000cc _puts_r
0003ca30 g     O .bss	00000100 alt_irq
00033f68 g     F .text	00000064 _lseek_r
00020a98 g     F .text	00000068 ACK_check
0003ac68 g     O .rwdata	00000004 pio
0003acc4 g       *ABS*	00000000 __flash_rwdata_start
00020a0c g     F .text	0000008c ACK_single_check
000353b8 g     F .text	00000080 .hidden __eqdf2
0003cb30 g       *ABS*	00000000 __alt_heap_start
00002000 g       *ABS*	00000000 __alt_mem_nios_system_shared_memory
00034770 g     F .text	00000060 _kill_r
00021d70 g     F .text	00000080 I2C_Write_Light
0002a924 g     F .text	00000038 printf
0003413c g     F .text	0000006c _wcrtomb_r
00023720 g     F .text	00000054 check_adc1_threshold
000342e0 g     F .text	00000098 _signal_r
000320dc g     F .text	0000005c __sseek
0002ee0c g     F .text	00000010 __sinit
0003366c g     F .text	00000148 __swbuf_r
0002428c g     F .text	00000130 MPU9250_initialize
00033e74 g     F .text	00000074 _setlocale_r
0002ec2c g     F .text	00000078 __sfmoreglue
0003c9e4 g     O .bss	0000000c accelerometer_data
00023394 g     F .text	00000054 Ad7790INIT
00035d2c g     F .text	00000024 __malloc_unlock
00023538 g     F .text	00000194 set_custom_thresh
0003c8f0 g     O .bss	00000002 ui16RdacWord
00026fe0 g     F .text	000003f4 .hidden __divsf3
00023fa8 g     F .text	0000005c ReadRegs
000234e8 g     F .text	00000050 setResistorValue
00021c18 g     F .text	0000004c Light_SetThreshHigh
0003048c g     F .text	0000012c memmove
00020b00 g     F .text	00000250 OC_I2C_Write
0002edf8 g     F .text	00000014 _cleanup
0002583c g     F .text	00000298 powf
000306a8 g     F .text	000000a4 _Balloc
00027e90 g     F .text	00000070 .hidden __fixsfsi
00029340 g     F .text	000000e8 .hidden __gtdf2
00037c04 g     F .text	00000024 altera_nios2_gen2_irq_init
0002a8e8 g     F .text	0000000c __errno
00025014 g     F .text	000000a4 RH_Temp_Init
00020000 g     F .entry	0000000c __reset
0002f874 g     F .text	00000008 __localeconv_l
00020020 g       *ABS*	00000000 __flash_exceptions_start
00033dbc g     F .text	00000060 _fstat_r
0003c918 g     O .bss	00000004 errno
00032054 g     F .text	00000008 __seofread
00020000 g       *ABS*	00000000 __alt_mem_nios_system_onchip_memory2
0003c924 g     O .bss	00000004 alt_argv
00042c68 g       *ABS*	00000000 _gp
000218f8 g     F .text	000000f8 Light_Get_ADCData0
00036168 g     F .text	00000030 usleep
000279b0 g     F .text	00000494 .hidden __subsf3
00035810 g     F .text	00000020 getpid
0003ac7a g     O .rwdata	00000002 ui16sensitivity
00024884 g     F .text	000000d4 read_temp
00039a5c g     O .rwdata	00000180 alt_fd_list
00022a14 g     F .text	00000980 Sensor_Report
00022738 g     F .text	000000a4 check_temp_hm_threshold
0002a95c g     F .text	00000008 _putchar_r
00025158 g     F .text	0000003c RH_Temp_Sensor_Init
00037c28 g     F .text	00000090 alt_find_dev
0003038c g     F .text	00000100 memcpy
00020824 g     F .text	00000154 oc_i2c_init_ex
0002eab0 g     F .text	0000000c _cleanup_r
0002a570 g     F .text	000000b8 .hidden __floatsidf
00037910 g     F .text	0000007c alt_io_redirect
00029428 g     F .text	000000e8 .hidden __ltdf2
00038180 g       *ABS*	00000000 __DTOR_END__
0002aa48 g     F .text	00000010 puts
00037e78 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00021888 g     F .text	00000070 Light_PowerSwitch
000316a8 g     F .text	000000a4 __ratio
00033590 g     F .text	0000001c __vfiprintf_internal
000369e8 g     F .text	00000220 altera_avalon_jtag_uart_read
0002a8f4 g     F .text	00000030 _printf_r
00026a8c g     F .text	00000064 .hidden __udivsi3
0003586c g     F .text	000000b0 isatty
00034378 g     F .text	000000c4 _raise_r
00033888 g     F .text	00000064 __assert_func
00038c84 g     O .rodata	000000c8 __mprec_tens
000274fc g     F .text	000000b4 .hidden __lesf2
00020610 g     F .text	00000114 writeAd7790
0003c914 g     O .bss	00000004 __malloc_top_pad
000244b0 g     F .text	00000114 calib_mag
000347d0 g     F .text	00000004 _getpid_r
0002f87c g     F .text	0000000c _localeconv_r
0003c8f8 g     O .bss	00000004 fConcentration
00030b18 g     F .text	000000b0 __i2b
0002f26c g     F .text	000004c8 __sfvwrite_r
0003443c g     F .text	000000bc __sigtramp_r
00031fa8 g     F .text	00000058 _sbrk_r
0003401c g     F .text	00000064 _read_r
0003acac g     O .rwdata	00000004 alt_max_fd
00033a84 g     F .text	00000070 _fclose_r
0002ea24 g     F .text	00000084 fflush
0003c910 g     O .bss	00000004 __malloc_max_sbrked_mem
00021e64 g     F .text	00000074 I2C_Read_Light
0002a628 g     F .text	000000fc .hidden __extendsfdf2
0003c908 g     O .bss	00000004 temperature
00028120 g     F .text	000008f0 .hidden __adddf3
000273d4 g     F .text	00000070 .hidden __nesf2
0003143c g     F .text	00000108 __b2d
00034df4 g     F .text	000005c4 .hidden __umoddi3
00035bac g     F .text	000000e0 lseek
0003ac80 g     O .rwdata	00000004 __fdlib_version
0003ac8c g     O .rwdata	00000004 _global_impure_ptr
00031a44 g     F .text	00000564 _realloc_r
0003cb30 g       *ABS*	00000000 __bss_end
00037754 g     F .text	000000e8 alt_iic_isr_register
00036060 g     F .text	00000108 alt_tick
00025638 g     F .text	000000f8 th_dump_chip_info
000347d4 g     F .text	00000620 .hidden __udivdi3
00033d20 g     F .text	00000024 _fputwc_r
00038c5c g     O .rodata	00000028 __mprec_bigtens
000308cc g     F .text	00000138 __s2b
0003426c g     F .text	00000018 abort
0003550c g     F .text	00000090 .hidden __floatunsidf
0003115c g     F .text	00000058 __mcmp
0002ee2c g     F .text	00000014 __fp_lock_all
00037708 g     F .text	0000004c alt_ic_irq_enabled
000254c4 g     F .text	00000138 th_Read_Measure_Data
000211fc g     F .text	00000270 OC_I2CL_Write
00035fbc g     F .text	000000a4 alt_alarm_stop
00023774 g     F .text	00000054 check_adc2_threshold
0003c934 g     O .bss	00000004 alt_irq_active
00021cb8 g     F .text	00000064 Light_GetInterrupt
00020d50 g     F .text	00000064 ACK_judge_for_read
000200fc g     F .exceptions	000000c8 alt_irq_handler
00039a34 g     O .rwdata	00000028 alt_dev_null
00020724 g     F .text	00000054 Write32_Data
000226c4 g     F .text	00000074 check_light_threshold
000223a8 g     F .text	0000031c set_thresh
00021824 g     F .text	00000064 Light_GetTiming
000373b8 g     F .text	00000020 alt_dcache_flush_all
00030a04 g     F .text	00000064 __hi0bits
0003548c g     F .text	00000080 .hidden __fixdfsi
00024ea8 g     F .text	000000cc getMotion9
0003acc4 g       *ABS*	00000000 __ram_rwdata_end
0003aca4 g     O .rwdata	00000008 alt_dev_list
000361d4 g     F .text	00000104 write
00031898 g     F .text	000000cc _putc_r
00027444 g     F .text	000000b8 .hidden __gtsf2
0003c9cc g     O .bss	0000000c calib_data
0003909c g       *ABS*	00000000 __ram_rodata_end
00035754 g     F .text	000000bc fstat
00035958 g     F .text	0000012c kill
00029428 g     F .text	000000e8 .hidden __ledf2
00030e8c g     F .text	00000148 __pow5mult
0003224c g     F .text	00001344 ___vfiprintf_internal_r
00026af0 g     F .text	0000005c .hidden __umodsi3
0003cb30 g       *ABS*	00000000 end
00024958 g     F .text	00000118 read_mag
00036520 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201c4 g     F .exceptions	00000060 alt_instruction_exception_entry
00038180 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
000370a8 g     F .text	00000084 alt_avalon_timer_sc_init
0002a894 g     F .text	00000054 .hidden __clzsi2
00036c08 g     F .text	00000228 altera_avalon_jtag_uart_write
0002ee1c g     F .text	00000004 __sfp_lock_acquire
000302bc g     F .text	000000d0 memchr
0002aaf0 g     F .text	00002104 ___vfprintf_internal_r
0002ef70 g     F .text	000002fc _free_r
00038ec0 g     O .rodata	00000180 _ctype_b
00033ee8 g     F .text	0000000c __locale_mb_cur_max
00038060 g     F .text	00000120 __call_exitprocs
000250b8 g     F .text	000000a0 RH_Temp_Read_Device_ID
0003ac94 g     O .rwdata	00000004 __malloc_sbrk_base
00020224 g     F .text	0000003c _start
0003c92c g     O .bss	00000004 _alt_tick_rate
0002341c g     F .text	000000cc calculateFeedbackResistor
00030fd4 g     F .text	00000188 __lshift
00036e30 g     F .text	000001fc alt_avalon_spi_command
0003c930 g     O .bss	00000004 _alt_nticks
000345b4 g     F .text	000000a0 signal
00035d8c g     F .text	00000108 read
00023f40 g     F .text	00000068 ReadReg
00036348 g     F .text	00000074 alt_sys_init
00027f00 g     F .text	00000124 .hidden __floatsisf
00037fd0 g     F .text	00000090 __register_exitproc
00021df0 g     F .text	00000074 I2C_Write_Light16
0003c9f0 g     O .bss	0000000c gyroscope_data
00030bc8 g     F .text	000002c4 __multiply
0003c9d8 g     O .bss	0000000c magnetometer_ASA
0003688c g     F .text	00000068 altera_avalon_jtag_uart_close
000237c8 g     F .text	0000006c check_co_threshold
00026b4c g     F .text	00000028 .hidden __mulsi3
0003909c g       *ABS*	00000000 __ram_rwdata_start
0003ac74 g     O .rwdata	00000004 adc
00038180 g       *ABS*	00000000 __ram_rodata_start
0003ca08 g     O .bss	00000028 __malloc_current_mallinfo
000273d4 g     F .text	00000070 .hidden __eqsf2
00031544 g     F .text	00000164 __d2b
00025730 g     F .text	0000007c th_write_register
00024004 g     F .text	00000140 set_acc_scale
0003c8f2 g     O .bss	00000002 ui16Adcdata
000363bc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00037dc0 g     F .text	000000b8 alt_get_fd
00037260 g     F .text	00000158 alt_busy_sleep
000203b8 g     F .text	0000010c readAd5270
000227dc g     F .text	00000238 check_temp_ax9_threshold
00033830 g     F .text	00000058 _close_r
00021760 g     F .text	00000060 Light_Init
0003c9fc g     O .bss	0000000c magnetometer_data
00037f58 g     F .text	00000078 memcmp
0003647c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0003cb30 g       *ABS*	00000000 __alt_stack_base
000364cc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0002ccd0 g     F .text	00000164 __swsetup_r
0003c8ec g     O .bss	00000004 fResistorValue
000207cc g     F .text	00000058 oc_i2c_init
000217c0 g     F .text	00000064 Light_GetID
00028a10 g     F .text	00000930 .hidden __divdf3
0002eca4 g     F .text	00000154 __sfp
000317bc g     F .text	0000007c __copybits
000394c0 g     O .rwdata	00000408 __malloc_av_
0002ee28 g     F .text	00000004 __sinit_lock_release
00029510 g     F .text	000007ac .hidden __muldf3
00025ad4 g     F .text	00000b00 __ieee754_powf
00032000 g     F .text	00000054 __sread
00037cb8 g     F .text	00000108 alt_find_file
00037414 g     F .text	000000a8 alt_dev_llist_insert
000257ac g     F .text	00000090 th_read_register
00035d08 g     F .text	00000024 __malloc_lock
00035f04 g     F .text	000000b8 sbrk
0002684c g     F .text	0000014c scalbnf
0002e9c4 g     F .text	00000060 _fflush_r
00033900 g     F .text	000000c4 _calloc_r
00025194 g     F .text	00000158 RH_Temp_Sensor_Read
00021bcc g     F .text	0000004c Light_SetThreshLow
0003c8ec g       *ABS*	00000000 __bss_start
000305b8 g     F .text	000000f0 memset
000265d4 g     F .text	00000150 __ieee754_sqrtf
00023834 g     F .text	00000620 main
0003c928 g     O .bss	00000004 alt_envp
0003c90c g     O .bss	00000004 __malloc_max_total_mem
0003641c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000337b4 g     F .text	00000018 __swbuf
000274fc g     F .text	000000b4 .hidden __ltsf2
00032138 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00033af4 g     F .text	00000070 fclose
0002a724 g     F .text	00000170 .hidden __truncdfsf2
0002d054 g     F .text	00001748 _dtoa_r
0002fadc g     F .text	000007e0 _malloc_r
0003423c g     F .text	00000030 __ascii_wctomb
0003acb0 g     O .rwdata	00000004 alt_errno
00033b64 g     F .text	00000020 _fiprintf_r
00034654 g     F .text	00000060 _init_signal
00021ae8 g     F .text	000000e4 Get_light
0002f734 g     F .text	00000098 _fwalk
00033fcc g     F .text	0000000c _mbtowc_r
000252ec g     F .text	00000134 Read_Configuration
00031964 g     F .text	000000e0 putc
00026998 g     F .text	00000080 .hidden __divsi3
0003ac78 g     O .rwdata	00000002 ui16sensorRange
00024a70 g     F .text	00000438 read_all
00020978 g     F .text	00000094 oc_i2c_uninit
0002ee54 g     F .text	0000011c _malloc_trim_r
00038180 g       *ABS*	00000000 __CTOR_END__
000275b0 g     F .text	00000400 .hidden __mulsf3
00034080 g     F .text	000000b8 strcmp
00038180 g       *ABS*	00000000 __flash_rodata_start
00038180 g       *ABS*	00000000 __DTOR_LIST__
000353b8 g     F .text	00000080 .hidden __nedf2
0003630c g     F .text	0000003c alt_irq_init
00035e94 g     F .text	00000070 alt_release_fd
00038a1c g     O .rodata	00000100 .hidden __clz_tab
0003c91c g     O .bss	00000004 _PathLocale
00037f10 g     F .text	00000014 atexit
00027444 g     F .text	000000b8 .hidden __gesf2
000337cc g     F .text	00000064 _write_r
00033ef4 g     F .text	00000074 setlocale
000255fc g     F .text	0000003c th_reset
0003ac90 g     O .rwdata	00000004 _impure_ptr
0003c920 g     O .bss	00000004 alt_argc
0002e79c g     F .text	00000228 __sflush_r
00037520 g     F .text	00000064 _do_dtors
000233e8 g     F .text	00000034 Ad5270INIT
00020020 g       .exceptions	00000000 alt_irq_entry
00033fd8 g     F .text	00000044 __ascii_mbtowc
000313e0 g     F .text	0000005c __ulp
0002ee40 g     F .text	00000014 __fp_unlock_all
000219f0 g     F .text	000000f8 Light_Get_ADCData1
0003c904 g     O .bss	00000004 gyro_divider
0003ac9c g     O .rwdata	00000008 alt_fs_list
00020778 g     F .text	00000054 Read32_Data
00024f74 g     F .text	000000a0 getMotion6
00024144 g     F .text	00000148 set_gyro_scale
00020db4 g     F .text	000001f0 OC_I2C_Read
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002f888 g     F .text	0000000c localeconv
0002fa44 g     F .text	00000098 __swhatbuf_r
000375a4 g     F .text	00000050 alt_ic_isr_register
0003c8f4 g     O .bss	00000004 fAdcVoltage
00021d1c g     F .text	00000054 Light_SetTiming
0003acc4 g       *ABS*	00000000 _edata
0003cb30 g       *ABS*	00000000 _end
00027e44 g     F .text	0000004c .hidden __unordsf2
00033bbc g     F .text	00000164 __fputwc
00020224 g       *ABS*	00000000 __ram_exceptions_end
000368f4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00021ed8 g     F .text	000004d0 convert_light_lux
00023eac g     F .text	00000094 WriteReg
0003767c g     F .text	0000008c alt_ic_irq_disable
0003205c g     F .text	00000080 __swrite
0003ac98 g     O .rwdata	00000004 __malloc_trim_threshold
000210b4 g     F .text	00000148 OC_I2C_Read_Continue
00037f24 g     F .text	00000034 exit
00033b84 g     F .text	00000038 fiprintf
00034138 g     F .text	00000004 _vfiprintf_r
0002f7cc g     F .text	000000a8 _fwalk_reent
00028024 g     F .text	000000fc .hidden __floatunsisf
000311b4 g     F .text	0000022c __mdiff
00026a18 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002ee20 g     F .text	00000004 __sfp_lock_release
00024724 g     F .text	00000160 read_gyro
00023e54 g     F .text	00000058 MPU9250_Init
00025420 g     F .text	000000a4 Write_Configuration
00038dbc g     O .rodata	00000101 _ctype_
000204c4 g     F .text	0000014c readAd7790
00035438 g     F .text	00000054 .hidden __unorddf2
00020260 g     F .text	00000158 writeAd5270
0002146c g     F .text	000002f4 OC_I2CL_Read
000356e0 g     F .text	00000038 _exit
0003712c g     F .text	00000134 alt_alarm_start
0002f894 g     F .text	000001b0 __smakebuf_r
0002aa58 g     F .text	00000098 strlen
00026724 g     F .text	00000128 rintf
00034284 g     F .text	0000005c _init_signal_r
00037aa4 g     F .text	00000160 open
00029340 g     F .text	000000e8 .hidden __gedf2
0003c900 g     O .bss	00000004 acc_divider
000338ec g     F .text	00000014 __assert
00032234 g     F .text	00000018 __sprint_r
00037584 g     F .text	00000020 alt_icache_flush_all
000245c4 g     F .text	00000160 read_acc
0003acc0 g     O .rwdata	00000004 alt_priority_mask
000243bc g     F .text	000000f4 calib_acc
000375f4 g     F .text	00000088 alt_ic_irq_enable
00020fa4 g     F .text	00000110 OC_I2C_Write_Addr
0002cbf4 g     F .text	0000001c __vfprintf_internal
00034230 g     F .text	0000000c _wctomb_r
00029cbc g     F .text	000008b4 .hidden __subdf3
00030a68 g     F .text	000000b0 __lo0bits
0003acb8 g     O .rwdata	00000008 alt_alarm_list
000374bc g     F .text	00000064 _do_ctors
000346b4 g     F .text	000000bc __sigtramp
000341a8 g     F .text	00000088 wcrtomb
000355d8 g     F .text	000000dc close
00026b74 g     F .text	0000046c .hidden __addsf3
000398c8 g     O .rwdata	0000016c __global_locale
00021c64 g     F .text	00000054 Light_SetInterrupt
00035aec g     F .text	00000084 alt_load
00033d44 g     F .text	00000078 fputwc
000344f8 g     F .text	000000bc raise
0002ee24 g     F .text	00000004 __sinit_lock_acquire
00030770 g     F .text	0000015c __multadd
0003ac6c g     O .rwdata	00000004 pio1
0003074c g     F .text	00000024 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408914 	ori	at,at,548
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201c40 	call	201c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001126 	beq	r2,zero,20180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	100690fa 	slli	r3,r2,3
   20144:	00800134 	movhi	r2,4
   20148:	1885883a 	add	r2,r3,r2
   2014c:	10f28c17 	ldw	r3,-13776(r2)
   20150:	e0bffd17 	ldw	r2,-12(fp)
   20154:	100890fa 	slli	r4,r2,3
   20158:	00800134 	movhi	r2,4
   2015c:	2085883a 	add	r2,r4,r2
   20160:	10b28d17 	ldw	r2,-13772(r2)
   20164:	1009883a 	mov	r4,r2
   20168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   2016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   20170:	0005313a 	rdctl	r2,ipending
   20174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   20178:	e0bffb17 	ldw	r2,-20(fp)
   2017c:	00000706 	br	2019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   20180:	e0bffe17 	ldw	r2,-8(fp)
   20184:	1085883a 	add	r2,r2,r2
   20188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   2018c:	e0bffd17 	ldw	r2,-12(fp)
   20190:	10800044 	addi	r2,r2,1
   20194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   20198:	003fe406 	br	2012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   2019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	103fde1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a8:	0001883a 	nop
}
   201ac:	0001883a 	nop
   201b0:	e037883a 	mov	sp,fp
   201b4:	dfc00117 	ldw	ra,4(sp)
   201b8:	df000017 	ldw	fp,0(sp)
   201bc:	dec00204 	addi	sp,sp,8
   201c0:	f800283a 	ret

000201c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201c4:	defffb04 	addi	sp,sp,-20
   201c8:	dfc00415 	stw	ra,16(sp)
   201cc:	df000315 	stw	fp,12(sp)
   201d0:	df000304 	addi	fp,sp,12
   201d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201d8:	00bfffc4 	movi	r2,-1
   201dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   201e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201e4:	d0a73417 	ldw	r2,-25392(gp)
   201e8:	10000726 	beq	r2,zero,20208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201ec:	d0a73417 	ldw	r2,-25392(gp)
   201f0:	e0ffff17 	ldw	r3,-4(fp)
   201f4:	e1bffe17 	ldw	r6,-8(fp)
   201f8:	e17ffd17 	ldw	r5,-12(fp)
   201fc:	1809883a 	mov	r4,r3
   20200:	103ee83a 	callr	r2
   20204:	00000206 	br	20210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2020c:	0005883a 	mov	r2,zero
}
   20210:	e037883a 	mov	sp,fp
   20214:	dfc00117 	ldw	ra,4(sp)
   20218:	df000017 	ldw	fp,0(sp)
   2021c:	dec00204 	addi	sp,sp,8
   20220:	f800283a 	ret

Disassembly of section .text:

00020224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20224:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2022c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   20230:	d68b1a14 	ori	gp,gp,11368
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20234:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20238:	10b23b14 	ori	r2,r2,51436

    movhi r3, %hi(__bss_end)
   2023c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20240:	18f2cc14 	ori	r3,r3,52016

    beq r2, r3, 1f
   20244:	10c00326 	beq	r2,r3,20254 <_start+0x30>

0:
    stw zero, (r2)
   20248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20250:	10fffd36 	bltu	r2,r3,20248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20254:	0035aec0 	call	35aec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20258:	0035c8c0 	call	35c8c <alt_main>

0002025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2025c:	003fff06 	br	2025c <alt_after_alt_main>

00020260 <writeAd5270>:
#include "AD5270.h"

volatile int* pio = (int*) (PIO_BASE);

void writeAd5270 (uint8_t ui8command, uint16_t ui16value)
{
   20260:	defff704 	addi	sp,sp,-36
   20264:	dfc00815 	stw	ra,32(sp)
   20268:	df000715 	stw	fp,28(sp)
   2026c:	df000704 	addi	fp,sp,28
   20270:	2005883a 	mov	r2,r4
   20274:	2807883a 	mov	r3,r5
   20278:	e0bffd05 	stb	r2,-12(fp)
   2027c:	1805883a 	mov	r2,r3
   20280:	e0bffc0d 	sth	r2,-16(fp)
	uint8_t ui8DacUpperCodes = 0;			// Data register read MSB
   20284:	e03fffc5 	stb	zero,-1(fp)
	uint8_t ui8DacLowerCodes = 0;			// Data register read MSB
   20288:	e03fff85 	stb	zero,-2(fp)
	uint16_t ui16DacCodes = 0;
   2028c:	e03fff0d 	sth	zero,-4(fp)

	if (ui8command == 1)
   20290:	e0bffd03 	ldbu	r2,-12(fp)
   20294:	10800058 	cmpnei	r2,r2,1
   20298:	10000c1e 	bne	r2,zero,202cc <writeAd5270+0x6c>
	{
		ui16DacCodes = (ui8command << 10);
   2029c:	e0bffd03 	ldbu	r2,-12(fp)
   202a0:	100492ba 	slli	r2,r2,10
   202a4:	e0bfff0d 	sth	r2,-4(fp)
		ui16DacCodes = (ui16DacCodes | (ui16value));
   202a8:	e0ffff0b 	ldhu	r3,-4(fp)
   202ac:	e0bffc0b 	ldhu	r2,-16(fp)
   202b0:	1884b03a 	or	r2,r3,r2
   202b4:	e0bfff0d 	sth	r2,-4(fp)
		ui8DacLowerCodes = ui16DacCodes & 0xFF;
   202b8:	e0bfff0b 	ldhu	r2,-4(fp)
   202bc:	e0bfff85 	stb	r2,-2(fp)
		ui8DacUpperCodes = (ui16DacCodes >> 8) & 0xFF;
   202c0:	e0bfff0b 	ldhu	r2,-4(fp)
   202c4:	1004d23a 	srli	r2,r2,8
   202c8:	e0bfffc5 	stb	r2,-1(fp)
	}
	if (ui8command == 5 || ui8command == 7 || ui8command == 9)
   202cc:	e0bffd03 	ldbu	r2,-12(fp)
   202d0:	10800160 	cmpeqi	r2,r2,5
   202d4:	1000061e 	bne	r2,zero,202f0 <writeAd5270+0x90>
   202d8:	e0bffd03 	ldbu	r2,-12(fp)
   202dc:	108001e0 	cmpeqi	r2,r2,7
   202e0:	1000031e 	bne	r2,zero,202f0 <writeAd5270+0x90>
   202e4:	e0bffd03 	ldbu	r2,-12(fp)
   202e8:	10800258 	cmpnei	r2,r2,9
   202ec:	1000051e 	bne	r2,zero,20304 <writeAd5270+0xa4>
	{
		ui8DacLowerCodes = ui16value & 0xFF;
   202f0:	e0bffc0b 	ldhu	r2,-16(fp)
   202f4:	e0bfff85 	stb	r2,-2(fp)
		ui8DacUpperCodes = (ui8command  << 2);
   202f8:	e0bffd03 	ldbu	r2,-12(fp)
   202fc:	100490ba 	slli	r2,r2,2
   20300:	e0bfffc5 	stb	r2,-1(fp)
	}
	if (ui8command == 0xF0)			//SDO High Z prep
   20304:	e0bffd03 	ldbu	r2,-12(fp)
   20308:	10803c18 	cmpnei	r2,r2,240
   2030c:	1000051e 	bne	r2,zero,20324 <writeAd5270+0xc4>
	{
		ui8DacLowerCodes = ui16value & 0xFF;
   20310:	e0bffc0b 	ldhu	r2,-16(fp)
   20314:	e0bfff85 	stb	r2,-2(fp)
		ui8DacUpperCodes = (ui16value >> 8) & 0xFF;
   20318:	e0bffc0b 	ldhu	r2,-16(fp)
   2031c:	1004d23a 	srli	r2,r2,8
   20320:	e0bfffc5 	stb	r2,-1(fp)
	}
	if (ui8command == 0x0F)			// SDO High Z
   20324:	e0bffd03 	ldbu	r2,-12(fp)
   20328:	108003d8 	cmpnei	r2,r2,15
   2032c:	1000051e 	bne	r2,zero,20344 <writeAd5270+0xe4>
	{
		ui8DacLowerCodes = ui16value & 0xFF;
   20330:	e0bffc0b 	ldhu	r2,-16(fp)
   20334:	e0bfff85 	stb	r2,-2(fp)
		ui8DacUpperCodes = (ui16value >> 8) & 0xFF;
   20338:	e0bffc0b 	ldhu	r2,-16(fp)
   2033c:	1004d23a 	srli	r2,r2,8
   20340:	e0bfffc5 	stb	r2,-1(fp)
	}
	//digitalWrite(AD5270_SS,LOW);
	alt_u8 data_send[2] = {ui8DacUpperCodes, ui8DacLowerCodes};
   20344:	e0bfffc3 	ldbu	r2,-1(fp)
   20348:	e0bffe85 	stb	r2,-6(fp)
   2034c:	e0bfff83 	ldbu	r2,-2(fp)
   20350:	e0bffec5 	stb	r2,-5(fp)
	alt_u8 data_recv[1]= {DUMMY_DATA};
   20354:	00bfea84 	movi	r2,-86
   20358:	e0bffe45 	stb	r2,-7(fp)
	*pio = SS_ACTIVE_5270;
   2035c:	d0a00017 	ldw	r2,-32768(gp)
   20360:	00c00084 	movi	r3,2
   20364:	10c00015 	stw	r3,0(r2)
	alt_avalon_spi_command(SPI_BASE, AD5270SS, 2, data_send, 0, data_recv, 0);
   20368:	e0fffe84 	addi	r3,fp,-6
   2036c:	d8000215 	stw	zero,8(sp)
   20370:	e0bffe44 	addi	r2,fp,-7
   20374:	d8800115 	stw	r2,4(sp)
   20378:	d8000015 	stw	zero,0(sp)
   2037c:	180f883a 	mov	r7,r3
   20380:	01800084 	movi	r6,2
   20384:	000b883a 	mov	r5,zero
   20388:	01000134 	movhi	r4,4
   2038c:	21046004 	addi	r4,r4,4480
   20390:	0036e300 	call	36e30 <alt_avalon_spi_command>

	*pio = SS_RESET_5270;
   20394:	d0a00017 	ldw	r2,-32768(gp)
   20398:	00c000c4 	movi	r3,3
   2039c:	10c00015 	stw	r3,0(r2)
    Serial.println(ui16DacCodes);
	Serial.print("Digipot Upper 8 Bits = ");
    Serial.println(ui8DacUpperCodes);
	Serial.print("Digipot Lower 8 Bits = ");
    Serial.println(ui8DacLowerCodes);*/
}
   203a0:	0001883a 	nop
   203a4:	e037883a 	mov	sp,fp
   203a8:	dfc00117 	ldw	ra,4(sp)
   203ac:	df000017 	ldw	fp,0(sp)
   203b0:	dec00204 	addi	sp,sp,8
   203b4:	f800283a 	ret

000203b8 <readAd5270>:

alt_u16 readAd5270 (uint8_t ui8command)
{
   203b8:	defff704 	addi	sp,sp,-36
   203bc:	dfc00815 	stw	ra,32(sp)
   203c0:	df000715 	stw	fp,28(sp)
   203c4:	df000704 	addi	fp,sp,28
   203c8:	2005883a 	mov	r2,r4
   203cc:	e0bffc05 	stb	r2,-16(fp)
	uint8_t ui8DacUpperCodes = 0;			// Data register read MSB
   203d0:	e03fff45 	stb	zero,-3(fp)
	uint8_t ui8DacLowerCodes = 0;			// Data register read LSB
   203d4:	e03fff05 	stb	zero,-4(fp)
	uint8_t ui8DacReadUpper = 0;
   203d8:	e03ffec5 	stb	zero,-5(fp)
	uint8_t ui8DacReadLower = 0;
   203dc:	e03ffe85 	stb	zero,-6(fp)
	uint16_t ui16DacRead = 0;
   203e0:	e03fff8d 	sth	zero,-2(fp)

	if ((ui8command != 1) || (ui8command != 5) || (ui8command != 7) || (ui8command != 9))
   203e4:	e0bffc03 	ldbu	r2,-16(fp)
   203e8:	10800058 	cmpnei	r2,r2,1
   203ec:	1000091e 	bne	r2,zero,20414 <readAd5270+0x5c>
   203f0:	e0bffc03 	ldbu	r2,-16(fp)
   203f4:	10800158 	cmpnei	r2,r2,5
   203f8:	1000061e 	bne	r2,zero,20414 <readAd5270+0x5c>
   203fc:	e0bffc03 	ldbu	r2,-16(fp)
   20400:	108001d8 	cmpnei	r2,r2,7
   20404:	1000031e 	bne	r2,zero,20414 <readAd5270+0x5c>
   20408:	e0bffc03 	ldbu	r2,-16(fp)
   2040c:	10800260 	cmpeqi	r2,r2,9
   20410:	1000261e 	bne	r2,zero,204ac <readAd5270+0xf4>
	{
		ui8DacLowerCodes = 0;
   20414:	e03fff05 	stb	zero,-4(fp)
		ui8DacUpperCodes = (ui8command << 2);
   20418:	e0bffc03 	ldbu	r2,-16(fp)
   2041c:	100490ba 	slli	r2,r2,2
   20420:	e0bfff45 	stb	r2,-3(fp)
		alt_u8 data_send[2] = {ui8DacUpperCodes, ui8DacLowerCodes};
   20424:	e0bfff43 	ldbu	r2,-3(fp)
   20428:	e0bffe05 	stb	r2,-8(fp)
   2042c:	e0bfff03 	ldbu	r2,-4(fp)
   20430:	e0bffe45 	stb	r2,-7(fp)
		alt_u8 data_recv[2] = {DUMMY_DATA, DUMMY_DATA};
   20434:	00aaaa84 	movi	r2,-21846
   20438:	e0bffd8d 	sth	r2,-10(fp)
		*pio = SS_ACTIVE_5270;
   2043c:	d0a00017 	ldw	r2,-32768(gp)
   20440:	00c00084 	movi	r3,2
   20444:	10c00015 	stw	r3,0(r2)
		alt_avalon_spi_command(SPI_BASE, AD5270SS, 2, data_send, 0, data_recv, 0);
   20448:	e0fffe04 	addi	r3,fp,-8
   2044c:	d8000215 	stw	zero,8(sp)
   20450:	e0bffd84 	addi	r2,fp,-10
   20454:	d8800115 	stw	r2,4(sp)
   20458:	d8000015 	stw	zero,0(sp)
   2045c:	180f883a 	mov	r7,r3
   20460:	01800084 	movi	r6,2
   20464:	000b883a 	mov	r5,zero
   20468:	01000134 	movhi	r4,4
   2046c:	21046004 	addi	r4,r4,4480
   20470:	0036e300 	call	36e30 <alt_avalon_spi_command>
		*pio = SS_RESET_5270;
   20474:	d0a00017 	ldw	r2,-32768(gp)
   20478:	00c000c4 	movi	r3,3
   2047c:	10c00015 	stw	r3,0(r2)
		ui8DacReadUpper = data_recv[0];
   20480:	e0bffd83 	ldbu	r2,-10(fp)
   20484:	e0bffec5 	stb	r2,-5(fp)
		ui8DacReadLower = data_recv[1];
   20488:	e0bffdc3 	ldbu	r2,-9(fp)
   2048c:	e0bffe85 	stb	r2,-6(fp)
		//SPI.transfer(ui8DacLowerCodes);
		//ui8DacReadUpper = SPI.transfer(0x00);			//Data register read MSB
		//ui8DacReadLower = SPI.transfer(0x00);			//Data register read LSB
		//digitalWrite(AD5270_SS,HIGH);
		
		ui16DacRead = (unsigned int)(((unsigned int)(ui8DacReadUpper << 8) | ui8DacReadLower) & 0x03FF);
   20490:	e0bffec3 	ldbu	r2,-5(fp)
   20494:	1004923a 	slli	r2,r2,8
   20498:	1007883a 	mov	r3,r2
   2049c:	e0bffe83 	ldbu	r2,-6(fp)
   204a0:	1884b03a 	or	r2,r3,r2
   204a4:	1080ffcc 	andi	r2,r2,1023
   204a8:	e0bfff8d 	sth	r2,-2(fp)

	}
	
	return ui16DacRead;
   204ac:	e0bfff8b 	ldhu	r2,-2(fp)
}
   204b0:	e037883a 	mov	sp,fp
   204b4:	dfc00117 	ldw	ra,4(sp)
   204b8:	df000017 	ldw	fp,0(sp)
   204bc:	dec00204 	addi	sp,sp,8
   204c0:	f800283a 	ret

000204c4 <readAd7790>:


volatile int* pio1 = (int*) (PIO_BASE);

uint16_t readAd7790 (uint8_t ui8address)
{
   204c4:	defff704 	addi	sp,sp,-36
   204c8:	dfc00815 	stw	ra,32(sp)
   204cc:	df000715 	stw	fp,28(sp)
   204d0:	df000704 	addi	fp,sp,28
   204d4:	2005883a 	mov	r2,r4
   204d8:	e0bffc05 	stb	r2,-16(fp)
	uint8_t ui8AdcUpperCodes = 0;			// Data register read MSB
   204dc:	e03fff45 	stb	zero,-3(fp)
	uint8_t ui8AdcLowerCodes = 0;			// Data register read LSB
   204e0:	e03fff05 	stb	zero,-4(fp)
	uint16_t ui16AdcCodes = 0;
   204e4:	e03fff8d 	sth	zero,-2(fp)

	if (ui8address == DATA_READ)
   204e8:	e0bffc03 	ldbu	r2,-16(fp)
   204ec:	10800e18 	cmpnei	r2,r2,56
   204f0:	1000231e 	bne	r2,zero,20580 <readAd7790+0xbc>
	{	
		alt_u8 data_send[1] = {ui8address};
   204f4:	e0bffc03 	ldbu	r2,-16(fp)
   204f8:	e0bffec5 	stb	r2,-5(fp)
		alt_u8 data_recv[2] = {DUMMY_DATA, DUMMY_DATA};
   204fc:	00bfea84 	movi	r2,-86
   20500:	e0bffe45 	stb	r2,-7(fp)
   20504:	00bfea84 	movi	r2,-86
   20508:	e0bffe85 	stb	r2,-6(fp)
		*pio1 = SS_ACTIVE_7790;
   2050c:	d0a00117 	ldw	r2,-32764(gp)
   20510:	00c00044 	movi	r3,1
   20514:	10c00015 	stw	r3,0(r2)
		alt_avalon_spi_command(SPI_BASE, AD7790SS, 1, data_send, 2, data_recv, 0);
   20518:	e0fffec4 	addi	r3,fp,-5
   2051c:	d8000215 	stw	zero,8(sp)
   20520:	e0bffe44 	addi	r2,fp,-7
   20524:	d8800115 	stw	r2,4(sp)
   20528:	00800084 	movi	r2,2
   2052c:	d8800015 	stw	r2,0(sp)
   20530:	180f883a 	mov	r7,r3
   20534:	01800044 	movi	r6,1
   20538:	01400044 	movi	r5,1
   2053c:	01000134 	movhi	r4,4
   20540:	21046004 	addi	r4,r4,4480
   20544:	0036e300 	call	36e30 <alt_avalon_spi_command>
		*pio1 = SS_RESET_7790;
   20548:	d0a00117 	ldw	r2,-32764(gp)
   2054c:	00c000c4 	movi	r3,3
   20550:	10c00015 	stw	r3,0(r2)
		//SPI.transfer(ui8address);
		//ui8AdcUpperCodes = SPI.transfer(0x00);			//Data register read MSB
		//ui8AdcLowerCodes = SPI.transfer(0x00);			//Data register read LSB
		//digitalWrite(AD7790_SS,HIGH);
		//printf("SPI ADC read: 0x%x 0x%x",data_recv[0], data_recv[1]);
		ui8AdcUpperCodes = data_recv[0];
   20554:	e0bffe43 	ldbu	r2,-7(fp)
   20558:	e0bfff45 	stb	r2,-3(fp)
		ui8AdcLowerCodes = data_recv[1];
   2055c:	e0bffe83 	ldbu	r2,-6(fp)
   20560:	e0bfff05 	stb	r2,-4(fp)
		ui16AdcCodes = (unsigned int)((unsigned int)(ui8AdcUpperCodes << 8) | ui8AdcLowerCodes);
   20564:	e0bfff43 	ldbu	r2,-3(fp)
   20568:	1004923a 	slli	r2,r2,8
   2056c:	1007883a 	mov	r3,r2
   20570:	e0bfff03 	ldbu	r2,-4(fp)
   20574:	1884b03a 	or	r2,r3,r2
   20578:	e0bfff8d 	sth	r2,-2(fp)
   2057c:	00001e06 	br	205f8 <readAd7790+0x134>
		Serial.print("ADC Lower 8 Bits : ");  
		Serial.println(ui8AdcLowerCodes,2);*/
	}
	else
	{
		alt_u8 data_send[1] = {ui8address};
   20580:	e0bffc03 	ldbu	r2,-16(fp)
   20584:	e0bffe05 	stb	r2,-8(fp)
		alt_u8 data_recv[1] = {DUMMY_DATA};
   20588:	00bfea84 	movi	r2,-86
   2058c:	e0bffdc5 	stb	r2,-9(fp)
		*pio1 = SS_ACTIVE_7790;
   20590:	d0a00117 	ldw	r2,-32764(gp)
   20594:	00c00044 	movi	r3,1
   20598:	10c00015 	stw	r3,0(r2)
		alt_avalon_spi_command(SPI_BASE, AD7790SS, 1, data_send, 1, data_recv, 0);
   2059c:	e0fffe04 	addi	r3,fp,-8
   205a0:	d8000215 	stw	zero,8(sp)
   205a4:	e0bffdc4 	addi	r2,fp,-9
   205a8:	d8800115 	stw	r2,4(sp)
   205ac:	00800044 	movi	r2,1
   205b0:	d8800015 	stw	r2,0(sp)
   205b4:	180f883a 	mov	r7,r3
   205b8:	01800044 	movi	r6,1
   205bc:	01400044 	movi	r5,1
   205c0:	01000134 	movhi	r4,4
   205c4:	21046004 	addi	r4,r4,4480
   205c8:	0036e300 	call	36e30 <alt_avalon_spi_command>
		*pio1 = SS_RESET_7790;
   205cc:	d0a00117 	ldw	r2,-32764(gp)
   205d0:	00c000c4 	movi	r3,3
   205d4:	10c00015 	stw	r3,0(r2)
		//digitalWrite(AD7790_SS,LOW);
		//SPI.transfer(ui8address);
		//ui8AdcLowerCodes = SPI.transfer(0x00);			// register read
		//digitalWrite(AD7790_SS,HIGH);
		ui8AdcLowerCodes = data_recv[0];
   205d8:	e0bffdc3 	ldbu	r2,-9(fp)
   205dc:	e0bfff05 	stb	r2,-4(fp)
		ui16AdcCodes = ((long)ui8AdcUpperCodes << 8) | ui8AdcLowerCodes;
   205e0:	e0bfff43 	ldbu	r2,-3(fp)
   205e4:	1004923a 	slli	r2,r2,8
   205e8:	1007883a 	mov	r3,r2
   205ec:	e0bfff03 	ldbu	r2,-4(fp)
   205f0:	1884b03a 	or	r2,r3,r2
   205f4:	e0bfff8d 	sth	r2,-2(fp)
		Serial.println(ui8address);
		Serial.print(" Reading Register Value : ");
		Serial.println(ui16AdcCodes);*/
	}

	return ui16AdcCodes;
   205f8:	e0bfff8b 	ldhu	r2,-2(fp)
}
   205fc:	e037883a 	mov	sp,fp
   20600:	dfc00117 	ldw	ra,4(sp)
   20604:	df000017 	ldw	fp,0(sp)
   20608:	dec00204 	addi	sp,sp,8
   2060c:	f800283a 	ret

00020610 <writeAd7790>:

void writeAd7790 (uint8_t ui8address, uint8_t ui8value)
{
   20610:	defff704 	addi	sp,sp,-36
   20614:	dfc00815 	stw	ra,32(sp)
   20618:	df000715 	stw	fp,28(sp)
   2061c:	df000704 	addi	fp,sp,28
   20620:	2005883a 	mov	r2,r4
   20624:	2807883a 	mov	r3,r5
   20628:	e0bffd05 	stb	r2,-12(fp)
   2062c:	1805883a 	mov	r2,r3
   20630:	e0bffc05 	stb	r2,-16(fp)
	
	if (ui8address != RESET)
   20634:	e0bffd03 	ldbu	r2,-12(fp)
   20638:	10803fe0 	cmpeqi	r2,r2,255
   2063c:	1000181e 	bne	r2,zero,206a0 <writeAd7790+0x90>
	{
		alt_u8 data_send[2] = {ui8address, ui8value};
   20640:	e0bffd03 	ldbu	r2,-12(fp)
   20644:	e0bfff85 	stb	r2,-2(fp)
   20648:	e0bffc03 	ldbu	r2,-16(fp)
   2064c:	e0bfffc5 	stb	r2,-1(fp)
		alt_u8 data_recv[1]= {DUMMY_DATA};
   20650:	00bfea84 	movi	r2,-86
   20654:	e0bfff45 	stb	r2,-3(fp)
		*pio1 = SS_ACTIVE_7790;
   20658:	d0a00117 	ldw	r2,-32764(gp)
   2065c:	00c00044 	movi	r3,1
   20660:	10c00015 	stw	r3,0(r2)
		alt_avalon_spi_command(SPI_BASE, AD7790SS, 2, data_send, 0, data_recv, 0);
   20664:	e0ffff84 	addi	r3,fp,-2
   20668:	d8000215 	stw	zero,8(sp)
   2066c:	e0bfff44 	addi	r2,fp,-3
   20670:	d8800115 	stw	r2,4(sp)
   20674:	d8000015 	stw	zero,0(sp)
   20678:	180f883a 	mov	r7,r3
   2067c:	01800084 	movi	r6,2
   20680:	01400044 	movi	r5,1
   20684:	01000134 	movhi	r4,4
   20688:	21046004 	addi	r4,r4,4480
   2068c:	0036e300 	call	36e30 <alt_avalon_spi_command>
		*pio1 = SS_RESET_7790;
   20690:	d0a00117 	ldw	r2,-32764(gp)
   20694:	00c000c4 	movi	r3,3
   20698:	10c00015 	stw	r3,0(r2)
	/*Serial.print("ADC Register ");		//Debug serial prints
	Serial.print(ui8address);
	Serial.println("Written");
	Serial.print("With Register Value ");
	Serial.println(ui8value);*/
}
   2069c:	00001b06 	br	2070c <writeAd7790+0xfc>
		alt_u8 data_send[4] = {ui8value, ui8value, ui8value, ui8value};
   206a0:	e0bffc03 	ldbu	r2,-16(fp)
   206a4:	e0bffe45 	stb	r2,-7(fp)
   206a8:	e0bffc03 	ldbu	r2,-16(fp)
   206ac:	e0bffe85 	stb	r2,-6(fp)
   206b0:	e0bffc03 	ldbu	r2,-16(fp)
   206b4:	e0bffec5 	stb	r2,-5(fp)
   206b8:	e0bffc03 	ldbu	r2,-16(fp)
   206bc:	e0bfff05 	stb	r2,-4(fp)
		alt_u8 data_recv[1]= {DUMMY_DATA};
   206c0:	00bfea84 	movi	r2,-86
   206c4:	e0bffe05 	stb	r2,-8(fp)
		*pio1 = SS_ACTIVE_7790;
   206c8:	d0a00117 	ldw	r2,-32764(gp)
   206cc:	00c00044 	movi	r3,1
   206d0:	10c00015 	stw	r3,0(r2)
		alt_avalon_spi_command(SPI_BASE, AD7790SS, 4, data_send, 0, data_recv, 0);
   206d4:	e0fffe44 	addi	r3,fp,-7
   206d8:	d8000215 	stw	zero,8(sp)
   206dc:	e0bffe04 	addi	r2,fp,-8
   206e0:	d8800115 	stw	r2,4(sp)
   206e4:	d8000015 	stw	zero,0(sp)
   206e8:	180f883a 	mov	r7,r3
   206ec:	01800104 	movi	r6,4
   206f0:	01400044 	movi	r5,1
   206f4:	01000134 	movhi	r4,4
   206f8:	21046004 	addi	r4,r4,4480
   206fc:	0036e300 	call	36e30 <alt_avalon_spi_command>
		*pio1 = SS_RESET_7790;
   20700:	d0a00117 	ldw	r2,-32764(gp)
   20704:	00c000c4 	movi	r3,3
   20708:	10c00015 	stw	r3,0(r2)
}
   2070c:	0001883a 	nop
   20710:	e037883a 	mov	sp,fp
   20714:	dfc00117 	ldw	ra,4(sp)
   20718:	df000017 	ldw	fp,0(sp)
   2071c:	dec00204 	addi	sp,sp,8
   20720:	f800283a 	ret

00020724 <Write32_Data>:
#define SLEEP_TIME 250  //us
#define ACK_SLEEP_TIME 250 //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
   20724:	defffb04 	addi	sp,sp,-20
   20728:	df000415 	stw	fp,16(sp)
   2072c:	df000404 	addi	fp,sp,16
   20730:	e13ffe15 	stw	r4,-8(fp)
   20734:	e17ffd15 	stw	r5,-12(fp)
   20738:	e1bffc15 	stw	r6,-16(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
   2073c:	e0bffd17 	ldw	r2,-12(fp)
   20740:	100490ba 	slli	r2,r2,2
   20744:	1007883a 	mov	r3,r2
   20748:	e0bffe17 	ldw	r2,-8(fp)
   2074c:	1885883a 	add	r2,r3,r2
   20750:	1007883a 	mov	r3,r2
   20754:	e0bffc17 	ldw	r2,-16(fp)
   20758:	18800035 	stwio	r2,0(r3)
    bPass=TRUE;
   2075c:	00800044 	movi	r2,1
   20760:	e0bfffc5 	stb	r2,-1(fp)
    return bPass;
   20764:	e0bfffc3 	ldbu	r2,-1(fp)
}
   20768:	e037883a 	mov	sp,fp
   2076c:	df000017 	ldw	fp,0(sp)
   20770:	dec00104 	addi	sp,sp,4
   20774:	f800283a 	ret

00020778 <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
   20778:	defffb04 	addi	sp,sp,-20
   2077c:	df000415 	stw	fp,16(sp)
   20780:	df000404 	addi	fp,sp,16
   20784:	e13ffe15 	stw	r4,-8(fp)
   20788:	e17ffd15 	stw	r5,-12(fp)
   2078c:	e1bffc15 	stw	r6,-16(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
   20790:	e0bffd17 	ldw	r2,-12(fp)
   20794:	100490ba 	slli	r2,r2,2
   20798:	1007883a 	mov	r3,r2
   2079c:	e0bffe17 	ldw	r2,-8(fp)
   207a0:	1885883a 	add	r2,r3,r2
   207a4:	10c00037 	ldwio	r3,0(r2)
   207a8:	e0bffc17 	ldw	r2,-16(fp)
   207ac:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
   207b0:	00800044 	movi	r2,1
   207b4:	e0bfffc5 	stb	r2,-1(fp)
    return bPass;
   207b8:	e0bfffc3 	ldbu	r2,-1(fp)
}
   207bc:	e037883a 	mov	sp,fp
   207c0:	df000017 	ldw	fp,0(sp)
   207c4:	dec00104 	addi	sp,sp,4
   207c8:	f800283a 	ret

000207cc <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base){
   207cc:	defffa04 	addi	sp,sp,-24
   207d0:	dfc00515 	stw	ra,20(sp)
   207d4:	df000415 	stw	fp,16(sp)
   207d8:	df000404 	addi	fp,sp,16
   207dc:	e13ffc15 	stw	r4,-16(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
   207e0:	0080bef4 	movhi	r2,763
   207e4:	10bc2004 	addi	r2,r2,-3968
   207e8:	e0bfff15 	stw	r2,-4(fp)
	const alt_32 i2c_clk = 400*1000; // 400KHz
   207ec:	008001b4 	movhi	r2,6
   207f0:	1086a004 	addi	r2,r2,6784
   207f4:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
   207f8:	e1bffe17 	ldw	r6,-8(fp)
   207fc:	e17fff17 	ldw	r5,-4(fp)
   20800:	e13ffc17 	ldw	r4,-16(fp)
   20804:	00208240 	call	20824 <oc_i2c_init_ex>
   20808:	e0bffdc5 	stb	r2,-9(fp)

	return bSuccess;
   2080c:	e0bffdc3 	ldbu	r2,-9(fp)
}
   20810:	e037883a 	mov	sp,fp
   20814:	dfc00117 	ldw	ra,4(sp)
   20818:	df000017 	ldw	fp,0(sp)
   2081c:	dec00204 	addi	sp,sp,8
   20820:	f800283a 	ret

00020824 <oc_i2c_init_ex>:

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
   20824:	defff704 	addi	sp,sp,-36
   20828:	dfc00815 	stw	ra,32(sp)
   2082c:	df000715 	stw	fp,28(sp)
   20830:	df000704 	addi	fp,sp,28
   20834:	e13ffb15 	stw	r4,-20(fp)
   20838:	e17ffa15 	stw	r5,-24(fp)
   2083c:	e1bff915 	stw	r6,-28(fp)
	bool bSuccess=TRUE;
   20840:	00800044 	movi	r2,1
   20844:	e0bfffc5 	stb	r2,-1(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
   20848:	00bfe004 	movi	r2,-128
   2084c:	e0bfff85 	stb	r2,-2(fp)

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
   20850:	e0fff917 	ldw	r3,-28(fp)
   20854:	1805883a 	mov	r2,r3
   20858:	100490ba 	slli	r2,r2,2
   2085c:	10c5883a 	add	r2,r2,r3
   20860:	100b883a 	mov	r5,r2
   20864:	e13ffa17 	ldw	r4,-24(fp)
   20868:	00269980 	call	26998 <__divsi3>
   2086c:	10bfffc4 	addi	r2,r2,-1
   20870:	e0bffe15 	stw	r2,-8(fp)
	prescale_low = prescale & 0xFF;
   20874:	e0bffe17 	ldw	r2,-8(fp)
   20878:	e0bffdc5 	stb	r2,-9(fp)
	prescale_high = (prescale >> 8) & 0xFF;
   2087c:	e0bffe17 	ldw	r2,-8(fp)
   20880:	1005d23a 	srai	r2,r2,8
   20884:	e0bffd85 	stb	r2,-10(fp)

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
   20888:	e0bffb17 	ldw	r2,-20(fp)
   2088c:	e0fffdc3 	ldbu	r3,-9(fp)
   20890:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
   20894:	e0bffb17 	ldw	r2,-20(fp)
   20898:	10800104 	addi	r2,r2,4
   2089c:	1007883a 	mov	r3,r2
   208a0:	e0bffd83 	ldbu	r2,-10(fp)
   208a4:	18800035 	stwio	r2,0(r3)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
   208a8:	e0bffb17 	ldw	r2,-20(fp)
   208ac:	10800204 	addi	r2,r2,8
   208b0:	1007883a 	mov	r3,r2
   208b4:	e0bfff83 	ldbu	r2,-2(fp)
   208b8:	18800035 	stwio	r2,0(r3)


    // check prescale low byte
    if (bSuccess){
   208bc:	e0bfffc3 	ldbu	r2,-1(fp)
   208c0:	10000826 	beq	r2,zero,208e4 <oc_i2c_init_ex+0xc0>
    	read_data =IORD(i2c_base, 0);
   208c4:	e0bffb17 	ldw	r2,-20(fp)
   208c8:	10800037 	ldwio	r2,0(r2)
   208cc:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_low ){
   208d0:	e0bffc17 	ldw	r2,-16(fp)
   208d4:	10c03fcc 	andi	r3,r2,255
   208d8:	e0bffdc3 	ldbu	r2,-9(fp)
   208dc:	18800126 	beq	r3,r2,208e4 <oc_i2c_init_ex+0xc0>
            bSuccess = FALSE;
   208e0:	e03fffc5 	stb	zero,-1(fp)
        }
    }

    // check prescale high byte
    if (bSuccess){
   208e4:	e0bfffc3 	ldbu	r2,-1(fp)
   208e8:	10000926 	beq	r2,zero,20910 <oc_i2c_init_ex+0xec>
    	read_data =IORD(i2c_base, 1);
   208ec:	e0bffb17 	ldw	r2,-20(fp)
   208f0:	10800104 	addi	r2,r2,4
   208f4:	10800037 	ldwio	r2,0(r2)
   208f8:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_high ){
   208fc:	e0bffc17 	ldw	r2,-16(fp)
   20900:	10c03fcc 	andi	r3,r2,255
   20904:	e0bffd83 	ldbu	r2,-10(fp)
   20908:	18800126 	beq	r3,r2,20910 <oc_i2c_init_ex+0xec>
            bSuccess = FALSE;
   2090c:	e03fffc5 	stb	zero,-1(fp)
        }
    }

    // check control
    if (bSuccess){
   20910:	e0bfffc3 	ldbu	r2,-1(fp)
   20914:	10000926 	beq	r2,zero,2093c <oc_i2c_init_ex+0x118>
    	read_data =IORD(i2c_base, 2);
   20918:	e0bffb17 	ldw	r2,-20(fp)
   2091c:	10800204 	addi	r2,r2,8
   20920:	10800037 	ldwio	r2,0(r2)
   20924:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != ControlValue ){
   20928:	e0bffc17 	ldw	r2,-16(fp)
   2092c:	10c03fcc 	andi	r3,r2,255
   20930:	e0bfff83 	ldbu	r2,-2(fp)
   20934:	18800126 	beq	r3,r2,2093c <oc_i2c_init_ex+0x118>
            bSuccess = FALSE;
   20938:	e03fffc5 	stb	zero,-1(fp)
        }
    }

   if (bSuccess)
   2093c:	e0bfffc3 	ldbu	r2,-1(fp)
   20940:	10000426 	beq	r2,zero,20954 <oc_i2c_init_ex+0x130>
       printf("\nI2C core is enabled! \r\n");
   20944:	01000134 	movhi	r4,4
   20948:	21206004 	addi	r4,r4,-32384
   2094c:	002aa480 	call	2aa48 <puts>
   20950:	00000306 	br	20960 <oc_i2c_init_ex+0x13c>
   else
       printf("\nI2C core is not enabled successfully! \r\n");
   20954:	01000134 	movhi	r4,4
   20958:	21206604 	addi	r4,r4,-32360
   2095c:	002aa480 	call	2aa48 <puts>

   return bSuccess;
   20960:	e0bfffc3 	ldbu	r2,-1(fp)

}
   20964:	e037883a 	mov	sp,fp
   20968:	dfc00117 	ldw	ra,4(sp)
   2096c:	df000017 	ldw	fp,0(sp)
   20970:	dec00204 	addi	sp,sp,8
   20974:	f800283a 	ret

00020978 <oc_i2c_uninit>:

bool oc_i2c_uninit(alt_32 i2c_base)
{
   20978:	defffb04 	addi	sp,sp,-20
   2097c:	dfc00415 	stw	ra,16(sp)
   20980:	df000315 	stw	fp,12(sp)
   20984:	df000304 	addi	fp,sp,12
   20988:	e13ffd15 	stw	r4,-12(fp)
	bool bSuccess=TRUE;
   2098c:	00800044 	movi	r2,1
   20990:	e0bfffc5 	stb	r2,-1(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
   20994:	e03fff85 	stb	zero,-2(fp)

    IOWR( i2c_base, 2, ControlValue);
   20998:	e0bffd17 	ldw	r2,-12(fp)
   2099c:	10800204 	addi	r2,r2,8
   209a0:	1007883a 	mov	r3,r2
   209a4:	e0bfff83 	ldbu	r2,-2(fp)
   209a8:	18800035 	stwio	r2,0(r3)
   	read_data =IORD(i2c_base, 2);
   209ac:	e0bffd17 	ldw	r2,-12(fp)
   209b0:	10800204 	addi	r2,r2,8
   209b4:	10800037 	ldwio	r2,0(r2)
   209b8:	e0bffe15 	stw	r2,-8(fp)
	if( (read_data & 0x00ff) != ControlValue ){
   209bc:	e0bffe17 	ldw	r2,-8(fp)
   209c0:	10c03fcc 	andi	r3,r2,255
   209c4:	e0bfff83 	ldbu	r2,-2(fp)
   209c8:	18800126 	beq	r3,r2,209d0 <oc_i2c_uninit+0x58>
            bSuccess = FALSE;
   209cc:	e03fffc5 	stb	zero,-1(fp)
    }

   if (bSuccess)
   209d0:	e0bfffc3 	ldbu	r2,-1(fp)
   209d4:	10000426 	beq	r2,zero,209e8 <oc_i2c_uninit+0x70>
       printf("\nI2C core  is disabled! \r\n");
   209d8:	01000134 	movhi	r4,4
   209dc:	21207104 	addi	r4,r4,-32316
   209e0:	002aa480 	call	2aa48 <puts>
   209e4:	00000306 	br	209f4 <oc_i2c_uninit+0x7c>
   else
       printf("\nI2C core is failed to disable! \r\n");
   209e8:	01000134 	movhi	r4,4
   209ec:	21207804 	addi	r4,r4,-32288
   209f0:	002aa480 	call	2aa48 <puts>

   return bSuccess;
   209f4:	e0bfffc3 	ldbu	r2,-1(fp)

}
   209f8:	e037883a 	mov	sp,fp
   209fc:	dfc00117 	ldw	ra,4(sp)
   20a00:	df000017 	ldw	fp,0(sp)
   20a04:	dec00204 	addi	sp,sp,8
   20a08:	f800283a 	ret

00020a0c <ACK_single_check>:




bool  ACK_single_check(alt_32 i2c_base)
{
   20a0c:	defffb04 	addi	sp,sp,-20
   20a10:	dfc00415 	stw	ra,16(sp)
   20a14:	df000315 	stw	fp,12(sp)
   20a18:	df000304 	addi	fp,sp,12
   20a1c:	e13ffd15 	stw	r4,-12(fp)
	bool bSuccess=TRUE;
   20a20:	00800044 	movi	r2,1
   20a24:	e0bfffc5 	stb	r2,-1(fp)
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
   20a28:	01003e84 	movi	r4,250
   20a2c:	00361680 	call	36168 <usleep>
    read_data =IORD(i2c_base, 4);
   20a30:	e0bffd17 	ldw	r2,-12(fp)
   20a34:	10800404 	addi	r2,r2,16
   20a38:	10800037 	ldwio	r2,0(r2)
   20a3c:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
   20a40:	e0bffe17 	ldw	r2,-8(fp)
   20a44:	1080008c 	andi	r2,r2,2
   20a48:	10000126 	beq	r2,zero,20a50 <ACK_single_check+0x44>
            bSuccess = FALSE;
   20a4c:	e03fffc5 	stb	zero,-1(fp)
     if (bSuccess){
   20a50:	e0bfffc3 	ldbu	r2,-1(fp)
   20a54:	10000a26 	beq	r2,zero,20a80 <ACK_single_check+0x74>
            usleep(ACK_SLEEP_TIME);
   20a58:	01003e84 	movi	r4,250
   20a5c:	00361680 	call	36168 <usleep>
            read_data =IORD(i2c_base, 4);
   20a60:	e0bffd17 	ldw	r2,-12(fp)
   20a64:	10800404 	addi	r2,r2,16
   20a68:	10800037 	ldwio	r2,0(r2)
   20a6c:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
   20a70:	e0bffe17 	ldw	r2,-8(fp)
   20a74:	1080200c 	andi	r2,r2,128
   20a78:	10000126 	beq	r2,zero,20a80 <ACK_single_check+0x74>
                    bSuccess = FALSE;
   20a7c:	e03fffc5 	stb	zero,-1(fp)
     }
    return bSuccess;
   20a80:	e0bfffc3 	ldbu	r2,-1(fp)
}
   20a84:	e037883a 	mov	sp,fp
   20a88:	dfc00117 	ldw	ra,4(sp)
   20a8c:	df000017 	ldw	fp,0(sp)
   20a90:	dec00204 	addi	sp,sp,8
   20a94:	f800283a 	ret

00020a98 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
   20a98:	defffb04 	addi	sp,sp,-20
   20a9c:	dfc00415 	stw	ra,16(sp)
   20aa0:	df000315 	stw	fp,12(sp)
   20aa4:	df000304 	addi	fp,sp,12
   20aa8:	e13ffd15 	stw	r4,-12(fp)
    bool bSuccess = FALSE;
   20aac:	e03fffc5 	stb	zero,-1(fp)
    int i=0;
   20ab0:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
   20ab4:	00000306 	br	20ac4 <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
   20ab8:	e13ffd17 	ldw	r4,-12(fp)
   20abc:	0020a0c0 	call	20a0c <ACK_single_check>
   20ac0:	e0bfffc5 	stb	r2,-1(fp)
    while(!bSuccess && i++ < 10){
   20ac4:	e0bfffc3 	ldbu	r2,-1(fp)
   20ac8:	1080005c 	xori	r2,r2,1
   20acc:	10803fcc 	andi	r2,r2,255
   20ad0:	10000526 	beq	r2,zero,20ae8 <ACK_check+0x50>
   20ad4:	e0bffe17 	ldw	r2,-8(fp)
   20ad8:	10c00044 	addi	r3,r2,1
   20adc:	e0fffe15 	stw	r3,-8(fp)
   20ae0:	10800290 	cmplti	r2,r2,10
   20ae4:	103ff41e 	bne	r2,zero,20ab8 <ACK_check+0x20>
      //  if (!bSuccess)
    //	printf("no ack2 !!!!!!!!!!!!!!!!!!!!, i=%d\r\n", i);

    }

    return bSuccess;
   20ae8:	e0bfffc3 	ldbu	r2,-1(fp)
}
   20aec:	e037883a 	mov	sp,fp
   20af0:	dfc00117 	ldw	ra,4(sp)
   20af4:	df000017 	ldw	fp,0(sp)
   20af8:	dec00204 	addi	sp,sp,8
   20afc:	f800283a 	ret

00020b00 <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
   20b00:	defff904 	addi	sp,sp,-28
   20b04:	dfc00615 	stw	ra,24(sp)
   20b08:	df000515 	stw	fp,20(sp)
   20b0c:	df000504 	addi	fp,sp,20
   20b10:	e13ffe15 	stw	r4,-8(fp)
   20b14:	2805883a 	mov	r2,r5
   20b18:	3007883a 	mov	r3,r6
   20b1c:	e1fffb15 	stw	r7,-20(fp)
   20b20:	e0bffd05 	stb	r2,-12(fp)
   20b24:	1805883a 	mov	r2,r3
   20b28:	e0bffc05 	stb	r2,-16(fp)
    //DWORD reg_data = 0x0;
    int i;

   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
   20b2c:	e0bffd03 	ldbu	r2,-12(fp)
   20b30:	100d883a 	mov	r6,r2
   20b34:	014000c4 	movi	r5,3
   20b38:	e13ffe17 	ldw	r4,-8(fp)
   20b3c:	00207240 	call	20724 <Write32_Data>
   20b40:	1080005c 	xori	r2,r2,1
   20b44:	10803fcc 	andi	r2,r2,255
   20b48:	10000526 	beq	r2,zero,20b60 <OC_I2C_Write+0x60>
       printf("OC_I2C_Write error[0]\r\n");
   20b4c:	01000134 	movhi	r4,4
   20b50:	21208104 	addi	r4,r4,-32252
   20b54:	002aa480 	call	2aa48 <puts>
       return FALSE;
   20b58:	0005883a 	mov	r2,zero
   20b5c:	00007706 	br	20d3c <OC_I2C_Write+0x23c>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
   20b60:	01802404 	movi	r6,144
   20b64:	01400104 	movi	r5,4
   20b68:	e13ffe17 	ldw	r4,-8(fp)
   20b6c:	00207240 	call	20724 <Write32_Data>
   20b70:	1080005c 	xori	r2,r2,1
   20b74:	10803fcc 	andi	r2,r2,255
   20b78:	10000526 	beq	r2,zero,20b90 <OC_I2C_Write+0x90>
       printf("OC_I2C_Write error[1]\r\n");
   20b7c:	01000134 	movhi	r4,4
   20b80:	21208704 	addi	r4,r4,-32228
   20b84:	002aa480 	call	2aa48 <puts>
       return FALSE;
   20b88:	0005883a 	mov	r2,zero
   20b8c:	00006b06 	br	20d3c <OC_I2C_Write+0x23c>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20b90:	e13ffe17 	ldw	r4,-8(fp)
   20b94:	0020a980 	call	20a98 <ACK_check>
   20b98:	1080005c 	xori	r2,r2,1
   20b9c:	10803fcc 	andi	r2,r2,255
   20ba0:	10000526 	beq	r2,zero,20bb8 <OC_I2C_Write+0xb8>
        printf("OC_I2C_Write error[2]\r\n");
   20ba4:	01000134 	movhi	r4,4
   20ba8:	21208d04 	addi	r4,r4,-32204
   20bac:	002aa480 	call	2aa48 <puts>
        return FALSE;
   20bb0:	0005883a 	mov	r2,zero
   20bb4:	00006106 	br	20d3c <OC_I2C_Write+0x23c>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
   20bb8:	e0bffc03 	ldbu	r2,-16(fp)
   20bbc:	100d883a 	mov	r6,r2
   20bc0:	014000c4 	movi	r5,3
   20bc4:	e13ffe17 	ldw	r4,-8(fp)
   20bc8:	00207240 	call	20724 <Write32_Data>
   20bcc:	1080005c 	xori	r2,r2,1
   20bd0:	10803fcc 	andi	r2,r2,255
   20bd4:	10000526 	beq	r2,zero,20bec <OC_I2C_Write+0xec>
       printf("OC_I2C_Write error[3]\r\n");
   20bd8:	01000134 	movhi	r4,4
   20bdc:	21209304 	addi	r4,r4,-32180
   20be0:	002aa480 	call	2aa48 <puts>
       return FALSE;
   20be4:	0005883a 	mov	r2,zero
   20be8:	00005406 	br	20d3c <OC_I2C_Write+0x23c>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
   20bec:	01800404 	movi	r6,16
   20bf0:	01400104 	movi	r5,4
   20bf4:	e13ffe17 	ldw	r4,-8(fp)
   20bf8:	00207240 	call	20724 <Write32_Data>
   20bfc:	1080005c 	xori	r2,r2,1
   20c00:	10803fcc 	andi	r2,r2,255
   20c04:	10000526 	beq	r2,zero,20c1c <OC_I2C_Write+0x11c>
        printf("OC_I2C_Write error[4]\r\n");
   20c08:	01000134 	movhi	r4,4
   20c0c:	21209904 	addi	r4,r4,-32156
   20c10:	002aa480 	call	2aa48 <puts>
        return FALSE;
   20c14:	0005883a 	mov	r2,zero
   20c18:	00004806 	br	20d3c <OC_I2C_Write+0x23c>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20c1c:	e13ffe17 	ldw	r4,-8(fp)
   20c20:	0020a980 	call	20a98 <ACK_check>
   20c24:	1080005c 	xori	r2,r2,1
   20c28:	10803fcc 	andi	r2,r2,255
   20c2c:	10000526 	beq	r2,zero,20c44 <OC_I2C_Write+0x144>
        printf("OC_I2C_Write error[5]\r\n");
   20c30:	01000134 	movhi	r4,4
   20c34:	21209f04 	addi	r4,r4,-32132
   20c38:	002aa480 	call	2aa48 <puts>
        return FALSE;
   20c3c:	0005883a 	mov	r2,zero
   20c40:	00003e06 	br	20d3c <OC_I2C_Write+0x23c>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
   20c44:	e03fff15 	stw	zero,-4(fp)
   20c48:	00002a06 	br	20cf4 <OC_I2C_Write+0x1f4>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
   20c4c:	e0bfff17 	ldw	r2,-4(fp)
   20c50:	e0fffb17 	ldw	r3,-20(fp)
   20c54:	1885883a 	add	r2,r3,r2
   20c58:	10800003 	ldbu	r2,0(r2)
   20c5c:	10803fcc 	andi	r2,r2,255
   20c60:	100d883a 	mov	r6,r2
   20c64:	014000c4 	movi	r5,3
   20c68:	e13ffe17 	ldw	r4,-8(fp)
   20c6c:	00207240 	call	20724 <Write32_Data>
   20c70:	1080005c 	xori	r2,r2,1
   20c74:	10803fcc 	andi	r2,r2,255
   20c78:	10000526 	beq	r2,zero,20c90 <OC_I2C_Write+0x190>
              printf("OC_I2C_Write error[6]\r\n");
   20c7c:	01000134 	movhi	r4,4
   20c80:	2120a504 	addi	r4,r4,-32108
   20c84:	002aa480 	call	2aa48 <puts>
              return FALSE;
   20c88:	0005883a 	mov	r2,zero
   20c8c:	00002b06 	br	20d3c <OC_I2C_Write+0x23c>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
   20c90:	01800404 	movi	r6,16
   20c94:	01400104 	movi	r5,4
   20c98:	e13ffe17 	ldw	r4,-8(fp)
   20c9c:	00207240 	call	20724 <Write32_Data>
   20ca0:	1080005c 	xori	r2,r2,1
   20ca4:	10803fcc 	andi	r2,r2,255
   20ca8:	10000526 	beq	r2,zero,20cc0 <OC_I2C_Write+0x1c0>
             printf("OC_I2C_Write error[7]\r\n");
   20cac:	01000134 	movhi	r4,4
   20cb0:	2120ab04 	addi	r4,r4,-32084
   20cb4:	002aa480 	call	2aa48 <puts>
              return FALSE;
   20cb8:	0005883a 	mov	r2,zero
   20cbc:	00001f06 	br	20d3c <OC_I2C_Write+0x23c>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
   20cc0:	e13ffe17 	ldw	r4,-8(fp)
   20cc4:	0020a980 	call	20a98 <ACK_check>
   20cc8:	1080005c 	xori	r2,r2,1
   20ccc:	10803fcc 	andi	r2,r2,255
   20cd0:	10000526 	beq	r2,zero,20ce8 <OC_I2C_Write+0x1e8>
              printf("OC_I2C_Write error[8]\r\n");
   20cd4:	01000134 	movhi	r4,4
   20cd8:	2120b104 	addi	r4,r4,-32060
   20cdc:	002aa480 	call	2aa48 <puts>
              return FALSE;
   20ce0:	0005883a 	mov	r2,zero
   20ce4:	00001506 	br	20d3c <OC_I2C_Write+0x23c>
        for( i=0;i<nWriteLength;i++){
   20ce8:	e0bfff17 	ldw	r2,-4(fp)
   20cec:	10800044 	addi	r2,r2,1
   20cf0:	e0bfff15 	stw	r2,-4(fp)
   20cf4:	e0ffff17 	ldw	r3,-4(fp)
   20cf8:	e0800217 	ldw	r2,8(fp)
   20cfc:	18bfd316 	blt	r3,r2,20c4c <OC_I2C_Write+0x14c>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
   20d00:	01801004 	movi	r6,64
   20d04:	01400104 	movi	r5,4
   20d08:	e13ffe17 	ldw	r4,-8(fp)
   20d0c:	00207240 	call	20724 <Write32_Data>
   20d10:	1080005c 	xori	r2,r2,1
   20d14:	10803fcc 	andi	r2,r2,255
   20d18:	10000526 	beq	r2,zero,20d30 <OC_I2C_Write+0x230>
         printf("OC_I2C_Write error[9]\r\n");
   20d1c:	01000134 	movhi	r4,4
   20d20:	2120b704 	addi	r4,r4,-32036
   20d24:	002aa480 	call	2aa48 <puts>
         return FALSE;
   20d28:	0005883a 	mov	r2,zero
   20d2c:	00000306 	br	20d3c <OC_I2C_Write+0x23c>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
   20d30:	01003e84 	movi	r4,250
   20d34:	00361680 	call	36168 <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
   20d38:	00800044 	movi	r2,1

}
   20d3c:	e037883a 	mov	sp,fp
   20d40:	dfc00117 	ldw	ra,4(sp)
   20d44:	df000017 	ldw	fp,0(sp)
   20d48:	dec00204 	addi	sp,sp,8
   20d4c:	f800283a 	ret

00020d50 <ACK_judge_for_read>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
   20d50:	defffb04 	addi	sp,sp,-20
   20d54:	dfc00415 	stw	ra,16(sp)
   20d58:	df000315 	stw	fp,12(sp)
   20d5c:	df000304 	addi	fp,sp,12
   20d60:	e13ffd15 	stw	r4,-12(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
   20d64:	01003e84 	movi	r4,250
   20d68:	00361680 	call	36168 <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
   20d6c:	e0bffe04 	addi	r2,fp,-8
   20d70:	100d883a 	mov	r6,r2
   20d74:	01400104 	movi	r5,4
   20d78:	e13ffd17 	ldw	r4,-12(fp)
   20d7c:	00207780 	call	20778 <Read32_Data>
   20d80:	e0bfffc5 	stb	r2,-1(fp)
    if (bSuccess){
   20d84:	e0bfffc3 	ldbu	r2,-1(fp)
   20d88:	10000426 	beq	r2,zero,20d9c <ACK_judge_for_read+0x4c>
        if(this_data & 0x02)
   20d8c:	e0bffe17 	ldw	r2,-8(fp)
   20d90:	1080008c 	andi	r2,r2,2
   20d94:	10000126 	beq	r2,zero,20d9c <ACK_judge_for_read+0x4c>
            bSuccess = FALSE;
   20d98:	e03fffc5 	stb	zero,-1(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
   20d9c:	e0bfffc3 	ldbu	r2,-1(fp)

}
   20da0:	e037883a 	mov	sp,fp
   20da4:	dfc00117 	ldw	ra,4(sp)
   20da8:	df000017 	ldw	fp,0(sp)
   20dac:	dec00204 	addi	sp,sp,8
   20db0:	f800283a 	ret

00020db4 <OC_I2C_Read>:





bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
   20db4:	defff804 	addi	sp,sp,-32
   20db8:	dfc00715 	stw	ra,28(sp)
   20dbc:	df000615 	stw	fp,24(sp)
   20dc0:	df000604 	addi	fp,sp,24
   20dc4:	e13ffd15 	stw	r4,-12(fp)
   20dc8:	2805883a 	mov	r2,r5
   20dcc:	3007883a 	mov	r3,r6
   20dd0:	e1fffa15 	stw	r7,-24(fp)
   20dd4:	e0bffc05 	stb	r2,-16(fp)
   20dd8:	1805883a 	mov	r2,r3
   20ddc:	e0bffb05 	stb	r2,-20(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
   20de0:	e0bffd17 	ldw	r2,-12(fp)
   20de4:	10800304 	addi	r2,r2,12
   20de8:	1007883a 	mov	r3,r2
   20dec:	e0bffc03 	ldbu	r2,-16(fp)
   20df0:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
   20df4:	e0bffd17 	ldw	r2,-12(fp)
   20df8:	10800404 	addi	r2,r2,16
   20dfc:	1007883a 	mov	r3,r2
   20e00:	00802404 	movi	r2,144
   20e04:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
   20e08:	e13ffd17 	ldw	r4,-12(fp)
   20e0c:	0020a980 	call	20a98 <ACK_check>
   20e10:	1080005c 	xori	r2,r2,1
   20e14:	10803fcc 	andi	r2,r2,255
   20e18:	10000526 	beq	r2,zero,20e30 <OC_I2C_Read+0x7c>
       printf("OC_I2C_Read error[2]\r\n");
   20e1c:	01000134 	movhi	r4,4
   20e20:	2120bd04 	addi	r4,r4,-32012
   20e24:	002aa480 	call	2aa48 <puts>
       return FALSE;
   20e28:	0005883a 	mov	r2,zero
   20e2c:	00005806 	br	20f90 <OC_I2C_Read+0x1dc>
   }
   IOWR(i2c_base, 3,sub_address);
   20e30:	e0bffd17 	ldw	r2,-12(fp)
   20e34:	10800304 	addi	r2,r2,12
   20e38:	1007883a 	mov	r3,r2
   20e3c:	e0bffb03 	ldbu	r2,-20(fp)
   20e40:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
   20e44:	e0bffd17 	ldw	r2,-12(fp)
   20e48:	10800404 	addi	r2,r2,16
   20e4c:	1007883a 	mov	r3,r2
   20e50:	00800404 	movi	r2,16
   20e54:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   20e58:	e13ffd17 	ldw	r4,-12(fp)
   20e5c:	0020a980 	call	20a98 <ACK_check>
   20e60:	1080005c 	xori	r2,r2,1
   20e64:	10803fcc 	andi	r2,r2,255
   20e68:	10000526 	beq	r2,zero,20e80 <OC_I2C_Read+0xcc>
        printf("OC_I2C_Read error[5]\r\n");
   20e6c:	01000134 	movhi	r4,4
   20e70:	2120c304 	addi	r4,r4,-31988
   20e74:	002aa480 	call	2aa48 <puts>
        return FALSE;
   20e78:	0005883a 	mov	r2,zero
   20e7c:	00004406 	br	20f90 <OC_I2C_Read+0x1dc>
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
   20e80:	e0bffd17 	ldw	r2,-12(fp)
   20e84:	10800304 	addi	r2,r2,12
   20e88:	1007883a 	mov	r3,r2
   20e8c:	e0bffc03 	ldbu	r2,-16(fp)
   20e90:	10800054 	ori	r2,r2,1
   20e94:	10803fcc 	andi	r2,r2,255
   20e98:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
   20e9c:	e0bffd17 	ldw	r2,-12(fp)
   20ea0:	10800404 	addi	r2,r2,16
   20ea4:	1007883a 	mov	r3,r2
   20ea8:	00802404 	movi	r2,144
   20eac:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   20eb0:	e13ffd17 	ldw	r4,-12(fp)
   20eb4:	0020a980 	call	20a98 <ACK_check>
   20eb8:	1080005c 	xori	r2,r2,1
   20ebc:	10803fcc 	andi	r2,r2,255
   20ec0:	10000526 	beq	r2,zero,20ed8 <OC_I2C_Read+0x124>
        printf("OC_I2C_Read error[8]\r\n");
   20ec4:	01000134 	movhi	r4,4
   20ec8:	2120c904 	addi	r4,r4,-31964
   20ecc:	002aa480 	call	2aa48 <puts>
        return FALSE;
   20ed0:	0005883a 	mov	r2,zero
   20ed4:	00002e06 	br	20f90 <OC_I2C_Read+0x1dc>
    }

    for(i=0;i<nReadLength;i++){
   20ed8:	e03fff15 	stw	zero,-4(fp)
   20edc:	00002106 	br	20f64 <OC_I2C_Read+0x1b0>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   20ee0:	e0bffd17 	ldw	r2,-12(fp)
   20ee4:	10800404 	addi	r2,r2,16
   20ee8:	1009883a 	mov	r4,r2
   20eec:	e0bfff17 	ldw	r2,-4(fp)
   20ef0:	10800044 	addi	r2,r2,1
   20ef4:	e0c00217 	ldw	r3,8(fp)
   20ef8:	1880021e 	bne	r3,r2,20f04 <OC_I2C_Read+0x150>
   20efc:	00800a04 	movi	r2,40
   20f00:	00000106 	br	20f08 <OC_I2C_Read+0x154>
   20f04:	00800804 	movi	r2,32
   20f08:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   20f0c:	e13ffd17 	ldw	r4,-12(fp)
   20f10:	0020d500 	call	20d50 <ACK_judge_for_read>
   20f14:	1080005c 	xori	r2,r2,1
   20f18:	10803fcc 	andi	r2,r2,255
   20f1c:	10000526 	beq	r2,zero,20f34 <OC_I2C_Read+0x180>
            printf("OC_I2C_Read error[10]\r\n");
   20f20:	01000134 	movhi	r4,4
   20f24:	2120cf04 	addi	r4,r4,-31940
   20f28:	002aa480 	call	2aa48 <puts>
            return FALSE;
   20f2c:	0005883a 	mov	r2,zero
   20f30:	00001706 	br	20f90 <OC_I2C_Read+0x1dc>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   20f34:	e0bffd17 	ldw	r2,-12(fp)
   20f38:	10800304 	addi	r2,r2,12
   20f3c:	10800037 	ldwio	r2,0(r2)
   20f40:	e0bffe15 	stw	r2,-8(fp)
//        printf("Data32_%d: %d\n", i, Data32);
        *(pData8+i) =  Data32 & 0xff;
   20f44:	e0bfff17 	ldw	r2,-4(fp)
   20f48:	e0fffa17 	ldw	r3,-24(fp)
   20f4c:	1885883a 	add	r2,r3,r2
   20f50:	e0fffe17 	ldw	r3,-8(fp)
   20f54:	10c00005 	stb	r3,0(r2)
    for(i=0;i<nReadLength;i++){
   20f58:	e0bfff17 	ldw	r2,-4(fp)
   20f5c:	10800044 	addi	r2,r2,1
   20f60:	e0bfff15 	stw	r2,-4(fp)
   20f64:	e0ffff17 	ldw	r3,-4(fp)
   20f68:	e0800217 	ldw	r2,8(fp)
   20f6c:	18bfdc16 	blt	r3,r2,20ee0 <OC_I2C_Read+0x12c>
    }

    IOWR( i2c_base, 4,0x40);
   20f70:	e0bffd17 	ldw	r2,-12(fp)
   20f74:	10800404 	addi	r2,r2,16
   20f78:	1007883a 	mov	r3,r2
   20f7c:	00801004 	movi	r2,64
   20f80:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
   20f84:	01003e84 	movi	r4,250
   20f88:	00361680 	call	36168 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
   20f8c:	00800044 	movi	r2,1

}
   20f90:	e037883a 	mov	sp,fp
   20f94:	dfc00117 	ldw	ra,4(sp)
   20f98:	df000017 	ldw	fp,0(sp)
   20f9c:	dec00204 	addi	sp,sp,8
   20fa0:	f800283a 	ret

00020fa4 <OC_I2C_Write_Addr>:

bool  OC_I2C_Write_Addr(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, bool bStop){
   20fa4:	defffa04 	addi	sp,sp,-24
   20fa8:	dfc00515 	stw	ra,20(sp)
   20fac:	df000415 	stw	fp,16(sp)
   20fb0:	df000404 	addi	fp,sp,16
   20fb4:	e13fff15 	stw	r4,-4(fp)
   20fb8:	2805883a 	mov	r2,r5
   20fbc:	3009883a 	mov	r4,r6
   20fc0:	3807883a 	mov	r3,r7
   20fc4:	e0bffe05 	stb	r2,-8(fp)
   20fc8:	2005883a 	mov	r2,r4
   20fcc:	e0bffd05 	stb	r2,-12(fp)
   20fd0:	1805883a 	mov	r2,r3
   20fd4:	e0bffc05 	stb	r2,-16(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
   20fd8:	e0bfff17 	ldw	r2,-4(fp)
   20fdc:	10800304 	addi	r2,r2,12
   20fe0:	1007883a 	mov	r3,r2
   20fe4:	e0bffe03 	ldbu	r2,-8(fp)
   20fe8:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
   20fec:	e0bfff17 	ldw	r2,-4(fp)
   20ff0:	10800404 	addi	r2,r2,16
   20ff4:	1007883a 	mov	r3,r2
   20ff8:	00802404 	movi	r2,144
   20ffc:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
   21000:	e13fff17 	ldw	r4,-4(fp)
   21004:	0020a980 	call	20a98 <ACK_check>
   21008:	1080005c 	xori	r2,r2,1
   2100c:	10803fcc 	andi	r2,r2,255
   21010:	10000526 	beq	r2,zero,21028 <OC_I2C_Write_Addr+0x84>
       printf("OC_I2C_Read error[2]\r\n");
   21014:	01000134 	movhi	r4,4
   21018:	2120bd04 	addi	r4,r4,-32012
   2101c:	002aa480 	call	2aa48 <puts>
       return FALSE;
   21020:	0005883a 	mov	r2,zero
   21024:	00001e06 	br	210a0 <OC_I2C_Write_Addr+0xfc>
   }
   IOWR(i2c_base, 3,sub_address);
   21028:	e0bfff17 	ldw	r2,-4(fp)
   2102c:	10800304 	addi	r2,r2,12
   21030:	1007883a 	mov	r3,r2
   21034:	e0bffd03 	ldbu	r2,-12(fp)
   21038:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
   2103c:	e0bfff17 	ldw	r2,-4(fp)
   21040:	10800404 	addi	r2,r2,16
   21044:	1007883a 	mov	r3,r2
   21048:	00800404 	movi	r2,16
   2104c:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   21050:	e13fff17 	ldw	r4,-4(fp)
   21054:	0020a980 	call	20a98 <ACK_check>
   21058:	1080005c 	xori	r2,r2,1
   2105c:	10803fcc 	andi	r2,r2,255
   21060:	10000526 	beq	r2,zero,21078 <OC_I2C_Write_Addr+0xd4>
        printf("OC_I2C_Read error[5]\r\n");
   21064:	01000134 	movhi	r4,4
   21068:	2120c304 	addi	r4,r4,-31988
   2106c:	002aa480 	call	2aa48 <puts>
        return FALSE;
   21070:	0005883a 	mov	r2,zero
   21074:	00000a06 	br	210a0 <OC_I2C_Write_Addr+0xfc>
    }

    if (bStop){
   21078:	e0bffc03 	ldbu	r2,-16(fp)
   2107c:	10000726 	beq	r2,zero,2109c <OC_I2C_Write_Addr+0xf8>
        IOWR( i2c_base, 4,0x40);
   21080:	e0bfff17 	ldw	r2,-4(fp)
   21084:	10800404 	addi	r2,r2,16
   21088:	1007883a 	mov	r3,r2
   2108c:	00801004 	movi	r2,64
   21090:	18800035 	stwio	r2,0(r3)
        usleep(SLEEP_TIME);
   21094:	01003e84 	movi	r4,250
   21098:	00361680 	call	36168 <usleep>
    }

   return TRUE;
   2109c:	00800044 	movi	r2,1

}
   210a0:	e037883a 	mov	sp,fp
   210a4:	dfc00117 	ldw	ra,4(sp)
   210a8:	df000017 	ldw	fp,0(sp)
   210ac:	dec00204 	addi	sp,sp,8
   210b0:	f800283a 	ret

000210b4 <OC_I2C_Read_Continue>:



bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
   210b4:	defff804 	addi	sp,sp,-32
   210b8:	dfc00715 	stw	ra,28(sp)
   210bc:	df000615 	stw	fp,24(sp)
   210c0:	df000604 	addi	fp,sp,24
   210c4:	e13ffd15 	stw	r4,-12(fp)
   210c8:	2805883a 	mov	r2,r5
   210cc:	e1bffb15 	stw	r6,-20(fp)
   210d0:	e1fffa15 	stw	r7,-24(fp)
   210d4:	e0bffc05 	stb	r2,-16(fp)
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
   210d8:	e0bffd17 	ldw	r2,-12(fp)
   210dc:	10800304 	addi	r2,r2,12
   210e0:	1007883a 	mov	r3,r2
   210e4:	e0bffc03 	ldbu	r2,-16(fp)
   210e8:	10800054 	ori	r2,r2,1
   210ec:	10803fcc 	andi	r2,r2,255
   210f0:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
   210f4:	e0bffd17 	ldw	r2,-12(fp)
   210f8:	10800404 	addi	r2,r2,16
   210fc:	1007883a 	mov	r3,r2
   21100:	00802404 	movi	r2,144
   21104:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   21108:	e13ffd17 	ldw	r4,-12(fp)
   2110c:	0020a980 	call	20a98 <ACK_check>
   21110:	1080005c 	xori	r2,r2,1
   21114:	10803fcc 	andi	r2,r2,255
   21118:	10000526 	beq	r2,zero,21130 <OC_I2C_Read_Continue+0x7c>
        printf("OC_I2C_Read error[8]\r\n");
   2111c:	01000134 	movhi	r4,4
   21120:	2120c904 	addi	r4,r4,-31964
   21124:	002aa480 	call	2aa48 <puts>
        return FALSE;
   21128:	0005883a 	mov	r2,zero
   2112c:	00002e06 	br	211e8 <OC_I2C_Read_Continue+0x134>
    }

    for(i=0;i<nReadLength;i++){
   21130:	e03fff15 	stw	zero,-4(fp)
   21134:	00002106 	br	211bc <OC_I2C_Read_Continue+0x108>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   21138:	e0bffd17 	ldw	r2,-12(fp)
   2113c:	10800404 	addi	r2,r2,16
   21140:	1009883a 	mov	r4,r2
   21144:	e0bfff17 	ldw	r2,-4(fp)
   21148:	10800044 	addi	r2,r2,1
   2114c:	e0fffa17 	ldw	r3,-24(fp)
   21150:	1880021e 	bne	r3,r2,2115c <OC_I2C_Read_Continue+0xa8>
   21154:	00800a04 	movi	r2,40
   21158:	00000106 	br	21160 <OC_I2C_Read_Continue+0xac>
   2115c:	00800804 	movi	r2,32
   21160:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   21164:	e13ffd17 	ldw	r4,-12(fp)
   21168:	0020d500 	call	20d50 <ACK_judge_for_read>
   2116c:	1080005c 	xori	r2,r2,1
   21170:	10803fcc 	andi	r2,r2,255
   21174:	10000526 	beq	r2,zero,2118c <OC_I2C_Read_Continue+0xd8>
            printf("OC_I2C_Read error[10]\r\n");
   21178:	01000134 	movhi	r4,4
   2117c:	2120cf04 	addi	r4,r4,-31940
   21180:	002aa480 	call	2aa48 <puts>
            return FALSE;
   21184:	0005883a 	mov	r2,zero
   21188:	00001706 	br	211e8 <OC_I2C_Read_Continue+0x134>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   2118c:	e0bffd17 	ldw	r2,-12(fp)
   21190:	10800304 	addi	r2,r2,12
   21194:	10800037 	ldwio	r2,0(r2)
   21198:	e0bffe15 	stw	r2,-8(fp)
        *(pData8+i) =  Data32 & 0xff;
   2119c:	e0bfff17 	ldw	r2,-4(fp)
   211a0:	e0fffb17 	ldw	r3,-20(fp)
   211a4:	1885883a 	add	r2,r3,r2
   211a8:	e0fffe17 	ldw	r3,-8(fp)
   211ac:	10c00005 	stb	r3,0(r2)
    for(i=0;i<nReadLength;i++){
   211b0:	e0bfff17 	ldw	r2,-4(fp)
   211b4:	10800044 	addi	r2,r2,1
   211b8:	e0bfff15 	stw	r2,-4(fp)
   211bc:	e0ffff17 	ldw	r3,-4(fp)
   211c0:	e0bffa17 	ldw	r2,-24(fp)
   211c4:	18bfdc16 	blt	r3,r2,21138 <OC_I2C_Read_Continue+0x84>
    }

    IOWR( i2c_base, 4,0x40);
   211c8:	e0bffd17 	ldw	r2,-12(fp)
   211cc:	10800404 	addi	r2,r2,16
   211d0:	1007883a 	mov	r3,r2
   211d4:	00801004 	movi	r2,64
   211d8:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
   211dc:	01003e84 	movi	r4,250
   211e0:	00361680 	call	36168 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
   211e4:	00800044 	movi	r2,1

}
   211e8:	e037883a 	mov	sp,fp
   211ec:	dfc00117 	ldw	ra,4(sp)
   211f0:	df000017 	ldw	fp,0(sp)
   211f4:	dec00204 	addi	sp,sp,8
   211f8:	f800283a 	ret

000211fc <OC_I2CL_Write>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,alt_u16 sub_address,alt_u8 *pData, int nWriteLength)
    {
   211fc:	defff804 	addi	sp,sp,-32
   21200:	dfc00715 	stw	ra,28(sp)
   21204:	df000615 	stw	fp,24(sp)
   21208:	df000604 	addi	fp,sp,24
   2120c:	e13ffd15 	stw	r4,-12(fp)
   21210:	2805883a 	mov	r2,r5
   21214:	3007883a 	mov	r3,r6
   21218:	e1fffa15 	stw	r7,-24(fp)
   2121c:	e0bffc05 	stb	r2,-16(fp)
   21220:	1805883a 	mov	r2,r3
   21224:	e0bffb0d 	sth	r2,-20(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
   21228:	e0bffb0b 	ldhu	r2,-20(fp)
   2122c:	1004d23a 	srli	r2,r2,8
   21230:	e0bffec5 	stb	r2,-5(fp)
    AddrLow  = sub_address & 0xFF;
   21234:	e0bffb0b 	ldhu	r2,-20(fp)
   21238:	e0bffe85 	stb	r2,-6(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
   2123c:	e0bffc03 	ldbu	r2,-16(fp)
   21240:	100d883a 	mov	r6,r2
   21244:	014000c4 	movi	r5,3
   21248:	e13ffd17 	ldw	r4,-12(fp)
   2124c:	00207240 	call	20724 <Write32_Data>
   21250:	1080005c 	xori	r2,r2,1
   21254:	10803fcc 	andi	r2,r2,255
   21258:	10000226 	beq	r2,zero,21264 <OC_I2CL_Write+0x68>
       return FALSE;
   2125c:	0005883a 	mov	r2,zero
   21260:	00007d06 	br	21458 <OC_I2CL_Write+0x25c>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
   21264:	01802404 	movi	r6,144
   21268:	01400104 	movi	r5,4
   2126c:	e13ffd17 	ldw	r4,-12(fp)
   21270:	00207240 	call	20724 <Write32_Data>
   21274:	1080005c 	xori	r2,r2,1
   21278:	10803fcc 	andi	r2,r2,255
   2127c:	10000226 	beq	r2,zero,21288 <OC_I2CL_Write+0x8c>
       return FALSE;
   21280:	0005883a 	mov	r2,zero
   21284:	00007406 	br	21458 <OC_I2CL_Write+0x25c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   21288:	e13ffd17 	ldw	r4,-12(fp)
   2128c:	0020a980 	call	20a98 <ACK_check>
   21290:	1080005c 	xori	r2,r2,1
   21294:	10803fcc 	andi	r2,r2,255
   21298:	10000526 	beq	r2,zero,212b0 <OC_I2CL_Write+0xb4>
        printf("OC_I2CL_Write error[0]\r\n");
   2129c:	01000134 	movhi	r4,4
   212a0:	2120d504 	addi	r4,r4,-31916
   212a4:	002aa480 	call	2aa48 <puts>
        return FALSE;
   212a8:	0005883a 	mov	r2,zero
   212ac:	00006a06 	br	21458 <OC_I2CL_Write+0x25c>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
   212b0:	e0bffec3 	ldbu	r2,-5(fp)
   212b4:	100d883a 	mov	r6,r2
   212b8:	014000c4 	movi	r5,3
   212bc:	e13ffd17 	ldw	r4,-12(fp)
   212c0:	00207240 	call	20724 <Write32_Data>
   212c4:	1080005c 	xori	r2,r2,1
   212c8:	10803fcc 	andi	r2,r2,255
   212cc:	10000226 	beq	r2,zero,212d8 <OC_I2CL_Write+0xdc>
       return FALSE;
   212d0:	0005883a 	mov	r2,zero
   212d4:	00006006 	br	21458 <OC_I2CL_Write+0x25c>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   212d8:	01800404 	movi	r6,16
   212dc:	01400104 	movi	r5,4
   212e0:	e13ffd17 	ldw	r4,-12(fp)
   212e4:	00207240 	call	20724 <Write32_Data>
   212e8:	1080005c 	xori	r2,r2,1
   212ec:	10803fcc 	andi	r2,r2,255
   212f0:	10000226 	beq	r2,zero,212fc <OC_I2CL_Write+0x100>
        return FALSE;
   212f4:	0005883a 	mov	r2,zero
   212f8:	00005706 	br	21458 <OC_I2CL_Write+0x25c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   212fc:	e13ffd17 	ldw	r4,-12(fp)
   21300:	0020a980 	call	20a98 <ACK_check>
   21304:	1080005c 	xori	r2,r2,1
   21308:	10803fcc 	andi	r2,r2,255
   2130c:	10000526 	beq	r2,zero,21324 <OC_I2CL_Write+0x128>
        printf("OC_I2CL_Write error[1]\r\n");
   21310:	01000134 	movhi	r4,4
   21314:	2120db04 	addi	r4,r4,-31892
   21318:	002aa480 	call	2aa48 <puts>
        return FALSE;
   2131c:	0005883a 	mov	r2,zero
   21320:	00004d06 	br	21458 <OC_I2CL_Write+0x25c>
    }
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
   21324:	e0bffe83 	ldbu	r2,-6(fp)
   21328:	100d883a 	mov	r6,r2
   2132c:	014000c4 	movi	r5,3
   21330:	e13ffd17 	ldw	r4,-12(fp)
   21334:	00207240 	call	20724 <Write32_Data>
   21338:	1080005c 	xori	r2,r2,1
   2133c:	10803fcc 	andi	r2,r2,255
   21340:	10000226 	beq	r2,zero,2134c <OC_I2CL_Write+0x150>
       return FALSE;
   21344:	0005883a 	mov	r2,zero
   21348:	00004306 	br	21458 <OC_I2CL_Write+0x25c>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
   2134c:	01800404 	movi	r6,16
   21350:	01400104 	movi	r5,4
   21354:	e13ffd17 	ldw	r4,-12(fp)
   21358:	00207240 	call	20724 <Write32_Data>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   2135c:	e13ffd17 	ldw	r4,-12(fp)
   21360:	0020a980 	call	20a98 <ACK_check>
   21364:	1080005c 	xori	r2,r2,1
   21368:	10803fcc 	andi	r2,r2,255
   2136c:	10000526 	beq	r2,zero,21384 <OC_I2CL_Write+0x188>
        printf("OC_I2CL_Write error[2]\r\n");
   21370:	01000134 	movhi	r4,4
   21374:	2120e104 	addi	r4,r4,-31868
   21378:	002aa480 	call	2aa48 <puts>
        return FALSE;
   2137c:	0005883a 	mov	r2,zero
   21380:	00003506 	br	21458 <OC_I2CL_Write+0x25c>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
   21384:	e03fff15 	stw	zero,-4(fp)
   21388:	00002406 	br	2141c <OC_I2CL_Write+0x220>

        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
   2138c:	e0bfff17 	ldw	r2,-4(fp)
   21390:	e0fffa17 	ldw	r3,-24(fp)
   21394:	1885883a 	add	r2,r3,r2
   21398:	10800003 	ldbu	r2,0(r2)
   2139c:	10803fcc 	andi	r2,r2,255
   213a0:	100d883a 	mov	r6,r2
   213a4:	014000c4 	movi	r5,3
   213a8:	e13ffd17 	ldw	r4,-12(fp)
   213ac:	00207240 	call	20724 <Write32_Data>
   213b0:	1080005c 	xori	r2,r2,1
   213b4:	10803fcc 	andi	r2,r2,255
   213b8:	10000226 	beq	r2,zero,213c4 <OC_I2CL_Write+0x1c8>
            return FALSE;
   213bc:	0005883a 	mov	r2,zero
   213c0:	00002506 	br	21458 <OC_I2CL_Write+0x25c>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
   213c4:	01800404 	movi	r6,16
   213c8:	01400104 	movi	r5,4
   213cc:	e13ffd17 	ldw	r4,-12(fp)
   213d0:	00207240 	call	20724 <Write32_Data>
   213d4:	1080005c 	xori	r2,r2,1
   213d8:	10803fcc 	andi	r2,r2,255
   213dc:	10000226 	beq	r2,zero,213e8 <OC_I2CL_Write+0x1ec>
            return FALSE;
   213e0:	0005883a 	mov	r2,zero
   213e4:	00001c06 	br	21458 <OC_I2CL_Write+0x25c>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base)){
   213e8:	e13ffd17 	ldw	r4,-12(fp)
   213ec:	0020a980 	call	20a98 <ACK_check>
   213f0:	1080005c 	xori	r2,r2,1
   213f4:	10803fcc 	andi	r2,r2,255
   213f8:	10000526 	beq	r2,zero,21410 <OC_I2CL_Write+0x214>
             printf("OC_I2CL_Write error[3]\r\n");
   213fc:	01000134 	movhi	r4,4
   21400:	2120e704 	addi	r4,r4,-31844
   21404:	002aa480 	call	2aa48 <puts>
             return FALSE;
   21408:	0005883a 	mov	r2,zero
   2140c:	00001206 	br	21458 <OC_I2CL_Write+0x25c>
    for( i=0;i<nWriteLength;i++){
   21410:	e0bfff17 	ldw	r2,-4(fp)
   21414:	10800044 	addi	r2,r2,1
   21418:	e0bfff15 	stw	r2,-4(fp)
   2141c:	e0ffff17 	ldw	r3,-4(fp)
   21420:	e0800217 	ldw	r2,8(fp)
   21424:	18bfd916 	blt	r3,r2,2138c <OC_I2CL_Write+0x190>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
   21428:	01801004 	movi	r6,64
   2142c:	01400104 	movi	r5,4
   21430:	e13ffd17 	ldw	r4,-12(fp)
   21434:	00207240 	call	20724 <Write32_Data>
   21438:	1080005c 	xori	r2,r2,1
   2143c:	10803fcc 	andi	r2,r2,255
   21440:	10000226 	beq	r2,zero,2144c <OC_I2CL_Write+0x250>
         return FALSE;
   21444:	0005883a 	mov	r2,zero
   21448:	00000306 	br	21458 <OC_I2CL_Write+0x25c>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
   2144c:	01003e84 	movi	r4,250
   21450:	00361680 	call	36168 <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
   21454:	00800044 	movi	r2,1
}
   21458:	e037883a 	mov	sp,fp
   2145c:	dfc00117 	ldw	ra,4(sp)
   21460:	df000017 	ldw	fp,0(sp)
   21464:	dec00204 	addi	sp,sp,8
   21468:	f800283a 	ret

0002146c <OC_I2CL_Read>:

   return TRUE;

} */

bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
   2146c:	defff704 	addi	sp,sp,-36
   21470:	dfc00815 	stw	ra,32(sp)
   21474:	df000715 	stw	fp,28(sp)
   21478:	df000704 	addi	fp,sp,28
   2147c:	e13ffc15 	stw	r4,-16(fp)
   21480:	2805883a 	mov	r2,r5
   21484:	3007883a 	mov	r3,r6
   21488:	e1fff915 	stw	r7,-28(fp)
   2148c:	e0bffb05 	stb	r2,-20(fp)
   21490:	1805883a 	mov	r2,r3
   21494:	e0bffa0d 	sth	r2,-24(fp)
    int i;

    alt_u8 AddrHigh, AddrLow;
    alt_u8 DataHigh, DataLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
   21498:	e0bffa0b 	ldhu	r2,-24(fp)
   2149c:	1004d23a 	srli	r2,r2,8
   214a0:	e0bffec5 	stb	r2,-5(fp)
    AddrLow  = sub_address & 0xFF;
   214a4:	e0bffa0b 	ldhu	r2,-24(fp)
   214a8:	e0bffe85 	stb	r2,-6(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
   214ac:	e0bffb03 	ldbu	r2,-20(fp)
   214b0:	100d883a 	mov	r6,r2
   214b4:	014000c4 	movi	r5,3
   214b8:	e13ffc17 	ldw	r4,-16(fp)
   214bc:	00207240 	call	20724 <Write32_Data>
   214c0:	1080005c 	xori	r2,r2,1
   214c4:	10803fcc 	andi	r2,r2,255
   214c8:	10000226 	beq	r2,zero,214d4 <OC_I2CL_Read+0x68>
       return FALSE;
   214cc:	0005883a 	mov	r2,zero
   214d0:	00009e06 	br	2174c <OC_I2CL_Read+0x2e0>

   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
   214d4:	01802404 	movi	r6,144
   214d8:	01400104 	movi	r5,4
   214dc:	e13ffc17 	ldw	r4,-16(fp)
   214e0:	00207240 	call	20724 <Write32_Data>
   214e4:	1080005c 	xori	r2,r2,1
   214e8:	10803fcc 	andi	r2,r2,255
   214ec:	10000226 	beq	r2,zero,214f8 <OC_I2CL_Read+0x8c>
       return FALSE;
   214f0:	0005883a 	mov	r2,zero
   214f4:	00009506 	br	2174c <OC_I2CL_Read+0x2e0>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   214f8:	e13ffc17 	ldw	r4,-16(fp)
   214fc:	0020a980 	call	20a98 <ACK_check>
   21500:	1080005c 	xori	r2,r2,1
   21504:	10803fcc 	andi	r2,r2,255
   21508:	10000526 	beq	r2,zero,21520 <OC_I2CL_Read+0xb4>
        printf("OC_I2CL_Read error[0]\r\n");
   2150c:	01000134 	movhi	r4,4
   21510:	2120ed04 	addi	r4,r4,-31820
   21514:	002aa480 	call	2aa48 <puts>
        return FALSE;
   21518:	0005883a 	mov	r2,zero
   2151c:	00008b06 	br	2174c <OC_I2CL_Read+0x2e0>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
   21520:	e0bffec3 	ldbu	r2,-5(fp)
   21524:	100d883a 	mov	r6,r2
   21528:	014000c4 	movi	r5,3
   2152c:	e13ffc17 	ldw	r4,-16(fp)
   21530:	00207240 	call	20724 <Write32_Data>
   21534:	1080005c 	xori	r2,r2,1
   21538:	10803fcc 	andi	r2,r2,255
   2153c:	10000226 	beq	r2,zero,21548 <OC_I2CL_Read+0xdc>
       return FALSE;
   21540:	0005883a 	mov	r2,zero
   21544:	00008106 	br	2174c <OC_I2CL_Read+0x2e0>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   21548:	01800404 	movi	r6,16
   2154c:	01400104 	movi	r5,4
   21550:	e13ffc17 	ldw	r4,-16(fp)
   21554:	00207240 	call	20724 <Write32_Data>
   21558:	1080005c 	xori	r2,r2,1
   2155c:	10803fcc 	andi	r2,r2,255
   21560:	10000226 	beq	r2,zero,2156c <OC_I2CL_Read+0x100>
        return FALSE;
   21564:	0005883a 	mov	r2,zero
   21568:	00007806 	br	2174c <OC_I2CL_Read+0x2e0>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   2156c:	e13ffc17 	ldw	r4,-16(fp)
   21570:	0020a980 	call	20a98 <ACK_check>
   21574:	1080005c 	xori	r2,r2,1
   21578:	10803fcc 	andi	r2,r2,255
   2157c:	10000526 	beq	r2,zero,21594 <OC_I2CL_Read+0x128>
        printf("OC_I2CL_Read error[1]\r\n");
   21580:	01000134 	movhi	r4,4
   21584:	2120f304 	addi	r4,r4,-31796
   21588:	002aa480 	call	2aa48 <puts>
        return FALSE;
   2158c:	0005883a 	mov	r2,zero
   21590:	00006e06 	br	2174c <OC_I2CL_Read+0x2e0>
    }
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
   21594:	e0bffe83 	ldbu	r2,-6(fp)
   21598:	100d883a 	mov	r6,r2
   2159c:	014000c4 	movi	r5,3
   215a0:	e13ffc17 	ldw	r4,-16(fp)
   215a4:	00207240 	call	20724 <Write32_Data>
   215a8:	1080005c 	xori	r2,r2,1
   215ac:	10803fcc 	andi	r2,r2,255
   215b0:	10000226 	beq	r2,zero,215bc <OC_I2CL_Read+0x150>
       return FALSE;
   215b4:	0005883a 	mov	r2,zero
   215b8:	00006406 	br	2174c <OC_I2CL_Read+0x2e0>
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   215bc:	01800404 	movi	r6,16
   215c0:	01400104 	movi	r5,4
   215c4:	e13ffc17 	ldw	r4,-16(fp)
   215c8:	00207240 	call	20724 <Write32_Data>
   215cc:	1080005c 	xori	r2,r2,1
   215d0:	10803fcc 	andi	r2,r2,255
   215d4:	10000226 	beq	r2,zero,215e0 <OC_I2CL_Read+0x174>
        return FALSE;
   215d8:	0005883a 	mov	r2,zero
   215dc:	00005b06 	br	2174c <OC_I2CL_Read+0x2e0>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   215e0:	e13ffc17 	ldw	r4,-16(fp)
   215e4:	0020a980 	call	20a98 <ACK_check>
   215e8:	1080005c 	xori	r2,r2,1
   215ec:	10803fcc 	andi	r2,r2,255
   215f0:	10000526 	beq	r2,zero,21608 <OC_I2CL_Read+0x19c>
        printf("OC_I2CL_Read error[2]\r\n");
   215f4:	01000134 	movhi	r4,4
   215f8:	2120f904 	addi	r4,r4,-31772
   215fc:	002aa480 	call	2aa48 <puts>
        return FALSE;
   21600:	0005883a 	mov	r2,zero
   21604:	00005106 	br	2174c <OC_I2CL_Read+0x2e0>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
   21608:	e0bffb03 	ldbu	r2,-20(fp)
   2160c:	10800054 	ori	r2,r2,1
   21610:	10803fcc 	andi	r2,r2,255
   21614:	100d883a 	mov	r6,r2
   21618:	014000c4 	movi	r5,3
   2161c:	e13ffc17 	ldw	r4,-16(fp)
   21620:	00207240 	call	20724 <Write32_Data>
   21624:	1080005c 	xori	r2,r2,1
   21628:	10803fcc 	andi	r2,r2,255
   2162c:	10000226 	beq	r2,zero,21638 <OC_I2CL_Read+0x1cc>
         return FALSE;
   21630:	0005883a 	mov	r2,zero
   21634:	00004506 	br	2174c <OC_I2CL_Read+0x2e0>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
   21638:	01802404 	movi	r6,144
   2163c:	01400104 	movi	r5,4
   21640:	e13ffc17 	ldw	r4,-16(fp)
   21644:	00207240 	call	20724 <Write32_Data>
   21648:	1080005c 	xori	r2,r2,1
   2164c:	10803fcc 	andi	r2,r2,255
   21650:	10000226 	beq	r2,zero,2165c <OC_I2CL_Read+0x1f0>
         return FALSE;
   21654:	0005883a 	mov	r2,zero
   21658:	00003c06 	br	2174c <OC_I2CL_Read+0x2e0>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   2165c:	e13ffc17 	ldw	r4,-16(fp)
   21660:	0020a980 	call	20a98 <ACK_check>
   21664:	1080005c 	xori	r2,r2,1
   21668:	10803fcc 	andi	r2,r2,255
   2166c:	10000526 	beq	r2,zero,21684 <OC_I2CL_Read+0x218>
        printf("OC_I2CL_Read error[3]\r\n");
   21670:	01000134 	movhi	r4,4
   21674:	2120ff04 	addi	r4,r4,-31748
   21678:	002aa480 	call	2aa48 <puts>
        return FALSE;
   2167c:	0005883a 	mov	r2,zero
   21680:	00003206 	br	2174c <OC_I2CL_Read+0x2e0>
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
   21684:	e03fff15 	stw	zero,-4(fp)
   21688:	00002106 	br	21710 <OC_I2CL_Read+0x2a4>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   2168c:	e0bffc17 	ldw	r2,-16(fp)
   21690:	10800404 	addi	r2,r2,16
   21694:	1009883a 	mov	r4,r2
   21698:	e0bfff17 	ldw	r2,-4(fp)
   2169c:	10800044 	addi	r2,r2,1
   216a0:	e0c00217 	ldw	r3,8(fp)
   216a4:	1880021e 	bne	r3,r2,216b0 <OC_I2CL_Read+0x244>
   216a8:	00800a04 	movi	r2,40
   216ac:	00000106 	br	216b4 <OC_I2CL_Read+0x248>
   216b0:	00800804 	movi	r2,32
   216b4:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   216b8:	e13ffc17 	ldw	r4,-16(fp)
   216bc:	0020d500 	call	20d50 <ACK_judge_for_read>
   216c0:	1080005c 	xori	r2,r2,1
   216c4:	10803fcc 	andi	r2,r2,255
   216c8:	10000526 	beq	r2,zero,216e0 <OC_I2CL_Read+0x274>
            printf("OC_I2CL_Read error[4]\r\n");
   216cc:	01000134 	movhi	r4,4
   216d0:	21210504 	addi	r4,r4,-31724
   216d4:	002aa480 	call	2aa48 <puts>
            return FALSE;
   216d8:	0005883a 	mov	r2,zero
   216dc:	00001b06 	br	2174c <OC_I2CL_Read+0x2e0>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   216e0:	e0bffc17 	ldw	r2,-16(fp)
   216e4:	10800304 	addi	r2,r2,12
   216e8:	10800037 	ldwio	r2,0(r2)
   216ec:	e0bffd15 	stw	r2,-12(fp)
        *(pData8+i) =  Data32 & 0xff;
   216f0:	e0bfff17 	ldw	r2,-4(fp)
   216f4:	e0fff917 	ldw	r3,-28(fp)
   216f8:	1885883a 	add	r2,r3,r2
   216fc:	e0fffd17 	ldw	r3,-12(fp)
   21700:	10c00005 	stb	r3,0(r2)
    for(i=0;i<nReadLength;i++){
   21704:	e0bfff17 	ldw	r2,-4(fp)
   21708:	10800044 	addi	r2,r2,1
   2170c:	e0bfff15 	stw	r2,-4(fp)
   21710:	e0ffff17 	ldw	r3,-4(fp)
   21714:	e0800217 	ldw	r2,8(fp)
   21718:	18bfdc16 	blt	r3,r2,2168c <OC_I2CL_Read+0x220>
    DataLow =  Data32 & 0xff;

    pData16 = (DataHigh << 8) | DataLow;
#endif

   if (!Write32_Data( i2c_base, 4,0x40))
   2171c:	01801004 	movi	r6,64
   21720:	01400104 	movi	r5,4
   21724:	e13ffc17 	ldw	r4,-16(fp)
   21728:	00207240 	call	20724 <Write32_Data>
   2172c:	1080005c 	xori	r2,r2,1
   21730:	10803fcc 	andi	r2,r2,255
   21734:	10000226 	beq	r2,zero,21740 <OC_I2CL_Read+0x2d4>
       return FALSE;
   21738:	0005883a 	mov	r2,zero
   2173c:	00000306 	br	2174c <OC_I2CL_Read+0x2e0>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
   21740:	01003e84 	movi	r4,250
   21744:	00361680 	call	36168 <usleep>

   return TRUE;
   21748:	00800044 	movi	r2,1

}
   2174c:	e037883a 	mov	sp,fp
   21750:	dfc00117 	ldw	ra,4(sp)
   21754:	df000017 	ldw	fp,0(sp)
   21758:	dec00204 	addi	sp,sp,8
   2175c:	f800283a 	ret

00021760 <Light_Init>:

////////////////////////////////////////
// export API
static alt_u32 Light_I2C_Controller_Base = LIGHT_I2C_OPENCORES_BASE;

void Light_Init(alt_u32 I2C_Controller_Base){
   21760:	defffb04 	addi	sp,sp,-20
   21764:	dfc00415 	stw	ra,16(sp)
   21768:	df000315 	stw	fp,12(sp)
   2176c:	df000304 	addi	fp,sp,12
   21770:	e13ffd15 	stw	r4,-12(fp)
	const int Ref_CLK = 50*1000*1000; // 50MHz
   21774:	0080bef4 	movhi	r2,763
   21778:	10bc2004 	addi	r2,r2,-3968
   2177c:	e0bfff15 	stw	r2,-4(fp)
	const int I2C_CLK = 400*1000; // 400KHz
   21780:	008001b4 	movhi	r2,6
   21784:	1086a004 	addi	r2,r2,6784
   21788:	e0bffe15 	stw	r2,-8(fp)

	Light_I2C_Controller_Base = I2C_Controller_Base;
   2178c:	e0bffd17 	ldw	r2,-12(fp)
   21790:	d0a00215 	stw	r2,-32760(gp)
	oc_i2c_init_ex(Light_I2C_Controller_Base, Ref_CLK, I2C_CLK);
   21794:	d0a00217 	ldw	r2,-32760(gp)
   21798:	e1bffe17 	ldw	r6,-8(fp)
   2179c:	e17fff17 	ldw	r5,-4(fp)
   217a0:	1009883a 	mov	r4,r2
   217a4:	00208240 	call	20824 <oc_i2c_init_ex>
}
   217a8:	0001883a 	nop
   217ac:	e037883a 	mov	sp,fp
   217b0:	dfc00117 	ldw	ra,4(sp)
   217b4:	df000017 	ldw	fp,0(sp)
   217b8:	dec00204 	addi	sp,sp,8
   217bc:	f800283a 	ret

000217c0 <Light_GetID>:

void Light_GetID(alt_u8 *data)
{
   217c0:	defffc04 	addi	sp,sp,-16
   217c4:	dfc00315 	stw	ra,12(sp)
   217c8:	df000215 	stw	fp,8(sp)
   217cc:	df000204 	addi	fp,sp,8
   217d0:	e13ffe15 	stw	r4,-8(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | ID_REG ;
   217d4:	00bfe284 	movi	r2,-118
   217d8:	e0bfffc5 	stb	r2,-1(fp)
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
   217dc:	e0bfffc3 	ldbu	r2,-1(fp)
   217e0:	e1bffe17 	ldw	r6,-8(fp)
   217e4:	100b883a 	mov	r5,r2
   217e8:	01001484 	movi	r4,82
   217ec:	0021e640 	call	21e64 <I2C_Read_Light>
   217f0:	e0bfff85 	stb	r2,-2(fp)
    if(!bPass)  *data = 0;
   217f4:	e0bfff83 	ldbu	r2,-2(fp)
   217f8:	1080005c 	xori	r2,r2,1
   217fc:	10803fcc 	andi	r2,r2,255
   21800:	10000226 	beq	r2,zero,2180c <Light_GetID+0x4c>
   21804:	e0bffe17 	ldw	r2,-8(fp)
   21808:	10000005 	stb	zero,0(r2)

}
   2180c:	0001883a 	nop
   21810:	e037883a 	mov	sp,fp
   21814:	dfc00117 	ldw	ra,4(sp)
   21818:	df000017 	ldw	fp,0(sp)
   2181c:	dec00204 	addi	sp,sp,8
   21820:	f800283a 	ret

00021824 <Light_GetTiming>:

void Light_GetTiming(alt_u8 *data)
{
   21824:	defffc04 	addi	sp,sp,-16
   21828:	dfc00315 	stw	ra,12(sp)
   2182c:	df000215 	stw	fp,8(sp)
   21830:	df000204 	addi	fp,sp,8
   21834:	e13ffe15 	stw	r4,-8(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | TIMING_REG ;
   21838:	00bfe044 	movi	r2,-127
   2183c:	e0bfffc5 	stb	r2,-1(fp)
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
   21840:	e0bfffc3 	ldbu	r2,-1(fp)
   21844:	e1bffe17 	ldw	r6,-8(fp)
   21848:	100b883a 	mov	r5,r2
   2184c:	01001484 	movi	r4,82
   21850:	0021e640 	call	21e64 <I2C_Read_Light>
   21854:	e0bfff85 	stb	r2,-2(fp)
    if(!bPass)  *data = 0;
   21858:	e0bfff83 	ldbu	r2,-2(fp)
   2185c:	1080005c 	xori	r2,r2,1
   21860:	10803fcc 	andi	r2,r2,255
   21864:	10000226 	beq	r2,zero,21870 <Light_GetTiming+0x4c>
   21868:	e0bffe17 	ldw	r2,-8(fp)
   2186c:	10000005 	stb	zero,0(r2)

}
   21870:	0001883a 	nop
   21874:	e037883a 	mov	sp,fp
   21878:	dfc00117 	ldw	ra,4(sp)
   2187c:	df000017 	ldw	fp,0(sp)
   21880:	dec00204 	addi	sp,sp,8
   21884:	f800283a 	ret

00021888 <Light_PowerSwitch>:

bool Light_PowerSwitch(bool bSwitch)
{
   21888:	defffc04 	addi	sp,sp,-16
   2188c:	dfc00315 	stw	ra,12(sp)
   21890:	df000215 	stw	fp,8(sp)
   21894:	df000204 	addi	fp,sp,8
   21898:	2005883a 	mov	r2,r4
   2189c:	e0bffe05 	stb	r2,-8(fp)
    bool bPass;
    alt_u8 data = 0;
   218a0:	e03fffc5 	stb	zero,-1(fp)
    alt_u8 CommandCode = COMMAND_CMD | CONTROL_REG ;
   218a4:	00bfe004 	movi	r2,-128
   218a8:	e0bfff85 	stb	r2,-2(fp)

    data = bSwitch ? 0x03 : 0x00 ;
   218ac:	e0bffe03 	ldbu	r2,-8(fp)
   218b0:	10000226 	beq	r2,zero,218bc <Light_PowerSwitch+0x34>
   218b4:	008000c4 	movi	r2,3
   218b8:	00000106 	br	218c0 <Light_PowerSwitch+0x38>
   218bc:	0005883a 	mov	r2,zero
   218c0:	e0bfffc5 	stb	r2,-1(fp)

    bPass = I2C_Write_Light( DEVICE_ADDR,CommandCode , data);
   218c4:	e0bfff83 	ldbu	r2,-2(fp)
   218c8:	e0ffffc3 	ldbu	r3,-1(fp)
   218cc:	180d883a 	mov	r6,r3
   218d0:	100b883a 	mov	r5,r2
   218d4:	01001484 	movi	r4,82
   218d8:	0021d700 	call	21d70 <I2C_Write_Light>
   218dc:	e0bfff45 	stb	r2,-3(fp)

    return bPass;
   218e0:	e0bfff43 	ldbu	r2,-3(fp)
}
   218e4:	e037883a 	mov	sp,fp
   218e8:	dfc00117 	ldw	ra,4(sp)
   218ec:	df000017 	ldw	fp,0(sp)
   218f0:	dec00204 	addi	sp,sp,8
   218f4:	f800283a 	ret

000218f8 <Light_Get_ADCData0>:

bool Light_Get_ADCData0(alt_u16 *pChannelData)
{
   218f8:	defffc04 	addi	sp,sp,-16
   218fc:	dfc00315 	stw	ra,12(sp)
   21900:	df000215 	stw	fp,8(sp)
   21904:	df000204 	addi	fp,sp,8
   21908:	e13ffe15 	stw	r4,-8(fp)
    bool bPass;
    alt_u8 Data0Low, Data0High;
    alt_u8 CommandCode = COMMAND_CMD |  DATA0LOW ;
   2190c:	00bfe304 	movi	r2,-116
   21910:	e0bfffc5 	stb	r2,-1(fp)
    //alt_u8 CommandCode = 0x8C;

    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0Low);
   21914:	e0bfffc3 	ldbu	r2,-1(fp)
   21918:	e0ffff44 	addi	r3,fp,-3
   2191c:	180d883a 	mov	r6,r3
   21920:	100b883a 	mov	r5,r2
   21924:	01001484 	movi	r4,82
   21928:	0021e640 	call	21e64 <I2C_Read_Light>
   2192c:	e0bfff85 	stb	r2,-2(fp)
    if(!bPass)
   21930:	e0bfff83 	ldbu	r2,-2(fp)
   21934:	1080005c 	xori	r2,r2,1
   21938:	10803fcc 	andi	r2,r2,255
   2193c:	10000226 	beq	r2,zero,21948 <Light_Get_ADCData0+0x50>
    {
         return FALSE;
   21940:	0005883a 	mov	r2,zero
   21944:	00002506 	br	219dc <Light_Get_ADCData0+0xe4>
    }
    else *pChannelData = Data0Low;
   21948:	e0bfff43 	ldbu	r2,-3(fp)
   2194c:	10c03fcc 	andi	r3,r2,255
   21950:	e0bffe17 	ldw	r2,-8(fp)
   21954:	10c0000d 	sth	r3,0(r2)

    if(bPass)
   21958:	e0bfff83 	ldbu	r2,-2(fp)
   2195c:	10001426 	beq	r2,zero,219b0 <Light_Get_ADCData0+0xb8>
    {
        CommandCode = COMMAND_CMD |  DATA0HIGH ;
   21960:	00bfe344 	movi	r2,-115
   21964:	e0bfffc5 	stb	r2,-1(fp)
        //CommandCode = 0x8D;

        bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0High);
   21968:	e0bfffc3 	ldbu	r2,-1(fp)
   2196c:	e0ffff04 	addi	r3,fp,-4
   21970:	180d883a 	mov	r6,r3
   21974:	100b883a 	mov	r5,r2
   21978:	01001484 	movi	r4,82
   2197c:	0021e640 	call	21e64 <I2C_Read_Light>
   21980:	e0bfff85 	stb	r2,-2(fp)
        if(!bPass)
   21984:	e0bfff83 	ldbu	r2,-2(fp)
   21988:	1080005c 	xori	r2,r2,1
   2198c:	10803fcc 	andi	r2,r2,255
   21990:	10000226 	beq	r2,zero,2199c <Light_Get_ADCData0+0xa4>
        {
            return FALSE;
   21994:	0005883a 	mov	r2,zero
   21998:	00001006 	br	219dc <Light_Get_ADCData0+0xe4>
        }
        else *(pChannelData+1) = Data0High;
   2199c:	e0ffff03 	ldbu	r3,-4(fp)
   219a0:	e0bffe17 	ldw	r2,-8(fp)
   219a4:	10800084 	addi	r2,r2,2
   219a8:	18c03fcc 	andi	r3,r3,255
   219ac:	10c0000d 	sth	r3,0(r2)
    }

    *pChannelData = (Data0High << 8) | Data0Low;
   219b0:	e0bfff03 	ldbu	r2,-4(fp)
   219b4:	10803fcc 	andi	r2,r2,255
   219b8:	1004923a 	slli	r2,r2,8
   219bc:	1007883a 	mov	r3,r2
   219c0:	e0bfff43 	ldbu	r2,-3(fp)
   219c4:	10803fcc 	andi	r2,r2,255
   219c8:	1884b03a 	or	r2,r3,r2
   219cc:	1007883a 	mov	r3,r2
   219d0:	e0bffe17 	ldw	r2,-8(fp)
   219d4:	10c0000d 	sth	r3,0(r2)

    return TRUE;
   219d8:	00800044 	movi	r2,1
}
   219dc:	e037883a 	mov	sp,fp
   219e0:	dfc00117 	ldw	ra,4(sp)
   219e4:	df000017 	ldw	fp,0(sp)
   219e8:	dec00204 	addi	sp,sp,8
   219ec:	f800283a 	ret

000219f0 <Light_Get_ADCData1>:

bool Light_Get_ADCData1(alt_u16 *pChannelData)
{
   219f0:	defffc04 	addi	sp,sp,-16
   219f4:	dfc00315 	stw	ra,12(sp)
   219f8:	df000215 	stw	fp,8(sp)
   219fc:	df000204 	addi	fp,sp,8
   21a00:	e13ffe15 	stw	r4,-8(fp)
    bool bPass;
    alt_u8 Data1Low, Data1High;
    alt_u8 CommandCode = COMMAND_CMD |  DATA1LOW ;
   21a04:	00bfe384 	movi	r2,-114
   21a08:	e0bfffc5 	stb	r2,-1(fp)

    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data1Low);
   21a0c:	e0bfffc3 	ldbu	r2,-1(fp)
   21a10:	e0ffff44 	addi	r3,fp,-3
   21a14:	180d883a 	mov	r6,r3
   21a18:	100b883a 	mov	r5,r2
   21a1c:	01001484 	movi	r4,82
   21a20:	0021e640 	call	21e64 <I2C_Read_Light>
   21a24:	e0bfff85 	stb	r2,-2(fp)
    if(!bPass)
   21a28:	e0bfff83 	ldbu	r2,-2(fp)
   21a2c:	1080005c 	xori	r2,r2,1
   21a30:	10803fcc 	andi	r2,r2,255
   21a34:	10000226 	beq	r2,zero,21a40 <Light_Get_ADCData1+0x50>
    {
         return FALSE;
   21a38:	0005883a 	mov	r2,zero
   21a3c:	00002506 	br	21ad4 <Light_Get_ADCData1+0xe4>
    }
    else *pChannelData = Data1Low;
   21a40:	e0bfff43 	ldbu	r2,-3(fp)
   21a44:	10c03fcc 	andi	r3,r2,255
   21a48:	e0bffe17 	ldw	r2,-8(fp)
   21a4c:	10c0000d 	sth	r3,0(r2)

    if(bPass)
   21a50:	e0bfff83 	ldbu	r2,-2(fp)
   21a54:	10001426 	beq	r2,zero,21aa8 <Light_Get_ADCData1+0xb8>
    {
        CommandCode = COMMAND_CMD |  DATA1HIGH ;
   21a58:	00bfe3c4 	movi	r2,-113
   21a5c:	e0bfffc5 	stb	r2,-1(fp)

        bPass = I2C_Read_Light(DEVICE_ADDR,CommandCode , &Data1High);
   21a60:	e0bfffc3 	ldbu	r2,-1(fp)
   21a64:	e0ffff04 	addi	r3,fp,-4
   21a68:	180d883a 	mov	r6,r3
   21a6c:	100b883a 	mov	r5,r2
   21a70:	01001484 	movi	r4,82
   21a74:	0021e640 	call	21e64 <I2C_Read_Light>
   21a78:	e0bfff85 	stb	r2,-2(fp)
        if(!bPass)
   21a7c:	e0bfff83 	ldbu	r2,-2(fp)
   21a80:	1080005c 	xori	r2,r2,1
   21a84:	10803fcc 	andi	r2,r2,255
   21a88:	10000226 	beq	r2,zero,21a94 <Light_Get_ADCData1+0xa4>
        {
            return FALSE;
   21a8c:	0005883a 	mov	r2,zero
   21a90:	00001006 	br	21ad4 <Light_Get_ADCData1+0xe4>
        }
        else *(pChannelData+1) = Data1High;
   21a94:	e0ffff03 	ldbu	r3,-4(fp)
   21a98:	e0bffe17 	ldw	r2,-8(fp)
   21a9c:	10800084 	addi	r2,r2,2
   21aa0:	18c03fcc 	andi	r3,r3,255
   21aa4:	10c0000d 	sth	r3,0(r2)
    }

    *pChannelData = (Data1High << 8) | Data1Low;
   21aa8:	e0bfff03 	ldbu	r2,-4(fp)
   21aac:	10803fcc 	andi	r2,r2,255
   21ab0:	1004923a 	slli	r2,r2,8
   21ab4:	1007883a 	mov	r3,r2
   21ab8:	e0bfff43 	ldbu	r2,-3(fp)
   21abc:	10803fcc 	andi	r2,r2,255
   21ac0:	1884b03a 	or	r2,r3,r2
   21ac4:	1007883a 	mov	r3,r2
   21ac8:	e0bffe17 	ldw	r2,-8(fp)
   21acc:	10c0000d 	sth	r3,0(r2)

    return TRUE;
   21ad0:	00800044 	movi	r2,1
}
   21ad4:	e037883a 	mov	sp,fp
   21ad8:	dfc00117 	ldw	ra,4(sp)
   21adc:	df000017 	ldw	fp,0(sp)
   21ae0:	dec00204 	addi	sp,sp,8
   21ae4:	f800283a 	ret

00021ae8 <Get_light>:

bool Get_light(alt_u16 *light0, alt_u16 *light1)
{
   21ae8:	defffa04 	addi	sp,sp,-24
   21aec:	dfc00515 	stw	ra,20(sp)
   21af0:	df000415 	stw	fp,16(sp)
   21af4:	df000404 	addi	fp,sp,16
   21af8:	e13ffd15 	stw	r4,-12(fp)
   21afc:	e17ffc15 	stw	r5,-16(fp)
    bool bPass = FALSE;
   21b00:	e03fffc5 	stb	zero,-1(fp)
    alt_u8 device_Id = 0;
   21b04:	e03fff85 	stb	zero,-2(fp)

    alt_u16 ChannelData0;
    alt_u16 ChannelData1;

    //get light sensor Id
    Light_GetID(&device_Id);
   21b08:	e0bfff84 	addi	r2,fp,-2
   21b0c:	1009883a 	mov	r4,r2
   21b10:	00217c00 	call	217c0 <Light_GetID>
    if(device_Id == 0)
   21b14:	e0bfff83 	ldbu	r2,-2(fp)
   21b18:	10803fcc 	andi	r2,r2,255
   21b1c:	1000051e 	bne	r2,zero,21b34 <Get_light+0x4c>
    {
        printf("read id fail \n");
   21b20:	01000134 	movhi	r4,4
   21b24:	21210b04 	addi	r4,r4,-31700
   21b28:	002aa480 	call	2aa48 <puts>
        return FALSE;
   21b2c:	0005883a 	mov	r2,zero
   21b30:	00002106 	br	21bb8 <Get_light+0xd0>
    	//printf("Light Sensor ID=%xh\r\n", device_Id); //
    }


    //get adc channel 0 data
    bPass = Light_Get_ADCData0(&ChannelData0);
   21b34:	e0bfff04 	addi	r2,fp,-4
   21b38:	1009883a 	mov	r4,r2
   21b3c:	00218f80 	call	218f8 <Light_Get_ADCData0>
   21b40:	e0bfffc5 	stb	r2,-1(fp)
    if(!bPass)
   21b44:	e0bfffc3 	ldbu	r2,-1(fp)
   21b48:	1080005c 	xori	r2,r2,1
   21b4c:	10803fcc 	andi	r2,r2,255
   21b50:	10000526 	beq	r2,zero,21b68 <Get_light+0x80>
    {
        printf("Get ADC Channle 0 data fail \n");
   21b54:	01000134 	movhi	r4,4
   21b58:	21210f04 	addi	r4,r4,-31684
   21b5c:	002aa480 	call	2aa48 <puts>
        return FALSE;
   21b60:	0005883a 	mov	r2,zero
   21b64:	00001406 	br	21bb8 <Get_light+0xd0>
    }
    *light0 = ChannelData0;
   21b68:	e0ffff0b 	ldhu	r3,-4(fp)
   21b6c:	e0bffd17 	ldw	r2,-12(fp)
   21b70:	10c0000d 	sth	r3,0(r2)

    //get adc channel 1 data
    bPass = Light_Get_ADCData1(&ChannelData1);
   21b74:	e0bffe84 	addi	r2,fp,-6
   21b78:	1009883a 	mov	r4,r2
   21b7c:	00219f00 	call	219f0 <Light_Get_ADCData1>
   21b80:	e0bfffc5 	stb	r2,-1(fp)
    if(!bPass)
   21b84:	e0bfffc3 	ldbu	r2,-1(fp)
   21b88:	1080005c 	xori	r2,r2,1
   21b8c:	10803fcc 	andi	r2,r2,255
   21b90:	10000526 	beq	r2,zero,21ba8 <Get_light+0xc0>
    {
        printf("Get ADC Channle 1 data fail \n");
   21b94:	01000134 	movhi	r4,4
   21b98:	21211704 	addi	r4,r4,-31652
   21b9c:	002aa480 	call	2aa48 <puts>
        return FALSE;
   21ba0:	0005883a 	mov	r2,zero
   21ba4:	00000406 	br	21bb8 <Get_light+0xd0>
    }
    *light1 = ChannelData1;
   21ba8:	e0fffe8b 	ldhu	r3,-6(fp)
   21bac:	e0bffc17 	ldw	r2,-16(fp)
   21bb0:	10c0000d 	sth	r3,0(r2)
    return TRUE;
   21bb4:	00800044 	movi	r2,1
}
   21bb8:	e037883a 	mov	sp,fp
   21bbc:	dfc00117 	ldw	ra,4(sp)
   21bc0:	df000017 	ldw	fp,0(sp)
   21bc4:	dec00204 	addi	sp,sp,8
   21bc8:	f800283a 	ret

00021bcc <Light_SetThreshLow>:


bool Light_SetThreshLow(alt_u8 *pData)
{
   21bcc:	defffc04 	addi	sp,sp,-16
   21bd0:	dfc00315 	stw	ra,12(sp)
   21bd4:	df000215 	stw	fp,8(sp)
   21bd8:	df000204 	addi	fp,sp,8
   21bdc:	e13ffe15 	stw	r4,-8(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | COMMAND_WORD | THRESHLOWLOW_REG ;
   21be0:	00bfe884 	movi	r2,-94
   21be4:	e0bfffc5 	stb	r2,-1(fp)

    bPass = I2C_Write_Light16( DEVICE_ADDR, CommandCode, pData);
   21be8:	e0bfffc3 	ldbu	r2,-1(fp)
   21bec:	e1bffe17 	ldw	r6,-8(fp)
   21bf0:	100b883a 	mov	r5,r2
   21bf4:	01001484 	movi	r4,82
   21bf8:	0021df00 	call	21df0 <I2C_Write_Light16>
   21bfc:	e0bfff85 	stb	r2,-2(fp)
//
//        data = *(pData+1);
//        bPass = I2C_Write_Light(LIGHT_SENSOR_SCL_BASE, LIGHT_SENSOR_SDA_BASE, DEVICE_ADDR,CommandCode , data);
//    }

    return bPass;
   21c00:	e0bfff83 	ldbu	r2,-2(fp)
}
   21c04:	e037883a 	mov	sp,fp
   21c08:	dfc00117 	ldw	ra,4(sp)
   21c0c:	df000017 	ldw	fp,0(sp)
   21c10:	dec00204 	addi	sp,sp,8
   21c14:	f800283a 	ret

00021c18 <Light_SetThreshHigh>:

bool Light_SetThreshHigh(alt_u8 *pData)
{
   21c18:	defffc04 	addi	sp,sp,-16
   21c1c:	dfc00315 	stw	ra,12(sp)
   21c20:	df000215 	stw	fp,8(sp)
   21c24:	df000204 	addi	fp,sp,8
   21c28:	e13ffe15 	stw	r4,-8(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | COMMAND_WORD | THRESHHIGHLOW_REG ;
   21c2c:	00bfe904 	movi	r2,-92
   21c30:	e0bfffc5 	stb	r2,-1(fp)

    bPass = I2C_Write_Light16( DEVICE_ADDR, CommandCode, pData);
   21c34:	e0bfffc3 	ldbu	r2,-1(fp)
   21c38:	e1bffe17 	ldw	r6,-8(fp)
   21c3c:	100b883a 	mov	r5,r2
   21c40:	01001484 	movi	r4,82
   21c44:	0021df00 	call	21df0 <I2C_Write_Light16>
   21c48:	e0bfff85 	stb	r2,-2(fp)
//
//        data = *(pData+1);
//        bPass = I2C_Write_Light(LIGHT_SENSOR_SCL_BASE, LIGHT_SENSOR_SDA_BASE, DEVICE_ADDR,CommandCode , data);
//    }

    return bPass;
   21c4c:	e0bfff83 	ldbu	r2,-2(fp)
}
   21c50:	e037883a 	mov	sp,fp
   21c54:	dfc00117 	ldw	ra,4(sp)
   21c58:	df000017 	ldw	fp,0(sp)
   21c5c:	dec00204 	addi	sp,sp,8
   21c60:	f800283a 	ret

00021c64 <Light_SetInterrupt>:

bool Light_SetInterrupt(alt_u8 data)
{
   21c64:	defffc04 	addi	sp,sp,-16
   21c68:	dfc00315 	stw	ra,12(sp)
   21c6c:	df000215 	stw	fp,8(sp)
   21c70:	df000204 	addi	fp,sp,8
   21c74:	2005883a 	mov	r2,r4
   21c78:	e0bffe05 	stb	r2,-8(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | INTERRUPT_REG ;
   21c7c:	00bfe184 	movi	r2,-122
   21c80:	e0bfffc5 	stb	r2,-1(fp)

    bPass = I2C_Write_Light(DEVICE_ADDR,CommandCode , data);
   21c84:	e0bfffc3 	ldbu	r2,-1(fp)
   21c88:	e0fffe03 	ldbu	r3,-8(fp)
   21c8c:	180d883a 	mov	r6,r3
   21c90:	100b883a 	mov	r5,r2
   21c94:	01001484 	movi	r4,82
   21c98:	0021d700 	call	21d70 <I2C_Write_Light>
   21c9c:	e0bfff85 	stb	r2,-2(fp)

    return bPass;
   21ca0:	e0bfff83 	ldbu	r2,-2(fp)
}
   21ca4:	e037883a 	mov	sp,fp
   21ca8:	dfc00117 	ldw	ra,4(sp)
   21cac:	df000017 	ldw	fp,0(sp)
   21cb0:	dec00204 	addi	sp,sp,8
   21cb4:	f800283a 	ret

00021cb8 <Light_GetInterrupt>:

void Light_GetInterrupt(alt_u8 *data)
{
   21cb8:	defffc04 	addi	sp,sp,-16
   21cbc:	dfc00315 	stw	ra,12(sp)
   21cc0:	df000215 	stw	fp,8(sp)
   21cc4:	df000204 	addi	fp,sp,8
   21cc8:	e13ffe15 	stw	r4,-8(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | INTERRUPT_REG ;
   21ccc:	00bfe184 	movi	r2,-122
   21cd0:	e0bfffc5 	stb	r2,-1(fp)
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
   21cd4:	e0bfffc3 	ldbu	r2,-1(fp)
   21cd8:	e1bffe17 	ldw	r6,-8(fp)
   21cdc:	100b883a 	mov	r5,r2
   21ce0:	01001484 	movi	r4,82
   21ce4:	0021e640 	call	21e64 <I2C_Read_Light>
   21ce8:	e0bfff85 	stb	r2,-2(fp)
    if(!bPass)  *data = 0;
   21cec:	e0bfff83 	ldbu	r2,-2(fp)
   21cf0:	1080005c 	xori	r2,r2,1
   21cf4:	10803fcc 	andi	r2,r2,255
   21cf8:	10000226 	beq	r2,zero,21d04 <Light_GetInterrupt+0x4c>
   21cfc:	e0bffe17 	ldw	r2,-8(fp)
   21d00:	10000005 	stb	zero,0(r2)
}
   21d04:	0001883a 	nop
   21d08:	e037883a 	mov	sp,fp
   21d0c:	dfc00117 	ldw	ra,4(sp)
   21d10:	df000017 	ldw	fp,0(sp)
   21d14:	dec00204 	addi	sp,sp,8
   21d18:	f800283a 	ret

00021d1c <Light_SetTiming>:

bool Light_SetTiming(alt_u8 data)
{
   21d1c:	defffc04 	addi	sp,sp,-16
   21d20:	dfc00315 	stw	ra,12(sp)
   21d24:	df000215 	stw	fp,8(sp)
   21d28:	df000204 	addi	fp,sp,8
   21d2c:	2005883a 	mov	r2,r4
   21d30:	e0bffe05 	stb	r2,-8(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | TIMING_REG ;
   21d34:	00bfe044 	movi	r2,-127
   21d38:	e0bfffc5 	stb	r2,-1(fp)

    bPass = I2C_Write_Light( DEVICE_ADDR,CommandCode , data);
   21d3c:	e0bfffc3 	ldbu	r2,-1(fp)
   21d40:	e0fffe03 	ldbu	r3,-8(fp)
   21d44:	180d883a 	mov	r6,r3
   21d48:	100b883a 	mov	r5,r2
   21d4c:	01001484 	movi	r4,82
   21d50:	0021d700 	call	21d70 <I2C_Write_Light>
   21d54:	e0bfff85 	stb	r2,-2(fp)

    return bPass;
   21d58:	e0bfff83 	ldbu	r2,-2(fp)
}
   21d5c:	e037883a 	mov	sp,fp
   21d60:	dfc00117 	ldw	ra,4(sp)
   21d64:	df000017 	ldw	fp,0(sp)
   21d68:	dec00204 	addi	sp,sp,8
   21d6c:	f800283a 	ret

00021d70 <I2C_Write_Light>:

/////////////////////////////////////////////
// internal
////////////////light sensor
bool I2C_Write_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 ControlData){
   21d70:	defff904 	addi	sp,sp,-28
   21d74:	dfc00615 	stw	ra,24(sp)
   21d78:	df000515 	stw	fp,20(sp)
   21d7c:	df000504 	addi	fp,sp,20
   21d80:	2005883a 	mov	r2,r4
   21d84:	2809883a 	mov	r4,r5
   21d88:	3007883a 	mov	r3,r6
   21d8c:	e0bffe05 	stb	r2,-8(fp)
   21d90:	2005883a 	mov	r2,r4
   21d94:	e0bffd05 	stb	r2,-12(fp)
   21d98:	1805883a 	mov	r2,r3
   21d9c:	e0bffc05 	stb	r2,-16(fp)
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, &ControlData, 1);
   21da0:	d0a00217 	ldw	r2,-32760(gp)
   21da4:	1011883a 	mov	r8,r2
   21da8:	e0bffe03 	ldbu	r2,-8(fp)
   21dac:	10c03fcc 	andi	r3,r2,255
   21db0:	e13ffd03 	ldbu	r4,-12(fp)
   21db4:	e17ffc04 	addi	r5,fp,-16
   21db8:	00800044 	movi	r2,1
   21dbc:	d8800015 	stw	r2,0(sp)
   21dc0:	280f883a 	mov	r7,r5
   21dc4:	200d883a 	mov	r6,r4
   21dc8:	180b883a 	mov	r5,r3
   21dcc:	4009883a 	mov	r4,r8
   21dd0:	0020b000 	call	20b00 <OC_I2C_Write>
   21dd4:	e0bfffc5 	stb	r2,-1(fp)

    return bSuccess;
   21dd8:	e0bfffc3 	ldbu	r2,-1(fp)


}
   21ddc:	e037883a 	mov	sp,fp
   21de0:	dfc00117 	ldw	ra,4(sp)
   21de4:	df000017 	ldw	fp,0(sp)
   21de8:	dec00204 	addi	sp,sp,8
   21dec:	f800283a 	ret

00021df0 <I2C_Write_Light16>:

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
   21df0:	defff904 	addi	sp,sp,-28
   21df4:	dfc00615 	stw	ra,24(sp)
   21df8:	df000515 	stw	fp,20(sp)
   21dfc:	df000504 	addi	fp,sp,20
   21e00:	2005883a 	mov	r2,r4
   21e04:	2807883a 	mov	r3,r5
   21e08:	e1bffc15 	stw	r6,-16(fp)
   21e0c:	e0bffe05 	stb	r2,-8(fp)
   21e10:	1805883a 	mov	r2,r3
   21e14:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
   21e18:	d0a00217 	ldw	r2,-32760(gp)
   21e1c:	1011883a 	mov	r8,r2
   21e20:	e0bffe03 	ldbu	r2,-8(fp)
   21e24:	10c03fcc 	andi	r3,r2,255
   21e28:	e13ffd03 	ldbu	r4,-12(fp)
   21e2c:	00800084 	movi	r2,2
   21e30:	d8800015 	stw	r2,0(sp)
   21e34:	e1fffc17 	ldw	r7,-16(fp)
   21e38:	200d883a 	mov	r6,r4
   21e3c:	180b883a 	mov	r5,r3
   21e40:	4009883a 	mov	r4,r8
   21e44:	0020b000 	call	20b00 <OC_I2C_Write>
   21e48:	e0bfffc5 	stb	r2,-1(fp)

    return bSuccess;
   21e4c:	e0bfffc3 	ldbu	r2,-1(fp)


}
   21e50:	e037883a 	mov	sp,fp
   21e54:	dfc00117 	ldw	ra,4(sp)
   21e58:	df000017 	ldw	fp,0(sp)
   21e5c:	dec00204 	addi	sp,sp,8
   21e60:	f800283a 	ret

00021e64 <I2C_Read_Light>:

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
   21e64:	defff904 	addi	sp,sp,-28
   21e68:	dfc00615 	stw	ra,24(sp)
   21e6c:	df000515 	stw	fp,20(sp)
   21e70:	df000504 	addi	fp,sp,20
   21e74:	2005883a 	mov	r2,r4
   21e78:	2807883a 	mov	r3,r5
   21e7c:	e1bffc15 	stw	r6,-16(fp)
   21e80:	e0bffe05 	stb	r2,-8(fp)
   21e84:	1805883a 	mov	r2,r3
   21e88:	e0bffd05 	stb	r2,-12(fp)
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
   21e8c:	d0a00217 	ldw	r2,-32760(gp)
   21e90:	1011883a 	mov	r8,r2
   21e94:	e0bffe03 	ldbu	r2,-8(fp)
   21e98:	10c03fcc 	andi	r3,r2,255
   21e9c:	e13ffd03 	ldbu	r4,-12(fp)
   21ea0:	00800044 	movi	r2,1
   21ea4:	d8800015 	stw	r2,0(sp)
   21ea8:	e1fffc17 	ldw	r7,-16(fp)
   21eac:	200d883a 	mov	r6,r4
   21eb0:	180b883a 	mov	r5,r3
   21eb4:	4009883a 	mov	r4,r8
   21eb8:	0020db40 	call	20db4 <OC_I2C_Read>
   21ebc:	e0bfffc5 	stb	r2,-1(fp)

    return bSuccess;
   21ec0:	e0bfffc3 	ldbu	r2,-1(fp)
}
   21ec4:	e037883a 	mov	sp,fp
   21ec8:	dfc00117 	ldw	ra,4(sp)
   21ecc:	df000017 	ldw	fp,0(sp)
   21ed0:	dec00204 	addi	sp,sp,8
   21ed4:	f800283a 	ret

00021ed8 <convert_light_lux>:
static struct {
	unsigned int adc[3][2];
	float co[2];
}custom_thresh;

bool convert_light_lux(int light0, int light1, float *lux) {
   21ed8:	defff604 	addi	sp,sp,-40
   21edc:	dfc00915 	stw	ra,36(sp)
   21ee0:	df000815 	stw	fp,32(sp)
   21ee4:	dcc00715 	stw	r19,28(sp)
   21ee8:	dc800615 	stw	r18,24(sp)
   21eec:	dc400515 	stw	r17,20(sp)
   21ef0:	dc000415 	stw	r16,16(sp)
   21ef4:	df000804 	addi	fp,sp,32
   21ef8:	e13ffa15 	stw	r4,-24(fp)
   21efc:	e17ff915 	stw	r5,-28(fp)
   21f00:	e1bff815 	stw	r6,-32(fp)
	float condition = (float) light1 / (float) light0;
   21f04:	e13ff917 	ldw	r4,-28(fp)
   21f08:	0027f000 	call	27f00 <__floatsisf>
   21f0c:	1021883a 	mov	r16,r2
   21f10:	e13ffa17 	ldw	r4,-24(fp)
   21f14:	0027f000 	call	27f00 <__floatsisf>
   21f18:	1007883a 	mov	r3,r2
   21f1c:	180b883a 	mov	r5,r3
   21f20:	8009883a 	mov	r4,r16
   21f24:	0026fe00 	call	26fe0 <__divsf3>
   21f28:	1007883a 	mov	r3,r2
   21f2c:	e0fffb15 	stw	r3,-20(fp)
	if (0 < condition && condition <= 0.50)
   21f30:	000b883a 	mov	r5,zero
   21f34:	e13ffb17 	ldw	r4,-20(fp)
   21f38:	00274440 	call	27444 <__gesf2>
   21f3c:	0080440e 	bge	zero,r2,22050 <convert_light_lux+0x178>
   21f40:	014fc034 	movhi	r5,16128
   21f44:	e13ffb17 	ldw	r4,-20(fp)
   21f48:	00274fc0 	call	274fc <__lesf2>
   21f4c:	00804016 	blt	zero,r2,22050 <convert_light_lux+0x178>
		*lux = (0.0304 * light0) - (0.062 * light0 * powf(condition, 1.4));
   21f50:	e13ffa17 	ldw	r4,-24(fp)
   21f54:	002a5700 	call	2a570 <__floatsidf>
   21f58:	1011883a 	mov	r8,r2
   21f5c:	1813883a 	mov	r9,r3
   21f60:	019dccb4 	movhi	r6,30514
   21f64:	31a3f144 	addi	r6,r6,-28731
   21f68:	01cfe7f4 	movhi	r7,16287
   21f6c:	39c84b44 	addi	r7,r7,8493
   21f70:	4009883a 	mov	r4,r8
   21f74:	480b883a 	mov	r5,r9
   21f78:	00295100 	call	29510 <__muldf3>
   21f7c:	1009883a 	mov	r4,r2
   21f80:	180b883a 	mov	r5,r3
   21f84:	2021883a 	mov	r16,r4
   21f88:	2823883a 	mov	r17,r5
   21f8c:	e13ffa17 	ldw	r4,-24(fp)
   21f90:	002a5700 	call	2a570 <__floatsidf>
   21f94:	1011883a 	mov	r8,r2
   21f98:	1813883a 	mov	r9,r3
   21f9c:	01b22d34 	movhi	r6,51380
   21fa0:	318e5604 	addi	r6,r6,14680
   21fa4:	01cfec34 	movhi	r7,16304
   21fa8:	39ef9d84 	addi	r7,r7,-16778
   21fac:	4009883a 	mov	r4,r8
   21fb0:	480b883a 	mov	r5,r9
   21fb4:	00295100 	call	29510 <__muldf3>
   21fb8:	1009883a 	mov	r4,r2
   21fbc:	180b883a 	mov	r5,r3
   21fc0:	2025883a 	mov	r18,r4
   21fc4:	2827883a 	mov	r19,r5
   21fc8:	014fecf4 	movhi	r5,16307
   21fcc:	294cccc4 	addi	r5,r5,13107
   21fd0:	e13ffb17 	ldw	r4,-20(fp)
   21fd4:	002583c0 	call	2583c <powf>
   21fd8:	1007883a 	mov	r3,r2
   21fdc:	1809883a 	mov	r4,r3
   21fe0:	002a6280 	call	2a628 <__extendsfdf2>
   21fe4:	1009883a 	mov	r4,r2
   21fe8:	180b883a 	mov	r5,r3
   21fec:	200d883a 	mov	r6,r4
   21ff0:	280f883a 	mov	r7,r5
   21ff4:	9009883a 	mov	r4,r18
   21ff8:	980b883a 	mov	r5,r19
   21ffc:	00295100 	call	29510 <__muldf3>
   22000:	1009883a 	mov	r4,r2
   22004:	180b883a 	mov	r5,r3
   22008:	2005883a 	mov	r2,r4
   2200c:	2807883a 	mov	r3,r5
   22010:	100d883a 	mov	r6,r2
   22014:	180f883a 	mov	r7,r3
   22018:	8009883a 	mov	r4,r16
   2201c:	880b883a 	mov	r5,r17
   22020:	0029cbc0 	call	29cbc <__subdf3>
   22024:	1009883a 	mov	r4,r2
   22028:	180b883a 	mov	r5,r3
   2202c:	2005883a 	mov	r2,r4
   22030:	2807883a 	mov	r3,r5
   22034:	1009883a 	mov	r4,r2
   22038:	180b883a 	mov	r5,r3
   2203c:	002a7240 	call	2a724 <__truncdfsf2>
   22040:	1007883a 	mov	r3,r2
   22044:	e0bff817 	ldw	r2,-32(fp)
   22048:	10c00015 	stw	r3,0(r2)
   2204c:	0000cc06 	br	22380 <convert_light_lux+0x4a8>
	else if (0.50 < condition && condition <= 0.61)
   22050:	014fc034 	movhi	r5,16128
   22054:	e13ffb17 	ldw	r4,-20(fp)
   22058:	00274440 	call	27444 <__gesf2>
   2205c:	00803a0e 	bge	zero,r2,22148 <convert_light_lux+0x270>
   22060:	e13ffb17 	ldw	r4,-20(fp)
   22064:	002a6280 	call	2a628 <__extendsfdf2>
   22068:	1011883a 	mov	r8,r2
   2206c:	1813883a 	mov	r9,r3
   22070:	01ae14b4 	movhi	r6,47186
   22074:	31bae144 	addi	r6,r6,-5243
   22078:	01cff934 	movhi	r7,16356
   2207c:	39e14784 	addi	r7,r7,-31458
   22080:	4009883a 	mov	r4,r8
   22084:	480b883a 	mov	r5,r9
   22088:	00294280 	call	29428 <__ledf2>
   2208c:	00802e16 	blt	zero,r2,22148 <convert_light_lux+0x270>
		*lux = (0.0224 * light0) - (0.031 * light1);
   22090:	e13ffa17 	ldw	r4,-24(fp)
   22094:	002a5700 	call	2a570 <__floatsidf>
   22098:	1011883a 	mov	r8,r2
   2209c:	1813883a 	mov	r9,r3
   220a0:	01a36e74 	movhi	r6,36281
   220a4:	31aeb1c4 	addi	r6,r6,-17721
   220a8:	01cfe5f4 	movhi	r7,16279
   220ac:	39fc0184 	addi	r7,r7,-4090
   220b0:	4009883a 	mov	r4,r8
   220b4:	480b883a 	mov	r5,r9
   220b8:	00295100 	call	29510 <__muldf3>
   220bc:	1009883a 	mov	r4,r2
   220c0:	180b883a 	mov	r5,r3
   220c4:	2021883a 	mov	r16,r4
   220c8:	2823883a 	mov	r17,r5
   220cc:	e13ff917 	ldw	r4,-28(fp)
   220d0:	002a5700 	call	2a570 <__floatsidf>
   220d4:	1011883a 	mov	r8,r2
   220d8:	1813883a 	mov	r9,r3
   220dc:	01b22d34 	movhi	r6,51380
   220e0:	318e5604 	addi	r6,r6,14680
   220e4:	01cfe834 	movhi	r7,16288
   220e8:	39ef9d84 	addi	r7,r7,-16778
   220ec:	4009883a 	mov	r4,r8
   220f0:	480b883a 	mov	r5,r9
   220f4:	00295100 	call	29510 <__muldf3>
   220f8:	1009883a 	mov	r4,r2
   220fc:	180b883a 	mov	r5,r3
   22100:	2005883a 	mov	r2,r4
   22104:	2807883a 	mov	r3,r5
   22108:	100d883a 	mov	r6,r2
   2210c:	180f883a 	mov	r7,r3
   22110:	8009883a 	mov	r4,r16
   22114:	880b883a 	mov	r5,r17
   22118:	0029cbc0 	call	29cbc <__subdf3>
   2211c:	1009883a 	mov	r4,r2
   22120:	180b883a 	mov	r5,r3
   22124:	2005883a 	mov	r2,r4
   22128:	2807883a 	mov	r3,r5
   2212c:	1009883a 	mov	r4,r2
   22130:	180b883a 	mov	r5,r3
   22134:	002a7240 	call	2a724 <__truncdfsf2>
   22138:	1007883a 	mov	r3,r2
   2213c:	e0bff817 	ldw	r2,-32(fp)
   22140:	10c00015 	stw	r3,0(r2)
   22144:	00008e06 	br	22380 <convert_light_lux+0x4a8>
	else if (0.61 < condition && condition <= 0.80)
   22148:	e13ffb17 	ldw	r4,-20(fp)
   2214c:	002a6280 	call	2a628 <__extendsfdf2>
   22150:	1011883a 	mov	r8,r2
   22154:	1813883a 	mov	r9,r3
   22158:	01ae14b4 	movhi	r6,47186
   2215c:	31bae144 	addi	r6,r6,-5243
   22160:	01cff934 	movhi	r7,16356
   22164:	39e14784 	addi	r7,r7,-31458
   22168:	4009883a 	mov	r4,r8
   2216c:	480b883a 	mov	r5,r9
   22170:	00293400 	call	29340 <__gedf2>
   22174:	00803a0e 	bge	zero,r2,22260 <convert_light_lux+0x388>
   22178:	e13ffb17 	ldw	r4,-20(fp)
   2217c:	002a6280 	call	2a628 <__extendsfdf2>
   22180:	1011883a 	mov	r8,r2
   22184:	1813883a 	mov	r9,r3
   22188:	01a666b4 	movhi	r6,39322
   2218c:	31a66684 	addi	r6,r6,-26214
   22190:	01cffab4 	movhi	r7,16362
   22194:	39e66644 	addi	r7,r7,-26215
   22198:	4009883a 	mov	r4,r8
   2219c:	480b883a 	mov	r5,r9
   221a0:	00294280 	call	29428 <__ledf2>
   221a4:	00802e16 	blt	zero,r2,22260 <convert_light_lux+0x388>
		*lux = (0.0128 * light0) - (0.0153 * light1);
   221a8:	e13ffa17 	ldw	r4,-24(fp)
   221ac:	002a5700 	call	2a570 <__floatsidf>
   221b0:	1011883a 	mov	r8,r2
   221b4:	1813883a 	mov	r9,r3
   221b8:	01bac734 	movhi	r6,60188
   221bc:	3190cb44 	addi	r6,r6,17197
   221c0:	01cfe2b4 	movhi	r7,16266
   221c4:	39cdb884 	addi	r7,r7,14050
   221c8:	4009883a 	mov	r4,r8
   221cc:	480b883a 	mov	r5,r9
   221d0:	00295100 	call	29510 <__muldf3>
   221d4:	1009883a 	mov	r4,r2
   221d8:	180b883a 	mov	r5,r3
   221dc:	2021883a 	mov	r16,r4
   221e0:	2823883a 	mov	r17,r5
   221e4:	e13ff917 	ldw	r4,-28(fp)
   221e8:	002a5700 	call	2a570 <__floatsidf>
   221ec:	1011883a 	mov	r8,r2
   221f0:	1813883a 	mov	r9,r3
   221f4:	018f4234 	movhi	r6,15624
   221f8:	31b212c4 	addi	r6,r6,-14261
   221fc:	01cfe3f4 	movhi	r7,16271
   22200:	39d566c4 	addi	r7,r7,21915
   22204:	4009883a 	mov	r4,r8
   22208:	480b883a 	mov	r5,r9
   2220c:	00295100 	call	29510 <__muldf3>
   22210:	1009883a 	mov	r4,r2
   22214:	180b883a 	mov	r5,r3
   22218:	2005883a 	mov	r2,r4
   2221c:	2807883a 	mov	r3,r5
   22220:	100d883a 	mov	r6,r2
   22224:	180f883a 	mov	r7,r3
   22228:	8009883a 	mov	r4,r16
   2222c:	880b883a 	mov	r5,r17
   22230:	0029cbc0 	call	29cbc <__subdf3>
   22234:	1009883a 	mov	r4,r2
   22238:	180b883a 	mov	r5,r3
   2223c:	2005883a 	mov	r2,r4
   22240:	2807883a 	mov	r3,r5
   22244:	1009883a 	mov	r4,r2
   22248:	180b883a 	mov	r5,r3
   2224c:	002a7240 	call	2a724 <__truncdfsf2>
   22250:	1007883a 	mov	r3,r2
   22254:	e0bff817 	ldw	r2,-32(fp)
   22258:	10c00015 	stw	r3,0(r2)
   2225c:	00004806 	br	22380 <convert_light_lux+0x4a8>
	else if (0.80 < condition && condition <= 1.30)
   22260:	e13ffb17 	ldw	r4,-20(fp)
   22264:	002a6280 	call	2a628 <__extendsfdf2>
   22268:	1011883a 	mov	r8,r2
   2226c:	1813883a 	mov	r9,r3
   22270:	01a666b4 	movhi	r6,39322
   22274:	31a66684 	addi	r6,r6,-26214
   22278:	01cffab4 	movhi	r7,16362
   2227c:	39e66644 	addi	r7,r7,-26215
   22280:	4009883a 	mov	r4,r8
   22284:	480b883a 	mov	r5,r9
   22288:	00293400 	call	29340 <__gedf2>
   2228c:	00803a0e 	bge	zero,r2,22378 <convert_light_lux+0x4a0>
   22290:	e13ffb17 	ldw	r4,-20(fp)
   22294:	002a6280 	call	2a628 <__extendsfdf2>
   22298:	1011883a 	mov	r8,r2
   2229c:	1813883a 	mov	r9,r3
   222a0:	01b33374 	movhi	r6,52429
   222a4:	31b33344 	addi	r6,r6,-13107
   222a8:	01cffd74 	movhi	r7,16373
   222ac:	39f33304 	addi	r7,r7,-13108
   222b0:	4009883a 	mov	r4,r8
   222b4:	480b883a 	mov	r5,r9
   222b8:	00294280 	call	29428 <__ledf2>
   222bc:	00802e16 	blt	zero,r2,22378 <convert_light_lux+0x4a0>
		*lux = (0.00146 * light1) - (0.00112 * light1);
   222c0:	e13ff917 	ldw	r4,-28(fp)
   222c4:	002a5700 	call	2a570 <__floatsidf>
   222c8:	1011883a 	mov	r8,r2
   222cc:	1813883a 	mov	r9,r3
   222d0:	018408f4 	movhi	r6,4131
   222d4:	3198ec84 	addi	r6,r6,25522
   222d8:	01cfd634 	movhi	r7,16216
   222dc:	39faebc4 	addi	r7,r7,-5201
   222e0:	4009883a 	mov	r4,r8
   222e4:	480b883a 	mov	r5,r9
   222e8:	00295100 	call	29510 <__muldf3>
   222ec:	1009883a 	mov	r4,r2
   222f0:	180b883a 	mov	r5,r3
   222f4:	2021883a 	mov	r16,r4
   222f8:	2823883a 	mov	r17,r5
   222fc:	e13ff917 	ldw	r4,-28(fp)
   22300:	002a5700 	call	2a570 <__floatsidf>
   22304:	1011883a 	mov	r8,r2
   22308:	1813883a 	mov	r9,r3
   2230c:	01b5f1f4 	movhi	r6,55239
   22310:	31bef484 	addi	r6,r6,-1070
   22314:	01cfd4b4 	movhi	r7,16210
   22318:	39d66784 	addi	r7,r7,22942
   2231c:	4009883a 	mov	r4,r8
   22320:	480b883a 	mov	r5,r9
   22324:	00295100 	call	29510 <__muldf3>
   22328:	1009883a 	mov	r4,r2
   2232c:	180b883a 	mov	r5,r3
   22330:	2005883a 	mov	r2,r4
   22334:	2807883a 	mov	r3,r5
   22338:	100d883a 	mov	r6,r2
   2233c:	180f883a 	mov	r7,r3
   22340:	8009883a 	mov	r4,r16
   22344:	880b883a 	mov	r5,r17
   22348:	0029cbc0 	call	29cbc <__subdf3>
   2234c:	1009883a 	mov	r4,r2
   22350:	180b883a 	mov	r5,r3
   22354:	2005883a 	mov	r2,r4
   22358:	2807883a 	mov	r3,r5
   2235c:	1009883a 	mov	r4,r2
   22360:	180b883a 	mov	r5,r3
   22364:	002a7240 	call	2a724 <__truncdfsf2>
   22368:	1007883a 	mov	r3,r2
   2236c:	e0bff817 	ldw	r2,-32(fp)
   22370:	10c00015 	stw	r3,0(r2)
   22374:	00000206 	br	22380 <convert_light_lux+0x4a8>
	else
		*lux = 0;
   22378:	e0bff817 	ldw	r2,-32(fp)
   2237c:	10000015 	stw	zero,0(r2)
	return TRUE;
   22380:	00800044 	movi	r2,1
}
   22384:	e6fffc04 	addi	sp,fp,-16
   22388:	dfc00517 	ldw	ra,20(sp)
   2238c:	df000417 	ldw	fp,16(sp)
   22390:	dcc00317 	ldw	r19,12(sp)
   22394:	dc800217 	ldw	r18,8(sp)
   22398:	dc400117 	ldw	r17,4(sp)
   2239c:	dc000017 	ldw	r16,0(sp)
   223a0:	dec00604 	addi	sp,sp,24
   223a4:	f800283a 	ret

000223a8 <set_thresh>:

void set_thresh(void) {
   223a8:	defff404 	addi	sp,sp,-48
   223ac:	df000b15 	stw	fp,44(sp)
   223b0:	df000b04 	addi	fp,sp,44
		unsigned u;
		float f;
	} uf;

	// Light threshold
	offst = LIGHT0_SENSOR_L_THRESH >> 2;
   223b4:	00802004 	movi	r2,128
   223b8:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < 2; i++) {
   223bc:	e03ffe15 	stw	zero,-8(fp)
   223c0:	00000e06 	br	223fc <set_thresh+0x54>
		thresh.light[0][i] = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
   223c4:	e0bfff17 	ldw	r2,-4(fp)
   223c8:	10c00044 	addi	r3,r2,1
   223cc:	e0ffff15 	stw	r3,-4(fp)
   223d0:	100490ba 	slli	r2,r2,2
   223d4:	10880004 	addi	r2,r2,8192
   223d8:	10c00037 	ldwio	r3,0(r2)
   223dc:	e0bffe17 	ldw	r2,-8(fp)
   223e0:	100890ba 	slli	r4,r2,2
   223e4:	00800134 	movhi	r2,4
   223e8:	2085883a 	add	r2,r4,r2
   223ec:	10f24f15 	stw	r3,-14020(r2)
	for (int i = 0; i < 2; i++) {
   223f0:	e0bffe17 	ldw	r2,-8(fp)
   223f4:	10800044 	addi	r2,r2,1
   223f8:	e0bffe15 	stw	r2,-8(fp)
   223fc:	e0bffe17 	ldw	r2,-8(fp)
   22400:	10800090 	cmplti	r2,r2,2
   22404:	103fef1e 	bne	r2,zero,223c4 <set_thresh+0x1c>
	}
	offst = LIGHT1_SENSOR_L_THRESH >> 2;
   22408:	00802084 	movi	r2,130
   2240c:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < 2; i++) {
   22410:	e03ffd15 	stw	zero,-12(fp)
   22414:	00000f06 	br	22454 <set_thresh+0xac>
		thresh.light[1][i] = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
   22418:	e0bfff17 	ldw	r2,-4(fp)
   2241c:	10c00044 	addi	r3,r2,1
   22420:	e0ffff15 	stw	r3,-4(fp)
   22424:	100490ba 	slli	r2,r2,2
   22428:	10880004 	addi	r2,r2,8192
   2242c:	10c00037 	ldwio	r3,0(r2)
   22430:	e0bffd17 	ldw	r2,-12(fp)
   22434:	10800084 	addi	r2,r2,2
   22438:	100890ba 	slli	r4,r2,2
   2243c:	00800134 	movhi	r2,4
   22440:	2085883a 	add	r2,r4,r2
   22444:	10f24f15 	stw	r3,-14020(r2)
	for (int i = 0; i < 2; i++) {
   22448:	e0bffd17 	ldw	r2,-12(fp)
   2244c:	10800044 	addi	r2,r2,1
   22450:	e0bffd15 	stw	r2,-12(fp)
   22454:	e0bffd17 	ldw	r2,-12(fp)
   22458:	10800090 	cmplti	r2,r2,2
   2245c:	103fee1e 	bne	r2,zero,22418 <set_thresh+0x70>
	}
	offst = LUX_SENSOR_L_THRESH >> 2;
   22460:	00802104 	movi	r2,132
   22464:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < 2; i++) {
   22468:	e03ffc15 	stw	zero,-16(fp)
   2246c:	00001106 	br	224b4 <set_thresh+0x10c>
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
   22470:	e0bfff17 	ldw	r2,-4(fp)
   22474:	10c00044 	addi	r3,r2,1
   22478:	e0ffff15 	stw	r3,-4(fp)
   2247c:	100490ba 	slli	r2,r2,2
   22480:	10880004 	addi	r2,r2,8192
   22484:	10800037 	ldwio	r2,0(r2)
   22488:	e0bff515 	stw	r2,-44(fp)
		thresh.lux[i] = uf.f;
   2248c:	e0fff517 	ldw	r3,-44(fp)
   22490:	e0bffc17 	ldw	r2,-16(fp)
   22494:	10800104 	addi	r2,r2,4
   22498:	100890ba 	slli	r4,r2,2
   2249c:	00800134 	movhi	r2,4
   224a0:	2085883a 	add	r2,r4,r2
   224a4:	10f24f15 	stw	r3,-14020(r2)
	for (int i = 0; i < 2; i++) {
   224a8:	e0bffc17 	ldw	r2,-16(fp)
   224ac:	10800044 	addi	r2,r2,1
   224b0:	e0bffc15 	stw	r2,-16(fp)
   224b4:	e0bffc17 	ldw	r2,-16(fp)
   224b8:	10800090 	cmplti	r2,r2,2
   224bc:	103fec1e 	bne	r2,zero,22470 <set_thresh+0xc8>
	}

	// Temp. HM. threshold
	offst = HUMIDI_SENSOR_L_THRESH >> 2;
   224c0:	00802184 	movi	r2,134
   224c4:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < 2; i++) {
   224c8:	e03ffb15 	stw	zero,-20(fp)
   224cc:	00001106 	br	22514 <set_thresh+0x16c>
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
   224d0:	e0bfff17 	ldw	r2,-4(fp)
   224d4:	10c00044 	addi	r3,r2,1
   224d8:	e0ffff15 	stw	r3,-4(fp)
   224dc:	100490ba 	slli	r2,r2,2
   224e0:	10880004 	addi	r2,r2,8192
   224e4:	10800037 	ldwio	r2,0(r2)
   224e8:	e0bff515 	stw	r2,-44(fp)
		thresh.fHumidity[i] = uf.f;
   224ec:	e0fff517 	ldw	r3,-44(fp)
   224f0:	e0bffb17 	ldw	r2,-20(fp)
   224f4:	10800204 	addi	r2,r2,8
   224f8:	100890ba 	slli	r4,r2,2
   224fc:	00800134 	movhi	r2,4
   22500:	2085883a 	add	r2,r4,r2
   22504:	10f24f15 	stw	r3,-14020(r2)
	for (int i = 0; i < 2; i++) {
   22508:	e0bffb17 	ldw	r2,-20(fp)
   2250c:	10800044 	addi	r2,r2,1
   22510:	e0bffb15 	stw	r2,-20(fp)
   22514:	e0bffb17 	ldw	r2,-20(fp)
   22518:	10800090 	cmplti	r2,r2,2
   2251c:	103fec1e 	bne	r2,zero,224d0 <set_thresh+0x128>
	}
	offst = TEMPER_SENSOR_L_THRESH >> 2;
   22520:	00802204 	movi	r2,136
   22524:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < 2; i++) {
   22528:	e03ffa15 	stw	zero,-24(fp)
   2252c:	00001106 	br	22574 <set_thresh+0x1cc>
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
   22530:	e0bfff17 	ldw	r2,-4(fp)
   22534:	10c00044 	addi	r3,r2,1
   22538:	e0ffff15 	stw	r3,-4(fp)
   2253c:	100490ba 	slli	r2,r2,2
   22540:	10880004 	addi	r2,r2,8192
   22544:	10800037 	ldwio	r2,0(r2)
   22548:	e0bff515 	stw	r2,-44(fp)
		thresh.fTemperature[i] = uf.f;
   2254c:	e0fff517 	ldw	r3,-44(fp)
   22550:	e0bffa17 	ldw	r2,-24(fp)
   22554:	10800184 	addi	r2,r2,6
   22558:	100890ba 	slli	r4,r2,2
   2255c:	00800134 	movhi	r2,4
   22560:	2085883a 	add	r2,r4,r2
   22564:	10f24f15 	stw	r3,-14020(r2)
	for (int i = 0; i < 2; i++) {
   22568:	e0bffa17 	ldw	r2,-24(fp)
   2256c:	10800044 	addi	r2,r2,1
   22570:	e0bffa15 	stw	r2,-24(fp)
   22574:	e0bffa17 	ldw	r2,-24(fp)
   22578:	10800090 	cmplti	r2,r2,2
   2257c:	103fec1e 	bne	r2,zero,22530 <set_thresh+0x188>
	}

	// 9-axis threshold
	offst = ACCEL_X_SENSOR_L_THRESH >> 2;
   22580:	00802284 	movi	r2,138
   22584:	e0bfff15 	stw	r2,-4(fp)
	float *fp = &thresh.a[0][0];
   22588:	00800134 	movhi	r2,4
   2258c:	10b25904 	addi	r2,r2,-13980
   22590:	e0bff915 	stw	r2,-28(fp)
	for (int i = 0; i < 6; i++) {
   22594:	e03ff815 	stw	zero,-32(fp)
   22598:	00000f06 	br	225d8 <set_thresh+0x230>
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
   2259c:	e0bfff17 	ldw	r2,-4(fp)
   225a0:	10c00044 	addi	r3,r2,1
   225a4:	e0ffff15 	stw	r3,-4(fp)
   225a8:	100490ba 	slli	r2,r2,2
   225ac:	10880004 	addi	r2,r2,8192
   225b0:	10800037 	ldwio	r2,0(r2)
   225b4:	e0bff515 	stw	r2,-44(fp)
		*fp++ = uf.f;
   225b8:	e0bff917 	ldw	r2,-28(fp)
   225bc:	10c00104 	addi	r3,r2,4
   225c0:	e0fff915 	stw	r3,-28(fp)
   225c4:	e0fff517 	ldw	r3,-44(fp)
   225c8:	10c00015 	stw	r3,0(r2)
	for (int i = 0; i < 6; i++) {
   225cc:	e0bff817 	ldw	r2,-32(fp)
   225d0:	10800044 	addi	r2,r2,1
   225d4:	e0bff815 	stw	r2,-32(fp)
   225d8:	e0bff817 	ldw	r2,-32(fp)
   225dc:	10800190 	cmplti	r2,r2,6
   225e0:	103fee1e 	bne	r2,zero,2259c <set_thresh+0x1f4>
	}

	offst = GYROS_X_SENSOR_L_THRESH >> 2;
   225e4:	00802404 	movi	r2,144
   225e8:	e0bfff15 	stw	r2,-4(fp)
	fp = &thresh.g[0][0];
   225ec:	00800134 	movhi	r2,4
   225f0:	10b25f04 	addi	r2,r2,-13956
   225f4:	e0bff915 	stw	r2,-28(fp)
	for (int i = 0; i < 6; i++) {
   225f8:	e03ff715 	stw	zero,-36(fp)
   225fc:	00000f06 	br	2263c <set_thresh+0x294>
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
   22600:	e0bfff17 	ldw	r2,-4(fp)
   22604:	10c00044 	addi	r3,r2,1
   22608:	e0ffff15 	stw	r3,-4(fp)
   2260c:	100490ba 	slli	r2,r2,2
   22610:	10880004 	addi	r2,r2,8192
   22614:	10800037 	ldwio	r2,0(r2)
   22618:	e0bff515 	stw	r2,-44(fp)
		*fp++ = uf.f;
   2261c:	e0bff917 	ldw	r2,-28(fp)
   22620:	10c00104 	addi	r3,r2,4
   22624:	e0fff915 	stw	r3,-28(fp)
   22628:	e0fff517 	ldw	r3,-44(fp)
   2262c:	10c00015 	stw	r3,0(r2)
	for (int i = 0; i < 6; i++) {
   22630:	e0bff717 	ldw	r2,-36(fp)
   22634:	10800044 	addi	r2,r2,1
   22638:	e0bff715 	stw	r2,-36(fp)
   2263c:	e0bff717 	ldw	r2,-36(fp)
   22640:	10800190 	cmplti	r2,r2,6
   22644:	103fee1e 	bne	r2,zero,22600 <set_thresh+0x258>
	}

	offst = MAGNE_X_SENSOR_L_THRESH >> 2;
   22648:	00802584 	movi	r2,150
   2264c:	e0bfff15 	stw	r2,-4(fp)
	fp = &thresh.m[0][0];
   22650:	00800134 	movhi	r2,4
   22654:	10b26504 	addi	r2,r2,-13932
   22658:	e0bff915 	stw	r2,-28(fp)
	for (int i = 0; i < 6; i++) {
   2265c:	e03ff615 	stw	zero,-40(fp)
   22660:	00000f06 	br	226a0 <set_thresh+0x2f8>
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
   22664:	e0bfff17 	ldw	r2,-4(fp)
   22668:	10c00044 	addi	r3,r2,1
   2266c:	e0ffff15 	stw	r3,-4(fp)
   22670:	100490ba 	slli	r2,r2,2
   22674:	10880004 	addi	r2,r2,8192
   22678:	10800037 	ldwio	r2,0(r2)
   2267c:	e0bff515 	stw	r2,-44(fp)
		*fp++ = uf.f;
   22680:	e0bff917 	ldw	r2,-28(fp)
   22684:	10c00104 	addi	r3,r2,4
   22688:	e0fff915 	stw	r3,-28(fp)
   2268c:	e0fff517 	ldw	r3,-44(fp)
   22690:	10c00015 	stw	r3,0(r2)
	for (int i = 0; i < 6; i++) {
   22694:	e0bff617 	ldw	r2,-40(fp)
   22698:	10800044 	addi	r2,r2,1
   2269c:	e0bff615 	stw	r2,-40(fp)
   226a0:	e0bff617 	ldw	r2,-40(fp)
   226a4:	10800190 	cmplti	r2,r2,6
   226a8:	103fee1e 	bne	r2,zero,22664 <set_thresh+0x2bc>
	}

}
   226ac:	0001883a 	nop
   226b0:	0001883a 	nop
   226b4:	e037883a 	mov	sp,fp
   226b8:	df000017 	ldw	fp,0(sp)
   226bc:	dec00104 	addi	sp,sp,4
   226c0:	f800283a 	ret

000226c4 <check_light_threshold>:

//#define is_OutOfRange(a,THptr) ( ((a) < (*(THptr))) || ((a)>(*((THptr)+1))) )
#define is_OutOfRange(a,THptr) ( ((a) < ((THptr)[0])) || ((a)>(((THptr)[1]))) )
#define SET_OUT_OF_RANGE_LED(v)  IOWR(NIOS_SYSTEM_LED_PIO_BASE, 0, (v) )

bool check_light_threshold(int light0, int light1, float lux) {
   226c4:	defffa04 	addi	sp,sp,-24
   226c8:	dfc00515 	stw	ra,20(sp)
   226cc:	df000415 	stw	fp,16(sp)
   226d0:	df000404 	addi	fp,sp,16
   226d4:	e13ffe15 	stw	r4,-8(fp)
   226d8:	e17ffd15 	stw	r5,-12(fp)
   226dc:	e1bffc15 	stw	r6,-16(fp)
	bool rv = false;
   226e0:	e03fffc5 	stb	zero,-1(fp)
	if (
	//is_OutOfRange(light0, &thresh.light[0][0] ) ||
	//is_OutOfRange(light1, &thresh.light[1][0] ) ||
	is_OutOfRange(lux, &thresh.lux[0])) {
   226e4:	00800134 	movhi	r2,4
   226e8:	10b25317 	ldw	r2,-14004(r2)
	if (
   226ec:	100b883a 	mov	r5,r2
   226f0:	e13ffc17 	ldw	r4,-16(fp)
   226f4:	00274fc0 	call	274fc <__lesf2>
   226f8:	10000716 	blt	r2,zero,22718 <check_light_threshold+0x54>
	is_OutOfRange(lux, &thresh.lux[0])) {
   226fc:	00800134 	movhi	r2,4
   22700:	10b25404 	addi	r2,r2,-14000
   22704:	10c00017 	ldw	r3,0(r2)
   22708:	180b883a 	mov	r5,r3
   2270c:	e13ffc17 	ldw	r4,-16(fp)
   22710:	00274440 	call	27444 <__gesf2>
   22714:	0080020e 	bge	zero,r2,22720 <check_light_threshold+0x5c>
		rv = true;
   22718:	00800044 	movi	r2,1
   2271c:	e0bfffc5 	stb	r2,-1(fp)
	}
	return rv;
   22720:	e0bfffc3 	ldbu	r2,-1(fp)
}
   22724:	e037883a 	mov	sp,fp
   22728:	dfc00117 	ldw	ra,4(sp)
   2272c:	df000017 	ldw	fp,0(sp)
   22730:	dec00204 	addi	sp,sp,8
   22734:	f800283a 	ret

00022738 <check_temp_hm_threshold>:

bool check_temp_hm_threshold(float temp, float hm) {
   22738:	defffb04 	addi	sp,sp,-20
   2273c:	dfc00415 	stw	ra,16(sp)
   22740:	df000315 	stw	fp,12(sp)
   22744:	df000304 	addi	fp,sp,12
   22748:	e13ffe15 	stw	r4,-8(fp)
   2274c:	e17ffd15 	stw	r5,-12(fp)
	bool rv = false;
   22750:	e03fffc5 	stb	zero,-1(fp)
	if ( is_OutOfRange(temp, &thresh.fTemperature[0]) ||
   22754:	00800134 	movhi	r2,4
   22758:	10b25517 	ldw	r2,-13996(r2)
   2275c:	100b883a 	mov	r5,r2
   22760:	e13ffe17 	ldw	r4,-8(fp)
   22764:	00274fc0 	call	274fc <__lesf2>
   22768:	10001416 	blt	r2,zero,227bc <check_temp_hm_threshold+0x84>
   2276c:	00800134 	movhi	r2,4
   22770:	10b25604 	addi	r2,r2,-13992
   22774:	10c00017 	ldw	r3,0(r2)
   22778:	180b883a 	mov	r5,r3
   2277c:	e13ffe17 	ldw	r4,-8(fp)
   22780:	00274440 	call	27444 <__gesf2>
   22784:	00800d16 	blt	zero,r2,227bc <check_temp_hm_threshold+0x84>
	is_OutOfRange(hm, &thresh.fHumidity[0] )) {
   22788:	00800134 	movhi	r2,4
   2278c:	10b25717 	ldw	r2,-13988(r2)
	if ( is_OutOfRange(temp, &thresh.fTemperature[0]) ||
   22790:	100b883a 	mov	r5,r2
   22794:	e13ffd17 	ldw	r4,-12(fp)
   22798:	00274fc0 	call	274fc <__lesf2>
   2279c:	10000716 	blt	r2,zero,227bc <check_temp_hm_threshold+0x84>
	is_OutOfRange(hm, &thresh.fHumidity[0] )) {
   227a0:	00800134 	movhi	r2,4
   227a4:	10b25804 	addi	r2,r2,-13984
   227a8:	10c00017 	ldw	r3,0(r2)
   227ac:	180b883a 	mov	r5,r3
   227b0:	e13ffd17 	ldw	r4,-12(fp)
   227b4:	00274440 	call	27444 <__gesf2>
   227b8:	0080020e 	bge	zero,r2,227c4 <check_temp_hm_threshold+0x8c>
		rv = true;
   227bc:	00800044 	movi	r2,1
   227c0:	e0bfffc5 	stb	r2,-1(fp)
	}
	return rv;
   227c4:	e0bfffc3 	ldbu	r2,-1(fp)
}
   227c8:	e037883a 	mov	sp,fp
   227cc:	dfc00117 	ldw	ra,4(sp)
   227d0:	df000017 	ldw	fp,0(sp)
   227d4:	dec00204 	addi	sp,sp,8
   227d8:	f800283a 	ret

000227dc <check_temp_ax9_threshold>:

bool check_temp_ax9_threshold(float a[3], float g[3], float m[3]) {
   227dc:	defff604 	addi	sp,sp,-40
   227e0:	dfc00915 	stw	ra,36(sp)
   227e4:	df000815 	stw	fp,32(sp)
   227e8:	df000804 	addi	fp,sp,32
   227ec:	e13ffa15 	stw	r4,-24(fp)
   227f0:	e17ff915 	stw	r5,-28(fp)
   227f4:	e1bff815 	stw	r6,-32(fp)
	bool rv = false;
   227f8:	e03fffc5 	stb	zero,-1(fp)
	int err = 0;
   227fc:	e03ffe15 	stw	zero,-8(fp)
	for (int i = 0; i < 3; i++) {
   22800:	e03ffd15 	stw	zero,-12(fp)
   22804:	00002406 	br	22898 <check_temp_ax9_threshold+0xbc>
		if (is_OutOfRange(a[i], &thresh.a[i][0]))
   22808:	e0bffd17 	ldw	r2,-12(fp)
   2280c:	100490ba 	slli	r2,r2,2
   22810:	e0fffa17 	ldw	r3,-24(fp)
   22814:	1885883a 	add	r2,r3,r2
   22818:	11000017 	ldw	r4,0(r2)
   2281c:	e0bffd17 	ldw	r2,-12(fp)
   22820:	10800144 	addi	r2,r2,5
   22824:	100690fa 	slli	r3,r2,3
   22828:	00800134 	movhi	r2,4
   2282c:	1885883a 	add	r2,r3,r2
   22830:	10b24f17 	ldw	r2,-14020(r2)
   22834:	100b883a 	mov	r5,r2
   22838:	00274fc0 	call	274fc <__lesf2>
   2283c:	10001016 	blt	r2,zero,22880 <check_temp_ax9_threshold+0xa4>
   22840:	e0bffd17 	ldw	r2,-12(fp)
   22844:	100490ba 	slli	r2,r2,2
   22848:	e0fffa17 	ldw	r3,-24(fp)
   2284c:	1885883a 	add	r2,r3,r2
   22850:	11000017 	ldw	r4,0(r2)
   22854:	e0bffd17 	ldw	r2,-12(fp)
   22858:	10800144 	addi	r2,r2,5
   2285c:	100690fa 	slli	r3,r2,3
   22860:	00800134 	movhi	r2,4
   22864:	10b24f04 	addi	r2,r2,-14020
   22868:	1885883a 	add	r2,r3,r2
   2286c:	10800104 	addi	r2,r2,4
   22870:	10c00017 	ldw	r3,0(r2)
   22874:	180b883a 	mov	r5,r3
   22878:	00274440 	call	27444 <__gesf2>
   2287c:	0080030e 	bge	zero,r2,2288c <check_temp_ax9_threshold+0xb0>
			err++;
   22880:	e0bffe17 	ldw	r2,-8(fp)
   22884:	10800044 	addi	r2,r2,1
   22888:	e0bffe15 	stw	r2,-8(fp)
	for (int i = 0; i < 3; i++) {
   2288c:	e0bffd17 	ldw	r2,-12(fp)
   22890:	10800044 	addi	r2,r2,1
   22894:	e0bffd15 	stw	r2,-12(fp)
   22898:	e0bffd17 	ldw	r2,-12(fp)
   2289c:	108000d0 	cmplti	r2,r2,3
   228a0:	103fd91e 	bne	r2,zero,22808 <check_temp_ax9_threshold+0x2c>
	}
	for (int i = 0; i < 3; i++) {
   228a4:	e03ffc15 	stw	zero,-16(fp)
   228a8:	00002406 	br	2293c <check_temp_ax9_threshold+0x160>
		if (is_OutOfRange(g[i], &thresh.g[i][0]))
   228ac:	e0bffc17 	ldw	r2,-16(fp)
   228b0:	100490ba 	slli	r2,r2,2
   228b4:	e0fff917 	ldw	r3,-28(fp)
   228b8:	1885883a 	add	r2,r3,r2
   228bc:	11000017 	ldw	r4,0(r2)
   228c0:	e0bffc17 	ldw	r2,-16(fp)
   228c4:	10800204 	addi	r2,r2,8
   228c8:	100690fa 	slli	r3,r2,3
   228cc:	00800134 	movhi	r2,4
   228d0:	1885883a 	add	r2,r3,r2
   228d4:	10b24f17 	ldw	r2,-14020(r2)
   228d8:	100b883a 	mov	r5,r2
   228dc:	00274fc0 	call	274fc <__lesf2>
   228e0:	10001016 	blt	r2,zero,22924 <check_temp_ax9_threshold+0x148>
   228e4:	e0bffc17 	ldw	r2,-16(fp)
   228e8:	100490ba 	slli	r2,r2,2
   228ec:	e0fff917 	ldw	r3,-28(fp)
   228f0:	1885883a 	add	r2,r3,r2
   228f4:	11000017 	ldw	r4,0(r2)
   228f8:	e0bffc17 	ldw	r2,-16(fp)
   228fc:	10800204 	addi	r2,r2,8
   22900:	100690fa 	slli	r3,r2,3
   22904:	00800134 	movhi	r2,4
   22908:	10b24f04 	addi	r2,r2,-14020
   2290c:	1885883a 	add	r2,r3,r2
   22910:	10800104 	addi	r2,r2,4
   22914:	10c00017 	ldw	r3,0(r2)
   22918:	180b883a 	mov	r5,r3
   2291c:	00274440 	call	27444 <__gesf2>
   22920:	0080030e 	bge	zero,r2,22930 <check_temp_ax9_threshold+0x154>
			err++;
   22924:	e0bffe17 	ldw	r2,-8(fp)
   22928:	10800044 	addi	r2,r2,1
   2292c:	e0bffe15 	stw	r2,-8(fp)
	for (int i = 0; i < 3; i++) {
   22930:	e0bffc17 	ldw	r2,-16(fp)
   22934:	10800044 	addi	r2,r2,1
   22938:	e0bffc15 	stw	r2,-16(fp)
   2293c:	e0bffc17 	ldw	r2,-16(fp)
   22940:	108000d0 	cmplti	r2,r2,3
   22944:	103fd91e 	bne	r2,zero,228ac <check_temp_ax9_threshold+0xd0>
	}
	for (int i = 0; i < 3; i++) {
   22948:	e03ffb15 	stw	zero,-20(fp)
   2294c:	00002406 	br	229e0 <check_temp_ax9_threshold+0x204>
		if (is_OutOfRange(m[i], &thresh.m[i][0]))
   22950:	e0bffb17 	ldw	r2,-20(fp)
   22954:	100490ba 	slli	r2,r2,2
   22958:	e0fff817 	ldw	r3,-32(fp)
   2295c:	1885883a 	add	r2,r3,r2
   22960:	11000017 	ldw	r4,0(r2)
   22964:	e0bffb17 	ldw	r2,-20(fp)
   22968:	108002c4 	addi	r2,r2,11
   2296c:	100690fa 	slli	r3,r2,3
   22970:	00800134 	movhi	r2,4
   22974:	1885883a 	add	r2,r3,r2
   22978:	10b24f17 	ldw	r2,-14020(r2)
   2297c:	100b883a 	mov	r5,r2
   22980:	00274fc0 	call	274fc <__lesf2>
   22984:	10001016 	blt	r2,zero,229c8 <check_temp_ax9_threshold+0x1ec>
   22988:	e0bffb17 	ldw	r2,-20(fp)
   2298c:	100490ba 	slli	r2,r2,2
   22990:	e0fff817 	ldw	r3,-32(fp)
   22994:	1885883a 	add	r2,r3,r2
   22998:	11000017 	ldw	r4,0(r2)
   2299c:	e0bffb17 	ldw	r2,-20(fp)
   229a0:	108002c4 	addi	r2,r2,11
   229a4:	100690fa 	slli	r3,r2,3
   229a8:	00800134 	movhi	r2,4
   229ac:	10b24f04 	addi	r2,r2,-14020
   229b0:	1885883a 	add	r2,r3,r2
   229b4:	10800104 	addi	r2,r2,4
   229b8:	10c00017 	ldw	r3,0(r2)
   229bc:	180b883a 	mov	r5,r3
   229c0:	00274440 	call	27444 <__gesf2>
   229c4:	0080030e 	bge	zero,r2,229d4 <check_temp_ax9_threshold+0x1f8>
			err++;
   229c8:	e0bffe17 	ldw	r2,-8(fp)
   229cc:	10800044 	addi	r2,r2,1
   229d0:	e0bffe15 	stw	r2,-8(fp)
	for (int i = 0; i < 3; i++) {
   229d4:	e0bffb17 	ldw	r2,-20(fp)
   229d8:	10800044 	addi	r2,r2,1
   229dc:	e0bffb15 	stw	r2,-20(fp)
   229e0:	e0bffb17 	ldw	r2,-20(fp)
   229e4:	108000d0 	cmplti	r2,r2,3
   229e8:	103fd91e 	bne	r2,zero,22950 <check_temp_ax9_threshold+0x174>
	}

	if (err) {
   229ec:	e0bffe17 	ldw	r2,-8(fp)
   229f0:	10000226 	beq	r2,zero,229fc <check_temp_ax9_threshold+0x220>
		rv = true;
   229f4:	00800044 	movi	r2,1
   229f8:	e0bfffc5 	stb	r2,-1(fp)
	}
	return rv;
   229fc:	e0bfffc3 	ldbu	r2,-1(fp)
}
   22a00:	e037883a 	mov	sp,fp
   22a04:	dfc00117 	ldw	ra,4(sp)
   22a08:	df000017 	ldw	fp,0(sp)
   22a0c:	dec00204 	addi	sp,sp,8
   22a10:	f800283a 	ret

00022a14 <Sensor_Report>:

#define DEBUG

static bool g_clear_OOR_flag = true;

void Sensor_Report(bool print_flag) {
   22a14:	deffda04 	addi	sp,sp,-152
   22a18:	dfc02515 	stw	ra,148(sp)
   22a1c:	df002415 	stw	fp,144(sp)
   22a20:	dcc02315 	stw	r19,140(sp)
   22a24:	dc802215 	stw	r18,136(sp)
   22a28:	dc402115 	stw	r17,132(sp)
   22a2c:	dc002015 	stw	r16,128(sp)
   22a30:	df002404 	addi	fp,sp,144
   22a34:	2005883a 	mov	r2,r4
   22a38:	e0bfe105 	stb	r2,-124(fp)
	bool bPass, bPass2;

	////////////////////////////////
	// report light sensor
	alt_u16 light0 = 0, light1 = 0;
   22a3c:	e03fee8d 	sth	zero,-70(fp)
   22a40:	e03fee0d 	sth	zero,-72(fp)
	float lux = 0;
   22a44:	e03fed15 	stw	zero,-76(fp)
	bPass = Get_light(&light0, &light1);
   22a48:	e0ffee04 	addi	r3,fp,-72
   22a4c:	e0bfee84 	addi	r2,fp,-70
   22a50:	180b883a 	mov	r5,r3
   22a54:	1009883a 	mov	r4,r2
   22a58:	0021ae80 	call	21ae8 <Get_light>
   22a5c:	e0bff1c5 	stb	r2,-57(fp)
	if (bPass) {
   22a60:	e0bff1c3 	ldbu	r2,-57(fp)
   22a64:	10000b26 	beq	r2,zero,22a94 <Sensor_Report+0x80>
		bPass2 = convert_light_lux(light0, light1, &lux);
   22a68:	e0bfee8b 	ldhu	r2,-70(fp)
   22a6c:	10bfffcc 	andi	r2,r2,65535
   22a70:	e0ffee0b 	ldhu	r3,-72(fp)
   22a74:	18ffffcc 	andi	r3,r3,65535
   22a78:	e13fed04 	addi	r4,fp,-76
   22a7c:	200d883a 	mov	r6,r4
   22a80:	180b883a 	mov	r5,r3
   22a84:	1009883a 	mov	r4,r2
   22a88:	0021ed80 	call	21ed8 <convert_light_lux>
   22a8c:	e0bffbc5 	stb	r2,-17(fp)
   22a90:	00000106 	br	22a98 <Sensor_Report+0x84>
	} else
		bPass2 = FALSE;
   22a94:	e03ffbc5 	stb	zero,-17(fp)

	if (print_flag) {
   22a98:	e0bfe103 	ldbu	r2,-124(fp)
   22a9c:	10002226 	beq	r2,zero,22b28 <Sensor_Report+0x114>
		if (bPass2) {
   22aa0:	e0bffbc3 	ldbu	r2,-17(fp)
   22aa4:	10001126 	beq	r2,zero,22aec <Sensor_Report+0xd8>
			printf("light0 = %d, light1 = %d, lux = %.3f\r\n", light0, light1,
   22aa8:	e0bfee8b 	ldhu	r2,-70(fp)
   22aac:	143fffcc 	andi	r16,r2,65535
   22ab0:	e0bfee0b 	ldhu	r2,-72(fp)
   22ab4:	147fffcc 	andi	r17,r2,65535
   22ab8:	e0bfed17 	ldw	r2,-76(fp)
   22abc:	1009883a 	mov	r4,r2
   22ac0:	002a6280 	call	2a628 <__extendsfdf2>
   22ac4:	1009883a 	mov	r4,r2
   22ac8:	180b883a 	mov	r5,r3
   22acc:	d9400015 	stw	r5,0(sp)
   22ad0:	200f883a 	mov	r7,r4
   22ad4:	880d883a 	mov	r6,r17
   22ad8:	800b883a 	mov	r5,r16
   22adc:	01000134 	movhi	r4,4
   22ae0:	21211f04 	addi	r4,r4,-31620
   22ae4:	002a9240 	call	2a924 <printf>
   22ae8:	00000f06 	br	22b28 <Sensor_Report+0x114>
					lux);
		} else if (bPass) {
   22aec:	e0bff1c3 	ldbu	r2,-57(fp)
   22af0:	10000a26 	beq	r2,zero,22b1c <Sensor_Report+0x108>
			printf("light0 = %d, light1 = %d,but getting lux value failed\r\n",
   22af4:	e0bfee8b 	ldhu	r2,-70(fp)
   22af8:	10bfffcc 	andi	r2,r2,65535
   22afc:	e0ffee0b 	ldhu	r3,-72(fp)
   22b00:	18ffffcc 	andi	r3,r3,65535
   22b04:	180d883a 	mov	r6,r3
   22b08:	100b883a 	mov	r5,r2
   22b0c:	01000134 	movhi	r4,4
   22b10:	21212904 	addi	r4,r4,-31580
   22b14:	002a9240 	call	2a924 <printf>
   22b18:	00000306 	br	22b28 <Sensor_Report+0x114>
					light0, light1);
		} else {
			printf("get light0 and light1 values failed!\r\n");
   22b1c:	01000134 	movhi	r4,4
   22b20:	21213704 	addi	r4,r4,-31524
   22b24:	002aa480 	call	2aa48 <puts>
	}

	////////////////////////////////
	// report HDC1000 temperature & humidity sensor
	float fTemperature, fHumidity;
	bPass = RH_Temp_Sensor_Read(&fTemperature, &fHumidity);
   22b28:	e0ffeb04 	addi	r3,fp,-84
   22b2c:	e0bfec04 	addi	r2,fp,-80
   22b30:	180b883a 	mov	r5,r3
   22b34:	1009883a 	mov	r4,r2
   22b38:	00251940 	call	25194 <RH_Temp_Sensor_Read>
   22b3c:	e0bff1c5 	stb	r2,-57(fp)
	if (print_flag) {
   22b40:	e0bfe103 	ldbu	r2,-124(fp)
   22b44:	10001a26 	beq	r2,zero,22bb0 <Sensor_Report+0x19c>
		if (bPass) {
   22b48:	e0bff1c3 	ldbu	r2,-57(fp)
   22b4c:	10001526 	beq	r2,zero,22ba4 <Sensor_Report+0x190>
			printf("Temperature: %.3f*C\r\n", fTemperature);
   22b50:	e0bfec17 	ldw	r2,-80(fp)
   22b54:	1009883a 	mov	r4,r2
   22b58:	002a6280 	call	2a628 <__extendsfdf2>
   22b5c:	100d883a 	mov	r6,r2
   22b60:	180f883a 	mov	r7,r3
   22b64:	300b883a 	mov	r5,r6
   22b68:	380d883a 	mov	r6,r7
   22b6c:	01000134 	movhi	r4,4
   22b70:	21214104 	addi	r4,r4,-31484
   22b74:	002a9240 	call	2a924 <printf>
			printf("Humidity: %.3f%%\r\n", fHumidity);
   22b78:	e0bfeb17 	ldw	r2,-84(fp)
   22b7c:	1009883a 	mov	r4,r2
   22b80:	002a6280 	call	2a628 <__extendsfdf2>
   22b84:	100d883a 	mov	r6,r2
   22b88:	180f883a 	mov	r7,r3
   22b8c:	300b883a 	mov	r5,r6
   22b90:	380d883a 	mov	r6,r7
   22b94:	01000134 	movhi	r4,4
   22b98:	21214704 	addi	r4,r4,-31460
   22b9c:	002a9240 	call	2a924 <printf>
   22ba0:	00000306 	br	22bb0 <Sensor_Report+0x19c>
		} else {
			printf("Failed to ready Temperature/Humidity sensor!\r\n");
   22ba4:	01000134 	movhi	r4,4
   22ba8:	21214c04 	addi	r4,r4,-31440
   22bac:	002aa480 	call	2aa48 <puts>
	////////////////////////////////
	// report mpu9250 9-axis sensor
	float a[3];
	float g[3];
	float m[3];
	getMotion9(&a[0], &a[1], &a[2], &g[0], &g[1], &g[2], &m[0], &m[1], &m[2]);
   22bb0:	e1bfe504 	addi	r6,fp,-108
   22bb4:	e0bfe804 	addi	r2,fp,-96
   22bb8:	11400204 	addi	r5,r2,8
   22bbc:	e0bfe804 	addi	r2,fp,-96
   22bc0:	11000104 	addi	r4,r2,4
   22bc4:	e0ffe804 	addi	r3,fp,-96
   22bc8:	e0bfe204 	addi	r2,fp,-120
   22bcc:	10800204 	addi	r2,r2,8
   22bd0:	d8800415 	stw	r2,16(sp)
   22bd4:	e0bfe204 	addi	r2,fp,-120
   22bd8:	10800104 	addi	r2,r2,4
   22bdc:	d8800315 	stw	r2,12(sp)
   22be0:	e0bfe204 	addi	r2,fp,-120
   22be4:	d8800215 	stw	r2,8(sp)
   22be8:	e0bfe504 	addi	r2,fp,-108
   22bec:	10800204 	addi	r2,r2,8
   22bf0:	d8800115 	stw	r2,4(sp)
   22bf4:	e0bfe504 	addi	r2,fp,-108
   22bf8:	10800104 	addi	r2,r2,4
   22bfc:	d8800015 	stw	r2,0(sp)
   22c00:	300f883a 	mov	r7,r6
   22c04:	280d883a 	mov	r6,r5
   22c08:	200b883a 	mov	r5,r4
   22c0c:	1809883a 	mov	r4,r3
   22c10:	0024ea80 	call	24ea8 <getMotion9>

	////////////////////////////////
	// Check out of range, and set LED
	static int out_of_range = 0;
	if (g_clear_OOR_flag)
   22c14:	d0a00503 	ldbu	r2,-32748(gp)
   22c18:	10803fcc 	andi	r2,r2,255
   22c1c:	10000126 	beq	r2,zero,22c24 <Sensor_Report+0x210>
		out_of_range = 0;
   22c20:	d0272515 	stw	zero,-25452(gp)
	if (check_light_threshold(light0, light1, lux))
   22c24:	e0bfee8b 	ldhu	r2,-70(fp)
   22c28:	10bfffcc 	andi	r2,r2,65535
   22c2c:	e0ffee0b 	ldhu	r3,-72(fp)
   22c30:	18ffffcc 	andi	r3,r3,65535
   22c34:	e13fed17 	ldw	r4,-76(fp)
   22c38:	200d883a 	mov	r6,r4
   22c3c:	180b883a 	mov	r5,r3
   22c40:	1009883a 	mov	r4,r2
   22c44:	00226c40 	call	226c4 <check_light_threshold>
   22c48:	10803fcc 	andi	r2,r2,255
   22c4c:	10000326 	beq	r2,zero,22c5c <Sensor_Report+0x248>
		out_of_range |= 1 << 0;
   22c50:	d0a72517 	ldw	r2,-25452(gp)
   22c54:	10800054 	ori	r2,r2,1
   22c58:	d0a72515 	stw	r2,-25452(gp)
	if (check_temp_hm_threshold(fTemperature, fHumidity))
   22c5c:	e0bfec17 	ldw	r2,-80(fp)
   22c60:	e0ffeb17 	ldw	r3,-84(fp)
   22c64:	180b883a 	mov	r5,r3
   22c68:	1009883a 	mov	r4,r2
   22c6c:	00227380 	call	22738 <check_temp_hm_threshold>
   22c70:	10803fcc 	andi	r2,r2,255
   22c74:	10000326 	beq	r2,zero,22c84 <Sensor_Report+0x270>
		out_of_range |= 1 << 1;
   22c78:	d0a72517 	ldw	r2,-25452(gp)
   22c7c:	10800094 	ori	r2,r2,2
   22c80:	d0a72515 	stw	r2,-25452(gp)
	if (check_temp_ax9_threshold(a, g, m))
   22c84:	e13fe204 	addi	r4,fp,-120
   22c88:	e0ffe504 	addi	r3,fp,-108
   22c8c:	e0bfe804 	addi	r2,fp,-96
   22c90:	200d883a 	mov	r6,r4
   22c94:	180b883a 	mov	r5,r3
   22c98:	1009883a 	mov	r4,r2
   22c9c:	00227dc0 	call	227dc <check_temp_ax9_threshold>
   22ca0:	10803fcc 	andi	r2,r2,255
   22ca4:	10000326 	beq	r2,zero,22cb4 <Sensor_Report+0x2a0>
		out_of_range |= 1 << 2;
   22ca8:	d0a72517 	ldw	r2,-25452(gp)
   22cac:	10800114 	ori	r2,r2,4
   22cb0:	d0a72515 	stw	r2,-25452(gp)
	SET_OUT_OF_RANGE_LED(out_of_range);
   22cb4:	d0a72517 	ldw	r2,-25452(gp)
   22cb8:	00840035 	stwio	r2,4096(zero)

	////////////////////////////////
	// Print out sensor values
	if (print_flag) {
   22cbc:	e0bfe103 	ldbu	r2,-124(fp)
   22cc0:	10004b26 	beq	r2,zero,22df0 <Sensor_Report+0x3dc>
		printf("9-axis info:\r\n");
   22cc4:	01000134 	movhi	r4,4
   22cc8:	21215804 	addi	r4,r4,-31392
   22ccc:	002aa480 	call	2aa48 <puts>
		printf("ax = %.3f, ay = %.3f, az = %.3f\r\n", a[0], a[1], a[2]);
   22cd0:	e0bfe817 	ldw	r2,-96(fp)
   22cd4:	1009883a 	mov	r4,r2
   22cd8:	002a6280 	call	2a628 <__extendsfdf2>
   22cdc:	1025883a 	mov	r18,r2
   22ce0:	1827883a 	mov	r19,r3
   22ce4:	e0bfe917 	ldw	r2,-92(fp)
   22ce8:	1009883a 	mov	r4,r2
   22cec:	002a6280 	call	2a628 <__extendsfdf2>
   22cf0:	1021883a 	mov	r16,r2
   22cf4:	1823883a 	mov	r17,r3
   22cf8:	e0bfea17 	ldw	r2,-88(fp)
   22cfc:	1009883a 	mov	r4,r2
   22d00:	002a6280 	call	2a628 <__extendsfdf2>
   22d04:	1009883a 	mov	r4,r2
   22d08:	180b883a 	mov	r5,r3
   22d0c:	d9000115 	stw	r4,4(sp)
   22d10:	d9400215 	stw	r5,8(sp)
   22d14:	dc400015 	stw	r17,0(sp)
   22d18:	800f883a 	mov	r7,r16
   22d1c:	900b883a 	mov	r5,r18
   22d20:	980d883a 	mov	r6,r19
   22d24:	01000134 	movhi	r4,4
   22d28:	21215c04 	addi	r4,r4,-31376
   22d2c:	002a9240 	call	2a924 <printf>
		printf("gx = %.3f, gy = %.3f, gz = %.3f\r\n", g[0], g[1], g[2]);
   22d30:	e0bfe517 	ldw	r2,-108(fp)
   22d34:	1009883a 	mov	r4,r2
   22d38:	002a6280 	call	2a628 <__extendsfdf2>
   22d3c:	1025883a 	mov	r18,r2
   22d40:	1827883a 	mov	r19,r3
   22d44:	e0bfe617 	ldw	r2,-104(fp)
   22d48:	1009883a 	mov	r4,r2
   22d4c:	002a6280 	call	2a628 <__extendsfdf2>
   22d50:	1021883a 	mov	r16,r2
   22d54:	1823883a 	mov	r17,r3
   22d58:	e0bfe717 	ldw	r2,-100(fp)
   22d5c:	1009883a 	mov	r4,r2
   22d60:	002a6280 	call	2a628 <__extendsfdf2>
   22d64:	1009883a 	mov	r4,r2
   22d68:	180b883a 	mov	r5,r3
   22d6c:	d9000115 	stw	r4,4(sp)
   22d70:	d9400215 	stw	r5,8(sp)
   22d74:	dc400015 	stw	r17,0(sp)
   22d78:	800f883a 	mov	r7,r16
   22d7c:	900b883a 	mov	r5,r18
   22d80:	980d883a 	mov	r6,r19
   22d84:	01000134 	movhi	r4,4
   22d88:	21216504 	addi	r4,r4,-31340
   22d8c:	002a9240 	call	2a924 <printf>
		printf("mx = %.3f, my = %.3f, mz = %.3f\r\n", m[0], m[1], m[2]);
   22d90:	e0bfe217 	ldw	r2,-120(fp)
   22d94:	1009883a 	mov	r4,r2
   22d98:	002a6280 	call	2a628 <__extendsfdf2>
   22d9c:	1025883a 	mov	r18,r2
   22da0:	1827883a 	mov	r19,r3
   22da4:	e0bfe317 	ldw	r2,-116(fp)
   22da8:	1009883a 	mov	r4,r2
   22dac:	002a6280 	call	2a628 <__extendsfdf2>
   22db0:	1021883a 	mov	r16,r2
   22db4:	1823883a 	mov	r17,r3
   22db8:	e0bfe417 	ldw	r2,-112(fp)
   22dbc:	1009883a 	mov	r4,r2
   22dc0:	002a6280 	call	2a628 <__extendsfdf2>
   22dc4:	1009883a 	mov	r4,r2
   22dc8:	180b883a 	mov	r5,r3
   22dcc:	d9000115 	stw	r4,4(sp)
   22dd0:	d9400215 	stw	r5,8(sp)
   22dd4:	dc400015 	stw	r17,0(sp)
   22dd8:	800f883a 	mov	r7,r16
   22ddc:	900b883a 	mov	r5,r18
   22de0:	980d883a 	mov	r6,r19
   22de4:	01000134 	movhi	r4,4
   22de8:	21216e04 	addi	r4,r4,-31304
   22dec:	002a9240 	call	2a924 <printf>
	}
	if (print_flag) {
   22df0:	e0bfe103 	ldbu	r2,-124(fp)
   22df4:	1000c926 	beq	r2,zero,2311c <Sensor_Report+0x708>
#ifdef DEBUG
		////////////////////////////////
		// Print out threshold values
		int *pi = &thresh.light[0][0];
   22df8:	00800134 	movhi	r2,4
   22dfc:	10b24f04 	addi	r2,r2,-14020
   22e00:	e0bffa15 	stw	r2,-24(fp)
		printf(" TH:light ");
   22e04:	01000134 	movhi	r4,4
   22e08:	21217704 	addi	r4,r4,-31268
   22e0c:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 4; i++) {
   22e10:	e03ff915 	stw	zero,-28(fp)
   22e14:	00000b06 	br	22e44 <Sensor_Report+0x430>
			printf("%d ", *pi++);
   22e18:	e0bffa17 	ldw	r2,-24(fp)
   22e1c:	10c00104 	addi	r3,r2,4
   22e20:	e0fffa15 	stw	r3,-24(fp)
   22e24:	10800017 	ldw	r2,0(r2)
   22e28:	100b883a 	mov	r5,r2
   22e2c:	01000134 	movhi	r4,4
   22e30:	21217a04 	addi	r4,r4,-31256
   22e34:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 4; i++) {
   22e38:	e0bff917 	ldw	r2,-28(fp)
   22e3c:	10800044 	addi	r2,r2,1
   22e40:	e0bff915 	stw	r2,-28(fp)
   22e44:	e0bff917 	ldw	r2,-28(fp)
   22e48:	10800110 	cmplti	r2,r2,4
   22e4c:	103ff21e 	bne	r2,zero,22e18 <Sensor_Report+0x404>
		}
		printf("\n");
   22e50:	01000284 	movi	r4,10
   22e54:	002a9640 	call	2a964 <putchar>
		float *pf;
		pf = &thresh.lux[0];
   22e58:	00800134 	movhi	r2,4
   22e5c:	10b25304 	addi	r2,r2,-14004
   22e60:	e0bff815 	stw	r2,-32(fp)
		printf(" TH:Lux ");
   22e64:	01000134 	movhi	r4,4
   22e68:	21217b04 	addi	r4,r4,-31252
   22e6c:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 2; i++) {
   22e70:	e03ff715 	stw	zero,-36(fp)
   22e74:	00001006 	br	22eb8 <Sensor_Report+0x4a4>
			printf("%.3f ", *pf++);
   22e78:	e0bff817 	ldw	r2,-32(fp)
   22e7c:	10c00104 	addi	r3,r2,4
   22e80:	e0fff815 	stw	r3,-32(fp)
   22e84:	10c00017 	ldw	r3,0(r2)
   22e88:	1809883a 	mov	r4,r3
   22e8c:	002a6280 	call	2a628 <__extendsfdf2>
   22e90:	100d883a 	mov	r6,r2
   22e94:	180f883a 	mov	r7,r3
   22e98:	300b883a 	mov	r5,r6
   22e9c:	380d883a 	mov	r6,r7
   22ea0:	01000134 	movhi	r4,4
   22ea4:	21217e04 	addi	r4,r4,-31240
   22ea8:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 2; i++) {
   22eac:	e0bff717 	ldw	r2,-36(fp)
   22eb0:	10800044 	addi	r2,r2,1
   22eb4:	e0bff715 	stw	r2,-36(fp)
   22eb8:	e0bff717 	ldw	r2,-36(fp)
   22ebc:	10800090 	cmplti	r2,r2,2
   22ec0:	103fed1e 	bne	r2,zero,22e78 <Sensor_Report+0x464>
		}
		printf("\n");
   22ec4:	01000284 	movi	r4,10
   22ec8:	002a9640 	call	2a964 <putchar>
		pf = &thresh.fTemperature[0];
   22ecc:	00800134 	movhi	r2,4
   22ed0:	10b25504 	addi	r2,r2,-13996
   22ed4:	e0bff815 	stw	r2,-32(fp)
		printf(" TH:Temp ");
   22ed8:	01000134 	movhi	r4,4
   22edc:	21218004 	addi	r4,r4,-31232
   22ee0:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 2; i++) {
   22ee4:	e03ff615 	stw	zero,-40(fp)
   22ee8:	00001006 	br	22f2c <Sensor_Report+0x518>
			printf("%.3f ", *pf++);
   22eec:	e0bff817 	ldw	r2,-32(fp)
   22ef0:	10c00104 	addi	r3,r2,4
   22ef4:	e0fff815 	stw	r3,-32(fp)
   22ef8:	10c00017 	ldw	r3,0(r2)
   22efc:	1809883a 	mov	r4,r3
   22f00:	002a6280 	call	2a628 <__extendsfdf2>
   22f04:	100d883a 	mov	r6,r2
   22f08:	180f883a 	mov	r7,r3
   22f0c:	300b883a 	mov	r5,r6
   22f10:	380d883a 	mov	r6,r7
   22f14:	01000134 	movhi	r4,4
   22f18:	21217e04 	addi	r4,r4,-31240
   22f1c:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 2; i++) {
   22f20:	e0bff617 	ldw	r2,-40(fp)
   22f24:	10800044 	addi	r2,r2,1
   22f28:	e0bff615 	stw	r2,-40(fp)
   22f2c:	e0bff617 	ldw	r2,-40(fp)
   22f30:	10800090 	cmplti	r2,r2,2
   22f34:	103fed1e 	bne	r2,zero,22eec <Sensor_Report+0x4d8>
		}
		printf("\n");
   22f38:	01000284 	movi	r4,10
   22f3c:	002a9640 	call	2a964 <putchar>
		pf = &thresh.fHumidity[0];
   22f40:	00800134 	movhi	r2,4
   22f44:	10b25704 	addi	r2,r2,-13988
   22f48:	e0bff815 	stw	r2,-32(fp)
		printf(" TH:HM ");
   22f4c:	01000134 	movhi	r4,4
   22f50:	21218304 	addi	r4,r4,-31220
   22f54:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 2; i++) {
   22f58:	e03ff515 	stw	zero,-44(fp)
   22f5c:	00001006 	br	22fa0 <Sensor_Report+0x58c>
			printf("%.3f ", *pf++);
   22f60:	e0bff817 	ldw	r2,-32(fp)
   22f64:	10c00104 	addi	r3,r2,4
   22f68:	e0fff815 	stw	r3,-32(fp)
   22f6c:	10c00017 	ldw	r3,0(r2)
   22f70:	1809883a 	mov	r4,r3
   22f74:	002a6280 	call	2a628 <__extendsfdf2>
   22f78:	100d883a 	mov	r6,r2
   22f7c:	180f883a 	mov	r7,r3
   22f80:	300b883a 	mov	r5,r6
   22f84:	380d883a 	mov	r6,r7
   22f88:	01000134 	movhi	r4,4
   22f8c:	21217e04 	addi	r4,r4,-31240
   22f90:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 2; i++) {
   22f94:	e0bff517 	ldw	r2,-44(fp)
   22f98:	10800044 	addi	r2,r2,1
   22f9c:	e0bff515 	stw	r2,-44(fp)
   22fa0:	e0bff517 	ldw	r2,-44(fp)
   22fa4:	10800090 	cmplti	r2,r2,2
   22fa8:	103fed1e 	bne	r2,zero,22f60 <Sensor_Report+0x54c>
		}
		printf("\n");
   22fac:	01000284 	movi	r4,10
   22fb0:	002a9640 	call	2a964 <putchar>
		pf = &thresh.a[0][0];
   22fb4:	00800134 	movhi	r2,4
   22fb8:	10b25904 	addi	r2,r2,-13980
   22fbc:	e0bff815 	stw	r2,-32(fp)
		printf(" TH:a* ");
   22fc0:	01000134 	movhi	r4,4
   22fc4:	21218504 	addi	r4,r4,-31212
   22fc8:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 6; i++) {
   22fcc:	e03ff415 	stw	zero,-48(fp)
   22fd0:	00001006 	br	23014 <Sensor_Report+0x600>
			printf("%.3f ", *pf++);
   22fd4:	e0bff817 	ldw	r2,-32(fp)
   22fd8:	10c00104 	addi	r3,r2,4
   22fdc:	e0fff815 	stw	r3,-32(fp)
   22fe0:	10c00017 	ldw	r3,0(r2)
   22fe4:	1809883a 	mov	r4,r3
   22fe8:	002a6280 	call	2a628 <__extendsfdf2>
   22fec:	100d883a 	mov	r6,r2
   22ff0:	180f883a 	mov	r7,r3
   22ff4:	300b883a 	mov	r5,r6
   22ff8:	380d883a 	mov	r6,r7
   22ffc:	01000134 	movhi	r4,4
   23000:	21217e04 	addi	r4,r4,-31240
   23004:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 6; i++) {
   23008:	e0bff417 	ldw	r2,-48(fp)
   2300c:	10800044 	addi	r2,r2,1
   23010:	e0bff415 	stw	r2,-48(fp)
   23014:	e0bff417 	ldw	r2,-48(fp)
   23018:	10800190 	cmplti	r2,r2,6
   2301c:	103fed1e 	bne	r2,zero,22fd4 <Sensor_Report+0x5c0>
		}
		printf("\n");
   23020:	01000284 	movi	r4,10
   23024:	002a9640 	call	2a964 <putchar>
		pf = &thresh.g[0][0];
   23028:	00800134 	movhi	r2,4
   2302c:	10b25f04 	addi	r2,r2,-13956
   23030:	e0bff815 	stw	r2,-32(fp)
		printf(" TH:g* ");
   23034:	01000134 	movhi	r4,4
   23038:	21218704 	addi	r4,r4,-31204
   2303c:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 6; i++) {
   23040:	e03ff315 	stw	zero,-52(fp)
   23044:	00001006 	br	23088 <Sensor_Report+0x674>
			printf("%.3f ", *pf++);
   23048:	e0bff817 	ldw	r2,-32(fp)
   2304c:	10c00104 	addi	r3,r2,4
   23050:	e0fff815 	stw	r3,-32(fp)
   23054:	10c00017 	ldw	r3,0(r2)
   23058:	1809883a 	mov	r4,r3
   2305c:	002a6280 	call	2a628 <__extendsfdf2>
   23060:	100d883a 	mov	r6,r2
   23064:	180f883a 	mov	r7,r3
   23068:	300b883a 	mov	r5,r6
   2306c:	380d883a 	mov	r6,r7
   23070:	01000134 	movhi	r4,4
   23074:	21217e04 	addi	r4,r4,-31240
   23078:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 6; i++) {
   2307c:	e0bff317 	ldw	r2,-52(fp)
   23080:	10800044 	addi	r2,r2,1
   23084:	e0bff315 	stw	r2,-52(fp)
   23088:	e0bff317 	ldw	r2,-52(fp)
   2308c:	10800190 	cmplti	r2,r2,6
   23090:	103fed1e 	bne	r2,zero,23048 <Sensor_Report+0x634>
		}
		printf("\n");
   23094:	01000284 	movi	r4,10
   23098:	002a9640 	call	2a964 <putchar>
		pf = &thresh.m[0][0];
   2309c:	00800134 	movhi	r2,4
   230a0:	10b26504 	addi	r2,r2,-13932
   230a4:	e0bff815 	stw	r2,-32(fp)
		printf(" TH:m* ");
   230a8:	01000134 	movhi	r4,4
   230ac:	21218904 	addi	r4,r4,-31196
   230b0:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 6; i++) {
   230b4:	e03ff215 	stw	zero,-56(fp)
   230b8:	00001006 	br	230fc <Sensor_Report+0x6e8>
			printf("%.3f ", *pf++);
   230bc:	e0bff817 	ldw	r2,-32(fp)
   230c0:	10c00104 	addi	r3,r2,4
   230c4:	e0fff815 	stw	r3,-32(fp)
   230c8:	10c00017 	ldw	r3,0(r2)
   230cc:	1809883a 	mov	r4,r3
   230d0:	002a6280 	call	2a628 <__extendsfdf2>
   230d4:	100d883a 	mov	r6,r2
   230d8:	180f883a 	mov	r7,r3
   230dc:	300b883a 	mov	r5,r6
   230e0:	380d883a 	mov	r6,r7
   230e4:	01000134 	movhi	r4,4
   230e8:	21217e04 	addi	r4,r4,-31240
   230ec:	002a9240 	call	2a924 <printf>
		for (int i = 0; i < 6; i++) {
   230f0:	e0bff217 	ldw	r2,-56(fp)
   230f4:	10800044 	addi	r2,r2,1
   230f8:	e0bff215 	stw	r2,-56(fp)
   230fc:	e0bff217 	ldw	r2,-56(fp)
   23100:	10800190 	cmplti	r2,r2,6
   23104:	103fed1e 	bne	r2,zero,230bc <Sensor_Report+0x6a8>
		}
		printf("\n");
   23108:	01000284 	movi	r4,10
   2310c:	002a9640 	call	2a964 <putchar>
#endif
		printf("\r\n");
   23110:	01000134 	movhi	r4,4
   23114:	21218b04 	addi	r4,r4,-31188
   23118:	002aa480 	call	2aa48 <puts>
	////////////////////////////////
	// Set sensor values in shared memory
	unsigned offst;

	// Light0,1
	offst = LIGHT0_SENSOR_VALUE >> 2;
   2311c:	00801004 	movi	r2,64
   23120:	e0bff015 	stw	r2,-64(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, light0);
   23124:	e0bff017 	ldw	r2,-64(fp)
   23128:	100490ba 	slli	r2,r2,2
   2312c:	10880004 	addi	r2,r2,8192
   23130:	e0ffee8b 	ldhu	r3,-70(fp)
   23134:	18ffffcc 	andi	r3,r3,65535
   23138:	10c00035 	stwio	r3,0(r2)
	offst = LIGHT1_SENSOR_VALUE >> 2;
   2313c:	00801044 	movi	r2,65
   23140:	e0bff015 	stw	r2,-64(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, light1);
   23144:	e0bff017 	ldw	r2,-64(fp)
   23148:	100490ba 	slli	r2,r2,2
   2314c:	10880004 	addi	r2,r2,8192
   23150:	e0ffee0b 	ldhu	r3,-72(fp)
   23154:	18ffffcc 	andi	r3,r3,65535
   23158:	10c00035 	stwio	r3,0(r2)
	unsigned *p;
	offst = LUX_SENSOR_VALUE >> 2;
   2315c:	00801084 	movi	r2,66
   23160:	e0bff015 	stw	r2,-64(fp)
	p = (unsigned *) &lux;
   23164:	e0bfed04 	addi	r2,fp,-76
   23168:	e0bfef15 	stw	r2,-68(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, *p);
   2316c:	e0bff017 	ldw	r2,-64(fp)
   23170:	100490ba 	slli	r2,r2,2
   23174:	10880004 	addi	r2,r2,8192
   23178:	e0ffef17 	ldw	r3,-68(fp)
   2317c:	18c00017 	ldw	r3,0(r3)
   23180:	10c00035 	stwio	r3,0(r2)

	// Temp. and Humidity
	offst = HUMIDI_SENSOR_VALUE >> 2;
   23184:	008010c4 	movi	r2,67
   23188:	e0bff015 	stw	r2,-64(fp)
	p = (unsigned *) &fHumidity;
   2318c:	e0bfeb04 	addi	r2,fp,-84
   23190:	e0bfef15 	stw	r2,-68(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, *p);
   23194:	e0bff017 	ldw	r2,-64(fp)
   23198:	100490ba 	slli	r2,r2,2
   2319c:	10880004 	addi	r2,r2,8192
   231a0:	e0ffef17 	ldw	r3,-68(fp)
   231a4:	18c00017 	ldw	r3,0(r3)
   231a8:	10c00035 	stwio	r3,0(r2)
	offst = TEMPER_SENSOR_VALUE >> 2;
   231ac:	00801104 	movi	r2,68
   231b0:	e0bff015 	stw	r2,-64(fp)
	p = (unsigned *) &fTemperature;
   231b4:	e0bfec04 	addi	r2,fp,-80
   231b8:	e0bfef15 	stw	r2,-68(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, *p);
   231bc:	e0bff017 	ldw	r2,-64(fp)
   231c0:	100490ba 	slli	r2,r2,2
   231c4:	10880004 	addi	r2,r2,8192
   231c8:	e0ffef17 	ldw	r3,-68(fp)
   231cc:	18c00017 	ldw	r3,0(r3)
   231d0:	10c00035 	stwio	r3,0(r2)

	// 9-Axes
	offst = ACCEL_X_SENSOR_VALUE >> 2;
   231d4:	00801144 	movi	r2,69
   231d8:	e0bff015 	stw	r2,-64(fp)
	p = (unsigned *) &a[0];
   231dc:	e0bfe804 	addi	r2,fp,-96
   231e0:	e0bfef15 	stw	r2,-68(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
   231e4:	e0bff017 	ldw	r2,-64(fp)
   231e8:	10c00044 	addi	r3,r2,1
   231ec:	e0fff015 	stw	r3,-64(fp)
   231f0:	100490ba 	slli	r2,r2,2
   231f4:	10880004 	addi	r2,r2,8192
   231f8:	e0ffef17 	ldw	r3,-68(fp)
   231fc:	18c00017 	ldw	r3,0(r3)
   23200:	10c00035 	stwio	r3,0(r2)
	p = (unsigned *) &a[1];
   23204:	e0bfe804 	addi	r2,fp,-96
   23208:	10800104 	addi	r2,r2,4
   2320c:	e0bfef15 	stw	r2,-68(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
   23210:	e0bff017 	ldw	r2,-64(fp)
   23214:	10c00044 	addi	r3,r2,1
   23218:	e0fff015 	stw	r3,-64(fp)
   2321c:	100490ba 	slli	r2,r2,2
   23220:	10880004 	addi	r2,r2,8192
   23224:	e0ffef17 	ldw	r3,-68(fp)
   23228:	18c00017 	ldw	r3,0(r3)
   2322c:	10c00035 	stwio	r3,0(r2)
	p = (unsigned *) &a[2];
   23230:	e0bfe804 	addi	r2,fp,-96
   23234:	10800204 	addi	r2,r2,8
   23238:	e0bfef15 	stw	r2,-68(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
   2323c:	e0bff017 	ldw	r2,-64(fp)
   23240:	10c00044 	addi	r3,r2,1
   23244:	e0fff015 	stw	r3,-64(fp)
   23248:	100490ba 	slli	r2,r2,2
   2324c:	10880004 	addi	r2,r2,8192
   23250:	e0ffef17 	ldw	r3,-68(fp)
   23254:	18c00017 	ldw	r3,0(r3)
   23258:	10c00035 	stwio	r3,0(r2)
	offst = GYROS_X_SENSOR_VALUE >> 2;
   2325c:	00801204 	movi	r2,72
   23260:	e0bff015 	stw	r2,-64(fp)
	p = (unsigned *) &g[0];
   23264:	e0bfe504 	addi	r2,fp,-108
   23268:	e0bfef15 	stw	r2,-68(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
   2326c:	e0bff017 	ldw	r2,-64(fp)
   23270:	10c00044 	addi	r3,r2,1
   23274:	e0fff015 	stw	r3,-64(fp)
   23278:	100490ba 	slli	r2,r2,2
   2327c:	10880004 	addi	r2,r2,8192
   23280:	e0ffef17 	ldw	r3,-68(fp)
   23284:	18c00017 	ldw	r3,0(r3)
   23288:	10c00035 	stwio	r3,0(r2)
	p = (unsigned *) &g[1];
   2328c:	e0bfe504 	addi	r2,fp,-108
   23290:	10800104 	addi	r2,r2,4
   23294:	e0bfef15 	stw	r2,-68(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
   23298:	e0bff017 	ldw	r2,-64(fp)
   2329c:	10c00044 	addi	r3,r2,1
   232a0:	e0fff015 	stw	r3,-64(fp)
   232a4:	100490ba 	slli	r2,r2,2
   232a8:	10880004 	addi	r2,r2,8192
   232ac:	e0ffef17 	ldw	r3,-68(fp)
   232b0:	18c00017 	ldw	r3,0(r3)
   232b4:	10c00035 	stwio	r3,0(r2)
	p = (unsigned *) &g[2];
   232b8:	e0bfe504 	addi	r2,fp,-108
   232bc:	10800204 	addi	r2,r2,8
   232c0:	e0bfef15 	stw	r2,-68(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
   232c4:	e0bff017 	ldw	r2,-64(fp)
   232c8:	10c00044 	addi	r3,r2,1
   232cc:	e0fff015 	stw	r3,-64(fp)
   232d0:	100490ba 	slli	r2,r2,2
   232d4:	10880004 	addi	r2,r2,8192
   232d8:	e0ffef17 	ldw	r3,-68(fp)
   232dc:	18c00017 	ldw	r3,0(r3)
   232e0:	10c00035 	stwio	r3,0(r2)
	offst = MAGNE_X_SENSOR_VALUE >> 2;
   232e4:	008012c4 	movi	r2,75
   232e8:	e0bff015 	stw	r2,-64(fp)
	p = (unsigned *) &m[0];
   232ec:	e0bfe204 	addi	r2,fp,-120
   232f0:	e0bfef15 	stw	r2,-68(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
   232f4:	e0bff017 	ldw	r2,-64(fp)
   232f8:	10c00044 	addi	r3,r2,1
   232fc:	e0fff015 	stw	r3,-64(fp)
   23300:	100490ba 	slli	r2,r2,2
   23304:	10880004 	addi	r2,r2,8192
   23308:	e0ffef17 	ldw	r3,-68(fp)
   2330c:	18c00017 	ldw	r3,0(r3)
   23310:	10c00035 	stwio	r3,0(r2)
	p = (unsigned *) &m[1];
   23314:	e0bfe204 	addi	r2,fp,-120
   23318:	10800104 	addi	r2,r2,4
   2331c:	e0bfef15 	stw	r2,-68(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
   23320:	e0bff017 	ldw	r2,-64(fp)
   23324:	10c00044 	addi	r3,r2,1
   23328:	e0fff015 	stw	r3,-64(fp)
   2332c:	100490ba 	slli	r2,r2,2
   23330:	10880004 	addi	r2,r2,8192
   23334:	e0ffef17 	ldw	r3,-68(fp)
   23338:	18c00017 	ldw	r3,0(r3)
   2333c:	10c00035 	stwio	r3,0(r2)
	p = (unsigned *) &m[2];
   23340:	e0bfe204 	addi	r2,fp,-120
   23344:	10800204 	addi	r2,r2,8
   23348:	e0bfef15 	stw	r2,-68(fp)
	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
   2334c:	e0bff017 	ldw	r2,-64(fp)
   23350:	10c00044 	addi	r3,r2,1
   23354:	e0fff015 	stw	r3,-64(fp)
   23358:	100490ba 	slli	r2,r2,2
   2335c:	10880004 	addi	r2,r2,8192
   23360:	e0ffef17 	ldw	r3,-68(fp)
   23364:	18c00017 	ldw	r3,0(r3)
   23368:	10c00035 	stwio	r3,0(r2)

}
   2336c:	0001883a 	nop
   23370:	e6fffc04 	addi	sp,fp,-16
   23374:	dfc00517 	ldw	ra,20(sp)
   23378:	df000417 	ldw	fp,16(sp)
   2337c:	dcc00317 	ldw	r19,12(sp)
   23380:	dc800217 	ldw	r18,8(sp)
   23384:	dc400117 	ldw	r17,4(sp)
   23388:	dc000017 	ldw	r16,0(sp)
   2338c:	dec00604 	addi	sp,sp,24
   23390:	f800283a 	ret

00023394 <Ad7790INIT>:
#define SEND_ACK_COMMUNICATION_REGISTER IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, 1, 0)
#define SEND_STATUS_REGISTER(x) IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, 0, (x))

//Custom
#ifdef CO_AX_SPI
void Ad7790INIT(void) {
   23394:	defffe04 	addi	sp,sp,-8
   23398:	dfc00115 	stw	ra,4(sp)
   2339c:	df000015 	stw	fp,0(sp)
   233a0:	d839883a 	mov	fp,sp
	writeAd7790(RESET, 0xFF);				//Resets the part for initial use
   233a4:	01403fc4 	movi	r5,255
   233a8:	01003fc4 	movi	r4,255
   233ac:	00206100 	call	20610 <writeAd7790>
	usleep(1000);
   233b0:	0100fa04 	movi	r4,1000
   233b4:	00361680 	call	36168 <usleep>
	writeAd7790(MODE_WRITE, 0x00);//Mode register value (single conversion, +/- Vref input, unbuffered mode)
   233b8:	000b883a 	mov	r5,zero
   233bc:	01000404 	movi	r4,16
   233c0:	00206100 	call	20610 <writeAd7790>
	writeAd7790(FILTER_WRITE, 0x07);// Filter register value (clock not divided down, 9.5 Hz update rate)
   233c4:	014001c4 	movi	r5,7
   233c8:	01000804 	movi	r4,32
   233cc:	00206100 	call	20610 <writeAd7790>
}
   233d0:	0001883a 	nop
   233d4:	e037883a 	mov	sp,fp
   233d8:	dfc00117 	ldw	ra,4(sp)
   233dc:	df000017 	ldw	fp,0(sp)
   233e0:	dec00204 	addi	sp,sp,8
   233e4:	f800283a 	ret

000233e8 <Ad5270INIT>:

void Ad5270INIT(void) {
   233e8:	defffe04 	addi	sp,sp,-8
   233ec:	dfc00115 	stw	ra,4(sp)
   233f0:	df000015 	stw	fp,0(sp)
   233f4:	d839883a 	mov	fp,sp
	writeAd5270(WRITE_CTRL_REG, 0x02);		//Enable RDAC writes
   233f8:	01400084 	movi	r5,2
   233fc:	010001c4 	movi	r4,7
   23400:	00202600 	call	20260 <writeAd5270>
}
   23404:	0001883a 	nop
   23408:	e037883a 	mov	sp,fp
   2340c:	dfc00117 	ldw	ra,4(sp)
   23410:	df000017 	ldw	fp,0(sp)
   23414:	dec00204 	addi	sp,sp,8
   23418:	f800283a 	ret

0002341c <calculateFeedbackResistor>:
#endif

float calculateFeedbackResistor(void) {
   2341c:	defffd04 	addi	sp,sp,-12
   23420:	dfc00215 	stw	ra,8(sp)
   23424:	df000115 	stw	fp,4(sp)
   23428:	df000104 	addi	fp,sp,4
	float fFeedback = 0;
   2342c:	e03fff15 	stw	zero,-4(fp)
	fFeedback = 1.2 / (ui16sensorRange * ui16sensitivity * pow(10, -9));//1.2 is the Vref of the circuit
   23430:	d0a0040b 	ldhu	r2,-32752(gp)
   23434:	10bfffcc 	andi	r2,r2,65535
   23438:	d0e0048b 	ldhu	r3,-32750(gp)
   2343c:	18ffffcc 	andi	r3,r3,65535
   23440:	180b883a 	mov	r5,r3
   23444:	1009883a 	mov	r4,r2
   23448:	0026b4c0 	call	26b4c <__mulsi3>
   2344c:	1009883a 	mov	r4,r2
   23450:	002a5700 	call	2a570 <__floatsidf>
   23454:	1011883a 	mov	r8,r2
   23458:	1813883a 	mov	r9,r3
   2345c:	01ba09f4 	movhi	r6,59431
   23460:	31b5a544 	addi	r6,r6,-10603
   23464:	01cf8474 	movhi	r7,15889
   23468:	39cb82c4 	addi	r7,r7,11787
   2346c:	4009883a 	mov	r4,r8
   23470:	480b883a 	mov	r5,r9
   23474:	00295100 	call	29510 <__muldf3>
   23478:	1009883a 	mov	r4,r2
   2347c:	180b883a 	mov	r5,r3
   23480:	2005883a 	mov	r2,r4
   23484:	2807883a 	mov	r3,r5
   23488:	100d883a 	mov	r6,r2
   2348c:	180f883a 	mov	r7,r3
   23490:	010cccf4 	movhi	r4,13107
   23494:	210cccc4 	addi	r4,r4,13107
   23498:	014ffcf4 	movhi	r5,16371
   2349c:	294cccc4 	addi	r5,r5,13107
   234a0:	0028a100 	call	28a10 <__divdf3>
   234a4:	1009883a 	mov	r4,r2
   234a8:	180b883a 	mov	r5,r3
   234ac:	2005883a 	mov	r2,r4
   234b0:	2807883a 	mov	r3,r5
   234b4:	1009883a 	mov	r4,r2
   234b8:	180b883a 	mov	r5,r3
   234bc:	002a7240 	call	2a724 <__truncdfsf2>
   234c0:	1007883a 	mov	r3,r2
   234c4:	e0ffff15 	stw	r3,-4(fp)
	return fFeedback;
   234c8:	e0bfff17 	ldw	r2,-4(fp)
   234cc:	1007883a 	mov	r3,r2
}
   234d0:	1805883a 	mov	r2,r3
   234d4:	e037883a 	mov	sp,fp
   234d8:	dfc00117 	ldw	ra,4(sp)
   234dc:	df000017 	ldw	fp,0(sp)
   234e0:	dec00204 	addi	sp,sp,8
   234e4:	f800283a 	ret

000234e8 <setResistorValue>:

uint16_t setResistorValue(float resistor) {
   234e8:	defffc04 	addi	sp,sp,-16
   234ec:	dfc00315 	stw	ra,12(sp)
   234f0:	df000215 	stw	fp,8(sp)
   234f4:	df000204 	addi	fp,sp,8
   234f8:	e13ffe15 	stw	r4,-8(fp)
	uint16_t ui16RdacCode = 0;
   234fc:	e03fff8d 	sth	zero,-2(fp)
	ui16RdacCode = (int) (resistor / (20000 / 1024));
   23500:	01506634 	movhi	r5,16792
   23504:	e13ffe17 	ldw	r4,-8(fp)
   23508:	0026fe00 	call	26fe0 <__divsf3>
   2350c:	1007883a 	mov	r3,r2
   23510:	1805883a 	mov	r2,r3
   23514:	1009883a 	mov	r4,r2
   23518:	0027e900 	call	27e90 <__fixsfsi>
   2351c:	e0bfff8d 	sth	r2,-2(fp)
	return ui16RdacCode;
   23520:	e0bfff8b 	ldhu	r2,-2(fp)
}
   23524:	e037883a 	mov	sp,fp
   23528:	dfc00117 	ldw	ra,4(sp)
   2352c:	df000017 	ldw	fp,0(sp)
   23530:	dec00204 	addi	sp,sp,8
   23534:	f800283a 	ret

00023538 <set_custom_thresh>:

void set_custom_thresh(void) {
   23538:	defff904 	addi	sp,sp,-28
   2353c:	df000615 	stw	fp,24(sp)
   23540:	df000604 	addi	fp,sp,24
		unsigned u;
		float f;
	} uf;

	// Light threshold
	offst = ADC0_SENSOR_L_THRESH >> 2;
   23544:	00804004 	movi	r2,256
   23548:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < 2; i++) {
   2354c:	e03ffe15 	stw	zero,-8(fp)
   23550:	00000f06 	br	23590 <set_custom_thresh+0x58>
		custom_thresh.adc[0][i] = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
   23554:	e0bfff17 	ldw	r2,-4(fp)
   23558:	10c00044 	addi	r3,r2,1
   2355c:	e0ffff15 	stw	r3,-4(fp)
   23560:	100490ba 	slli	r2,r2,2
   23564:	10880004 	addi	r2,r2,8192
   23568:	10800037 	ldwio	r2,0(r2)
   2356c:	1009883a 	mov	r4,r2
   23570:	e0bffe17 	ldw	r2,-8(fp)
   23574:	100690ba 	slli	r3,r2,2
   23578:	00800134 	movhi	r2,4
   2357c:	1885883a 	add	r2,r3,r2
   23580:	11326b15 	stw	r4,-13908(r2)
	for (int i = 0; i < 2; i++) {
   23584:	e0bffe17 	ldw	r2,-8(fp)
   23588:	10800044 	addi	r2,r2,1
   2358c:	e0bffe15 	stw	r2,-8(fp)
   23590:	e0bffe17 	ldw	r2,-8(fp)
   23594:	10800090 	cmplti	r2,r2,2
   23598:	103fee1e 	bne	r2,zero,23554 <set_custom_thresh+0x1c>
	}
	offst = ADC1_SENSOR_L_THRESH >> 2;
   2359c:	00804084 	movi	r2,258
   235a0:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < 2; i++) {
   235a4:	e03ffd15 	stw	zero,-12(fp)
   235a8:	00001006 	br	235ec <set_custom_thresh+0xb4>
		custom_thresh.adc[1][i] = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
   235ac:	e0bfff17 	ldw	r2,-4(fp)
   235b0:	10c00044 	addi	r3,r2,1
   235b4:	e0ffff15 	stw	r3,-4(fp)
   235b8:	100490ba 	slli	r2,r2,2
   235bc:	10880004 	addi	r2,r2,8192
   235c0:	10800037 	ldwio	r2,0(r2)
   235c4:	1009883a 	mov	r4,r2
   235c8:	e0bffd17 	ldw	r2,-12(fp)
   235cc:	10800084 	addi	r2,r2,2
   235d0:	100690ba 	slli	r3,r2,2
   235d4:	00800134 	movhi	r2,4
   235d8:	1885883a 	add	r2,r3,r2
   235dc:	11326b15 	stw	r4,-13908(r2)
	for (int i = 0; i < 2; i++) {
   235e0:	e0bffd17 	ldw	r2,-12(fp)
   235e4:	10800044 	addi	r2,r2,1
   235e8:	e0bffd15 	stw	r2,-12(fp)
   235ec:	e0bffd17 	ldw	r2,-12(fp)
   235f0:	10800090 	cmplti	r2,r2,2
   235f4:	103fed1e 	bne	r2,zero,235ac <set_custom_thresh+0x74>
	}
	offst = ADC2_SENSOR_L_THRESH >> 2;
   235f8:	00804104 	movi	r2,260
   235fc:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < 2; i++) {
   23600:	e03ffc15 	stw	zero,-16(fp)
   23604:	00001006 	br	23648 <set_custom_thresh+0x110>
		custom_thresh.adc[2][i] = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
   23608:	e0bfff17 	ldw	r2,-4(fp)
   2360c:	10c00044 	addi	r3,r2,1
   23610:	e0ffff15 	stw	r3,-4(fp)
   23614:	100490ba 	slli	r2,r2,2
   23618:	10880004 	addi	r2,r2,8192
   2361c:	10800037 	ldwio	r2,0(r2)
   23620:	1009883a 	mov	r4,r2
   23624:	e0bffc17 	ldw	r2,-16(fp)
   23628:	10800104 	addi	r2,r2,4
   2362c:	100690ba 	slli	r3,r2,2
   23630:	00800134 	movhi	r2,4
   23634:	1885883a 	add	r2,r3,r2
   23638:	11326b15 	stw	r4,-13908(r2)
	for (int i = 0; i < 2; i++) {
   2363c:	e0bffc17 	ldw	r2,-16(fp)
   23640:	10800044 	addi	r2,r2,1
   23644:	e0bffc15 	stw	r2,-16(fp)
   23648:	e0bffc17 	ldw	r2,-16(fp)
   2364c:	10800090 	cmplti	r2,r2,2
   23650:	103fed1e 	bne	r2,zero,23608 <set_custom_thresh+0xd0>
	}
	offst = CO_SENSOR_L_THRESH >> 2;
   23654:	00804184 	movi	r2,262
   23658:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < 2; i++) {
   2365c:	e03ffb15 	stw	zero,-20(fp)
   23660:	00001106 	br	236a8 <set_custom_thresh+0x170>
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
   23664:	e0bfff17 	ldw	r2,-4(fp)
   23668:	10c00044 	addi	r3,r2,1
   2366c:	e0ffff15 	stw	r3,-4(fp)
   23670:	100490ba 	slli	r2,r2,2
   23674:	10880004 	addi	r2,r2,8192
   23678:	10800037 	ldwio	r2,0(r2)
   2367c:	e0bffa15 	stw	r2,-24(fp)
		custom_thresh.co[i] = uf.f;
   23680:	e0fffa17 	ldw	r3,-24(fp)
   23684:	e0bffb17 	ldw	r2,-20(fp)
   23688:	10800184 	addi	r2,r2,6
   2368c:	100890ba 	slli	r4,r2,2
   23690:	00800134 	movhi	r2,4
   23694:	2085883a 	add	r2,r4,r2
   23698:	10f26b15 	stw	r3,-13908(r2)
	for (int i = 0; i < 2; i++) {
   2369c:	e0bffb17 	ldw	r2,-20(fp)
   236a0:	10800044 	addi	r2,r2,1
   236a4:	e0bffb15 	stw	r2,-20(fp)
   236a8:	e0bffb17 	ldw	r2,-20(fp)
   236ac:	10800090 	cmplti	r2,r2,2
   236b0:	103fec1e 	bne	r2,zero,23664 <set_custom_thresh+0x12c>
	}
}
   236b4:	0001883a 	nop
   236b8:	0001883a 	nop
   236bc:	e037883a 	mov	sp,fp
   236c0:	df000017 	ldw	fp,0(sp)
   236c4:	dec00104 	addi	sp,sp,4
   236c8:	f800283a 	ret

000236cc <check_adc0_threshold>:

bool check_adc0_threshold(int adc_val) {
   236cc:	defffd04 	addi	sp,sp,-12
   236d0:	df000215 	stw	fp,8(sp)
   236d4:	df000204 	addi	fp,sp,8
   236d8:	e13ffe15 	stw	r4,-8(fp)
	bool rv = false;
   236dc:	e03fffc5 	stb	zero,-1(fp)
	if (is_OutOfRange(adc_val, &custom_thresh.adc[0][0])) {
   236e0:	00800134 	movhi	r2,4
   236e4:	10b26b17 	ldw	r2,-13908(r2)
   236e8:	e0fffe17 	ldw	r3,-8(fp)
   236ec:	18800536 	bltu	r3,r2,23704 <check_adc0_threshold+0x38>
   236f0:	00800134 	movhi	r2,4
   236f4:	10b26c04 	addi	r2,r2,-13904
   236f8:	10c00017 	ldw	r3,0(r2)
   236fc:	e0bffe17 	ldw	r2,-8(fp)
   23700:	1880022e 	bgeu	r3,r2,2370c <check_adc0_threshold+0x40>
			rv = true;
   23704:	00800044 	movi	r2,1
   23708:	e0bfffc5 	stb	r2,-1(fp)
		}
	return rv;
   2370c:	e0bfffc3 	ldbu	r2,-1(fp)
}
   23710:	e037883a 	mov	sp,fp
   23714:	df000017 	ldw	fp,0(sp)
   23718:	dec00104 	addi	sp,sp,4
   2371c:	f800283a 	ret

00023720 <check_adc1_threshold>:

bool check_adc1_threshold(int adc_val) {
   23720:	defffd04 	addi	sp,sp,-12
   23724:	df000215 	stw	fp,8(sp)
   23728:	df000204 	addi	fp,sp,8
   2372c:	e13ffe15 	stw	r4,-8(fp)
	bool rv = false;
   23730:	e03fffc5 	stb	zero,-1(fp)
	if (is_OutOfRange(adc_val, &custom_thresh.adc[1][0])) {
   23734:	00800134 	movhi	r2,4
   23738:	10b26d17 	ldw	r2,-13900(r2)
   2373c:	e0fffe17 	ldw	r3,-8(fp)
   23740:	18800536 	bltu	r3,r2,23758 <check_adc1_threshold+0x38>
   23744:	00800134 	movhi	r2,4
   23748:	10b26e04 	addi	r2,r2,-13896
   2374c:	10c00017 	ldw	r3,0(r2)
   23750:	e0bffe17 	ldw	r2,-8(fp)
   23754:	1880022e 	bgeu	r3,r2,23760 <check_adc1_threshold+0x40>
			rv = true;
   23758:	00800044 	movi	r2,1
   2375c:	e0bfffc5 	stb	r2,-1(fp)
		}
	return rv;
   23760:	e0bfffc3 	ldbu	r2,-1(fp)
}
   23764:	e037883a 	mov	sp,fp
   23768:	df000017 	ldw	fp,0(sp)
   2376c:	dec00104 	addi	sp,sp,4
   23770:	f800283a 	ret

00023774 <check_adc2_threshold>:

bool check_adc2_threshold(int adc_val) {
   23774:	defffd04 	addi	sp,sp,-12
   23778:	df000215 	stw	fp,8(sp)
   2377c:	df000204 	addi	fp,sp,8
   23780:	e13ffe15 	stw	r4,-8(fp)
	bool rv = false;
   23784:	e03fffc5 	stb	zero,-1(fp)
	if (is_OutOfRange(adc_val, &custom_thresh.adc[2][0])) {
   23788:	00800134 	movhi	r2,4
   2378c:	10b26f17 	ldw	r2,-13892(r2)
   23790:	e0fffe17 	ldw	r3,-8(fp)
   23794:	18800536 	bltu	r3,r2,237ac <check_adc2_threshold+0x38>
   23798:	00800134 	movhi	r2,4
   2379c:	10b27004 	addi	r2,r2,-13888
   237a0:	10c00017 	ldw	r3,0(r2)
   237a4:	e0bffe17 	ldw	r2,-8(fp)
   237a8:	1880022e 	bgeu	r3,r2,237b4 <check_adc2_threshold+0x40>
			rv = true;
   237ac:	00800044 	movi	r2,1
   237b0:	e0bfffc5 	stb	r2,-1(fp)
		}
	return rv;
   237b4:	e0bfffc3 	ldbu	r2,-1(fp)
}
   237b8:	e037883a 	mov	sp,fp
   237bc:	df000017 	ldw	fp,0(sp)
   237c0:	dec00104 	addi	sp,sp,4
   237c4:	f800283a 	ret

000237c8 <check_co_threshold>:

bool check_co_threshold(float co_ppm){
   237c8:	defffc04 	addi	sp,sp,-16
   237cc:	dfc00315 	stw	ra,12(sp)
   237d0:	df000215 	stw	fp,8(sp)
   237d4:	df000204 	addi	fp,sp,8
   237d8:	e13ffe15 	stw	r4,-8(fp)
	bool rv = false;
   237dc:	e03fffc5 	stb	zero,-1(fp)
	if (is_OutOfRange(co_ppm, &custom_thresh.co[0])) {
   237e0:	00800134 	movhi	r2,4
   237e4:	10b27117 	ldw	r2,-13884(r2)
   237e8:	100b883a 	mov	r5,r2
   237ec:	e13ffe17 	ldw	r4,-8(fp)
   237f0:	00274fc0 	call	274fc <__lesf2>
   237f4:	10000716 	blt	r2,zero,23814 <check_co_threshold+0x4c>
   237f8:	00800134 	movhi	r2,4
   237fc:	10b27204 	addi	r2,r2,-13880
   23800:	10c00017 	ldw	r3,0(r2)
   23804:	180b883a 	mov	r5,r3
   23808:	e13ffe17 	ldw	r4,-8(fp)
   2380c:	00274440 	call	27444 <__gesf2>
   23810:	0080020e 	bge	zero,r2,2381c <check_co_threshold+0x54>
		rv = true;
   23814:	00800044 	movi	r2,1
   23818:	e0bfffc5 	stb	r2,-1(fp)
	}
	return rv;
   2381c:	e0bfffc3 	ldbu	r2,-1(fp)
}
   23820:	e037883a 	mov	sp,fp
   23824:	dfc00117 	ldw	ra,4(sp)
   23828:	df000017 	ldw	fp,0(sp)
   2382c:	dec00204 	addi	sp,sp,8
   23830:	f800283a 	ret

00023834 <main>:

int main() {
   23834:	deffea04 	addi	sp,sp,-88
   23838:	dfc01515 	stw	ra,84(sp)
   2383c:	df001415 	stw	fp,80(sp)
   23840:	dc401315 	stw	r17,76(sp)
   23844:	dc001215 	stw	r16,72(sp)
   23848:	df001404 	addi	fp,sp,80
//	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);

	printf("Welcome to DE10_NANO RFS_SENSOR DEMO!\r\n");
   2384c:	01000134 	movhi	r4,4
   23850:	21218c04 	addi	r4,r4,-31184
   23854:	002aa480 	call	2aa48 <puts>

	bool bPass = FALSE;
   23858:	e03ff6c5 	stb	zero,-37(fp)

	////////////////////////////////////
	// init light sensor i2c and power on
	Light_Init(LIGHT_I2C_OPENCORES_BASE);
   2385c:	01000134 	movhi	r4,4
   23860:	21040804 	addi	r4,r4,4128
   23864:	00217600 	call	21760 <Light_Init>
	bPass = Light_PowerSwitch(TRUE);
   23868:	01000044 	movi	r4,1
   2386c:	00218880 	call	21888 <Light_PowerSwitch>
   23870:	e0bff6c5 	stb	r2,-37(fp)
	if (bPass)
   23874:	e0bff6c3 	ldbu	r2,-37(fp)
   23878:	10000426 	beq	r2,zero,2388c <main+0x58>
		printf("light sensor power up successful!\r\n");
   2387c:	01000134 	movhi	r4,4
   23880:	21219604 	addi	r4,r4,-31144
   23884:	002aa480 	call	2aa48 <puts>
   23888:	00000306 	br	23898 <main+0x64>
	else
		printf("light sensor power up failed!\r\n");
   2388c:	01000134 	movhi	r4,4
   23890:	21219f04 	addi	r4,r4,-31108
   23894:	002aa480 	call	2aa48 <puts>

	////////////////////////////////////
	// init HDC1000: temperature and humidity sensor
	RH_Temp_Init(RH_TEMP_I2C_OPENCORES_BASE);
   23898:	01000134 	movhi	r4,4
   2389c:	21040004 	addi	r4,r4,4096
   238a0:	00250140 	call	25014 <RH_Temp_Init>
	bPass = RH_Temp_Sensor_Init();
   238a4:	00251580 	call	25158 <RH_Temp_Sensor_Init>
   238a8:	e0bff6c5 	stb	r2,-37(fp)
	if (bPass)
   238ac:	e0bff6c3 	ldbu	r2,-37(fp)
   238b0:	10000426 	beq	r2,zero,238c4 <main+0x90>
		printf("Init HDC1000 successful!\r\n");
   238b4:	01000134 	movhi	r4,4
   238b8:	2121a704 	addi	r4,r4,-31076
   238bc:	002aa480 	call	2aa48 <puts>
   238c0:	00000306 	br	238d0 <main+0x9c>
	else
		printf("Init HDC1000 failed!\r\n");
   238c4:	01000134 	movhi	r4,4
   238c8:	2121ae04 	addi	r4,r4,-31048
   238cc:	002aa480 	call	2aa48 <puts>

	////////////////////////////////////
	//init MPU9250 9-axis sensor
	MPU9250_Init(MPU_I2C_OPENCORES_BASE);
   238d0:	01000134 	movhi	r4,4
   238d4:	21041004 	addi	r4,r4,4160
   238d8:	0023e540 	call	23e54 <MPU9250_Init>
	MPU9250_initialize();
   238dc:	002428c0 	call	2428c <MPU9250_initialize>
	printf("\r\n");
   238e0:	01000134 	movhi	r4,4
   238e4:	21218b04 	addi	r4,r4,-31188
   238e8:	002aa480 	call	2aa48 <puts>

	int loop_cnt = 0;
   238ec:	e03ffd15 	stw	zero,-12(fp)

	//******CUSTOM*****//
#ifdef CO_AX_SPI
	Ad5270INIT();
   238f0:	00233e80 	call	233e8 <Ad5270INIT>
	fResistorValue = calculateFeedbackResistor();
   238f4:	002341c0 	call	2341c <calculateFeedbackResistor>
   238f8:	1007883a 	mov	r3,r2
   238fc:	d0e72115 	stw	r3,-25468(gp)
	ui16RdacWord = setResistorValue(fResistorValue);
   23900:	d0a72117 	ldw	r2,-25468(gp)
   23904:	1009883a 	mov	r4,r2
   23908:	00234e80 	call	234e8 <setResistorValue>
   2390c:	d0a7220d 	sth	r2,-25464(gp)
	writeAd5270(WRITE_RDAC, ui16RdacWord);
   23910:	d0a7220b 	ldhu	r2,-25464(gp)
   23914:	10bfffcc 	andi	r2,r2,65535
   23918:	100b883a 	mov	r5,r2
   2391c:	01000044 	movi	r4,1
   23920:	00202600 	call	20260 <writeAd5270>
	writeAd5270(HI_Z_PREP, 0x8001); // Putting Rheostat into high Z mode on SDO line
   23924:	01600054 	movui	r5,32769
   23928:	01003c04 	movi	r4,240
   2392c:	00202600 	call	20260 <writeAd5270>
	writeAd5270(HI_Z, 0x0000);
   23930:	000b883a 	mov	r5,zero
   23934:	010003c4 	movi	r4,15
   23938:	00202600 	call	20260 <writeAd5270>
	Ad7790INIT();
   2393c:	00233940 	call	23394 <Ad7790INIT>
#endif

	while (1) { // report every second

		SEND_STATUS_REGISTER(loop_cnt | 0x80000000);
   23940:	e0bffd17 	ldw	r2,-12(fp)
   23944:	10a00034 	orhi	r2,r2,32768
   23948:	00880035 	stwio	r2,8192(zero)
		//Mode select
		unsigned com_reg = READ_COMMUNICATION_REGISTER;
   2394c:	00880137 	ldwio	r2,8196(zero)
   23950:	e0bff515 	stw	r2,-44(fp)
		if ((com_reg & 0xffff0000) == 0xaaaa0000) {
   23954:	e0bff517 	ldw	r2,-44(fp)
   23958:	10ffffec 	andhi	r3,r2,65535
   2395c:	00aaaab4 	movhi	r2,43690
   23960:	18800e1e 	bne	r3,r2,2399c <main+0x168>
			SEND_ACK_COMMUNICATION_REGISTER; // Send ACK
   23964:	0005883a 	mov	r2,zero
   23968:	00880135 	stwio	r2,8196(zero)
			switch (com_reg & 0xffff) {
   2396c:	e0bff517 	ldw	r2,-44(fp)
   23970:	10bfffcc 	andi	r2,r2,65535
   23974:	10c00060 	cmpeqi	r3,r2,1
   23978:	1800031e 	bne	r3,zero,23988 <main+0x154>
   2397c:	108000a0 	cmpeqi	r2,r2,2
   23980:	1000031e 	bne	r2,zero,23990 <main+0x15c>
				break;
			case 2:
				g_clear_OOR_flag = true;
				break;
			default:
				break;
   23984:	00000606 	br	239a0 <main+0x16c>
				g_clear_OOR_flag = false;
   23988:	d0200505 	stb	zero,-32748(gp)
				break;
   2398c:	00000406 	br	239a0 <main+0x16c>
				g_clear_OOR_flag = true;
   23990:	00800044 	movi	r2,1
   23994:	d0a00505 	stb	r2,-32748(gp)
				break;
   23998:	00000106 	br	239a0 <main+0x16c>
			}
		}
   2399c:	0001883a 	nop

		set_thresh(); // Read threshold values from shared memory and set the thresh struct
   239a0:	00223a80 	call	223a8 <set_thresh>

		// print out values once every 16 loops
		bool print_flag = ((loop_cnt) & 0xF) == 0;
   239a4:	e0bffd17 	ldw	r2,-12(fp)
   239a8:	108003cc 	andi	r2,r2,15
   239ac:	1005003a 	cmpeq	r2,r2,zero
   239b0:	e0bff4c5 	stb	r2,-45(fp)
		Sensor_Report(print_flag);
   239b4:	e0bff4c3 	ldbu	r2,-45(fp)
   239b8:	1009883a 	mov	r4,r2
   239bc:	0022a140 	call	22a14 <Sensor_Report>

		// CUSTOM
		set_custom_thresh();
   239c0:	00235380 	call	23538 <set_custom_thresh>

		/** ADC Read Code **/
		unsigned int data0 = 0;
   239c4:	e03ff315 	stw	zero,-52(fp)
		unsigned int data1 = 1;
   239c8:	00800044 	movi	r2,1
   239cc:	e0bff215 	stw	r2,-56(fp)
		unsigned int data2 = 1;
   239d0:	00800044 	movi	r2,1
   239d4:	e0bff115 	stw	r2,-60(fp)
		int count = 0;
   239d8:	e03ff015 	stw	zero,-64(fp)
		int channel0 = 0;
   239dc:	e03fef15 	stw	zero,-68(fp)
		int channel1 = 1;
   239e0:	00800044 	movi	r2,1
   239e4:	e0bfee15 	stw	r2,-72(fp)
		int channel2 = 2;
   239e8:	00800084 	movi	r2,2
   239ec:	e0bfed15 	stw	r2,-76(fp)

		*adc = 0;	//start ADC reading
   239f0:	d0a00317 	ldw	r2,-32756(gp)
   239f4:	10000015 	stw	zero,0(r2)
		count += 1;
   239f8:	e0bff017 	ldw	r2,-64(fp)
   239fc:	10800044 	addi	r2,r2,1
   23a00:	e0bff015 	stw	r2,-64(fp)
		data0 = *(adc + channel0);
   23a04:	d0e00317 	ldw	r3,-32756(gp)
   23a08:	e0bfef17 	ldw	r2,-68(fp)
   23a0c:	100490ba 	slli	r2,r2,2
   23a10:	1885883a 	add	r2,r3,r2
   23a14:	10800017 	ldw	r2,0(r2)
   23a18:	e0bff315 	stw	r2,-52(fp)
		data1 = *(adc + channel1);
   23a1c:	d0e00317 	ldw	r3,-32756(gp)
   23a20:	e0bfee17 	ldw	r2,-72(fp)
   23a24:	100490ba 	slli	r2,r2,2
   23a28:	1885883a 	add	r2,r3,r2
   23a2c:	10800017 	ldw	r2,0(r2)
   23a30:	e0bff215 	stw	r2,-56(fp)
		data2 = *(adc + channel2);
   23a34:	d0e00317 	ldw	r3,-32756(gp)
   23a38:	e0bfed17 	ldw	r2,-76(fp)
   23a3c:	100490ba 	slli	r2,r2,2
   23a40:	1885883a 	add	r2,r3,r2
   23a44:	10800017 	ldw	r2,0(r2)
   23a48:	e0bff115 	stw	r2,-60(fp)
		if (print_flag) {
   23a4c:	e0bff4c3 	ldbu	r2,-45(fp)
   23a50:	10000626 	beq	r2,zero,23a6c <main+0x238>
			printf("Channel 0 is %4d.\t Channel1 is %4d.\t Channel2 is %4d.\n",
   23a54:	e1fff117 	ldw	r7,-60(fp)
   23a58:	e1bff217 	ldw	r6,-56(fp)
   23a5c:	e17ff317 	ldw	r5,-52(fp)
   23a60:	01000134 	movhi	r4,4
   23a64:	2121b404 	addi	r4,r4,-31024
   23a68:	002a9240 	call	2a924 <printf>
		}

		/** CO Sensor Read code **/
#ifdef CO_AX_SPI
		do {
			ui16Adcdata = readAd7790(STATUS_READ);
   23a6c:	01000204 	movi	r4,8
   23a70:	00204c40 	call	204c4 <readAd7790>
   23a74:	d0a7228d 	sth	r2,-25462(gp)
			//printf("ADC Status Reg value = %d\n", ui16Adcdata);
		} while (ui16Adcdata & 0x80);
   23a78:	d0a7228b 	ldhu	r2,-25462(gp)
   23a7c:	10bfffcc 	andi	r2,r2,65535
   23a80:	1080200c 	andi	r2,r2,128
   23a84:	103ff91e 	bne	r2,zero,23a6c <main+0x238>
		ui16Adcdata = readAd7790(DATA_READ);
   23a88:	01000e04 	movi	r4,56
   23a8c:	00204c40 	call	204c4 <readAd7790>
   23a90:	d0a7228d 	sth	r2,-25462(gp)
		fAdcVoltage = ((ui16Adcdata / pow(2, 15)) - 1) * 1.2;// Formula for input voltage using bipolar configuration
   23a94:	d0a7228b 	ldhu	r2,-25462(gp)
   23a98:	10bfffcc 	andi	r2,r2,65535
   23a9c:	1009883a 	mov	r4,r2
   23aa0:	002a5700 	call	2a570 <__floatsidf>
   23aa4:	1011883a 	mov	r8,r2
   23aa8:	1813883a 	mov	r9,r3
   23aac:	000d883a 	mov	r6,zero
   23ab0:	01d03834 	movhi	r7,16608
   23ab4:	4009883a 	mov	r4,r8
   23ab8:	480b883a 	mov	r5,r9
   23abc:	0028a100 	call	28a10 <__divdf3>
   23ac0:	1009883a 	mov	r4,r2
   23ac4:	180b883a 	mov	r5,r3
   23ac8:	2005883a 	mov	r2,r4
   23acc:	2807883a 	mov	r3,r5
   23ad0:	000d883a 	mov	r6,zero
   23ad4:	01cffc34 	movhi	r7,16368
   23ad8:	1009883a 	mov	r4,r2
   23adc:	180b883a 	mov	r5,r3
   23ae0:	0029cbc0 	call	29cbc <__subdf3>
   23ae4:	1009883a 	mov	r4,r2
   23ae8:	180b883a 	mov	r5,r3
   23aec:	2005883a 	mov	r2,r4
   23af0:	2807883a 	mov	r3,r5
   23af4:	018cccf4 	movhi	r6,13107
   23af8:	318cccc4 	addi	r6,r6,13107
   23afc:	01cffcf4 	movhi	r7,16371
   23b00:	39ccccc4 	addi	r7,r7,13107
   23b04:	1009883a 	mov	r4,r2
   23b08:	180b883a 	mov	r5,r3
   23b0c:	00295100 	call	29510 <__muldf3>
   23b10:	1009883a 	mov	r4,r2
   23b14:	180b883a 	mov	r5,r3
   23b18:	2005883a 	mov	r2,r4
   23b1c:	2807883a 	mov	r3,r5
   23b20:	1009883a 	mov	r4,r2
   23b24:	180b883a 	mov	r5,r3
   23b28:	002a7240 	call	2a724 <__truncdfsf2>
   23b2c:	1007883a 	mov	r3,r2
   23b30:	d0e72315 	stw	r3,-25460(gp)
		fConcentration = (abs(fAdcVoltage) / (ui16RdacWord * (20000 / 1024)))
   23b34:	d0a72317 	ldw	r2,-25460(gp)
   23b38:	1009883a 	mov	r4,r2
   23b3c:	0027e900 	call	27e90 <__fixsfsi>
   23b40:	1000010e 	bge	r2,zero,23b48 <main+0x314>
   23b44:	0085c83a 	sub	r2,zero,r2
   23b48:	1021883a 	mov	r16,r2
   23b4c:	d0a7220b 	ldhu	r2,-25464(gp)
   23b50:	10bfffcc 	andi	r2,r2,65535
   23b54:	014004c4 	movi	r5,19
   23b58:	1009883a 	mov	r4,r2
   23b5c:	0026b4c0 	call	26b4c <__mulsi3>
   23b60:	100b883a 	mov	r5,r2
   23b64:	8009883a 	mov	r4,r16
   23b68:	00269980 	call	26998 <__divsi3>
				/ (ui16sensitivity * pow(10, -9));
   23b6c:	1009883a 	mov	r4,r2
   23b70:	002a5700 	call	2a570 <__floatsidf>
   23b74:	1021883a 	mov	r16,r2
   23b78:	1823883a 	mov	r17,r3
   23b7c:	d0a0048b 	ldhu	r2,-32750(gp)
   23b80:	10bfffcc 	andi	r2,r2,65535
   23b84:	1009883a 	mov	r4,r2
   23b88:	002a5700 	call	2a570 <__floatsidf>
   23b8c:	1011883a 	mov	r8,r2
   23b90:	1813883a 	mov	r9,r3
   23b94:	01ba09f4 	movhi	r6,59431
   23b98:	31b5a544 	addi	r6,r6,-10603
   23b9c:	01cf8474 	movhi	r7,15889
   23ba0:	39cb82c4 	addi	r7,r7,11787
   23ba4:	4009883a 	mov	r4,r8
   23ba8:	480b883a 	mov	r5,r9
   23bac:	00295100 	call	29510 <__muldf3>
   23bb0:	1009883a 	mov	r4,r2
   23bb4:	180b883a 	mov	r5,r3
   23bb8:	2005883a 	mov	r2,r4
   23bbc:	2807883a 	mov	r3,r5
   23bc0:	100d883a 	mov	r6,r2
   23bc4:	180f883a 	mov	r7,r3
   23bc8:	8009883a 	mov	r4,r16
   23bcc:	880b883a 	mov	r5,r17
   23bd0:	0028a100 	call	28a10 <__divdf3>
   23bd4:	1009883a 	mov	r4,r2
   23bd8:	180b883a 	mov	r5,r3
   23bdc:	2005883a 	mov	r2,r4
   23be0:	2807883a 	mov	r3,r5
   23be4:	1009883a 	mov	r4,r2
   23be8:	180b883a 	mov	r5,r3
   23bec:	002a7240 	call	2a724 <__truncdfsf2>
   23bf0:	1007883a 	mov	r3,r2
		fConcentration = (abs(fAdcVoltage) / (ui16RdacWord * (20000 / 1024)))
   23bf4:	d0e72415 	stw	r3,-25456(gp)
#else
		ui16Adcdata = *(adc+3);
		//MISSING CONCENTRATION CALCULATION
		fConcentration = ui16Adcdata;	//Placeholder until concentration calculation implemented
#endif
		if (print_flag) {
   23bf8:	e0bff4c3 	ldbu	r2,-45(fp)
   23bfc:	10000a26 	beq	r2,zero,23c28 <main+0x3f4>
			printf("CO is %.2f ppm.\n", fConcentration);
   23c00:	d0a72417 	ldw	r2,-25456(gp)
   23c04:	1009883a 	mov	r4,r2
   23c08:	002a6280 	call	2a628 <__extendsfdf2>
   23c0c:	100d883a 	mov	r6,r2
   23c10:	180f883a 	mov	r7,r3
   23c14:	300b883a 	mov	r5,r6
   23c18:	380d883a 	mov	r6,r7
   23c1c:	01000134 	movhi	r4,4
   23c20:	2121c204 	addi	r4,r4,-30968
   23c24:	002a9240 	call	2a924 <printf>
		}

		if (print_flag) {
   23c28:	e0bff4c3 	ldbu	r2,-45(fp)
   23c2c:	10006526 	beq	r2,zero,23dc4 <main+0x590>
#ifdef DEBUG
			////////////////////////////////
			// Print out threshold values
			unsigned int *pi = &custom_thresh.adc[0][0];
   23c30:	00800134 	movhi	r2,4
   23c34:	10b26b04 	addi	r2,r2,-13908
   23c38:	e0bffc15 	stw	r2,-16(fp)
			printf(" TH:ADC0 ");
   23c3c:	01000134 	movhi	r4,4
   23c40:	2121c704 	addi	r4,r4,-30948
   23c44:	002a9240 	call	2a924 <printf>
			for (int i = 0; i < 4; i++) {
   23c48:	e03ffb15 	stw	zero,-20(fp)
   23c4c:	00000b06 	br	23c7c <main+0x448>
				printf("%d ", *pi++);
   23c50:	e0bffc17 	ldw	r2,-16(fp)
   23c54:	10c00104 	addi	r3,r2,4
   23c58:	e0fffc15 	stw	r3,-16(fp)
   23c5c:	10800017 	ldw	r2,0(r2)
   23c60:	100b883a 	mov	r5,r2
   23c64:	01000134 	movhi	r4,4
   23c68:	21217a04 	addi	r4,r4,-31256
   23c6c:	002a9240 	call	2a924 <printf>
			for (int i = 0; i < 4; i++) {
   23c70:	e0bffb17 	ldw	r2,-20(fp)
   23c74:	10800044 	addi	r2,r2,1
   23c78:	e0bffb15 	stw	r2,-20(fp)
   23c7c:	e0bffb17 	ldw	r2,-20(fp)
   23c80:	10800110 	cmplti	r2,r2,4
   23c84:	103ff21e 	bne	r2,zero,23c50 <main+0x41c>
			}
			printf("\n");
   23c88:	01000284 	movi	r4,10
   23c8c:	002a9640 	call	2a964 <putchar>
			pi = &custom_thresh.adc[1][0];
   23c90:	00800134 	movhi	r2,4
   23c94:	10b26d04 	addi	r2,r2,-13900
   23c98:	e0bffc15 	stw	r2,-16(fp)
			printf(" TH:ADC1 ");
   23c9c:	01000134 	movhi	r4,4
   23ca0:	2121ca04 	addi	r4,r4,-30936
   23ca4:	002a9240 	call	2a924 <printf>
			for (int i = 0; i < 4; i++) {
   23ca8:	e03ffa15 	stw	zero,-24(fp)
   23cac:	00000b06 	br	23cdc <main+0x4a8>
				printf("%d ", *pi++);
   23cb0:	e0bffc17 	ldw	r2,-16(fp)
   23cb4:	10c00104 	addi	r3,r2,4
   23cb8:	e0fffc15 	stw	r3,-16(fp)
   23cbc:	10800017 	ldw	r2,0(r2)
   23cc0:	100b883a 	mov	r5,r2
   23cc4:	01000134 	movhi	r4,4
   23cc8:	21217a04 	addi	r4,r4,-31256
   23ccc:	002a9240 	call	2a924 <printf>
			for (int i = 0; i < 4; i++) {
   23cd0:	e0bffa17 	ldw	r2,-24(fp)
   23cd4:	10800044 	addi	r2,r2,1
   23cd8:	e0bffa15 	stw	r2,-24(fp)
   23cdc:	e0bffa17 	ldw	r2,-24(fp)
   23ce0:	10800110 	cmplti	r2,r2,4
   23ce4:	103ff21e 	bne	r2,zero,23cb0 <main+0x47c>
			}
			printf("\n");
   23ce8:	01000284 	movi	r4,10
   23cec:	002a9640 	call	2a964 <putchar>
			pi = &custom_thresh.adc[2][0];
   23cf0:	00800134 	movhi	r2,4
   23cf4:	10b26f04 	addi	r2,r2,-13892
   23cf8:	e0bffc15 	stw	r2,-16(fp)
			printf(" TH:ADC2 ");
   23cfc:	01000134 	movhi	r4,4
   23d00:	2121cd04 	addi	r4,r4,-30924
   23d04:	002a9240 	call	2a924 <printf>
			for (int i = 0; i < 4; i++) {
   23d08:	e03ff915 	stw	zero,-28(fp)
   23d0c:	00000b06 	br	23d3c <main+0x508>
				printf("%d ", *pi++);
   23d10:	e0bffc17 	ldw	r2,-16(fp)
   23d14:	10c00104 	addi	r3,r2,4
   23d18:	e0fffc15 	stw	r3,-16(fp)
   23d1c:	10800017 	ldw	r2,0(r2)
   23d20:	100b883a 	mov	r5,r2
   23d24:	01000134 	movhi	r4,4
   23d28:	21217a04 	addi	r4,r4,-31256
   23d2c:	002a9240 	call	2a924 <printf>
			for (int i = 0; i < 4; i++) {
   23d30:	e0bff917 	ldw	r2,-28(fp)
   23d34:	10800044 	addi	r2,r2,1
   23d38:	e0bff915 	stw	r2,-28(fp)
   23d3c:	e0bff917 	ldw	r2,-28(fp)
   23d40:	10800110 	cmplti	r2,r2,4
   23d44:	103ff21e 	bne	r2,zero,23d10 <main+0x4dc>
			}
			printf("\n");
   23d48:	01000284 	movi	r4,10
   23d4c:	002a9640 	call	2a964 <putchar>
			float *pf;
			pf = &custom_thresh.co[0];
   23d50:	00800134 	movhi	r2,4
   23d54:	10b27104 	addi	r2,r2,-13884
   23d58:	e0bff815 	stw	r2,-32(fp)
			printf(" TH:CO ");
   23d5c:	01000134 	movhi	r4,4
   23d60:	2121d004 	addi	r4,r4,-30912
   23d64:	002a9240 	call	2a924 <printf>
			for (int i = 0; i < 2; i++) {
   23d68:	e03ff715 	stw	zero,-36(fp)
   23d6c:	00001006 	br	23db0 <main+0x57c>
				printf("%.3f ", *pf++);
   23d70:	e0bff817 	ldw	r2,-32(fp)
   23d74:	10c00104 	addi	r3,r2,4
   23d78:	e0fff815 	stw	r3,-32(fp)
   23d7c:	10c00017 	ldw	r3,0(r2)
   23d80:	1809883a 	mov	r4,r3
   23d84:	002a6280 	call	2a628 <__extendsfdf2>
   23d88:	100d883a 	mov	r6,r2
   23d8c:	180f883a 	mov	r7,r3
   23d90:	300b883a 	mov	r5,r6
   23d94:	380d883a 	mov	r6,r7
   23d98:	01000134 	movhi	r4,4
   23d9c:	21217e04 	addi	r4,r4,-31240
   23da0:	002a9240 	call	2a924 <printf>
			for (int i = 0; i < 2; i++) {
   23da4:	e0bff717 	ldw	r2,-36(fp)
   23da8:	10800044 	addi	r2,r2,1
   23dac:	e0bff715 	stw	r2,-36(fp)
   23db0:	e0bff717 	ldw	r2,-36(fp)
   23db4:	10800090 	cmplti	r2,r2,2
   23db8:	103fed1e 	bne	r2,zero,23d70 <main+0x53c>
			}
			printf("\n");
   23dbc:	01000284 	movi	r4,10
   23dc0:	002a9640 	call	2a964 <putchar>
		}

		/** SHARED MEM WRITE **/

		unsigned ofset;
		ofset = ADC0_SENSOR_VALUE >> 2;
   23dc4:	00803004 	movi	r2,192
   23dc8:	e0bfec15 	stw	r2,-80(fp)
		IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, ofset, data0);
   23dcc:	e0bfec17 	ldw	r2,-80(fp)
   23dd0:	100490ba 	slli	r2,r2,2
   23dd4:	10880004 	addi	r2,r2,8192
   23dd8:	e0fff317 	ldw	r3,-52(fp)
   23ddc:	10c00035 	stwio	r3,0(r2)
		//for trial
		//ofset = LUX_SENSOR_VALUE>>2;
		//IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, ofset, data0);

		ofset = ADC1_SENSOR_VALUE >> 2;
   23de0:	00803044 	movi	r2,193
   23de4:	e0bfec15 	stw	r2,-80(fp)
		IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, ofset, data1);
   23de8:	e0bfec17 	ldw	r2,-80(fp)
   23dec:	100490ba 	slli	r2,r2,2
   23df0:	10880004 	addi	r2,r2,8192
   23df4:	e0fff217 	ldw	r3,-56(fp)
   23df8:	10c00035 	stwio	r3,0(r2)
		//for trial
		//ofset = LIGHT1_SENSOR_VALUE>>2;
		//IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, ofset, data1);

		ofset = ADC2_SENSOR_VALUE >> 2;
   23dfc:	00803084 	movi	r2,194
   23e00:	e0bfec15 	stw	r2,-80(fp)
		IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, ofset, data2);
   23e04:	e0bfec17 	ldw	r2,-80(fp)
   23e08:	100490ba 	slli	r2,r2,2
   23e0c:	10880004 	addi	r2,r2,8192
   23e10:	e0fff117 	ldw	r3,-60(fp)
   23e14:	10c00035 	stwio	r3,0(r2)

		ofset = CO_SENSOR_VALUE >> 2;
   23e18:	008030c4 	movi	r2,195
   23e1c:	e0bfec15 	stw	r2,-80(fp)
		IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, ofset, fConcentration);
   23e20:	e0bfec17 	ldw	r2,-80(fp)
   23e24:	100490ba 	slli	r2,r2,2
   23e28:	14080004 	addi	r16,r2,8192
   23e2c:	d0a72417 	ldw	r2,-25456(gp)
   23e30:	1009883a 	mov	r4,r2
   23e34:	0027e900 	call	27e90 <__fixsfsi>
   23e38:	80800035 	stwio	r2,0(r16)

		usleep(1000 * 50);
   23e3c:	0130d414 	movui	r4,50000
   23e40:	00361680 	call	36168 <usleep>
		loop_cnt++;
   23e44:	e0bffd17 	ldw	r2,-12(fp)
   23e48:	10800044 	addi	r2,r2,1
   23e4c:	e0bffd15 	stw	r2,-12(fp)
	while (1) { // report every second
   23e50:	003ebb06 	br	23940 <main+0x10c>

00023e54 <MPU9250_Init>:
#include "terasic_includes.h"

#define G_SI 9.80665

void MPU9250_Init(alt_u32 I2C_Controller_Base)
{
   23e54:	defffb04 	addi	sp,sp,-20
   23e58:	dfc00415 	stw	ra,16(sp)
   23e5c:	df000315 	stw	fp,12(sp)
   23e60:	df000304 	addi	fp,sp,12
   23e64:	e13ffd15 	stw	r4,-12(fp)
	const int ref_clk = 50*1000*1000; // 50Mhz
   23e68:	0080bef4 	movhi	r2,763
   23e6c:	10bc2004 	addi	r2,r2,-3968
   23e70:	e0bfff15 	stw	r2,-4(fp)
	const int i2c_clk = 400*1000; // 400KHz
   23e74:	008001b4 	movhi	r2,6
   23e78:	1086a004 	addi	r2,r2,6784
   23e7c:	e0bffe15 	stw	r2,-8(fp)
//	MPU9250_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(I2C_Controller_Base, ref_clk, i2c_clk);
   23e80:	e0bffd17 	ldw	r2,-12(fp)
   23e84:	e1bffe17 	ldw	r6,-8(fp)
   23e88:	e17fff17 	ldw	r5,-4(fp)
   23e8c:	1009883a 	mov	r4,r2
   23e90:	00208240 	call	20824 <oc_i2c_init_ex>
}
   23e94:	0001883a 	nop
   23e98:	e037883a 	mov	sp,fp
   23e9c:	dfc00117 	ldw	ra,4(sp)
   23ea0:	df000017 	ldw	fp,0(sp)
   23ea4:	dec00204 	addi	sp,sp,8
   23ea8:	f800283a 	ret

00023eac <WriteReg>:
                                    REGISTER READ & WRITE
usage: use these methods to read and write MPU9250 registers over SPI
-----------------------------------------------------------------------------------------------*/

unsigned int WriteReg( uint8_t WriteAddr, uint8_t WriteData )
{
   23eac:	defffb04 	addi	sp,sp,-20
   23eb0:	dfc00415 	stw	ra,16(sp)
   23eb4:	df000315 	stw	fp,12(sp)
   23eb8:	df000304 	addi	fp,sp,12
   23ebc:	2005883a 	mov	r2,r4
   23ec0:	2807883a 	mov	r3,r5
   23ec4:	e0bfff05 	stb	r2,-4(fp)
   23ec8:	1805883a 	mov	r2,r3
   23ecc:	e0bffe05 	stb	r2,-8(fp)
#if 1
	if (WriteAddr & READ_FLAG)
   23ed0:	e0bfff03 	ldbu	r2,-4(fp)
   23ed4:	10803fcc 	andi	r2,r2,255
   23ed8:	1080201c 	xori	r2,r2,128
   23edc:	10bfe004 	addi	r2,r2,-128
   23ee0:	1000070e 	bge	r2,zero,23f00 <WriteReg+0x54>
		return ReadReg(WriteAddr, WriteData);
   23ee4:	e0bfff03 	ldbu	r2,-4(fp)
   23ee8:	e0fffe03 	ldbu	r3,-8(fp)
   23eec:	18c03fcc 	andi	r3,r3,255
   23ef0:	180b883a 	mov	r5,r3
   23ef4:	1009883a 	mov	r4,r2
   23ef8:	0023f400 	call	23f40 <ReadReg>
   23efc:	00000b06 	br	23f2c <WriteReg+0x80>
	OC_I2C_Write(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, WriteAddr, &WriteData, sizeof(WriteData));
   23f00:	e0ffff03 	ldbu	r3,-4(fp)
   23f04:	e13ffe04 	addi	r4,fp,-8
   23f08:	00800044 	movi	r2,1
   23f0c:	d8800015 	stw	r2,0(sp)
   23f10:	200f883a 	mov	r7,r4
   23f14:	180d883a 	mov	r6,r3
   23f18:	01403404 	movi	r5,208
   23f1c:	01000134 	movhi	r4,4
   23f20:	21041004 	addi	r4,r4,4160
   23f24:	0020b000 	call	20b00 <OC_I2C_Write>
	return 0x00;
   23f28:	0005883a 	mov	r2,zero

	SPIdev::transfer("/dev/spidev0.1", tx, rx, 2);

    return rx[1];
#endif
}
   23f2c:	e037883a 	mov	sp,fp
   23f30:	dfc00117 	ldw	ra,4(sp)
   23f34:	df000017 	ldw	fp,0(sp)
   23f38:	dec00204 	addi	sp,sp,8
   23f3c:	f800283a 	ret

00023f40 <ReadReg>:

//-----------------------------------------------------------------------------------------------

unsigned int  ReadReg( uint8_t WriteAddr, uint8_t WriteData )
{
   23f40:	defffa04 	addi	sp,sp,-24
   23f44:	dfc00515 	stw	ra,20(sp)
   23f48:	df000415 	stw	fp,16(sp)
   23f4c:	df000404 	addi	fp,sp,16
   23f50:	2005883a 	mov	r2,r4
   23f54:	2807883a 	mov	r3,r5
   23f58:	e0bffe05 	stb	r2,-8(fp)
   23f5c:	1805883a 	mov	r2,r3
   23f60:	e0bffd05 	stb	r2,-12(fp)
#if 1
	unsigned char ReadData;
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, WriteAddr, &ReadData, sizeof(ReadData));
   23f64:	e0fffe03 	ldbu	r3,-8(fp)
   23f68:	e13fffc4 	addi	r4,fp,-1
   23f6c:	00800044 	movi	r2,1
   23f70:	d8800015 	stw	r2,0(sp)
   23f74:	200f883a 	mov	r7,r4
   23f78:	180d883a 	mov	r6,r3
   23f7c:	01403404 	movi	r5,208
   23f80:	01000134 	movhi	r4,4
   23f84:	21041004 	addi	r4,r4,4160
   23f88:	0020db40 	call	20db4 <OC_I2C_Read>
	return ReadData;
   23f8c:	e0bfffc3 	ldbu	r2,-1(fp)
   23f90:	10803fcc 	andi	r2,r2,255
#else
    return WriteReg(WriteAddr | READ_FLAG, WriteData);
#endif
}
   23f94:	e037883a 	mov	sp,fp
   23f98:	dfc00117 	ldw	ra,4(sp)
   23f9c:	df000017 	ldw	fp,0(sp)
   23fa0:	dec00204 	addi	sp,sp,8
   23fa4:	f800283a 	ret

00023fa8 <ReadRegs>:

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
   23fa8:	defffa04 	addi	sp,sp,-24
   23fac:	dfc00515 	stw	ra,20(sp)
   23fb0:	df000415 	stw	fp,16(sp)
   23fb4:	df000404 	addi	fp,sp,16
   23fb8:	2005883a 	mov	r2,r4
   23fbc:	e17ffe15 	stw	r5,-8(fp)
   23fc0:	e1bffd15 	stw	r6,-12(fp)
   23fc4:	e0bfff05 	stb	r2,-4(fp)
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
   23fc8:	e0ffff03 	ldbu	r3,-4(fp)
   23fcc:	e0bffd17 	ldw	r2,-12(fp)
   23fd0:	d8800015 	stw	r2,0(sp)
   23fd4:	e1fffe17 	ldw	r7,-8(fp)
   23fd8:	180d883a 	mov	r6,r3
   23fdc:	01403404 	movi	r5,208
   23fe0:	01000134 	movhi	r4,4
   23fe4:	21041004 	addi	r4,r4,4160
   23fe8:	0020db40 	call	20db4 <OC_I2C_Read>
    for(i=0; i<Bytes; i++)
    	ReadBuf[i] = rx[i + 1];

    usleep(50);
#endif
}
   23fec:	0001883a 	nop
   23ff0:	e037883a 	mov	sp,fp
   23ff4:	dfc00117 	ldw	ra,4(sp)
   23ff8:	df000017 	ldw	fp,0(sp)
   23ffc:	dec00204 	addi	sp,sp,8
   24000:	f800283a 	ret

00024004 <set_acc_scale>:
BITS_FS_16G
returns the range set (2,4,8 or 16)
-----------------------------------------------------------------------------------------------*/

unsigned int set_acc_scale(int scale)
{
   24004:	defffc04 	addi	sp,sp,-16
   24008:	dfc00315 	stw	ra,12(sp)
   2400c:	df000215 	stw	fp,8(sp)
   24010:	df000204 	addi	fp,sp,8
   24014:	e13ffe15 	stw	r4,-8(fp)
	unsigned int temp_scale;
//	I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, scale);
    WriteReg(MPUREG_ACCEL_CONFIG, scale);
   24018:	e0bffe17 	ldw	r2,-8(fp)
   2401c:	10803fcc 	andi	r2,r2,255
   24020:	100b883a 	mov	r5,r2
   24024:	01000704 	movi	r4,28
   24028:	0023eac0 	call	23eac <WriteReg>

    switch (scale){
   2402c:	e0bffe17 	ldw	r2,-8(fp)
   24030:	10800620 	cmpeqi	r2,r2,24
   24034:	1000181e 	bne	r2,zero,24098 <set_acc_scale+0x94>
   24038:	e0bffe17 	ldw	r2,-8(fp)
   2403c:	10800648 	cmpgei	r2,r2,25
   24040:	1000181e 	bne	r2,zero,240a4 <set_acc_scale+0xa0>
   24044:	e0bffe17 	ldw	r2,-8(fp)
   24048:	10800420 	cmpeqi	r2,r2,16
   2404c:	10000f1e 	bne	r2,zero,2408c <set_acc_scale+0x88>
   24050:	e0bffe17 	ldw	r2,-8(fp)
   24054:	10800448 	cmpgei	r2,r2,17
   24058:	1000121e 	bne	r2,zero,240a4 <set_acc_scale+0xa0>
   2405c:	e0bffe17 	ldw	r2,-8(fp)
   24060:	10000426 	beq	r2,zero,24074 <set_acc_scale+0x70>
   24064:	e0bffe17 	ldw	r2,-8(fp)
   24068:	10800220 	cmpeqi	r2,r2,8
   2406c:	1000041e 	bne	r2,zero,24080 <set_acc_scale+0x7c>
   24070:	00000c06 	br	240a4 <set_acc_scale+0xa0>
        case BITS_FS_2G:
            acc_divider=16384;
   24074:	0091a034 	movhi	r2,18048
   24078:	d0a72615 	stw	r2,-25448(gp)
        break;
   2407c:	00000906 	br	240a4 <set_acc_scale+0xa0>
        case BITS_FS_4G:
            acc_divider=8192;
   24080:	00918034 	movhi	r2,17920
   24084:	d0a72615 	stw	r2,-25448(gp)
        break;
   24088:	00000606 	br	240a4 <set_acc_scale+0xa0>
        case BITS_FS_8G:
            acc_divider=4096;
   2408c:	00916034 	movhi	r2,17792
   24090:	d0a72615 	stw	r2,-25448(gp)
        break;
   24094:	00000306 	br	240a4 <set_acc_scale+0xa0>
        case BITS_FS_16G:
            acc_divider=2048;
   24098:	00914034 	movhi	r2,17664
   2409c:	d0a72615 	stw	r2,-25448(gp)
        break;
   240a0:	0001883a 	nop
    }
//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, &temp_scale);
	temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
   240a4:	000b883a 	mov	r5,zero
   240a8:	01002704 	movi	r4,156
   240ac:	0023eac0 	call	23eac <WriteReg>
   240b0:	e0bfff15 	stw	r2,-4(fp)

    switch (temp_scale){
   240b4:	e0bfff17 	ldw	r2,-4(fp)
   240b8:	10800620 	cmpeqi	r2,r2,24
   240bc:	1000181e 	bne	r2,zero,24120 <set_acc_scale+0x11c>
   240c0:	e0bfff17 	ldw	r2,-4(fp)
   240c4:	10800668 	cmpgeui	r2,r2,25
   240c8:	1000181e 	bne	r2,zero,2412c <set_acc_scale+0x128>
   240cc:	e0bfff17 	ldw	r2,-4(fp)
   240d0:	10800420 	cmpeqi	r2,r2,16
   240d4:	10000f1e 	bne	r2,zero,24114 <set_acc_scale+0x110>
   240d8:	e0bfff17 	ldw	r2,-4(fp)
   240dc:	10800468 	cmpgeui	r2,r2,17
   240e0:	1000121e 	bne	r2,zero,2412c <set_acc_scale+0x128>
   240e4:	e0bfff17 	ldw	r2,-4(fp)
   240e8:	10000426 	beq	r2,zero,240fc <set_acc_scale+0xf8>
   240ec:	e0bfff17 	ldw	r2,-4(fp)
   240f0:	10800220 	cmpeqi	r2,r2,8
   240f4:	1000041e 	bne	r2,zero,24108 <set_acc_scale+0x104>
   240f8:	00000c06 	br	2412c <set_acc_scale+0x128>
        case BITS_FS_2G:
            temp_scale=2;
   240fc:	00800084 	movi	r2,2
   24100:	e0bfff15 	stw	r2,-4(fp)
        break;
   24104:	00000906 	br	2412c <set_acc_scale+0x128>
        case BITS_FS_4G:
            temp_scale=4;
   24108:	00800104 	movi	r2,4
   2410c:	e0bfff15 	stw	r2,-4(fp)
        break;
   24110:	00000606 	br	2412c <set_acc_scale+0x128>
        case BITS_FS_8G:
            temp_scale=8;
   24114:	00800204 	movi	r2,8
   24118:	e0bfff15 	stw	r2,-4(fp)
        break;
   2411c:	00000306 	br	2412c <set_acc_scale+0x128>
        case BITS_FS_16G:
            temp_scale=16;
   24120:	00800404 	movi	r2,16
   24124:	e0bfff15 	stw	r2,-4(fp)
        break;
   24128:	0001883a 	nop
    }
    return temp_scale;
   2412c:	e0bfff17 	ldw	r2,-4(fp)
}
   24130:	e037883a 	mov	sp,fp
   24134:	dfc00117 	ldw	ra,4(sp)
   24138:	df000017 	ldw	fp,0(sp)
   2413c:	dec00204 	addi	sp,sp,8
   24140:	f800283a 	ret

00024144 <set_gyro_scale>:
BITS_FS_2000DPS
returns the range set (250,500,1000 or 2000)
-----------------------------------------------------------------------------------------------*/

unsigned int set_gyro_scale(int scale)
{
   24144:	defffc04 	addi	sp,sp,-16
   24148:	dfc00315 	stw	ra,12(sp)
   2414c:	df000215 	stw	fp,8(sp)
   24150:	df000204 	addi	fp,sp,8
   24154:	e13ffe15 	stw	r4,-8(fp)
    unsigned int temp_scale;
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_CONFIG, scale);
    WriteReg(MPUREG_GYRO_CONFIG, scale);
   24158:	e0bffe17 	ldw	r2,-8(fp)
   2415c:	10803fcc 	andi	r2,r2,255
   24160:	100b883a 	mov	r5,r2
   24164:	010006c4 	movi	r4,27
   24168:	0023eac0 	call	23eac <WriteReg>
    switch (scale){
   2416c:	e0bffe17 	ldw	r2,-8(fp)
   24170:	10800620 	cmpeqi	r2,r2,24
   24174:	1000191e 	bne	r2,zero,241dc <set_gyro_scale+0x98>
   24178:	e0bffe17 	ldw	r2,-8(fp)
   2417c:	10800648 	cmpgei	r2,r2,25
   24180:	10001a1e 	bne	r2,zero,241ec <set_gyro_scale+0xa8>
   24184:	e0bffe17 	ldw	r2,-8(fp)
   24188:	10800420 	cmpeqi	r2,r2,16
   2418c:	10000f1e 	bne	r2,zero,241cc <set_gyro_scale+0x88>
   24190:	e0bffe17 	ldw	r2,-8(fp)
   24194:	10800448 	cmpgei	r2,r2,17
   24198:	1000141e 	bne	r2,zero,241ec <set_gyro_scale+0xa8>
   2419c:	e0bffe17 	ldw	r2,-8(fp)
   241a0:	10000426 	beq	r2,zero,241b4 <set_gyro_scale+0x70>
   241a4:	e0bffe17 	ldw	r2,-8(fp)
   241a8:	10800220 	cmpeqi	r2,r2,8
   241ac:	1000041e 	bne	r2,zero,241c0 <set_gyro_scale+0x7c>
   241b0:	00000e06 	br	241ec <set_gyro_scale+0xa8>
        case BITS_FS_250DPS:
            gyro_divider=131;
   241b4:	0090c0f4 	movhi	r2,17155
   241b8:	d0a72715 	stw	r2,-25444(gp)
        break;
   241bc:	00000b06 	br	241ec <set_gyro_scale+0xa8>
        case BITS_FS_500DPS:
            gyro_divider=65.5;
   241c0:	0090a0f4 	movhi	r2,17027
   241c4:	d0a72715 	stw	r2,-25444(gp)
        break;
   241c8:	00000806 	br	241ec <set_gyro_scale+0xa8>
        case BITS_FS_1000DPS:
            gyro_divider=32.8;
   241cc:	009080f4 	movhi	r2,16899
   241d0:	108cccc4 	addi	r2,r2,13107
   241d4:	d0a72715 	stw	r2,-25444(gp)
        break;
   241d8:	00000406 	br	241ec <set_gyro_scale+0xa8>
        case BITS_FS_2000DPS:
            gyro_divider=16.4;
   241dc:	009060f4 	movhi	r2,16771
   241e0:	108cccc4 	addi	r2,r2,13107
   241e4:	d0a72715 	stw	r2,-25444(gp)
        break;
   241e8:	0001883a 	nop
    }
//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_CONFIG, &temp_scale);
    temp_scale=WriteReg(MPUREG_GYRO_CONFIG|READ_FLAG, 0x00);
   241ec:	000b883a 	mov	r5,zero
   241f0:	010026c4 	movi	r4,155
   241f4:	0023eac0 	call	23eac <WriteReg>
   241f8:	e0bfff15 	stw	r2,-4(fp)
    switch (temp_scale){
   241fc:	e0bfff17 	ldw	r2,-4(fp)
   24200:	10800620 	cmpeqi	r2,r2,24
   24204:	1000181e 	bne	r2,zero,24268 <set_gyro_scale+0x124>
   24208:	e0bfff17 	ldw	r2,-4(fp)
   2420c:	10800668 	cmpgeui	r2,r2,25
   24210:	1000181e 	bne	r2,zero,24274 <set_gyro_scale+0x130>
   24214:	e0bfff17 	ldw	r2,-4(fp)
   24218:	10800420 	cmpeqi	r2,r2,16
   2421c:	10000f1e 	bne	r2,zero,2425c <set_gyro_scale+0x118>
   24220:	e0bfff17 	ldw	r2,-4(fp)
   24224:	10800468 	cmpgeui	r2,r2,17
   24228:	1000121e 	bne	r2,zero,24274 <set_gyro_scale+0x130>
   2422c:	e0bfff17 	ldw	r2,-4(fp)
   24230:	10000426 	beq	r2,zero,24244 <set_gyro_scale+0x100>
   24234:	e0bfff17 	ldw	r2,-4(fp)
   24238:	10800220 	cmpeqi	r2,r2,8
   2423c:	1000041e 	bne	r2,zero,24250 <set_gyro_scale+0x10c>
   24240:	00000c06 	br	24274 <set_gyro_scale+0x130>
        case BITS_FS_250DPS:
            temp_scale=250;
   24244:	00803e84 	movi	r2,250
   24248:	e0bfff15 	stw	r2,-4(fp)
        break;
   2424c:	00000906 	br	24274 <set_gyro_scale+0x130>
        case BITS_FS_500DPS:
            temp_scale=500;
   24250:	00807d04 	movi	r2,500
   24254:	e0bfff15 	stw	r2,-4(fp)
        break;
   24258:	00000606 	br	24274 <set_gyro_scale+0x130>
        case BITS_FS_1000DPS:
            temp_scale=1000;
   2425c:	0080fa04 	movi	r2,1000
   24260:	e0bfff15 	stw	r2,-4(fp)
        break;
   24264:	00000306 	br	24274 <set_gyro_scale+0x130>
        case BITS_FS_2000DPS:
            temp_scale=2000;
   24268:	0081f404 	movi	r2,2000
   2426c:	e0bfff15 	stw	r2,-4(fp)
        break;
   24270:	0001883a 	nop
    }
    return temp_scale;
   24274:	e0bfff17 	ldw	r2,-4(fp)
}
   24278:	e037883a 	mov	sp,fp
   2427c:	dfc00117 	ldw	ra,4(sp)
   24280:	df000017 	ldw	fp,0(sp)
   24284:	dec00204 	addi	sp,sp,8
   24288:	f800283a 	ret

0002428c <MPU9250_initialize>:
-----------------------------------------------------------------------------------------------*/

#define MPU_InitRegNum 16

bool MPU9250_initialize()
{
   2428c:	defff404 	addi	sp,sp,-48
   24290:	dfc00b15 	stw	ra,44(sp)
   24294:	df000a15 	stw	fp,40(sp)
   24298:	df000a04 	addi	fp,sp,40
	alt_u8 i = 0;
   2429c:	e03fffc5 	stb	zero,-1(fp)
	int low_pass_filter = 0x01;
   242a0:	00800044 	movi	r2,1
   242a4:	e0bffe15 	stw	r2,-8(fp)
	alt_u8 MPU_Init_Data[MPU_InitRegNum][2] =
   242a8:	009ac044 	movi	r2,27393
   242ac:	e0bff60d 	sth	r2,-40(fp)
   242b0:	009b0004 	movi	r2,27648
   242b4:	e0bff68d 	sth	r2,-38(fp)
   242b8:	e0bffe17 	ldw	r2,-8(fp)
   242bc:	e0bff705 	stb	r2,-36(fp)
   242c0:	00800684 	movi	r2,26
   242c4:	e0bff745 	stb	r2,-35(fp)
   242c8:	0086c604 	movi	r2,6936
   242cc:	e0bff78d 	sth	r2,-34(fp)
   242d0:	00870204 	movi	r2,7176
   242d4:	e0bff80d 	sth	r2,-32(fp)
   242d8:	00874244 	movi	r2,7433
   242dc:	e0bff88d 	sth	r2,-30(fp)
   242e0:	008dcc04 	movi	r2,14128
   242e4:	e0bff90d 	sth	r2,-28(fp)
   242e8:	009a8804 	movi	r2,27168
   242ec:	e0bff98d 	sth	r2,-26(fp)
   242f0:	00890344 	movi	r2,9229
   242f4:	e0bffa0d 	sth	r2,-24(fp)
   242f8:	00894304 	movi	r2,9484
   242fc:	e0bffa8d 	sth	r2,-22(fp)
   24300:	008982c4 	movi	r2,9739
   24304:	e0bffb0d 	sth	r2,-20(fp)
   24308:	0098c044 	movi	r2,25345
   2430c:	e0bffb8d 	sth	r2,-18(fp)
   24310:	0089e044 	movi	r2,10113
   24314:	e0bffc0d 	sth	r2,-16(fp)
   24318:	00898284 	movi	r2,9738
   2431c:	e0bffc8d 	sth	r2,-14(fp)
   24320:	0098c484 	movi	r2,25362
   24324:	e0bffd0d 	sth	r2,-12(fp)
   24328:	0089e044 	movi	r2,10113
   2432c:	e0bffd8d 	sth	r2,-10(fp)
	        {AK8963_CNTL1, MPUREG_I2C_SLV0_REG}, //I2C slave 0 register address from where to begin data transfer
	        {0x12, MPUREG_I2C_SLV0_DO}, // Register value to continuous measurement in 16bit
	        {0x81, MPUREG_I2C_SLV0_CTRL}  //Enable I2C and set 1 byte
	};

	for(i = 0; i < MPU_InitRegNum; i++)
   24330:	e03fffc5 	stb	zero,-1(fp)
   24334:	00001306 	br	24384 <MPU9250_initialize+0xf8>
	{
//		I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
		WriteReg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
   24338:	e0bfffc3 	ldbu	r2,-1(fp)
   2433c:	1085883a 	add	r2,r2,r2
   24340:	e085883a 	add	r2,fp,r2
   24344:	10bff643 	ldbu	r2,-39(r2)
   24348:	10c03fcc 	andi	r3,r2,255
   2434c:	e0bfffc3 	ldbu	r2,-1(fp)
   24350:	1085883a 	add	r2,r2,r2
   24354:	e085883a 	add	r2,fp,r2
   24358:	10bff603 	ldbu	r2,-40(r2)
   2435c:	10803fcc 	andi	r2,r2,255
   24360:	100b883a 	mov	r5,r2
   24364:	1809883a 	mov	r4,r3
   24368:	0023eac0 	call	23eac <WriteReg>
	    usleep(100000);  //I2C must slow down the write speed, otherwise it won't work
   2436c:	010000b4 	movhi	r4,2
   24370:	2121a804 	addi	r4,r4,-31072
   24374:	00361680 	call	36168 <usleep>
	for(i = 0; i < MPU_InitRegNum; i++)
   24378:	e0bfffc3 	ldbu	r2,-1(fp)
   2437c:	10800044 	addi	r2,r2,1
   24380:	e0bfffc5 	stb	r2,-1(fp)
   24384:	e0bfffc3 	ldbu	r2,-1(fp)
   24388:	10800430 	cmpltui	r2,r2,16
   2438c:	103fea1e 	bne	r2,zero,24338 <MPU9250_initialize+0xac>
	}

	set_acc_scale(BITS_FS_16G);
   24390:	01000604 	movi	r4,24
   24394:	00240040 	call	24004 <set_acc_scale>
	set_gyro_scale(BITS_FS_2000DPS);
   24398:	01000604 	movi	r4,24
   2439c:	00241440 	call	24144 <set_gyro_scale>

	calib_mag();
   243a0:	00244b00 	call	244b0 <calib_mag>

	return 0;
   243a4:	0005883a 	mov	r2,zero
}
   243a8:	e037883a 	mov	sp,fp
   243ac:	dfc00117 	ldw	ra,4(sp)
   243b0:	df000017 	ldw	fp,0(sp)
   243b4:	dec00204 	addi	sp,sp,8
   243b8:	f800283a 	ret

000243bc <calib_acc>:
2 -> Z axis
returns Factory Trim value
-----------------------------------------------------------------------------------------------*/

void calib_acc()
{
   243bc:	defffc04 	addi	sp,sp,-16
   243c0:	dfc00315 	stw	ra,12(sp)
   243c4:	df000215 	stw	fp,8(sp)
   243c8:	df000204 	addi	fp,sp,8
	alt_u8 response[4];
    int temp_scale;
    //READ CURRENT ACC SCALE

//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, &temp_scale);
    temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
   243cc:	000b883a 	mov	r5,zero
   243d0:	01002704 	movi	r4,156
   243d4:	0023eac0 	call	23eac <WriteReg>
   243d8:	e0bfff15 	stw	r2,-4(fp)
    set_acc_scale(BITS_FS_8G);
   243dc:	01000404 	movi	r4,16
   243e0:	00240040 	call	24004 <set_acc_scale>
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_SELF_TEST_X, response, 4);
    ReadRegs(MPUREG_SELF_TEST_X,response,4);
   243e4:	e0bffe04 	addi	r2,fp,-8
   243e8:	01800104 	movi	r6,4
   243ec:	100b883a 	mov	r5,r2
   243f0:	01000344 	movi	r4,13
   243f4:	0023fa80 	call	23fa8 <ReadRegs>
    calib_data[0]=((response[0]&11100000)>>3)|((response[3]&00110000)>>4);
   243f8:	e0bffe03 	ldbu	r2,-8(fp)
   243fc:	10803fcc 	andi	r2,r2,255
   24400:	1007d0fa 	srai	r3,r2,3
   24404:	00800574 	movhi	r2,21
   24408:	108afb04 	addi	r2,r2,11244
   2440c:	1886703a 	and	r3,r3,r2
   24410:	e0bffec3 	ldbu	r2,-5(fp)
   24414:	10803fcc 	andi	r2,r2,255
   24418:	1005d13a 	srai	r2,r2,4
   2441c:	1082400c 	andi	r2,r2,2304
   24420:	1886b03a 	or	r3,r3,r2
   24424:	00800134 	movhi	r2,4
   24428:	10f27315 	stw	r3,-13876(r2)
    calib_data[1]=((response[1]&11100000)>>3)|((response[3]&00001100)>>2);
   2442c:	e0bffe43 	ldbu	r2,-7(fp)
   24430:	10803fcc 	andi	r2,r2,255
   24434:	1007d0fa 	srai	r3,r2,3
   24438:	00800574 	movhi	r2,21
   2443c:	108afb04 	addi	r2,r2,11244
   24440:	1886703a 	and	r3,r3,r2
   24444:	e0bffec3 	ldbu	r2,-5(fp)
   24448:	10803fcc 	andi	r2,r2,255
   2444c:	1005d0ba 	srai	r2,r2,2
   24450:	1080240c 	andi	r2,r2,144
   24454:	1886b03a 	or	r3,r3,r2
   24458:	00800134 	movhi	r2,4
   2445c:	10f27415 	stw	r3,-13872(r2)
    calib_data[2]=((response[2]&11100000)>>3)|((response[3]&00000011));
   24460:	e0bffe83 	ldbu	r2,-6(fp)
   24464:	10803fcc 	andi	r2,r2,255
   24468:	1007d0fa 	srai	r3,r2,3
   2446c:	00800574 	movhi	r2,21
   24470:	108afb04 	addi	r2,r2,11244
   24474:	1886703a 	and	r3,r3,r2
   24478:	e0bffec3 	ldbu	r2,-5(fp)
   2447c:	10803fcc 	andi	r2,r2,255
   24480:	1080024c 	andi	r2,r2,9
   24484:	1886b03a 	or	r3,r3,r2
   24488:	00800134 	movhi	r2,4
   2448c:	10f27515 	stw	r3,-13868(r2)

    set_acc_scale(temp_scale);
   24490:	e13fff17 	ldw	r4,-4(fp)
   24494:	00240040 	call	24004 <set_acc_scale>
}
   24498:	0001883a 	nop
   2449c:	e037883a 	mov	sp,fp
   244a0:	dfc00117 	ldw	ra,4(sp)
   244a4:	df000017 	ldw	fp,0(sp)
   244a8:	dec00204 	addi	sp,sp,8
   244ac:	f800283a 	ret

000244b0 <calib_mag>:

//-----------------------------------------------------------------------------------------------

void calib_mag()
{
   244b0:	defffb04 	addi	sp,sp,-20
   244b4:	dfc00415 	stw	ra,16(sp)
   244b8:	df000315 	stw	fp,12(sp)
   244bc:	df000304 	addi	fp,sp,12
	alt_u8 response[3];
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
   244c0:	01402304 	movi	r5,140
   244c4:	01000944 	movi	r4,37
   244c8:	0023eac0 	call	23eac <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_ASAX); //I2C slave 0 register address from where to begin data transfer
   244cc:	01400404 	movi	r5,16
   244d0:	01000984 	movi	r4,38
   244d4:	0023eac0 	call	23eac <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x83); //Read 3 bytes from the magnetometer
   244d8:	014020c4 	movi	r5,131
   244dc:	010009c4 	movi	r4,39
   244e0:	0023eac0 	call	23eac <WriteReg>
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_REG, AK8963_ASAX);
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_CTRL, 0x83);


    //WriteReg(MPUREG_I2C_SLV0_CTRL, 0x81);    //Enable I2C and set bytes
    usleep(10000);
   244e4:	0109c404 	movi	r4,10000
   244e8:	00361680 	call	36168 <usleep>
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00);    //Read I2C
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 3);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);
   244ec:	e0bffd44 	addi	r2,fp,-11
   244f0:	018000c4 	movi	r6,3
   244f4:	100b883a 	mov	r5,r2
   244f8:	01001244 	movi	r4,73
   244fc:	0023fa80 	call	23fa8 <ReadRegs>

    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C
    for(i=0; i<3; i++) {
   24500:	e03fff15 	stw	zero,-4(fp)
   24504:	00002506 	br	2459c <calib_mag+0xec>
        data=response[i];
   24508:	e0bfff17 	ldw	r2,-4(fp)
   2450c:	e085883a 	add	r2,fp,r2
   24510:	10bffd43 	ldbu	r2,-11(r2)
   24514:	10803fcc 	andi	r2,r2,255
   24518:	1009883a 	mov	r4,r2
   2451c:	00280240 	call	28024 <__floatunsisf>
   24520:	1007883a 	mov	r3,r2
   24524:	e0fffe15 	stw	r3,-8(fp)
        magnetometer_ASA[i]=((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
   24528:	0150c034 	movhi	r5,17152
   2452c:	e13ffe17 	ldw	r4,-8(fp)
   24530:	00279b00 	call	279b0 <__subsf3>
   24534:	1007883a 	mov	r3,r2
   24538:	1805883a 	mov	r2,r3
   2453c:	0150e034 	movhi	r5,17280
   24540:	1009883a 	mov	r4,r2
   24544:	0026fe00 	call	26fe0 <__divsf3>
   24548:	1007883a 	mov	r3,r2
   2454c:	1805883a 	mov	r2,r3
   24550:	014fe034 	movhi	r5,16256
   24554:	1009883a 	mov	r4,r2
   24558:	0026b740 	call	26b74 <__addsf3>
   2455c:	1007883a 	mov	r3,r2
   24560:	1805883a 	mov	r2,r3
   24564:	014f86b4 	movhi	r5,15898
   24568:	29666684 	addi	r5,r5,-26214
   2456c:	1009883a 	mov	r4,r2
   24570:	00275b00 	call	275b0 <__mulsf3>
   24574:	1007883a 	mov	r3,r2
   24578:	1809883a 	mov	r4,r3
   2457c:	e0bfff17 	ldw	r2,-4(fp)
   24580:	100690ba 	slli	r3,r2,2
   24584:	00800134 	movhi	r2,4
   24588:	1885883a 	add	r2,r3,r2
   2458c:	11327615 	stw	r4,-13864(r2)
    for(i=0; i<3; i++) {
   24590:	e0bfff17 	ldw	r2,-4(fp)
   24594:	10800044 	addi	r2,r2,1
   24598:	e0bfff15 	stw	r2,-4(fp)
   2459c:	e0bfff17 	ldw	r2,-4(fp)
   245a0:	108000d0 	cmplti	r2,r2,3
   245a4:	103fd81e 	bne	r2,zero,24508 <calib_mag+0x58>
    }
}
   245a8:	0001883a 	nop
   245ac:	0001883a 	nop
   245b0:	e037883a 	mov	sp,fp
   245b4:	dfc00117 	ldw	ra,4(sp)
   245b8:	df000017 	ldw	fp,0(sp)
   245bc:	dec00204 	addi	sp,sp,8
   245c0:	f800283a 	ret

000245c4 <read_acc>:
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void read_acc()
{
   245c4:	defff704 	addi	sp,sp,-36
   245c8:	dfc00815 	stw	ra,32(sp)
   245cc:	df000715 	stw	fp,28(sp)
   245d0:	dc400615 	stw	r17,24(sp)
   245d4:	dc000515 	stw	r16,20(sp)
   245d8:	df000704 	addi	fp,sp,28
	alt_16 bit_data;
    float data;
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 6);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,6);
   245dc:	e0bff984 	addi	r2,fp,-26
   245e0:	01800184 	movi	r6,6
   245e4:	100b883a 	mov	r5,r2
   245e8:	01000ec4 	movi	r4,59
   245ec:	0023fa80 	call	23fa8 <ReadRegs>
    for(i=0; i<3; i++) {
   245f0:	e03ffd15 	stw	zero,-12(fp)
   245f4:	00003f06 	br	246f4 <read_acc+0x130>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
   245f8:	e0bffd17 	ldw	r2,-12(fp)
   245fc:	1085883a 	add	r2,r2,r2
   24600:	e0fffe04 	addi	r3,fp,-8
   24604:	1885883a 	add	r2,r3,r2
   24608:	10bffb83 	ldbu	r2,-18(r2)
   2460c:	10803fcc 	andi	r2,r2,255
   24610:	1004923a 	slli	r2,r2,8
   24614:	1007883a 	mov	r3,r2
   24618:	e0bffd17 	ldw	r2,-12(fp)
   2461c:	1085883a 	add	r2,r2,r2
   24620:	10800044 	addi	r2,r2,1
   24624:	e13ffe04 	addi	r4,fp,-8
   24628:	2085883a 	add	r2,r4,r2
   2462c:	10bffb83 	ldbu	r2,-18(r2)
   24630:	10803fcc 	andi	r2,r2,255
   24634:	1884b03a 	or	r2,r3,r2
   24638:	e0bffc8d 	sth	r2,-14(fp)
        data = (float)bit_data;
   2463c:	e0bffc8f 	ldh	r2,-14(fp)
   24640:	1009883a 	mov	r4,r2
   24644:	0027f000 	call	27f00 <__floatsisf>
   24648:	1007883a 	mov	r3,r2
   2464c:	e0fffb15 	stw	r3,-20(fp)
        accelerometer_data[i] = G_SI * data / acc_divider;
   24650:	e13ffb17 	ldw	r4,-20(fp)
   24654:	002a6280 	call	2a628 <__extendsfdf2>
   24658:	1011883a 	mov	r8,r2
   2465c:	1813883a 	mov	r9,r3
   24660:	018ea4f4 	movhi	r6,14995
   24664:	31a8c144 	addi	r6,r6,-23803
   24668:	01d00934 	movhi	r7,16420
   2466c:	39e74044 	addi	r7,r7,-25343
   24670:	4009883a 	mov	r4,r8
   24674:	480b883a 	mov	r5,r9
   24678:	00295100 	call	29510 <__muldf3>
   2467c:	1009883a 	mov	r4,r2
   24680:	180b883a 	mov	r5,r3
   24684:	2021883a 	mov	r16,r4
   24688:	2823883a 	mov	r17,r5
   2468c:	d0a72617 	ldw	r2,-25448(gp)
   24690:	1009883a 	mov	r4,r2
   24694:	002a6280 	call	2a628 <__extendsfdf2>
   24698:	1009883a 	mov	r4,r2
   2469c:	180b883a 	mov	r5,r3
   246a0:	200d883a 	mov	r6,r4
   246a4:	280f883a 	mov	r7,r5
   246a8:	8009883a 	mov	r4,r16
   246ac:	880b883a 	mov	r5,r17
   246b0:	0028a100 	call	28a10 <__divdf3>
   246b4:	1009883a 	mov	r4,r2
   246b8:	180b883a 	mov	r5,r3
   246bc:	2005883a 	mov	r2,r4
   246c0:	2807883a 	mov	r3,r5
   246c4:	1009883a 	mov	r4,r2
   246c8:	180b883a 	mov	r5,r3
   246cc:	002a7240 	call	2a724 <__truncdfsf2>
   246d0:	1009883a 	mov	r4,r2
   246d4:	e0bffd17 	ldw	r2,-12(fp)
   246d8:	100690ba 	slli	r3,r2,2
   246dc:	00800134 	movhi	r2,4
   246e0:	1885883a 	add	r2,r3,r2
   246e4:	11327915 	stw	r4,-13852(r2)
    for(i=0; i<3; i++) {
   246e8:	e0bffd17 	ldw	r2,-12(fp)
   246ec:	10800044 	addi	r2,r2,1
   246f0:	e0bffd15 	stw	r2,-12(fp)
   246f4:	e0bffd17 	ldw	r2,-12(fp)
   246f8:	108000d0 	cmplti	r2,r2,3
   246fc:	103fbe1e 	bne	r2,zero,245f8 <read_acc+0x34>
    }

}
   24700:	0001883a 	nop
   24704:	0001883a 	nop
   24708:	e6fffe04 	addi	sp,fp,-8
   2470c:	dfc00317 	ldw	ra,12(sp)
   24710:	df000217 	ldw	fp,8(sp)
   24714:	dc400117 	ldw	r17,4(sp)
   24718:	dc000017 	ldw	r16,0(sp)
   2471c:	dec00404 	addi	sp,sp,16
   24720:	f800283a 	ret

00024724 <read_gyro>:
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void read_gyro()
{
   24724:	defff704 	addi	sp,sp,-36
   24728:	dfc00815 	stw	ra,32(sp)
   2472c:	df000715 	stw	fp,28(sp)
   24730:	dc400615 	stw	r17,24(sp)
   24734:	dc000515 	stw	r16,20(sp)
   24738:	df000704 	addi	fp,sp,28
	alt_16 bit_data;
    float data;
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_XOUT_H, response, 6);
    ReadRegs(MPUREG_GYRO_XOUT_H,response,6);
   2473c:	e0bff984 	addi	r2,fp,-26
   24740:	01800184 	movi	r6,6
   24744:	100b883a 	mov	r5,r2
   24748:	010010c4 	movi	r4,67
   2474c:	0023fa80 	call	23fa8 <ReadRegs>
    for(i=0; i<3; i++) {
   24750:	e03ffd15 	stw	zero,-12(fp)
   24754:	00003f06 	br	24854 <read_gyro+0x130>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
   24758:	e0bffd17 	ldw	r2,-12(fp)
   2475c:	1085883a 	add	r2,r2,r2
   24760:	e0fffe04 	addi	r3,fp,-8
   24764:	1885883a 	add	r2,r3,r2
   24768:	10bffb83 	ldbu	r2,-18(r2)
   2476c:	10803fcc 	andi	r2,r2,255
   24770:	1004923a 	slli	r2,r2,8
   24774:	1007883a 	mov	r3,r2
   24778:	e0bffd17 	ldw	r2,-12(fp)
   2477c:	1085883a 	add	r2,r2,r2
   24780:	10800044 	addi	r2,r2,1
   24784:	e13ffe04 	addi	r4,fp,-8
   24788:	2085883a 	add	r2,r4,r2
   2478c:	10bffb83 	ldbu	r2,-18(r2)
   24790:	10803fcc 	andi	r2,r2,255
   24794:	1884b03a 	or	r2,r3,r2
   24798:	e0bffc8d 	sth	r2,-14(fp)
        data = (float)bit_data;
   2479c:	e0bffc8f 	ldh	r2,-14(fp)
   247a0:	1009883a 	mov	r4,r2
   247a4:	0027f000 	call	27f00 <__floatsisf>
   247a8:	1007883a 	mov	r3,r2
   247ac:	e0fffb15 	stw	r3,-20(fp)
        gyroscope_data[i] = (M_PI / 180) * data / gyro_divider;
   247b0:	e13ffb17 	ldw	r4,-20(fp)
   247b4:	002a6280 	call	2a628 <__extendsfdf2>
   247b8:	1011883a 	mov	r8,r2
   247bc:	1813883a 	mov	r9,r3
   247c0:	01a894f4 	movhi	r6,41555
   247c4:	31a74e44 	addi	r6,r6,-25287
   247c8:	01cfe4b4 	movhi	r7,16274
   247cc:	39f7d184 	addi	r7,r7,-8378
   247d0:	4009883a 	mov	r4,r8
   247d4:	480b883a 	mov	r5,r9
   247d8:	00295100 	call	29510 <__muldf3>
   247dc:	1009883a 	mov	r4,r2
   247e0:	180b883a 	mov	r5,r3
   247e4:	2021883a 	mov	r16,r4
   247e8:	2823883a 	mov	r17,r5
   247ec:	d0a72717 	ldw	r2,-25444(gp)
   247f0:	1009883a 	mov	r4,r2
   247f4:	002a6280 	call	2a628 <__extendsfdf2>
   247f8:	1009883a 	mov	r4,r2
   247fc:	180b883a 	mov	r5,r3
   24800:	200d883a 	mov	r6,r4
   24804:	280f883a 	mov	r7,r5
   24808:	8009883a 	mov	r4,r16
   2480c:	880b883a 	mov	r5,r17
   24810:	0028a100 	call	28a10 <__divdf3>
   24814:	1009883a 	mov	r4,r2
   24818:	180b883a 	mov	r5,r3
   2481c:	2005883a 	mov	r2,r4
   24820:	2807883a 	mov	r3,r5
   24824:	1009883a 	mov	r4,r2
   24828:	180b883a 	mov	r5,r3
   2482c:	002a7240 	call	2a724 <__truncdfsf2>
   24830:	1009883a 	mov	r4,r2
   24834:	e0bffd17 	ldw	r2,-12(fp)
   24838:	100690ba 	slli	r3,r2,2
   2483c:	00800134 	movhi	r2,4
   24840:	1885883a 	add	r2,r3,r2
   24844:	11327c15 	stw	r4,-13840(r2)
    for(i=0; i<3; i++) {
   24848:	e0bffd17 	ldw	r2,-12(fp)
   2484c:	10800044 	addi	r2,r2,1
   24850:	e0bffd15 	stw	r2,-12(fp)
   24854:	e0bffd17 	ldw	r2,-12(fp)
   24858:	108000d0 	cmplti	r2,r2,3
   2485c:	103fbe1e 	bne	r2,zero,24758 <read_gyro+0x34>
    }

}
   24860:	0001883a 	nop
   24864:	0001883a 	nop
   24868:	e6fffe04 	addi	sp,fp,-8
   2486c:	dfc00317 	ldw	ra,12(sp)
   24870:	df000217 	ldw	fp,8(sp)
   24874:	dc400117 	ldw	r17,4(sp)
   24878:	dc000017 	ldw	r16,0(sp)
   2487c:	dec00404 	addi	sp,sp,16
   24880:	f800283a 	ret

00024884 <read_temp>:
usage: call this function to read temperature data.
returns the value in °C
-----------------------------------------------------------------------------------------------*/

void read_temp()
{
   24884:	defffb04 	addi	sp,sp,-20
   24888:	dfc00415 	stw	ra,16(sp)
   2488c:	df000315 	stw	fp,12(sp)
   24890:	df000304 	addi	fp,sp,12
	alt_u8 response[2];
	alt_16 bit_data;
    float data;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_TEMP_OUT_H, response, 2);
    ReadRegs(MPUREG_TEMP_OUT_H,response,2);
   24894:	e0bffd84 	addi	r2,fp,-10
   24898:	01800084 	movi	r6,2
   2489c:	100b883a 	mov	r5,r2
   248a0:	01001044 	movi	r4,65
   248a4:	0023fa80 	call	23fa8 <ReadRegs>

    bit_data=((alt_16)response[0]<<8)|response[1];
   248a8:	e0bffd83 	ldbu	r2,-10(fp)
   248ac:	10803fcc 	andi	r2,r2,255
   248b0:	1004923a 	slli	r2,r2,8
   248b4:	1007883a 	mov	r3,r2
   248b8:	e0bffdc3 	ldbu	r2,-9(fp)
   248bc:	10803fcc 	andi	r2,r2,255
   248c0:	1884b03a 	or	r2,r3,r2
   248c4:	e0bfff8d 	sth	r2,-2(fp)
    data=(float)bit_data;
   248c8:	e0bfff8f 	ldh	r2,-2(fp)
   248cc:	1009883a 	mov	r4,r2
   248d0:	0027f000 	call	27f00 <__floatsisf>
   248d4:	1007883a 	mov	r3,r2
   248d8:	e0fffe15 	stw	r3,-8(fp)
    temperature=(data/340)+36.53;
   248dc:	0150eab4 	movhi	r5,17322
   248e0:	e13ffe17 	ldw	r4,-8(fp)
   248e4:	0026fe00 	call	26fe0 <__divsf3>
   248e8:	1007883a 	mov	r3,r2
   248ec:	1805883a 	mov	r2,r3
   248f0:	1009883a 	mov	r4,r2
   248f4:	002a6280 	call	2a628 <__extendsfdf2>
   248f8:	1011883a 	mov	r8,r2
   248fc:	1813883a 	mov	r9,r3
   24900:	01828f74 	movhi	r6,2621
   24904:	319c2904 	addi	r6,r6,28836
   24908:	01d010b4 	movhi	r7,16450
   2490c:	39d0f5c4 	addi	r7,r7,17367
   24910:	4009883a 	mov	r4,r8
   24914:	480b883a 	mov	r5,r9
   24918:	00281200 	call	28120 <__adddf3>
   2491c:	1009883a 	mov	r4,r2
   24920:	180b883a 	mov	r5,r3
   24924:	2005883a 	mov	r2,r4
   24928:	2807883a 	mov	r3,r5
   2492c:	1009883a 	mov	r4,r2
   24930:	180b883a 	mov	r5,r3
   24934:	002a7240 	call	2a724 <__truncdfsf2>
   24938:	1007883a 	mov	r3,r2
   2493c:	d0e72815 	stw	r3,-25440(gp)
}
   24940:	0001883a 	nop
   24944:	e037883a 	mov	sp,fp
   24948:	dfc00117 	ldw	ra,4(sp)
   2494c:	df000017 	ldw	fp,0(sp)
   24950:	dec00204 	addi	sp,sp,8
   24954:	f800283a 	ret

00024958 <read_mag>:

//-----------------------------------------------------------------------------------------------

void read_mag()
{
   24958:	defff904 	addi	sp,sp,-28
   2495c:	dfc00615 	stw	ra,24(sp)
   24960:	df000515 	stw	fp,20(sp)
   24964:	df000504 	addi	fp,sp,20
	alt_u8 response[7];
	alt_16 bit_data;
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
   24968:	01402304 	movi	r5,140
   2496c:	01000944 	movi	r4,37
   24970:	0023eac0 	call	23eac <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL); //I2C slave 0 register address from where to begin data transfer
   24974:	014000c4 	movi	r5,3
   24978:	01000984 	movi	r4,38
   2497c:	0023eac0 	call	23eac <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 6 bytes from the magnetometer
   24980:	014021c4 	movi	r5,135
   24984:	010009c4 	movi	r4,39
   24988:	0023eac0 	call	23eac <WriteReg>
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR|READ_FLAG);
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_REG, AK8963_HXL);
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_CTRL, 0x87);

    usleep(10000);
   2498c:	0109c404 	movi	r4,10000
   24990:	00361680 	call	36168 <usleep>
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 7);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,7);
   24994:	e0bffb44 	addi	r2,fp,-19
   24998:	018001c4 	movi	r6,7
   2499c:	100b883a 	mov	r5,r2
   249a0:	01001244 	movi	r4,73
   249a4:	0023fa80 	call	23fa8 <ReadRegs>
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.
    for(i=0; i<3; i++) {
   249a8:	e03fff15 	stw	zero,-4(fp)
   249ac:	00002606 	br	24a48 <read_mag+0xf0>
        bit_data=((alt_16)response[i*2+1]<<8)|response[i*2];
   249b0:	e0bfff17 	ldw	r2,-4(fp)
   249b4:	1085883a 	add	r2,r2,r2
   249b8:	10800044 	addi	r2,r2,1
   249bc:	e085883a 	add	r2,fp,r2
   249c0:	10bffb43 	ldbu	r2,-19(r2)
   249c4:	10803fcc 	andi	r2,r2,255
   249c8:	1004923a 	slli	r2,r2,8
   249cc:	1007883a 	mov	r3,r2
   249d0:	e0bfff17 	ldw	r2,-4(fp)
   249d4:	1085883a 	add	r2,r2,r2
   249d8:	e085883a 	add	r2,fp,r2
   249dc:	10bffb43 	ldbu	r2,-19(r2)
   249e0:	10803fcc 	andi	r2,r2,255
   249e4:	1884b03a 	or	r2,r3,r2
   249e8:	e0bffe8d 	sth	r2,-6(fp)
        data=(float)bit_data;
   249ec:	e0bffe8f 	ldh	r2,-6(fp)
   249f0:	1009883a 	mov	r4,r2
   249f4:	0027f000 	call	27f00 <__floatsisf>
   249f8:	1007883a 	mov	r3,r2
   249fc:	e0fffd15 	stw	r3,-12(fp)
        magnetometer_data[i]=data*magnetometer_ASA[i];
   24a00:	e0bfff17 	ldw	r2,-4(fp)
   24a04:	100690ba 	slli	r3,r2,2
   24a08:	00800134 	movhi	r2,4
   24a0c:	1885883a 	add	r2,r3,r2
   24a10:	10b27617 	ldw	r2,-13864(r2)
   24a14:	e17ffd17 	ldw	r5,-12(fp)
   24a18:	1009883a 	mov	r4,r2
   24a1c:	00275b00 	call	275b0 <__mulsf3>
   24a20:	1007883a 	mov	r3,r2
   24a24:	1809883a 	mov	r4,r3
   24a28:	e0bfff17 	ldw	r2,-4(fp)
   24a2c:	100690ba 	slli	r3,r2,2
   24a30:	00800134 	movhi	r2,4
   24a34:	1885883a 	add	r2,r3,r2
   24a38:	11327f15 	stw	r4,-13828(r2)
    for(i=0; i<3; i++) {
   24a3c:	e0bfff17 	ldw	r2,-4(fp)
   24a40:	10800044 	addi	r2,r2,1
   24a44:	e0bfff15 	stw	r2,-4(fp)
   24a48:	e0bfff17 	ldw	r2,-4(fp)
   24a4c:	108000d0 	cmplti	r2,r2,3
   24a50:	103fd71e 	bne	r2,zero,249b0 <read_mag+0x58>
    }
}
   24a54:	0001883a 	nop
   24a58:	0001883a 	nop
   24a5c:	e037883a 	mov	sp,fp
   24a60:	dfc00117 	ldw	ra,4(sp)
   24a64:	df000017 	ldw	fp,0(sp)
   24a68:	dec00204 	addi	sp,sp,8
   24a6c:	f800283a 	ret

00024a70 <read_all>:

//-----------------------------------------------------------------------------------------------

void read_all()
{
   24a70:	defff304 	addi	sp,sp,-52
   24a74:	dfc00c15 	stw	ra,48(sp)
   24a78:	df000b15 	stw	fp,44(sp)
   24a7c:	dc400a15 	stw	r17,40(sp)
   24a80:	dc000915 	stw	r16,36(sp)
   24a84:	df000b04 	addi	fp,sp,44
	alt_16 bit_data;
    float data;
    int i;

    //Send I2C command at first
    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
   24a88:	01402304 	movi	r5,140
   24a8c:	01000944 	movi	r4,37
   24a90:	0023eac0 	call	23eac <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL); //I2C slave 0 register address from where to begin data transfer
   24a94:	014000c4 	movi	r5,3
   24a98:	01000984 	movi	r4,38
   24a9c:	0023eac0 	call	23eac <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 7 bytes from the magnetometer
   24aa0:	014021c4 	movi	r5,135
   24aa4:	010009c4 	movi	r4,39
   24aa8:	0023eac0 	call	23eac <WriteReg>
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_CTRL, 0x87);


    //wait(0.001);
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 21);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,21);
   24aac:	e0bff5c4 	addi	r2,fp,-41
   24ab0:	01800544 	movi	r6,21
   24ab4:	100b883a 	mov	r5,r2
   24ab8:	01000ec4 	movi	r4,59
   24abc:	0023fa80 	call	23fa8 <ReadRegs>
    //Get accelerometer value
    for(i=0; i<3; i++) {
   24ac0:	e03ffd15 	stw	zero,-12(fp)
   24ac4:	00003f06 	br	24bc4 <read_all+0x154>
        bit_data = ((alt_16)response[i*2] << 8)|response[i*2+1];
   24ac8:	e0bffd17 	ldw	r2,-12(fp)
   24acc:	1085883a 	add	r2,r2,r2
   24ad0:	e0fffe04 	addi	r3,fp,-8
   24ad4:	1885883a 	add	r2,r3,r2
   24ad8:	10bff7c3 	ldbu	r2,-33(r2)
   24adc:	10803fcc 	andi	r2,r2,255
   24ae0:	1004923a 	slli	r2,r2,8
   24ae4:	1007883a 	mov	r3,r2
   24ae8:	e0bffd17 	ldw	r2,-12(fp)
   24aec:	1085883a 	add	r2,r2,r2
   24af0:	10800044 	addi	r2,r2,1
   24af4:	e13ffe04 	addi	r4,fp,-8
   24af8:	2085883a 	add	r2,r4,r2
   24afc:	10bff7c3 	ldbu	r2,-33(r2)
   24b00:	10803fcc 	andi	r2,r2,255
   24b04:	1884b03a 	or	r2,r3,r2
   24b08:	e0bffc8d 	sth	r2,-14(fp)
        data = (float)bit_data;
   24b0c:	e0bffc8f 	ldh	r2,-14(fp)
   24b10:	1009883a 	mov	r4,r2
   24b14:	0027f000 	call	27f00 <__floatsisf>
   24b18:	1007883a 	mov	r3,r2
   24b1c:	e0fffb15 	stw	r3,-20(fp)
        accelerometer_data[i] = G_SI * data / acc_divider;
   24b20:	e13ffb17 	ldw	r4,-20(fp)
   24b24:	002a6280 	call	2a628 <__extendsfdf2>
   24b28:	1011883a 	mov	r8,r2
   24b2c:	1813883a 	mov	r9,r3
   24b30:	018ea4f4 	movhi	r6,14995
   24b34:	31a8c144 	addi	r6,r6,-23803
   24b38:	01d00934 	movhi	r7,16420
   24b3c:	39e74044 	addi	r7,r7,-25343
   24b40:	4009883a 	mov	r4,r8
   24b44:	480b883a 	mov	r5,r9
   24b48:	00295100 	call	29510 <__muldf3>
   24b4c:	1009883a 	mov	r4,r2
   24b50:	180b883a 	mov	r5,r3
   24b54:	2021883a 	mov	r16,r4
   24b58:	2823883a 	mov	r17,r5
   24b5c:	d0a72617 	ldw	r2,-25448(gp)
   24b60:	1009883a 	mov	r4,r2
   24b64:	002a6280 	call	2a628 <__extendsfdf2>
   24b68:	1009883a 	mov	r4,r2
   24b6c:	180b883a 	mov	r5,r3
   24b70:	200d883a 	mov	r6,r4
   24b74:	280f883a 	mov	r7,r5
   24b78:	8009883a 	mov	r4,r16
   24b7c:	880b883a 	mov	r5,r17
   24b80:	0028a100 	call	28a10 <__divdf3>
   24b84:	1009883a 	mov	r4,r2
   24b88:	180b883a 	mov	r5,r3
   24b8c:	2005883a 	mov	r2,r4
   24b90:	2807883a 	mov	r3,r5
   24b94:	1009883a 	mov	r4,r2
   24b98:	180b883a 	mov	r5,r3
   24b9c:	002a7240 	call	2a724 <__truncdfsf2>
   24ba0:	1009883a 	mov	r4,r2
   24ba4:	e0bffd17 	ldw	r2,-12(fp)
   24ba8:	100690ba 	slli	r3,r2,2
   24bac:	00800134 	movhi	r2,4
   24bb0:	1885883a 	add	r2,r3,r2
   24bb4:	11327915 	stw	r4,-13852(r2)
    for(i=0; i<3; i++) {
   24bb8:	e0bffd17 	ldw	r2,-12(fp)
   24bbc:	10800044 	addi	r2,r2,1
   24bc0:	e0bffd15 	stw	r2,-12(fp)
   24bc4:	e0bffd17 	ldw	r2,-12(fp)
   24bc8:	108000d0 	cmplti	r2,r2,3
   24bcc:	103fbe1e 	bne	r2,zero,24ac8 <read_all+0x58>
    }
    //Get temperature
    bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
   24bd0:	e0bffd17 	ldw	r2,-12(fp)
   24bd4:	1085883a 	add	r2,r2,r2
   24bd8:	e0fffe04 	addi	r3,fp,-8
   24bdc:	1885883a 	add	r2,r3,r2
   24be0:	10bff7c3 	ldbu	r2,-33(r2)
   24be4:	10803fcc 	andi	r2,r2,255
   24be8:	1004923a 	slli	r2,r2,8
   24bec:	1007883a 	mov	r3,r2
   24bf0:	e0bffd17 	ldw	r2,-12(fp)
   24bf4:	1085883a 	add	r2,r2,r2
   24bf8:	10800044 	addi	r2,r2,1
   24bfc:	e13ffe04 	addi	r4,fp,-8
   24c00:	2085883a 	add	r2,r4,r2
   24c04:	10bff7c3 	ldbu	r2,-33(r2)
   24c08:	10803fcc 	andi	r2,r2,255
   24c0c:	1884b03a 	or	r2,r3,r2
   24c10:	e0bffc8d 	sth	r2,-14(fp)
    data = (float)bit_data;
   24c14:	e0bffc8f 	ldh	r2,-14(fp)
   24c18:	1009883a 	mov	r4,r2
   24c1c:	0027f000 	call	27f00 <__floatsisf>
   24c20:	1007883a 	mov	r3,r2
   24c24:	e0fffb15 	stw	r3,-20(fp)
    temperature = ((data - 21) / 333.87) + 21;
   24c28:	01506a34 	movhi	r5,16808
   24c2c:	e13ffb17 	ldw	r4,-20(fp)
   24c30:	00279b00 	call	279b0 <__subsf3>
   24c34:	1007883a 	mov	r3,r2
   24c38:	1805883a 	mov	r2,r3
   24c3c:	1009883a 	mov	r4,r2
   24c40:	002a6280 	call	2a628 <__extendsfdf2>
   24c44:	1011883a 	mov	r8,r2
   24c48:	1813883a 	mov	r9,r3
   24c4c:	01a147f4 	movhi	r6,34079
   24c50:	31ae1484 	addi	r6,r6,-18350
   24c54:	01d01d74 	movhi	r7,16501
   24c58:	39f77ac4 	addi	r7,r7,-8725
   24c5c:	4009883a 	mov	r4,r8
   24c60:	480b883a 	mov	r5,r9
   24c64:	0028a100 	call	28a10 <__divdf3>
   24c68:	1009883a 	mov	r4,r2
   24c6c:	180b883a 	mov	r5,r3
   24c70:	2005883a 	mov	r2,r4
   24c74:	2807883a 	mov	r3,r5
   24c78:	000d883a 	mov	r6,zero
   24c7c:	01d00d74 	movhi	r7,16437
   24c80:	1009883a 	mov	r4,r2
   24c84:	180b883a 	mov	r5,r3
   24c88:	00281200 	call	28120 <__adddf3>
   24c8c:	1009883a 	mov	r4,r2
   24c90:	180b883a 	mov	r5,r3
   24c94:	2005883a 	mov	r2,r4
   24c98:	2807883a 	mov	r3,r5
   24c9c:	1009883a 	mov	r4,r2
   24ca0:	180b883a 	mov	r5,r3
   24ca4:	002a7240 	call	2a724 <__truncdfsf2>
   24ca8:	1007883a 	mov	r3,r2
   24cac:	d0e72815 	stw	r3,-25440(gp)
    //Get gyroscope value
    for(i=4; i<7; i++) {
   24cb0:	00800104 	movi	r2,4
   24cb4:	e0bffd15 	stw	r2,-12(fp)
   24cb8:	00004006 	br	24dbc <read_all+0x34c>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
   24cbc:	e0bffd17 	ldw	r2,-12(fp)
   24cc0:	1085883a 	add	r2,r2,r2
   24cc4:	e0fffe04 	addi	r3,fp,-8
   24cc8:	1885883a 	add	r2,r3,r2
   24ccc:	10bff7c3 	ldbu	r2,-33(r2)
   24cd0:	10803fcc 	andi	r2,r2,255
   24cd4:	1004923a 	slli	r2,r2,8
   24cd8:	1007883a 	mov	r3,r2
   24cdc:	e0bffd17 	ldw	r2,-12(fp)
   24ce0:	1085883a 	add	r2,r2,r2
   24ce4:	10800044 	addi	r2,r2,1
   24ce8:	e13ffe04 	addi	r4,fp,-8
   24cec:	2085883a 	add	r2,r4,r2
   24cf0:	10bff7c3 	ldbu	r2,-33(r2)
   24cf4:	10803fcc 	andi	r2,r2,255
   24cf8:	1884b03a 	or	r2,r3,r2
   24cfc:	e0bffc8d 	sth	r2,-14(fp)
        data = (float)bit_data;
   24d00:	e0bffc8f 	ldh	r2,-14(fp)
   24d04:	1009883a 	mov	r4,r2
   24d08:	0027f000 	call	27f00 <__floatsisf>
   24d0c:	1007883a 	mov	r3,r2
   24d10:	e0fffb15 	stw	r3,-20(fp)
        gyroscope_data[i-4] = (M_PI / 180) * data / gyro_divider;
   24d14:	e13ffb17 	ldw	r4,-20(fp)
   24d18:	002a6280 	call	2a628 <__extendsfdf2>
   24d1c:	1011883a 	mov	r8,r2
   24d20:	1813883a 	mov	r9,r3
   24d24:	01a894f4 	movhi	r6,41555
   24d28:	31a74e44 	addi	r6,r6,-25287
   24d2c:	01cfe4b4 	movhi	r7,16274
   24d30:	39f7d184 	addi	r7,r7,-8378
   24d34:	4009883a 	mov	r4,r8
   24d38:	480b883a 	mov	r5,r9
   24d3c:	00295100 	call	29510 <__muldf3>
   24d40:	1009883a 	mov	r4,r2
   24d44:	180b883a 	mov	r5,r3
   24d48:	2021883a 	mov	r16,r4
   24d4c:	2823883a 	mov	r17,r5
   24d50:	d0a72717 	ldw	r2,-25444(gp)
   24d54:	1009883a 	mov	r4,r2
   24d58:	002a6280 	call	2a628 <__extendsfdf2>
   24d5c:	1009883a 	mov	r4,r2
   24d60:	180b883a 	mov	r5,r3
   24d64:	200d883a 	mov	r6,r4
   24d68:	280f883a 	mov	r7,r5
   24d6c:	8009883a 	mov	r4,r16
   24d70:	880b883a 	mov	r5,r17
   24d74:	0028a100 	call	28a10 <__divdf3>
   24d78:	1009883a 	mov	r4,r2
   24d7c:	180b883a 	mov	r5,r3
   24d80:	2005883a 	mov	r2,r4
   24d84:	2807883a 	mov	r3,r5
   24d88:	e13ffd17 	ldw	r4,-12(fp)
   24d8c:	243fff04 	addi	r16,r4,-4
   24d90:	1009883a 	mov	r4,r2
   24d94:	180b883a 	mov	r5,r3
   24d98:	002a7240 	call	2a724 <__truncdfsf2>
   24d9c:	1009883a 	mov	r4,r2
   24da0:	800690ba 	slli	r3,r16,2
   24da4:	00800134 	movhi	r2,4
   24da8:	1885883a 	add	r2,r3,r2
   24dac:	11327c15 	stw	r4,-13840(r2)
    for(i=4; i<7; i++) {
   24db0:	e0bffd17 	ldw	r2,-12(fp)
   24db4:	10800044 	addi	r2,r2,1
   24db8:	e0bffd15 	stw	r2,-12(fp)
   24dbc:	e0bffd17 	ldw	r2,-12(fp)
   24dc0:	108001d0 	cmplti	r2,r2,7
   24dc4:	103fbd1e 	bne	r2,zero,24cbc <read_all+0x24c>
    }
    //Get Magnetometer value
    for(i=7; i<10; i++) {
   24dc8:	008001c4 	movi	r2,7
   24dcc:	e0bffd15 	stw	r2,-12(fp)
   24dd0:	00002906 	br	24e78 <read_all+0x408>
        bit_data = ((alt_16)response[i*2+1] << 8) | response[i*2];
   24dd4:	e0bffd17 	ldw	r2,-12(fp)
   24dd8:	1085883a 	add	r2,r2,r2
   24ddc:	10800044 	addi	r2,r2,1
   24de0:	e0fffe04 	addi	r3,fp,-8
   24de4:	1885883a 	add	r2,r3,r2
   24de8:	10bff7c3 	ldbu	r2,-33(r2)
   24dec:	10803fcc 	andi	r2,r2,255
   24df0:	1004923a 	slli	r2,r2,8
   24df4:	1007883a 	mov	r3,r2
   24df8:	e0bffd17 	ldw	r2,-12(fp)
   24dfc:	1085883a 	add	r2,r2,r2
   24e00:	e13ffe04 	addi	r4,fp,-8
   24e04:	2085883a 	add	r2,r4,r2
   24e08:	10bff7c3 	ldbu	r2,-33(r2)
   24e0c:	10803fcc 	andi	r2,r2,255
   24e10:	1884b03a 	or	r2,r3,r2
   24e14:	e0bffc8d 	sth	r2,-14(fp)
        data = (float)bit_data;
   24e18:	e0bffc8f 	ldh	r2,-14(fp)
   24e1c:	1009883a 	mov	r4,r2
   24e20:	0027f000 	call	27f00 <__floatsisf>
   24e24:	1007883a 	mov	r3,r2
   24e28:	e0fffb15 	stw	r3,-20(fp)
        magnetometer_data[i-7] = data * magnetometer_ASA[i-7];
   24e2c:	e0bffd17 	ldw	r2,-12(fp)
   24e30:	10bffe44 	addi	r2,r2,-7
   24e34:	100690ba 	slli	r3,r2,2
   24e38:	00800134 	movhi	r2,4
   24e3c:	1885883a 	add	r2,r3,r2
   24e40:	11327617 	ldw	r4,-13864(r2)
   24e44:	e0bffd17 	ldw	r2,-12(fp)
   24e48:	143ffe44 	addi	r16,r2,-7
   24e4c:	e17ffb17 	ldw	r5,-20(fp)
   24e50:	00275b00 	call	275b0 <__mulsf3>
   24e54:	1007883a 	mov	r3,r2
   24e58:	1809883a 	mov	r4,r3
   24e5c:	800690ba 	slli	r3,r16,2
   24e60:	00800134 	movhi	r2,4
   24e64:	1885883a 	add	r2,r3,r2
   24e68:	11327f15 	stw	r4,-13828(r2)
    for(i=7; i<10; i++) {
   24e6c:	e0bffd17 	ldw	r2,-12(fp)
   24e70:	10800044 	addi	r2,r2,1
   24e74:	e0bffd15 	stw	r2,-12(fp)
   24e78:	e0bffd17 	ldw	r2,-12(fp)
   24e7c:	10800290 	cmplti	r2,r2,10
   24e80:	103fd41e 	bne	r2,zero,24dd4 <read_all+0x364>
    }
}
   24e84:	0001883a 	nop
   24e88:	0001883a 	nop
   24e8c:	e6fffe04 	addi	sp,fp,-8
   24e90:	dfc00317 	ldw	ra,12(sp)
   24e94:	df000217 	ldw	fp,8(sp)
   24e98:	dc400117 	ldw	r17,4(sp)
   24e9c:	dc000017 	ldw	r16,0(sp)
   24ea0:	dec00404 	addi	sp,sp,16
   24ea4:	f800283a 	ret

00024ea8 <getMotion9>:
usage: call this functions to read and get values
returns accel, gyro and mag values
-----------------------------------------------------------------------------------------------*/

void getMotion9(float *ax, float *ay, float *az, float *gx, float *gy, float *gz, float *mx, float *my, float *mz)
{
   24ea8:	defffa04 	addi	sp,sp,-24
   24eac:	dfc00515 	stw	ra,20(sp)
   24eb0:	df000415 	stw	fp,16(sp)
   24eb4:	df000404 	addi	fp,sp,16
   24eb8:	e13fff15 	stw	r4,-4(fp)
   24ebc:	e17ffe15 	stw	r5,-8(fp)
   24ec0:	e1bffd15 	stw	r6,-12(fp)
   24ec4:	e1fffc15 	stw	r7,-16(fp)
    read_all();
   24ec8:	0024a700 	call	24a70 <read_all>
    *ax = accelerometer_data[0];
   24ecc:	00800134 	movhi	r2,4
   24ed0:	10f27917 	ldw	r3,-13852(r2)
   24ed4:	e0bfff17 	ldw	r2,-4(fp)
   24ed8:	10c00015 	stw	r3,0(r2)
    *ay = accelerometer_data[1];
   24edc:	00800134 	movhi	r2,4
   24ee0:	10f27a17 	ldw	r3,-13848(r2)
   24ee4:	e0bffe17 	ldw	r2,-8(fp)
   24ee8:	10c00015 	stw	r3,0(r2)
    *az = accelerometer_data[2];
   24eec:	00800134 	movhi	r2,4
   24ef0:	10f27b17 	ldw	r3,-13844(r2)
   24ef4:	e0bffd17 	ldw	r2,-12(fp)
   24ef8:	10c00015 	stw	r3,0(r2)
    *gx = gyroscope_data[0];
   24efc:	00800134 	movhi	r2,4
   24f00:	10f27c17 	ldw	r3,-13840(r2)
   24f04:	e0bffc17 	ldw	r2,-16(fp)
   24f08:	10c00015 	stw	r3,0(r2)
    *gy = gyroscope_data[1];
   24f0c:	00800134 	movhi	r2,4
   24f10:	10f27d17 	ldw	r3,-13836(r2)
   24f14:	e0800217 	ldw	r2,8(fp)
   24f18:	10c00015 	stw	r3,0(r2)
    *gz = gyroscope_data[2];
   24f1c:	00800134 	movhi	r2,4
   24f20:	10f27e17 	ldw	r3,-13832(r2)
   24f24:	e0800317 	ldw	r2,12(fp)
   24f28:	10c00015 	stw	r3,0(r2)
    *mx = magnetometer_data[0];
   24f2c:	00800134 	movhi	r2,4
   24f30:	10f27f17 	ldw	r3,-13828(r2)
   24f34:	e0800417 	ldw	r2,16(fp)
   24f38:	10c00015 	stw	r3,0(r2)
    *my = magnetometer_data[1];
   24f3c:	00800134 	movhi	r2,4
   24f40:	10f28017 	ldw	r3,-13824(r2)
   24f44:	e0800517 	ldw	r2,20(fp)
   24f48:	10c00015 	stw	r3,0(r2)
    *mz = magnetometer_data[2];
   24f4c:	00800134 	movhi	r2,4
   24f50:	10f28117 	ldw	r3,-13820(r2)
   24f54:	e0800617 	ldw	r2,24(fp)
   24f58:	10c00015 	stw	r3,0(r2)
}
   24f5c:	0001883a 	nop
   24f60:	e037883a 	mov	sp,fp
   24f64:	dfc00117 	ldw	ra,4(sp)
   24f68:	df000017 	ldw	fp,0(sp)
   24f6c:	dec00204 	addi	sp,sp,8
   24f70:	f800283a 	ret

00024f74 <getMotion6>:

//-----------------------------------------------------------------------------------------------

void getMotion6(float *ax, float *ay, float *az, float *gx, float *gy, float *gz)
{
   24f74:	defffa04 	addi	sp,sp,-24
   24f78:	dfc00515 	stw	ra,20(sp)
   24f7c:	df000415 	stw	fp,16(sp)
   24f80:	df000404 	addi	fp,sp,16
   24f84:	e13fff15 	stw	r4,-4(fp)
   24f88:	e17ffe15 	stw	r5,-8(fp)
   24f8c:	e1bffd15 	stw	r6,-12(fp)
   24f90:	e1fffc15 	stw	r7,-16(fp)
    read_acc();
   24f94:	00245c40 	call	245c4 <read_acc>
    read_gyro();
   24f98:	00247240 	call	24724 <read_gyro>
    *ax = accelerometer_data[0];
   24f9c:	00800134 	movhi	r2,4
   24fa0:	10f27917 	ldw	r3,-13852(r2)
   24fa4:	e0bfff17 	ldw	r2,-4(fp)
   24fa8:	10c00015 	stw	r3,0(r2)
    *ay = accelerometer_data[1];
   24fac:	00800134 	movhi	r2,4
   24fb0:	10f27a17 	ldw	r3,-13848(r2)
   24fb4:	e0bffe17 	ldw	r2,-8(fp)
   24fb8:	10c00015 	stw	r3,0(r2)
    *az = accelerometer_data[2];
   24fbc:	00800134 	movhi	r2,4
   24fc0:	10f27b17 	ldw	r3,-13844(r2)
   24fc4:	e0bffd17 	ldw	r2,-12(fp)
   24fc8:	10c00015 	stw	r3,0(r2)
    *gx = gyroscope_data[0];
   24fcc:	00800134 	movhi	r2,4
   24fd0:	10f27c17 	ldw	r3,-13840(r2)
   24fd4:	e0bffc17 	ldw	r2,-16(fp)
   24fd8:	10c00015 	stw	r3,0(r2)
    *gy = gyroscope_data[1];
   24fdc:	00800134 	movhi	r2,4
   24fe0:	10f27d17 	ldw	r3,-13836(r2)
   24fe4:	e0800217 	ldw	r2,8(fp)
   24fe8:	10c00015 	stw	r3,0(r2)
    *gz = gyroscope_data[2];
   24fec:	00800134 	movhi	r2,4
   24ff0:	10f27e17 	ldw	r3,-13832(r2)
   24ff4:	e0800317 	ldw	r2,12(fp)
   24ff8:	10c00015 	stw	r3,0(r2)
}
   24ffc:	0001883a 	nop
   25000:	e037883a 	mov	sp,fp
   25004:	dfc00117 	ldw	ra,4(sp)
   25008:	df000017 	ldw	fp,0(sp)
   2500c:	dec00204 	addi	sp,sp,8
   25010:	f800283a 	ret

00025014 <RH_Temp_Init>:

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16);
bool th_read_register(alt_u8 RegisterPorinter, alt_u16 *pData16);

void RH_Temp_Init(alt_u32 I2C_Controller_Base)
{
   25014:	defffa04 	addi	sp,sp,-24
   25018:	dfc00515 	stw	ra,20(sp)
   2501c:	df000415 	stw	fp,16(sp)
   25020:	df000404 	addi	fp,sp,16
   25024:	e13ffc15 	stw	r4,-16(fp)
	const int ref_clk = 50*1000*1000; // 50Mhz
   25028:	0080bef4 	movhi	r2,763
   2502c:	10bc2004 	addi	r2,r2,-3968
   25030:	e0bfff15 	stw	r2,-4(fp)
	const int i2c_clk = 400*1000; // 400KHz
   25034:	008001b4 	movhi	r2,6
   25038:	1086a004 	addi	r2,r2,6784
   2503c:	e0bffe15 	stw	r2,-8(fp)
//	MPU9250_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(I2C_Controller_Base, ref_clk, i2c_clk);
   25040:	e0bffc17 	ldw	r2,-16(fp)
   25044:	e1bffe17 	ldw	r6,-8(fp)
   25048:	e17fff17 	ldw	r5,-4(fp)
   2504c:	1009883a 	mov	r4,r2
   25050:	00208240 	call	20824 <oc_i2c_init_ex>

    // reset
	bool bPass;
    bPass = th_reset(RH_TEMP_I2C_OPENCORES_BASE);
   25054:	01000134 	movhi	r4,4
   25058:	21040004 	addi	r4,r4,4096
   2505c:	00255fc0 	call	255fc <th_reset>
   25060:	e0bffdc5 	stb	r2,-9(fp)
    if (!bPass){
   25064:	e0bffdc3 	ldbu	r2,-9(fp)
   25068:	1080005c 	xori	r2,r2,1
   2506c:	10803fcc 	andi	r2,r2,255
   25070:	10000b26 	beq	r2,zero,250a0 <RH_Temp_Init+0x8c>
    	bPass = th_reset(RH_TEMP_I2C_OPENCORES_BASE); // try again
   25074:	01000134 	movhi	r4,4
   25078:	21040004 	addi	r4,r4,4096
   2507c:	00255fc0 	call	255fc <th_reset>
   25080:	e0bffdc5 	stb	r2,-9(fp)
    	if (!bPass){
   25084:	e0bffdc3 	ldbu	r2,-9(fp)
   25088:	1080005c 	xori	r2,r2,1
   2508c:	10803fcc 	andi	r2,r2,255
   25090:	10000326 	beq	r2,zero,250a0 <RH_Temp_Init+0x8c>
    		printf("Failed to reset!\r\n");
   25094:	01000134 	movhi	r4,4
   25098:	2121d204 	addi	r4,r4,-30904
   2509c:	002aa480 	call	2aa48 <puts>
    }

    //th_dump_chip_info(RH_TEMP_I2C_OPENCORES_BASE);


}
   250a0:	0001883a 	nop
   250a4:	e037883a 	mov	sp,fp
   250a8:	dfc00117 	ldw	ra,4(sp)
   250ac:	df000017 	ldw	fp,0(sp)
   250b0:	dec00204 	addi	sp,sp,8
   250b4:	f800283a 	ret

000250b8 <RH_Temp_Read_Device_ID>:

bool RH_Temp_Read_Device_ID(alt_u16 *pID16){
   250b8:	defffb04 	addi	sp,sp,-20
   250bc:	dfc00415 	stw	ra,16(sp)
   250c0:	df000315 	stw	fp,12(sp)
   250c4:	df000304 	addi	fp,sp,12
   250c8:	e13ffe15 	stw	r4,-8(fp)
	bool bPass;
	alt_u8 szData8[2];

	bPass =  OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, R_DEVICE_ID, szData8, sizeof(szData8));
   250cc:	e0ffff44 	addi	r3,fp,-3
   250d0:	00800084 	movi	r2,2
   250d4:	d8800015 	stw	r2,0(sp)
   250d8:	180f883a 	mov	r7,r3
   250dc:	01803fc4 	movi	r6,255
   250e0:	01402004 	movi	r5,128
   250e4:	01000134 	movhi	r4,4
   250e8:	21040004 	addi	r4,r4,4096
   250ec:	0020db40 	call	20db4 <OC_I2C_Read>
   250f0:	e0bfffc5 	stb	r2,-1(fp)
	if (bPass){
   250f4:	e0bfffc3 	ldbu	r2,-1(fp)
   250f8:	10001126 	beq	r2,zero,25140 <RH_Temp_Read_Device_ID+0x88>
		*pID16 = (szData8[0] << 8) | szData8[1];
   250fc:	e0bfff43 	ldbu	r2,-3(fp)
   25100:	10803fcc 	andi	r2,r2,255
   25104:	1004923a 	slli	r2,r2,8
   25108:	1007883a 	mov	r3,r2
   2510c:	e0bfff83 	ldbu	r2,-2(fp)
   25110:	10803fcc 	andi	r2,r2,255
   25114:	1884b03a 	or	r2,r3,r2
   25118:	1007883a 	mov	r3,r2
   2511c:	e0bffe17 	ldw	r2,-8(fp)
   25120:	10c0000d 	sth	r3,0(r2)
		printf("Device ID=%04xh\r\n", *pID16);
   25124:	e0bffe17 	ldw	r2,-8(fp)
   25128:	1080000b 	ldhu	r2,0(r2)
   2512c:	10bfffcc 	andi	r2,r2,65535
   25130:	100b883a 	mov	r5,r2
   25134:	01000134 	movhi	r4,4
   25138:	2121d704 	addi	r4,r4,-30884
   2513c:	002a9240 	call	2a924 <printf>
	}
	return bPass;
   25140:	e0bfffc3 	ldbu	r2,-1(fp)


}
   25144:	e037883a 	mov	sp,fp
   25148:	dfc00117 	ldw	ra,4(sp)
   2514c:	df000017 	ldw	fp,0(sp)
   25150:	dec00204 	addi	sp,sp,8
   25154:	f800283a 	ret

00025158 <RH_Temp_Sensor_Init>:


bool RH_Temp_Sensor_Init()
{
   25158:	defffd04 	addi	sp,sp,-12
   2515c:	dfc00215 	stw	ra,8(sp)
   25160:	df000115 	stw	fp,4(sp)
   25164:	df000104 	addi	fp,sp,4


    //Temperature and Humidity are acquired in sequence, Temperature first.
    //Temperature Measurement Resolution: 14 bits
    //Humidity Measurement Resolution: 14 bits
	bPass =  Write_Configuration(1,0,0);
   25168:	000d883a 	mov	r6,zero
   2516c:	000b883a 	mov	r5,zero
   25170:	01000044 	movi	r4,1
   25174:	00254200 	call	25420 <Write_Configuration>
   25178:	e0bfffc5 	stb	r2,-1(fp)
//    else
//    {
//    	printf("RH_Temp Sensor Set Configuration Failed!\r\n");
//    }

    return bPass;
   2517c:	e0bfffc3 	ldbu	r2,-1(fp)

}
   25180:	e037883a 	mov	sp,fp
   25184:	dfc00117 	ldw	ra,4(sp)
   25188:	df000017 	ldw	fp,0(sp)
   2518c:	dec00204 	addi	sp,sp,8
   25190:	f800283a 	ret

00025194 <RH_Temp_Sensor_Read>:

bool RH_Temp_Sensor_Read(float *fTemperature, float *fHumidity){
   25194:	defffa04 	addi	sp,sp,-24
   25198:	dfc00515 	stw	ra,20(sp)
   2519c:	df000415 	stw	fp,16(sp)
   251a0:	df000404 	addi	fp,sp,16
   251a4:	e13ffd15 	stw	r4,-12(fp)
   251a8:	e17ffc15 	stw	r5,-16(fp)
	bool bPass;
	alt_u8 szValue8[4];
	alt_u16 Value16;
	//int i;

	bPass =  th_Read_Measure_Data(R_TEMPERATURE, szValue8, sizeof(szValue8));
   251ac:	e0bffe04 	addi	r2,fp,-8
   251b0:	01800104 	movi	r6,4
   251b4:	100b883a 	mov	r5,r2
   251b8:	0009883a 	mov	r4,zero
   251bc:	00254c40 	call	254c4 <th_Read_Measure_Data>
   251c0:	e0bfffc5 	stb	r2,-1(fp)
	if (bPass){
   251c4:	e0bfffc3 	ldbu	r2,-1(fp)
   251c8:	10004226 	beq	r2,zero,252d4 <RH_Temp_Sensor_Read+0x140>
		//for(i=0;i<4;i++)
		//	printf("%02XH ", szValue8[i]);

		// temperature
		Value16 = (szValue8[0] << 8) | szValue8[1];
   251cc:	e0bffe03 	ldbu	r2,-8(fp)
   251d0:	10803fcc 	andi	r2,r2,255
   251d4:	1004923a 	slli	r2,r2,8
   251d8:	1007883a 	mov	r3,r2
   251dc:	e0bffe43 	ldbu	r2,-7(fp)
   251e0:	10803fcc 	andi	r2,r2,255
   251e4:	1884b03a 	or	r2,r3,r2
   251e8:	e0bfff0d 	sth	r2,-4(fp)
		*fTemperature = (float)Value16/397.188 -40.0;
   251ec:	e0bfff0b 	ldhu	r2,-4(fp)
   251f0:	1009883a 	mov	r4,r2
   251f4:	00280240 	call	28024 <__floatunsisf>
   251f8:	1007883a 	mov	r3,r2
   251fc:	1809883a 	mov	r4,r3
   25200:	002a6280 	call	2a628 <__extendsfdf2>
   25204:	1011883a 	mov	r8,r2
   25208:	1813883a 	mov	r9,r3
   2520c:	018312b4 	movhi	r6,3146
   25210:	31ae9784 	addi	r6,r6,-17826
   25214:	01d01e74 	movhi	r7,16505
   25218:	39f4c084 	addi	r7,r7,-11518
   2521c:	4009883a 	mov	r4,r8
   25220:	480b883a 	mov	r5,r9
   25224:	0028a100 	call	28a10 <__divdf3>
   25228:	1009883a 	mov	r4,r2
   2522c:	180b883a 	mov	r5,r3
   25230:	2005883a 	mov	r2,r4
   25234:	2807883a 	mov	r3,r5
   25238:	000d883a 	mov	r6,zero
   2523c:	01d01134 	movhi	r7,16452
   25240:	1009883a 	mov	r4,r2
   25244:	180b883a 	mov	r5,r3
   25248:	0029cbc0 	call	29cbc <__subdf3>
   2524c:	1009883a 	mov	r4,r2
   25250:	180b883a 	mov	r5,r3
   25254:	2005883a 	mov	r2,r4
   25258:	2807883a 	mov	r3,r5
   2525c:	1009883a 	mov	r4,r2
   25260:	180b883a 	mov	r5,r3
   25264:	002a7240 	call	2a724 <__truncdfsf2>
   25268:	1007883a 	mov	r3,r2
   2526c:	e0bffd17 	ldw	r2,-12(fp)
   25270:	10c00015 	stw	r3,0(r2)

		// humidity
		Value16 = (szValue8[2] << 8) | szValue8[3];
   25274:	e0bffe83 	ldbu	r2,-6(fp)
   25278:	10803fcc 	andi	r2,r2,255
   2527c:	1004923a 	slli	r2,r2,8
   25280:	1007883a 	mov	r3,r2
   25284:	e0bffec3 	ldbu	r2,-5(fp)
   25288:	10803fcc 	andi	r2,r2,255
   2528c:	1884b03a 	or	r2,r3,r2
   25290:	e0bfff0d 	sth	r2,-4(fp)
		*fHumidity = (float)((float)Value16/65536)*100;
   25294:	e0bfff0b 	ldhu	r2,-4(fp)
   25298:	1009883a 	mov	r4,r2
   2529c:	00280240 	call	28024 <__floatunsisf>
   252a0:	1007883a 	mov	r3,r2
   252a4:	0151e034 	movhi	r5,18304
   252a8:	1809883a 	mov	r4,r3
   252ac:	0026fe00 	call	26fe0 <__divsf3>
   252b0:	1007883a 	mov	r3,r2
   252b4:	1805883a 	mov	r2,r3
   252b8:	0150b234 	movhi	r5,17096
   252bc:	1009883a 	mov	r4,r2
   252c0:	00275b00 	call	275b0 <__mulsf3>
   252c4:	1009883a 	mov	r4,r2
   252c8:	2007883a 	mov	r3,r4
   252cc:	e0bffc17 	ldw	r2,-16(fp)
   252d0:	10c00015 	stw	r3,0(r2)
	}

	return bPass;
   252d4:	e0bfffc3 	ldbu	r2,-1(fp)

}
   252d8:	e037883a 	mov	sp,fp
   252dc:	dfc00117 	ldw	ra,4(sp)
   252e0:	df000017 	ldw	fp,0(sp)
   252e4:	dec00204 	addi	sp,sp,8
   252e8:	f800283a 	ret

000252ec <Read_Configuration>:



bool Read_Configuration(void)
{
   252ec:	defffd04 	addi	sp,sp,-12
   252f0:	dfc00215 	stw	ra,8(sp)
   252f4:	df000115 	stw	fp,4(sp)
   252f8:	df000104 	addi	fp,sp,4
	bool bPass;
	alt_u16 data;

	bPass = th_read_register(R_CONFIGURATION, &data);
   252fc:	e0bfff04 	addi	r2,fp,-4
   25300:	100b883a 	mov	r5,r2
   25304:	01000084 	movi	r4,2
   25308:	00257ac0 	call	257ac <th_read_register>
   2530c:	e0bfffc5 	stb	r2,-1(fp)


	if(bPass){
   25310:	e0bfffc3 	ldbu	r2,-1(fp)
   25314:	10003926 	beq	r2,zero,253fc <Read_Configuration+0x110>

		printf("Read Configuration Data = 0x%04X \r\n",data);
   25318:	e0bfff0b 	ldhu	r2,-4(fp)
   2531c:	10bfffcc 	andi	r2,r2,65535
   25320:	100b883a 	mov	r5,r2
   25324:	01000134 	movhi	r4,4
   25328:	2121dc04 	addi	r4,r4,-30864
   2532c:	002a9240 	call	2a924 <printf>

		if(((data>>12)&0x0001) == 0) printf("Acquisition mode:Temperature or Humidity is acquired.\r\n ");
   25330:	e0bfff0b 	ldhu	r2,-4(fp)
   25334:	10bfffcc 	andi	r2,r2,65535
   25338:	1004d33a 	srli	r2,r2,12
   2533c:	10bfffcc 	andi	r2,r2,65535
   25340:	1080004c 	andi	r2,r2,1
   25344:	1000041e 	bne	r2,zero,25358 <Read_Configuration+0x6c>
   25348:	01000134 	movhi	r4,4
   2534c:	2121e504 	addi	r4,r4,-30828
   25350:	002a9240 	call	2a924 <printf>
   25354:	00000306 	br	25364 <Read_Configuration+0x78>
		else printf("Acquisition mode:Temperature and Humidity are acquired in sequence,Temperature first.\r\n ");
   25358:	01000134 	movhi	r4,4
   2535c:	2121f404 	addi	r4,r4,-30768
   25360:	002a9240 	call	2a924 <printf>

		if(((data>>10)&0x0001) == 0) printf("Temperature Measurement Resolution: 14 bit.\r\n ");
   25364:	e0bfff0b 	ldhu	r2,-4(fp)
   25368:	10bfffcc 	andi	r2,r2,65535
   2536c:	1004d2ba 	srli	r2,r2,10
   25370:	10bfffcc 	andi	r2,r2,65535
   25374:	1080004c 	andi	r2,r2,1
   25378:	1000041e 	bne	r2,zero,2538c <Read_Configuration+0xa0>
   2537c:	01000134 	movhi	r4,4
   25380:	21220b04 	addi	r4,r4,-30676
   25384:	002a9240 	call	2a924 <printf>
   25388:	00000306 	br	25398 <Read_Configuration+0xac>
		else  printf("Temperature Measurement Resolution: 11 bit.\r\n ");
   2538c:	01000134 	movhi	r4,4
   25390:	21221704 	addi	r4,r4,-30628
   25394:	002a9240 	call	2a924 <printf>

		if(((data>> 8)&0x0003) == 0) printf("Humidity Measurement Resolution: 14 bit.\r\n ");
   25398:	e0bfff0b 	ldhu	r2,-4(fp)
   2539c:	10bfffcc 	andi	r2,r2,65535
   253a0:	1004d23a 	srli	r2,r2,8
   253a4:	10bfffcc 	andi	r2,r2,65535
   253a8:	108000cc 	andi	r2,r2,3
   253ac:	1000041e 	bne	r2,zero,253c0 <Read_Configuration+0xd4>
   253b0:	01000134 	movhi	r4,4
   253b4:	21222304 	addi	r4,r4,-30580
   253b8:	002a9240 	call	2a924 <printf>
   253bc:	00001206 	br	25408 <Read_Configuration+0x11c>
		else if(((data>> 8)&0x0003) == 1) printf("Humidity Measurement Resolution: 11 bit.\r\n ");
   253c0:	e0bfff0b 	ldhu	r2,-4(fp)
   253c4:	10bfffcc 	andi	r2,r2,65535
   253c8:	1004d23a 	srli	r2,r2,8
   253cc:	10bfffcc 	andi	r2,r2,65535
   253d0:	108000cc 	andi	r2,r2,3
   253d4:	10800058 	cmpnei	r2,r2,1
   253d8:	1000041e 	bne	r2,zero,253ec <Read_Configuration+0x100>
   253dc:	01000134 	movhi	r4,4
   253e0:	21222e04 	addi	r4,r4,-30536
   253e4:	002a9240 	call	2a924 <printf>
   253e8:	00000706 	br	25408 <Read_Configuration+0x11c>
		else  printf("Humidity Measurement Resolution: 8 bit.\r\n ");
   253ec:	01000134 	movhi	r4,4
   253f0:	21223904 	addi	r4,r4,-30492
   253f4:	002a9240 	call	2a924 <printf>
   253f8:	00000306 	br	25408 <Read_Configuration+0x11c>

	}else{
		printf("Failed to read configure data.\r\n");
   253fc:	01000134 	movhi	r4,4
   25400:	21224404 	addi	r4,r4,-30448
   25404:	002aa480 	call	2aa48 <puts>
	}

	return bPass;
   25408:	e0bfffc3 	ldbu	r2,-1(fp)
}
   2540c:	e037883a 	mov	sp,fp
   25410:	dfc00117 	ldw	ra,4(sp)
   25414:	df000017 	ldw	fp,0(sp)
   25418:	dec00204 	addi	sp,sp,8
   2541c:	f800283a 	ret

00025420 <Write_Configuration>:



bool Write_Configuration(alt_u8 acquisition_mode , alt_u8 temp_resolution,alt_u8 humidity_resolution)
{
   25420:	defffa04 	addi	sp,sp,-24
   25424:	dfc00515 	stw	ra,20(sp)
   25428:	df000415 	stw	fp,16(sp)
   2542c:	df000404 	addi	fp,sp,16
   25430:	2005883a 	mov	r2,r4
   25434:	2809883a 	mov	r4,r5
   25438:	3007883a 	mov	r3,r6
   2543c:	e0bffe05 	stb	r2,-8(fp)
   25440:	2005883a 	mov	r2,r4
   25444:	e0bffd05 	stb	r2,-12(fp)
   25448:	1805883a 	mov	r2,r3
   2544c:	e0bffc05 	stb	r2,-16(fp)
	bool bPass;
	alt_u16 Data16;


	Data16 = ((acquisition_mode&0x0001) <<12) + ((temp_resolution&0x0001)<<10) + ((humidity_resolution&0x0003)<<8);
   25450:	e0bffe03 	ldbu	r2,-8(fp)
   25454:	1004933a 	slli	r2,r2,12
   25458:	1084000c 	andi	r2,r2,4096
   2545c:	1007883a 	mov	r3,r2
   25460:	e0bffd03 	ldbu	r2,-12(fp)
   25464:	100492ba 	slli	r2,r2,10
   25468:	1081000c 	andi	r2,r2,1024
   2546c:	1884b03a 	or	r2,r3,r2
   25470:	1007883a 	mov	r3,r2
   25474:	e0bffc03 	ldbu	r2,-16(fp)
   25478:	1004923a 	slli	r2,r2,8
   2547c:	1080c00c 	andi	r2,r2,768
   25480:	1885883a 	add	r2,r3,r2
   25484:	e0bfff8d 	sth	r2,-2(fp)

	//printf("Write Configure Register: %04xh\r\n", Data16);

	bPass = th_write_register(R_CONFIGURATION, Data16);
   25488:	e0bfff8b 	ldhu	r2,-2(fp)
   2548c:	100b883a 	mov	r5,r2
   25490:	01000084 	movi	r4,2
   25494:	00257300 	call	25730 <th_write_register>
   25498:	e0bfff45 	stb	r2,-3(fp)

	if (bPass)
   2549c:	e0bfff43 	ldbu	r2,-3(fp)
   254a0:	10000226 	beq	r2,zero,254ac <Write_Configuration+0x8c>
		usleep(20*1000); // wait ready
   254a4:	01138804 	movi	r4,20000
   254a8:	00361680 	call	36168 <usleep>

	return bPass;
   254ac:	e0bfff43 	ldbu	r2,-3(fp)
}
   254b0:	e037883a 	mov	sp,fp
   254b4:	dfc00117 	ldw	ra,4(sp)
   254b8:	df000017 	ldw	fp,0(sp)
   254bc:	dec00204 	addi	sp,sp,8
   254c0:	f800283a 	ret

000254c4 <th_Read_Measure_Data>:


bool th_Read_Measure_Data(int nRegisterNo, alt_u8 *pData8, int nReadLength)
{
   254c4:	defff804 	addi	sp,sp,-32
   254c8:	dfc00715 	stw	ra,28(sp)
   254cc:	df000615 	stw	fp,24(sp)
   254d0:	dc000515 	stw	r16,20(sp)
   254d4:	df000604 	addi	fp,sp,24
   254d8:	e13ffc15 	stw	r4,-16(fp)
   254dc:	e17ffb15 	stw	r5,-20(fp)
   254e0:	e1bffa15 	stw	r6,-24(fp)
	bool bPass;
	const bool bSTOP = TRUE; // need stop so the ready pin can assert when measure is done
   254e4:	00800044 	movi	r2,1
   254e8:	e0bffe45 	stb	r2,-7(fp)

	// write address
	bPass = OC_I2C_Write_Addr(RH_TEMP_I2C_OPENCORES_BASE,RH_Temp_DEVICE_ADDR,nRegisterNo, bSTOP);
   254ec:	e0bffc17 	ldw	r2,-16(fp)
   254f0:	10803fcc 	andi	r2,r2,255
   254f4:	e0fffe43 	ldbu	r3,-7(fp)
   254f8:	180f883a 	mov	r7,r3
   254fc:	100d883a 	mov	r6,r2
   25500:	01402004 	movi	r5,128
   25504:	01000134 	movhi	r4,4
   25508:	21040004 	addi	r4,r4,4096
   2550c:	0020fa40 	call	20fa4 <OC_I2C_Write_Addr>
   25510:	e0bffec5 	stb	r2,-5(fp)

	// check hardware pin DRDYn to make sure measure is done
	if (bPass){ // check ready hardware pin - DRDYn
   25514:	e0bffec3 	ldbu	r2,-5(fp)
   25518:	10002826 	beq	r2,zero,255bc <th_Read_Measure_Data+0xf8>
		//
		bool bTimeout = false;
   2551c:	e03ffe85 	stb	zero,-6(fp)
		alt_u32 TimeStart;

		bPass = false;
   25520:	e03ffec5 	stb	zero,-5(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   25524:	d0a73217 	ldw	r2,-25400(gp)
		TimeStart = alt_nticks();
   25528:	e0bffd15 	stw	r2,-12(fp)
		bTimeout = false;
   2552c:	e03ffe85 	stb	zero,-6(fp)
		while(!bPass && !bTimeout){
   25530:	00001106 	br	25578 <th_Read_Measure_Data+0xb4>
			if ((IORD(RH_TEMP_DRDY_N_BASE, 0x00) & 0x01) == 0x00)
   25534:	00800134 	movhi	r2,4
   25538:	10842037 	ldwio	r2,4224(r2)
   2553c:	1080004c 	andi	r2,r2,1
   25540:	1000031e 	bne	r2,zero,25550 <th_Read_Measure_Data+0x8c>
				bPass = TRUE;
   25544:	00800044 	movi	r2,1
   25548:	e0bffec5 	stb	r2,-5(fp)
   2554c:	00000a06 	br	25578 <th_Read_Measure_Data+0xb4>
   25550:	d0e73217 	ldw	r3,-25400(gp)
			else if ((alt_nticks() - TimeStart) > alt_ticks_per_second()/10) // 0.1 second for timeout
   25554:	e0bffd17 	ldw	r2,-12(fp)
   25558:	18a1c83a 	sub	r16,r3,r2
  return _alt_tick_rate;
   2555c:	d0a73117 	ldw	r2,-25404(gp)
   25560:	01400284 	movi	r5,10
   25564:	1009883a 	mov	r4,r2
   25568:	0026a8c0 	call	26a8c <__udivsi3>
   2556c:	1400022e 	bgeu	r2,r16,25578 <th_Read_Measure_Data+0xb4>
				bTimeout = TRUE;
   25570:	00800044 	movi	r2,1
   25574:	e0bffe85 	stb	r2,-6(fp)
		while(!bPass && !bTimeout){
   25578:	e0bffec3 	ldbu	r2,-5(fp)
   2557c:	1080005c 	xori	r2,r2,1
   25580:	10803fcc 	andi	r2,r2,255
   25584:	10000426 	beq	r2,zero,25598 <th_Read_Measure_Data+0xd4>
   25588:	e0bffe83 	ldbu	r2,-6(fp)
   2558c:	1080005c 	xori	r2,r2,1
   25590:	10803fcc 	andi	r2,r2,255
   25594:	103fe71e 	bne	r2,zero,25534 <th_Read_Measure_Data+0x70>
		}
		if (!bPass)
   25598:	e0bffec3 	ldbu	r2,-5(fp)
   2559c:	1080005c 	xori	r2,r2,1
   255a0:	10803fcc 	andi	r2,r2,255
   255a4:	10000326 	beq	r2,zero,255b4 <th_Read_Measure_Data+0xf0>
			printf("Warning: DRDYn pin not ready (high)!\r\n");
   255a8:	01000134 	movhi	r4,4
   255ac:	21224c04 	addi	r4,r4,-30416
   255b0:	002aa480 	call	2aa48 <puts>
		bPass = TRUE;
   255b4:	00800044 	movi	r2,1
   255b8:	e0bffec5 	stb	r2,-5(fp)
	}

	// read measured data
	if (bPass){
   255bc:	e0bffec3 	ldbu	r2,-5(fp)
   255c0:	10000726 	beq	r2,zero,255e0 <th_Read_Measure_Data+0x11c>
		bPass =  OC_I2C_Read_Continue(RH_TEMP_I2C_OPENCORES_BASE,RH_Temp_DEVICE_ADDR, pData8, nReadLength);
   255c4:	e1fffa17 	ldw	r7,-24(fp)
   255c8:	e1bffb17 	ldw	r6,-20(fp)
   255cc:	01402004 	movi	r5,128
   255d0:	01000134 	movhi	r4,4
   255d4:	21040004 	addi	r4,r4,4096
   255d8:	00210b40 	call	210b4 <OC_I2C_Read_Continue>
   255dc:	e0bffec5 	stb	r2,-5(fp)

	}



	return bPass;
   255e0:	e0bffec3 	ldbu	r2,-5(fp)
}
   255e4:	e6ffff04 	addi	sp,fp,-4
   255e8:	dfc00217 	ldw	ra,8(sp)
   255ec:	df000117 	ldw	fp,4(sp)
   255f0:	dc000017 	ldw	r16,0(sp)
   255f4:	dec00304 	addi	sp,sp,12
   255f8:	f800283a 	ret

000255fc <th_reset>:


bool th_reset(alt_u32 I2C_Controller_Base){
   255fc:	defffc04 	addi	sp,sp,-16
   25600:	dfc00315 	stw	ra,12(sp)
   25604:	df000215 	stw	fp,8(sp)
   25608:	df000204 	addi	fp,sp,8
   2560c:	e13ffe15 	stw	r4,-8(fp)
	bool bPass;

	bPass = th_write_register(R_CONFIGURATION, 0x8000);
   25610:	01600014 	movui	r5,32768
   25614:	01000084 	movi	r4,2
   25618:	00257300 	call	25730 <th_write_register>
   2561c:	e0bfffc5 	stb	r2,-1(fp)
	return bPass;
   25620:	e0bfffc3 	ldbu	r2,-1(fp)
}
   25624:	e037883a 	mov	sp,fp
   25628:	dfc00117 	ldw	ra,4(sp)
   2562c:	df000017 	ldw	fp,0(sp)
   25630:	dec00204 	addi	sp,sp,8
   25634:	f800283a 	ret

00025638 <th_dump_chip_info>:


bool th_dump_chip_info(alt_u32 I2C_Controller_Base){
   25638:	defffc04 	addi	sp,sp,-16
   2563c:	dfc00315 	stw	ra,12(sp)
   25640:	df000215 	stw	fp,8(sp)
   25644:	df000204 	addi	fp,sp,8
   25648:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 Data16;
	bool bPass;

	// R_DEVICE_ID
	bPass = th_read_register(R_DEVICE_ID, &Data16);
   2564c:	e0bfff04 	addi	r2,fp,-4
   25650:	100b883a 	mov	r5,r2
   25654:	01003fc4 	movi	r4,255
   25658:	00257ac0 	call	257ac <th_read_register>
   2565c:	e0bfffc5 	stb	r2,-1(fp)
	if (bPass){
   25660:	e0bfffc3 	ldbu	r2,-1(fp)
   25664:	10000726 	beq	r2,zero,25684 <th_dump_chip_info+0x4c>
		printf("DEVICE ID=%04xh(0x1000 expected)\r\n", Data16);
   25668:	e0bfff0b 	ldhu	r2,-4(fp)
   2566c:	10bfffcc 	andi	r2,r2,65535
   25670:	100b883a 	mov	r5,r2
   25674:	01000134 	movhi	r4,4
   25678:	21225604 	addi	r4,r4,-30376
   2567c:	002a9240 	call	2a924 <printf>
   25680:	00000306 	br	25690 <th_dump_chip_info+0x58>
	}else{
		printf("Failed to read DEVICE ID\r\n");
   25684:	01000134 	movhi	r4,4
   25688:	21225f04 	addi	r4,r4,-30340
   2568c:	002aa480 	call	2aa48 <puts>
	}

	// R_DEVICE_ID
	bPass = th_read_register(R_MANUFACTURER_ID, &Data16);
   25690:	e0bfff04 	addi	r2,fp,-4
   25694:	100b883a 	mov	r5,r2
   25698:	01003f84 	movi	r4,254
   2569c:	00257ac0 	call	257ac <th_read_register>
   256a0:	e0bfffc5 	stb	r2,-1(fp)
	if (bPass){
   256a4:	e0bfffc3 	ldbu	r2,-1(fp)
   256a8:	10000726 	beq	r2,zero,256c8 <th_dump_chip_info+0x90>
		printf("MANUFACTURER ID=%04xh(0x5449 expected)\r\n", Data16);
   256ac:	e0bfff0b 	ldhu	r2,-4(fp)
   256b0:	10bfffcc 	andi	r2,r2,65535
   256b4:	100b883a 	mov	r5,r2
   256b8:	01000134 	movhi	r4,4
   256bc:	21226604 	addi	r4,r4,-30312
   256c0:	002a9240 	call	2a924 <printf>
   256c4:	00000306 	br	256d4 <th_dump_chip_info+0x9c>
	}else{
		printf("Failed to read MANUFACTURER ID\r\n");
   256c8:	01000134 	movhi	r4,4
   256cc:	21227104 	addi	r4,r4,-30268
   256d0:	002aa480 	call	2aa48 <puts>
	}

	// configure Data
	bPass =  th_read_register(R_CONFIGURATION, &Data16);
   256d4:	e0bfff04 	addi	r2,fp,-4
   256d8:	100b883a 	mov	r5,r2
   256dc:	01000084 	movi	r4,2
   256e0:	00257ac0 	call	257ac <th_read_register>
   256e4:	e0bfffc5 	stb	r2,-1(fp)
	if (bPass){
   256e8:	e0bfffc3 	ldbu	r2,-1(fp)
   256ec:	10000726 	beq	r2,zero,2570c <th_dump_chip_info+0xd4>
		printf("Configure Data=%04xh\r\n", Data16);
   256f0:	e0bfff0b 	ldhu	r2,-4(fp)
   256f4:	10bfffcc 	andi	r2,r2,65535
   256f8:	100b883a 	mov	r5,r2
   256fc:	01000134 	movhi	r4,4
   25700:	21227904 	addi	r4,r4,-30236
   25704:	002a9240 	call	2a924 <printf>
   25708:	00000306 	br	25718 <th_dump_chip_info+0xe0>
	}else{
		printf("Failed to read configure data\r\n");
   2570c:	01000134 	movhi	r4,4
   25710:	21227f04 	addi	r4,r4,-30212
   25714:	002aa480 	call	2aa48 <puts>
	}

	return bPass;
   25718:	e0bfffc3 	ldbu	r2,-1(fp)
}
   2571c:	e037883a 	mov	sp,fp
   25720:	dfc00117 	ldw	ra,4(sp)
   25724:	df000017 	ldw	fp,0(sp)
   25728:	dec00204 	addi	sp,sp,8
   2572c:	f800283a 	ret

00025730 <th_write_register>:


bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
   25730:	defffa04 	addi	sp,sp,-24
   25734:	dfc00515 	stw	ra,20(sp)
   25738:	df000415 	stw	fp,16(sp)
   2573c:	df000404 	addi	fp,sp,16
   25740:	2005883a 	mov	r2,r4
   25744:	2807883a 	mov	r3,r5
   25748:	e0bffe05 	stb	r2,-8(fp)
   2574c:	1805883a 	mov	r2,r3
   25750:	e0bffd0d 	sth	r2,-12(fp)
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
   25754:	e0bffd0b 	ldhu	r2,-12(fp)
   25758:	1004d23a 	srli	r2,r2,8
   2575c:	e0bfff45 	stb	r2,-3(fp)
	szData8[1] = Data16 & 0xFF;
   25760:	e0bffd0b 	ldhu	r2,-12(fp)
   25764:	e0bfff85 	stb	r2,-2(fp)
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
   25768:	e0fffe03 	ldbu	r3,-8(fp)
   2576c:	e13fff44 	addi	r4,fp,-3
   25770:	00800084 	movi	r2,2
   25774:	d8800015 	stw	r2,0(sp)
   25778:	200f883a 	mov	r7,r4
   2577c:	180d883a 	mov	r6,r3
   25780:	01402004 	movi	r5,128
   25784:	01000134 	movhi	r4,4
   25788:	21040004 	addi	r4,r4,4096
   2578c:	0020b000 	call	20b00 <OC_I2C_Write>
   25790:	e0bfffc5 	stb	r2,-1(fp)

	return bPass;
   25794:	e0bfffc3 	ldbu	r2,-1(fp)

}
   25798:	e037883a 	mov	sp,fp
   2579c:	dfc00117 	ldw	ra,4(sp)
   257a0:	df000017 	ldw	fp,0(sp)
   257a4:	dec00204 	addi	sp,sp,8
   257a8:	f800283a 	ret

000257ac <th_read_register>:


bool th_read_register(alt_u8 RegisterPorinter, alt_u16 *pData16){
   257ac:	defffa04 	addi	sp,sp,-24
   257b0:	dfc00515 	stw	ra,20(sp)
   257b4:	df000415 	stw	fp,16(sp)
   257b8:	df000404 	addi	fp,sp,16
   257bc:	2005883a 	mov	r2,r4
   257c0:	e17ffd15 	stw	r5,-12(fp)
   257c4:	e0bffe05 	stb	r2,-8(fp)
	bool bPass;
	alt_u8 szData8[2];

	bPass = OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
   257c8:	e0fffe03 	ldbu	r3,-8(fp)
   257cc:	e13fff44 	addi	r4,fp,-3
   257d0:	00800084 	movi	r2,2
   257d4:	d8800015 	stw	r2,0(sp)
   257d8:	200f883a 	mov	r7,r4
   257dc:	180d883a 	mov	r6,r3
   257e0:	01402004 	movi	r5,128
   257e4:	01000134 	movhi	r4,4
   257e8:	21040004 	addi	r4,r4,4096
   257ec:	0020db40 	call	20db4 <OC_I2C_Read>
   257f0:	e0bfffc5 	stb	r2,-1(fp)
	if (bPass){
   257f4:	e0bfffc3 	ldbu	r2,-1(fp)
   257f8:	10000a26 	beq	r2,zero,25824 <th_read_register+0x78>
		*pData16 = (szData8[0] << 8) | szData8[1];
   257fc:	e0bfff43 	ldbu	r2,-3(fp)
   25800:	10803fcc 	andi	r2,r2,255
   25804:	1004923a 	slli	r2,r2,8
   25808:	1007883a 	mov	r3,r2
   2580c:	e0bfff83 	ldbu	r2,-2(fp)
   25810:	10803fcc 	andi	r2,r2,255
   25814:	1884b03a 	or	r2,r3,r2
   25818:	1007883a 	mov	r3,r2
   2581c:	e0bffd17 	ldw	r2,-12(fp)
   25820:	10c0000d 	sth	r3,0(r2)
	}

	return bPass;
   25824:	e0bfffc3 	ldbu	r2,-1(fp)


}
   25828:	e037883a 	mov	sp,fp
   2582c:	dfc00117 	ldw	ra,4(sp)
   25830:	df000017 	ldw	fp,0(sp)
   25834:	dec00204 	addi	sp,sp,8
   25838:	f800283a 	ret

0002583c <powf>:
   2583c:	defffa04 	addi	sp,sp,-24
   25840:	dc800215 	stw	r18,8(sp)
   25844:	dc400115 	stw	r17,4(sp)
   25848:	dc000015 	stw	r16,0(sp)
   2584c:	dfc00515 	stw	ra,20(sp)
   25850:	dd000415 	stw	r20,16(sp)
   25854:	dcc00315 	stw	r19,12(sp)
   25858:	2021883a 	mov	r16,r4
   2585c:	2823883a 	mov	r17,r5
   25860:	0025ad40 	call	25ad4 <__ieee754_powf>
   25864:	1025883a 	mov	r18,r2
   25868:	00800134 	movhi	r2,4
   2586c:	10ab2017 	ldw	r2,-21376(r2)
   25870:	10bfffe0 	cmpeqi	r2,r2,-1
   25874:	1000211e 	bne	r2,zero,258fc <powf+0xc0>
   25878:	880b883a 	mov	r5,r17
   2587c:	8809883a 	mov	r4,r17
   25880:	0027e440 	call	27e44 <__unordsf2>
   25884:	10001d1e 	bne	r2,zero,258fc <powf+0xc0>
   25888:	800b883a 	mov	r5,r16
   2588c:	8009883a 	mov	r4,r16
   25890:	0027e440 	call	27e44 <__unordsf2>
   25894:	000b883a 	mov	r5,zero
   25898:	10007a1e 	bne	r2,zero,25a84 <powf+0x248>
   2589c:	8009883a 	mov	r4,r16
   258a0:	00273d40 	call	273d4 <__eqsf2>
   258a4:	10001e1e 	bne	r2,zero,25920 <powf+0xe4>
   258a8:	000b883a 	mov	r5,zero
   258ac:	8809883a 	mov	r4,r17
   258b0:	00273d40 	call	273d4 <__eqsf2>
   258b4:	10007626 	beq	r2,zero,25a90 <powf+0x254>
   258b8:	01200034 	movhi	r4,32768
   258bc:	213fffc4 	addi	r4,r4,-1
   258c0:	8920703a 	and	r16,r17,r4
   258c4:	015fe034 	movhi	r5,32640
   258c8:	297fffc4 	addi	r5,r5,-1
   258cc:	8009883a 	mov	r4,r16
   258d0:	0027e440 	call	27e44 <__unordsf2>
   258d4:	1000091e 	bne	r2,zero,258fc <powf+0xc0>
   258d8:	015fe034 	movhi	r5,32640
   258dc:	297fffc4 	addi	r5,r5,-1
   258e0:	8009883a 	mov	r4,r16
   258e4:	00274440 	call	27444 <__gesf2>
   258e8:	00800416 	blt	zero,r2,258fc <powf+0xc0>
   258ec:	000b883a 	mov	r5,zero
   258f0:	8809883a 	mov	r4,r17
   258f4:	00274fc0 	call	274fc <__lesf2>
   258f8:	10006716 	blt	r2,zero,25a98 <powf+0x25c>
   258fc:	9005883a 	mov	r2,r18
   25900:	dfc00517 	ldw	ra,20(sp)
   25904:	dd000417 	ldw	r20,16(sp)
   25908:	dcc00317 	ldw	r19,12(sp)
   2590c:	dc800217 	ldw	r18,8(sp)
   25910:	dc400117 	ldw	r17,4(sp)
   25914:	dc000017 	ldw	r16,0(sp)
   25918:	dec00604 	addi	sp,sp,24
   2591c:	f800283a 	ret
   25920:	01200034 	movhi	r4,32768
   25924:	213fffc4 	addi	r4,r4,-1
   25928:	9126703a 	and	r19,r18,r4
   2592c:	015fe034 	movhi	r5,32640
   25930:	297fffc4 	addi	r5,r5,-1
   25934:	9809883a 	mov	r4,r19
   25938:	0027e440 	call	27e44 <__unordsf2>
   2593c:	1000261e 	bne	r2,zero,259d8 <powf+0x19c>
   25940:	015fe034 	movhi	r5,32640
   25944:	297fffc4 	addi	r5,r5,-1
   25948:	9809883a 	mov	r4,r19
   2594c:	00274440 	call	27444 <__gesf2>
   25950:	00802116 	blt	zero,r2,259d8 <powf+0x19c>
   25954:	000b883a 	mov	r5,zero
   25958:	9009883a 	mov	r4,r18
   2595c:	00273d40 	call	273d4 <__eqsf2>
   25960:	103fe61e 	bne	r2,zero,258fc <powf+0xc0>
   25964:	04e00034 	movhi	r19,32768
   25968:	9cffffc4 	addi	r19,r19,-1
   2596c:	84e0703a 	and	r16,r16,r19
   25970:	015fe034 	movhi	r5,32640
   25974:	297fffc4 	addi	r5,r5,-1
   25978:	8009883a 	mov	r4,r16
   2597c:	0027e440 	call	27e44 <__unordsf2>
   25980:	103fde1e 	bne	r2,zero,258fc <powf+0xc0>
   25984:	015fe034 	movhi	r5,32640
   25988:	297fffc4 	addi	r5,r5,-1
   2598c:	8009883a 	mov	r4,r16
   25990:	00274440 	call	27444 <__gesf2>
   25994:	00bfd916 	blt	zero,r2,258fc <powf+0xc0>
   25998:	8ce2703a 	and	r17,r17,r19
   2599c:	015fe034 	movhi	r5,32640
   259a0:	297fffc4 	addi	r5,r5,-1
   259a4:	8809883a 	mov	r4,r17
   259a8:	0027e440 	call	27e44 <__unordsf2>
   259ac:	103fd31e 	bne	r2,zero,258fc <powf+0xc0>
   259b0:	015fe034 	movhi	r5,32640
   259b4:	297fffc4 	addi	r5,r5,-1
   259b8:	8809883a 	mov	r4,r17
   259bc:	00274440 	call	27444 <__gesf2>
   259c0:	00bfce16 	blt	zero,r2,258fc <powf+0xc0>
   259c4:	002a8e80 	call	2a8e8 <__errno>
   259c8:	00c00884 	movi	r3,34
   259cc:	10c00015 	stw	r3,0(r2)
   259d0:	0025883a 	mov	r18,zero
   259d4:	003fc906 	br	258fc <powf+0xc0>
   259d8:	04e00034 	movhi	r19,32768
   259dc:	9cffffc4 	addi	r19,r19,-1
   259e0:	84e8703a 	and	r20,r16,r19
   259e4:	015fe034 	movhi	r5,32640
   259e8:	297fffc4 	addi	r5,r5,-1
   259ec:	a009883a 	mov	r4,r20
   259f0:	0027e440 	call	27e44 <__unordsf2>
   259f4:	103fc11e 	bne	r2,zero,258fc <powf+0xc0>
   259f8:	015fe034 	movhi	r5,32640
   259fc:	297fffc4 	addi	r5,r5,-1
   25a00:	a009883a 	mov	r4,r20
   25a04:	00274440 	call	27444 <__gesf2>
   25a08:	00bfbc16 	blt	zero,r2,258fc <powf+0xc0>
   25a0c:	8ce6703a 	and	r19,r17,r19
   25a10:	015fe034 	movhi	r5,32640
   25a14:	297fffc4 	addi	r5,r5,-1
   25a18:	9809883a 	mov	r4,r19
   25a1c:	0027e440 	call	27e44 <__unordsf2>
   25a20:	103fcc1e 	bne	r2,zero,25954 <powf+0x118>
   25a24:	015fe034 	movhi	r5,32640
   25a28:	297fffc4 	addi	r5,r5,-1
   25a2c:	9809883a 	mov	r4,r19
   25a30:	00274440 	call	27444 <__gesf2>
   25a34:	00bfc716 	blt	zero,r2,25954 <powf+0x118>
   25a38:	900b883a 	mov	r5,r18
   25a3c:	9009883a 	mov	r4,r18
   25a40:	0027e440 	call	27e44 <__unordsf2>
   25a44:	10001b1e 	bne	r2,zero,25ab4 <powf+0x278>
   25a48:	002a8e80 	call	2a8e8 <__errno>
   25a4c:	00c00884 	movi	r3,34
   25a50:	10c00015 	stw	r3,0(r2)
   25a54:	000b883a 	mov	r5,zero
   25a58:	8009883a 	mov	r4,r16
   25a5c:	00274fc0 	call	274fc <__lesf2>
   25a60:	1000120e 	bge	r2,zero,25aac <powf+0x270>
   25a64:	8809883a 	mov	r4,r17
   25a68:	00267240 	call	26724 <rintf>
   25a6c:	880b883a 	mov	r5,r17
   25a70:	1009883a 	mov	r4,r2
   25a74:	00273d40 	call	273d4 <__eqsf2>
   25a78:	10000c26 	beq	r2,zero,25aac <powf+0x270>
   25a7c:	04bfe034 	movhi	r18,65408
   25a80:	003f9e06 	br	258fc <powf+0xc0>
   25a84:	8809883a 	mov	r4,r17
   25a88:	00273d40 	call	273d4 <__eqsf2>
   25a8c:	103f9b1e 	bne	r2,zero,258fc <powf+0xc0>
   25a90:	048fe034 	movhi	r18,16256
   25a94:	003f9906 	br	258fc <powf+0xc0>
   25a98:	002a8e80 	call	2a8e8 <__errno>
   25a9c:	00c00844 	movi	r3,33
   25aa0:	10c00015 	stw	r3,0(r2)
   25aa4:	04bfe034 	movhi	r18,65408
   25aa8:	003f9406 	br	258fc <powf+0xc0>
   25aac:	049fe034 	movhi	r18,32640
   25ab0:	003f9206 	br	258fc <powf+0xc0>
   25ab4:	002a8e80 	call	2a8e8 <__errno>
   25ab8:	00c00844 	movi	r3,33
   25abc:	10c00015 	stw	r3,0(r2)
   25ac0:	000b883a 	mov	r5,zero
   25ac4:	0009883a 	mov	r4,zero
   25ac8:	0026fe00 	call	26fe0 <__divsf3>
   25acc:	1025883a 	mov	r18,r2
   25ad0:	003f8a06 	br	258fc <powf+0xc0>

00025ad4 <__ieee754_powf>:
   25ad4:	00a00034 	movhi	r2,32768
   25ad8:	10bfffc4 	addi	r2,r2,-1
   25adc:	1146703a 	and	r3,r2,r5
   25ae0:	18010926 	beq	r3,zero,25f08 <__ieee754_powf+0x434>
   25ae4:	defff004 	addi	sp,sp,-64
   25ae8:	dc800815 	stw	r18,32(sp)
   25aec:	dc000615 	stw	r16,24(sp)
   25af0:	dfc00f15 	stw	ra,60(sp)
   25af4:	1120703a 	and	r16,r2,r4
   25af8:	df000e15 	stw	fp,56(sp)
   25afc:	ddc00d15 	stw	r23,52(sp)
   25b00:	dd800c15 	stw	r22,48(sp)
   25b04:	dd400b15 	stw	r21,44(sp)
   25b08:	dd000a15 	stw	r20,40(sp)
   25b0c:	dcc00915 	stw	r19,36(sp)
   25b10:	dc400715 	stw	r17,28(sp)
   25b14:	009fe034 	movhi	r2,32640
   25b18:	2025883a 	mov	r18,r4
   25b1c:	14000d0e 	bge	r2,r16,25b54 <__ieee754_powf+0x80>
   25b20:	009ff034 	movhi	r2,32704
   25b24:	dfc00f17 	ldw	ra,60(sp)
   25b28:	df000e17 	ldw	fp,56(sp)
   25b2c:	ddc00d17 	ldw	r23,52(sp)
   25b30:	dd800c17 	ldw	r22,48(sp)
   25b34:	dd400b17 	ldw	r21,44(sp)
   25b38:	dd000a17 	ldw	r20,40(sp)
   25b3c:	dcc00917 	ldw	r19,36(sp)
   25b40:	dc800817 	ldw	r18,32(sp)
   25b44:	dc400717 	ldw	r17,28(sp)
   25b48:	dc000617 	ldw	r16,24(sp)
   25b4c:	dec01004 	addi	sp,sp,64
   25b50:	f800283a 	ret
   25b54:	10c0ee16 	blt	r2,r3,25f10 <__ieee754_powf+0x43c>
   25b58:	2823883a 	mov	r17,r5
   25b5c:	2000ef16 	blt	r4,zero,25f1c <__ieee754_powf+0x448>
   25b60:	0027883a 	mov	r19,zero
   25b64:	009fe034 	movhi	r2,32640
   25b68:	1880f826 	beq	r3,r2,25f4c <__ieee754_powf+0x478>
   25b6c:	008fe034 	movhi	r2,16256
   25b70:	18811326 	beq	r3,r2,25fc0 <__ieee754_powf+0x4ec>
   25b74:	00900034 	movhi	r2,16384
   25b78:	28812126 	beq	r5,r2,26000 <__ieee754_powf+0x52c>
   25b7c:	008fc034 	movhi	r2,16128
   25b80:	2880fa26 	beq	r5,r2,25f6c <__ieee754_powf+0x498>
   25b84:	00a00034 	movhi	r2,32768
   25b88:	10bfffc4 	addi	r2,r2,-1
   25b8c:	019fe034 	movhi	r6,32640
   25b90:	2084703a 	and	r2,r4,r2
   25b94:	81810d26 	beq	r16,r6,25fcc <__ieee754_powf+0x4f8>
   25b98:	80010c26 	beq	r16,zero,25fcc <__ieee754_powf+0x4f8>
   25b9c:	018fe034 	movhi	r6,16256
   25ba0:	81810a26 	beq	r16,r6,25fcc <__ieee754_powf+0x4f8>
   25ba4:	2024d7fa 	srli	r18,r4,31
   25ba8:	94bfffc4 	addi	r18,r18,-1
   25bac:	9c8cb03a 	or	r6,r19,r18
   25bb0:	30011926 	beq	r6,zero,26018 <__ieee754_powf+0x544>
   25bb4:	01934034 	movhi	r6,19712
   25bb8:	30c11d0e 	bge	r6,r3,26030 <__ieee754_powf+0x55c>
   25bbc:	00cfe034 	movhi	r3,16256
   25bc0:	18fffdc4 	addi	r3,r3,-9
   25bc4:	1c02670e 	bge	r3,r16,26564 <__ieee754_powf+0xa90>
   25bc8:	00cfe034 	movhi	r3,16256
   25bcc:	18c001c4 	addi	r3,r3,7
   25bd0:	1c010e16 	blt	r3,r16,2600c <__ieee754_powf+0x538>
   25bd4:	014fe034 	movhi	r5,16256
   25bd8:	1009883a 	mov	r4,r2
   25bdc:	00279b00 	call	279b0 <__subsf3>
   25be0:	014fee74 	movhi	r5,16313
   25be4:	296a8004 	addi	r5,r5,-22016
   25be8:	1009883a 	mov	r4,r2
   25bec:	1021883a 	mov	r16,r2
   25bf0:	00275b00 	call	275b0 <__mulsf3>
   25bf4:	014dbb74 	movhi	r5,14061
   25bf8:	8009883a 	mov	r4,r16
   25bfc:	29695c04 	addi	r5,r5,-23184
   25c00:	102b883a 	mov	r21,r2
   25c04:	00275b00 	call	275b0 <__mulsf3>
   25c08:	8009883a 	mov	r4,r16
   25c0c:	014fa034 	movhi	r5,16000
   25c10:	1029883a 	mov	r20,r2
   25c14:	00275b00 	call	275b0 <__mulsf3>
   25c18:	010faaf4 	movhi	r4,16043
   25c1c:	100b883a 	mov	r5,r2
   25c20:	212aaac4 	addi	r4,r4,-21845
   25c24:	00279b00 	call	279b0 <__subsf3>
   25c28:	800b883a 	mov	r5,r16
   25c2c:	1009883a 	mov	r4,r2
   25c30:	00275b00 	call	275b0 <__mulsf3>
   25c34:	100b883a 	mov	r5,r2
   25c38:	010fc034 	movhi	r4,16128
   25c3c:	00279b00 	call	279b0 <__subsf3>
   25c40:	800b883a 	mov	r5,r16
   25c44:	8009883a 	mov	r4,r16
   25c48:	102d883a 	mov	r22,r2
   25c4c:	00275b00 	call	275b0 <__mulsf3>
   25c50:	100b883a 	mov	r5,r2
   25c54:	b009883a 	mov	r4,r22
   25c58:	00275b00 	call	275b0 <__mulsf3>
   25c5c:	014fee74 	movhi	r5,16313
   25c60:	296a8ec4 	addi	r5,r5,-21957
   25c64:	1009883a 	mov	r4,r2
   25c68:	00275b00 	call	275b0 <__mulsf3>
   25c6c:	a009883a 	mov	r4,r20
   25c70:	100b883a 	mov	r5,r2
   25c74:	00279b00 	call	279b0 <__subsf3>
   25c78:	100b883a 	mov	r5,r2
   25c7c:	a809883a 	mov	r4,r21
   25c80:	1029883a 	mov	r20,r2
   25c84:	0026b740 	call	26b74 <__addsf3>
   25c88:	013c0004 	movi	r4,-4096
   25c8c:	1108703a 	and	r4,r2,r4
   25c90:	a80b883a 	mov	r5,r21
   25c94:	2021883a 	mov	r16,r4
   25c98:	00279b00 	call	279b0 <__subsf3>
   25c9c:	a009883a 	mov	r4,r20
   25ca0:	100b883a 	mov	r5,r2
   25ca4:	00279b00 	call	279b0 <__subsf3>
   25ca8:	1029883a 	mov	r20,r2
   25cac:	9cffffc4 	addi	r19,r19,-1
   25cb0:	9ca4b03a 	or	r18,r19,r18
   25cb4:	9001e61e 	bne	r18,zero,26450 <__ieee754_powf+0x97c>
   25cb8:	04afe034 	movhi	r18,49024
   25cbc:	04fc0004 	movi	r19,-4096
   25cc0:	9c66703a 	and	r19,r19,r17
   25cc4:	980b883a 	mov	r5,r19
   25cc8:	8809883a 	mov	r4,r17
   25ccc:	00279b00 	call	279b0 <__subsf3>
   25cd0:	800b883a 	mov	r5,r16
   25cd4:	1009883a 	mov	r4,r2
   25cd8:	00275b00 	call	275b0 <__mulsf3>
   25cdc:	880b883a 	mov	r5,r17
   25ce0:	a009883a 	mov	r4,r20
   25ce4:	102b883a 	mov	r21,r2
   25ce8:	00275b00 	call	275b0 <__mulsf3>
   25cec:	a809883a 	mov	r4,r21
   25cf0:	100b883a 	mov	r5,r2
   25cf4:	0026b740 	call	26b74 <__addsf3>
   25cf8:	980b883a 	mov	r5,r19
   25cfc:	8009883a 	mov	r4,r16
   25d00:	1023883a 	mov	r17,r2
   25d04:	00275b00 	call	275b0 <__mulsf3>
   25d08:	100b883a 	mov	r5,r2
   25d0c:	8809883a 	mov	r4,r17
   25d10:	1029883a 	mov	r20,r2
   25d14:	0026b740 	call	26b74 <__addsf3>
   25d18:	1027883a 	mov	r19,r2
   25d1c:	00a00034 	movhi	r2,32768
   25d20:	10bfffc4 	addi	r2,r2,-1
   25d24:	9807883a 	mov	r3,r19
   25d28:	a02b883a 	mov	r21,r20
   25d2c:	982d883a 	mov	r22,r19
   25d30:	14e0703a 	and	r16,r2,r19
   25d34:	04c1c80e 	bge	zero,r19,26458 <__ieee754_powf+0x984>
   25d38:	0090c034 	movhi	r2,17152
   25d3c:	14020016 	blt	r2,r16,26540 <__ieee754_powf+0xa6c>
   25d40:	8081f326 	beq	r16,r2,26510 <__ieee754_powf+0xa3c>
   25d44:	008fc034 	movhi	r2,16128
   25d48:	1401cd16 	blt	r2,r16,26480 <__ieee754_powf+0x9ac>
   25d4c:	0029883a 	mov	r20,zero
   25d50:	0027883a 	mov	r19,zero
   25d54:	043c0004 	movi	r16,-4096
   25d58:	1c20703a 	and	r16,r3,r16
   25d5c:	014fcc74 	movhi	r5,16177
   25d60:	8009883a 	mov	r4,r16
   25d64:	295c8004 	addi	r5,r5,29184
   25d68:	00275b00 	call	275b0 <__mulsf3>
   25d6c:	a80b883a 	mov	r5,r21
   25d70:	8009883a 	mov	r4,r16
   25d74:	102d883a 	mov	r22,r2
   25d78:	00279b00 	call	279b0 <__subsf3>
   25d7c:	8809883a 	mov	r4,r17
   25d80:	100b883a 	mov	r5,r2
   25d84:	00279b00 	call	279b0 <__subsf3>
   25d88:	014fcc74 	movhi	r5,16177
   25d8c:	295c8604 	addi	r5,r5,29208
   25d90:	1009883a 	mov	r4,r2
   25d94:	00275b00 	call	275b0 <__mulsf3>
   25d98:	014d7034 	movhi	r5,13760
   25d9c:	8009883a 	mov	r4,r16
   25da0:	296fa304 	addi	r5,r5,-16756
   25da4:	1023883a 	mov	r17,r2
   25da8:	00275b00 	call	275b0 <__mulsf3>
   25dac:	8809883a 	mov	r4,r17
   25db0:	100b883a 	mov	r5,r2
   25db4:	0026b740 	call	26b74 <__addsf3>
   25db8:	b009883a 	mov	r4,r22
   25dbc:	100b883a 	mov	r5,r2
   25dc0:	1023883a 	mov	r17,r2
   25dc4:	0026b740 	call	26b74 <__addsf3>
   25dc8:	b00b883a 	mov	r5,r22
   25dcc:	1009883a 	mov	r4,r2
   25dd0:	1021883a 	mov	r16,r2
   25dd4:	00279b00 	call	279b0 <__subsf3>
   25dd8:	8809883a 	mov	r4,r17
   25ddc:	100b883a 	mov	r5,r2
   25de0:	00279b00 	call	279b0 <__subsf3>
   25de4:	800b883a 	mov	r5,r16
   25de8:	8009883a 	mov	r4,r16
   25dec:	102b883a 	mov	r21,r2
   25df0:	00275b00 	call	275b0 <__mulsf3>
   25df4:	014cccb4 	movhi	r5,13106
   25df8:	296ed304 	addi	r5,r5,-17588
   25dfc:	1009883a 	mov	r4,r2
   25e00:	1023883a 	mov	r17,r2
   25e04:	00275b00 	call	275b0 <__mulsf3>
   25e08:	014d77b4 	movhi	r5,13790
   25e0c:	297a8384 	addi	r5,r5,-5618
   25e10:	1009883a 	mov	r4,r2
   25e14:	00279b00 	call	279b0 <__subsf3>
   25e18:	880b883a 	mov	r5,r17
   25e1c:	1009883a 	mov	r4,r2
   25e20:	00275b00 	call	275b0 <__mulsf3>
   25e24:	014e22f4 	movhi	r5,14475
   25e28:	296cd544 	addi	r5,r5,-19627
   25e2c:	1009883a 	mov	r4,r2
   25e30:	0026b740 	call	26b74 <__addsf3>
   25e34:	880b883a 	mov	r5,r17
   25e38:	1009883a 	mov	r4,r2
   25e3c:	00275b00 	call	275b0 <__mulsf3>
   25e40:	014ecdb4 	movhi	r5,15158
   25e44:	2942d844 	addi	r5,r5,2913
   25e48:	1009883a 	mov	r4,r2
   25e4c:	00279b00 	call	279b0 <__subsf3>
   25e50:	880b883a 	mov	r5,r17
   25e54:	1009883a 	mov	r4,r2
   25e58:	00275b00 	call	275b0 <__mulsf3>
   25e5c:	014f8af4 	movhi	r5,15915
   25e60:	296aaac4 	addi	r5,r5,-21845
   25e64:	1009883a 	mov	r4,r2
   25e68:	0026b740 	call	26b74 <__addsf3>
   25e6c:	880b883a 	mov	r5,r17
   25e70:	1009883a 	mov	r4,r2
   25e74:	00275b00 	call	275b0 <__mulsf3>
   25e78:	100b883a 	mov	r5,r2
   25e7c:	8009883a 	mov	r4,r16
   25e80:	00279b00 	call	279b0 <__subsf3>
   25e84:	100b883a 	mov	r5,r2
   25e88:	8009883a 	mov	r4,r16
   25e8c:	1023883a 	mov	r17,r2
   25e90:	00275b00 	call	275b0 <__mulsf3>
   25e94:	8809883a 	mov	r4,r17
   25e98:	01500034 	movhi	r5,16384
   25e9c:	102d883a 	mov	r22,r2
   25ea0:	00279b00 	call	279b0 <__subsf3>
   25ea4:	100b883a 	mov	r5,r2
   25ea8:	b009883a 	mov	r4,r22
   25eac:	0026fe00 	call	26fe0 <__divsf3>
   25eb0:	a80b883a 	mov	r5,r21
   25eb4:	8009883a 	mov	r4,r16
   25eb8:	1023883a 	mov	r17,r2
   25ebc:	00275b00 	call	275b0 <__mulsf3>
   25ec0:	a80b883a 	mov	r5,r21
   25ec4:	1009883a 	mov	r4,r2
   25ec8:	0026b740 	call	26b74 <__addsf3>
   25ecc:	100b883a 	mov	r5,r2
   25ed0:	8809883a 	mov	r4,r17
   25ed4:	00279b00 	call	279b0 <__subsf3>
   25ed8:	800b883a 	mov	r5,r16
   25edc:	1009883a 	mov	r4,r2
   25ee0:	00279b00 	call	279b0 <__subsf3>
   25ee4:	010fe034 	movhi	r4,16256
   25ee8:	100b883a 	mov	r5,r2
   25eec:	00279b00 	call	279b0 <__subsf3>
   25ef0:	a089883a 	add	r4,r20,r2
   25ef4:	2007d5fa 	srai	r3,r4,23
   25ef8:	00c1b10e 	bge	zero,r3,265c0 <__ieee754_powf+0xaec>
   25efc:	900b883a 	mov	r5,r18
   25f00:	00275b00 	call	275b0 <__mulsf3>
   25f04:	003f0706 	br	25b24 <__ieee754_powf+0x50>
   25f08:	008fe034 	movhi	r2,16256
   25f0c:	f800283a 	ret
   25f10:	008fe034 	movhi	r2,16256
   25f14:	80bf0326 	beq	r16,r2,25b24 <__ieee754_powf+0x50>
   25f18:	003f0106 	br	25b20 <__ieee754_powf+0x4c>
   25f1c:	0092e034 	movhi	r2,19328
   25f20:	1880100e 	bge	r3,r2,25f64 <__ieee754_powf+0x490>
   25f24:	008fe034 	movhi	r2,16256
   25f28:	18800616 	blt	r3,r2,25f44 <__ieee754_powf+0x470>
   25f2c:	1805d5fa 	srai	r2,r3,23
   25f30:	01802584 	movi	r6,150
   25f34:	3085c83a 	sub	r2,r6,r2
   25f38:	188dd83a 	sra	r6,r3,r2
   25f3c:	3084983a 	sll	r2,r6,r2
   25f40:	10c13326 	beq	r2,r3,26410 <__ieee754_powf+0x93c>
   25f44:	0027883a 	mov	r19,zero
   25f48:	003f0806 	br	25b6c <__ieee754_powf+0x98>
   25f4c:	008fe034 	movhi	r2,16256
   25f50:	80801926 	beq	r16,r2,25fb8 <__ieee754_powf+0x4e4>
   25f54:	1400220e 	bge	r2,r16,25fe0 <__ieee754_powf+0x50c>
   25f58:	28002d16 	blt	r5,zero,26010 <__ieee754_powf+0x53c>
   25f5c:	8805883a 	mov	r2,r17
   25f60:	003ef006 	br	25b24 <__ieee754_powf+0x50>
   25f64:	04c00084 	movi	r19,2
   25f68:	003efe06 	br	25b64 <__ieee754_powf+0x90>
   25f6c:	90012c0e 	bge	r18,zero,26420 <__ieee754_powf+0x94c>
   25f70:	00a00034 	movhi	r2,32768
   25f74:	10bfffc4 	addi	r2,r2,-1
   25f78:	019fe034 	movhi	r6,32640
   25f7c:	2084703a 	and	r2,r4,r2
   25f80:	81800226 	beq	r16,r6,25f8c <__ieee754_powf+0x4b8>
   25f84:	803f051e 	bne	r16,zero,25b9c <__ieee754_powf+0xc8>
   25f88:	903ee60e 	bge	r18,zero,25b24 <__ieee754_powf+0x50>
   25f8c:	00f02034 	movhi	r3,49280
   25f90:	80c7883a 	add	r3,r16,r3
   25f94:	1cc6b03a 	or	r3,r3,r19
   25f98:	1801191e 	bne	r3,zero,26400 <__ieee754_powf+0x92c>
   25f9c:	100b883a 	mov	r5,r2
   25fa0:	1009883a 	mov	r4,r2
   25fa4:	00279b00 	call	279b0 <__subsf3>
   25fa8:	100b883a 	mov	r5,r2
   25fac:	1009883a 	mov	r4,r2
   25fb0:	0026fe00 	call	26fe0 <__divsf3>
   25fb4:	003edb06 	br	25b24 <__ieee754_powf+0x50>
   25fb8:	008fe034 	movhi	r2,16256
   25fbc:	003ed906 	br	25b24 <__ieee754_powf+0x50>
   25fc0:	28000b16 	blt	r5,zero,25ff0 <__ieee754_powf+0x51c>
   25fc4:	2005883a 	mov	r2,r4
   25fc8:	003ed606 	br	25b24 <__ieee754_powf+0x50>
   25fcc:	283fee0e 	bge	r5,zero,25f88 <__ieee754_powf+0x4b4>
   25fd0:	100b883a 	mov	r5,r2
   25fd4:	010fe034 	movhi	r4,16256
   25fd8:	0026fe00 	call	26fe0 <__divsf3>
   25fdc:	003fea06 	br	25f88 <__ieee754_powf+0x4b4>
   25fe0:	280bd7fa 	srai	r5,r5,31
   25fe4:	88a0003c 	xorhi	r2,r17,32768
   25fe8:	1144703a 	and	r2,r2,r5
   25fec:	003ecd06 	br	25b24 <__ieee754_powf+0x50>
   25ff0:	200b883a 	mov	r5,r4
   25ff4:	010fe034 	movhi	r4,16256
   25ff8:	0026fe00 	call	26fe0 <__divsf3>
   25ffc:	003ec906 	br	25b24 <__ieee754_powf+0x50>
   26000:	200b883a 	mov	r5,r4
   26004:	00275b00 	call	275b0 <__mulsf3>
   26008:	003ec606 	br	25b24 <__ieee754_powf+0x50>
   2600c:	01415616 	blt	zero,r5,26568 <__ieee754_powf+0xa94>
   26010:	0005883a 	mov	r2,zero
   26014:	003ec306 	br	25b24 <__ieee754_powf+0x50>
   26018:	200b883a 	mov	r5,r4
   2601c:	00279b00 	call	279b0 <__subsf3>
   26020:	100b883a 	mov	r5,r2
   26024:	1009883a 	mov	r4,r2
   26028:	0026fe00 	call	26fe0 <__divsf3>
   2602c:	003ebd06 	br	25b24 <__ieee754_powf+0x50>
   26030:	211fe02c 	andhi	r4,r4,32640
   26034:	2001341e 	bne	r4,zero,26508 <__ieee754_powf+0xa34>
   26038:	0152e034 	movhi	r5,19328
   2603c:	1009883a 	mov	r4,r2
   26040:	00275b00 	call	275b0 <__mulsf3>
   26044:	1021883a 	mov	r16,r2
   26048:	00fffa04 	movi	r3,-24
   2604c:	802fd5fa 	srai	r23,r16,23
   26050:	00802034 	movhi	r2,128
   26054:	10bfffc4 	addi	r2,r2,-1
   26058:	01000774 	movhi	r4,29
   2605c:	bdffe044 	addi	r23,r23,-127
   26060:	8084703a 	and	r2,r16,r2
   26064:	21311c44 	addi	r4,r4,-15247
   26068:	b8cd883a 	add	r6,r23,r3
   2606c:	15cfe034 	orhi	r23,r2,16256
   26070:	2081200e 	bge	r4,r2,264f4 <__ieee754_powf+0xa20>
   26074:	010017b4 	movhi	r4,94
   26078:	212cf584 	addi	r4,r4,-19498
   2607c:	20813f0e 	bge	r4,r2,2657c <__ieee754_powf+0xaa8>
   26080:	00bfe034 	movhi	r2,65408
   26084:	31800044 	addi	r6,r6,1
   26088:	b8af883a 	add	r23,r23,r2
   2608c:	0015883a 	mov	r10,zero
   26090:	000f883a 	mov	r7,zero
   26094:	d8000215 	stw	zero,8(sp)
   26098:	020fe034 	movhi	r8,16256
   2609c:	400b883a 	mov	r5,r8
   260a0:	b809883a 	mov	r4,r23
   260a4:	da800515 	stw	r10,20(sp)
   260a8:	d9c00415 	stw	r7,16(sp)
   260ac:	d9800315 	stw	r6,12(sp)
   260b0:	da000015 	stw	r8,0(sp)
   260b4:	00279b00 	call	279b0 <__subsf3>
   260b8:	da000017 	ldw	r8,0(sp)
   260bc:	b809883a 	mov	r4,r23
   260c0:	102d883a 	mov	r22,r2
   260c4:	400b883a 	mov	r5,r8
   260c8:	da000115 	stw	r8,4(sp)
   260cc:	0026b740 	call	26b74 <__addsf3>
   260d0:	100b883a 	mov	r5,r2
   260d4:	010fe034 	movhi	r4,16256
   260d8:	0026fe00 	call	26fe0 <__divsf3>
   260dc:	b821d07a 	srai	r16,r23,1
   260e0:	b009883a 	mov	r4,r22
   260e4:	100b883a 	mov	r5,r2
   260e8:	d8800015 	stw	r2,0(sp)
   260ec:	00275b00 	call	275b0 <__mulsf3>
   260f0:	1039883a 	mov	fp,r2
   260f4:	84080034 	orhi	r16,r16,8192
   260f8:	00800134 	movhi	r2,4
   260fc:	80a1883a 	add	r16,r16,r2
   26100:	d8800217 	ldw	r2,8(sp)
   26104:	053c0004 	movi	r20,-4096
   26108:	a72a703a 	and	r21,r20,fp
   2610c:	80a1883a 	add	r16,r16,r2
   26110:	800b883a 	mov	r5,r16
   26114:	a809883a 	mov	r4,r21
   26118:	00275b00 	call	275b0 <__mulsf3>
   2611c:	b009883a 	mov	r4,r22
   26120:	100b883a 	mov	r5,r2
   26124:	00279b00 	call	279b0 <__subsf3>
   26128:	da000117 	ldw	r8,4(sp)
   2612c:	8009883a 	mov	r4,r16
   26130:	102d883a 	mov	r22,r2
   26134:	400b883a 	mov	r5,r8
   26138:	00279b00 	call	279b0 <__subsf3>
   2613c:	100b883a 	mov	r5,r2
   26140:	b809883a 	mov	r4,r23
   26144:	00279b00 	call	279b0 <__subsf3>
   26148:	a80b883a 	mov	r5,r21
   2614c:	1009883a 	mov	r4,r2
   26150:	00275b00 	call	275b0 <__mulsf3>
   26154:	b009883a 	mov	r4,r22
   26158:	100b883a 	mov	r5,r2
   2615c:	00279b00 	call	279b0 <__subsf3>
   26160:	da400017 	ldw	r9,0(sp)
   26164:	1009883a 	mov	r4,r2
   26168:	480b883a 	mov	r5,r9
   2616c:	00275b00 	call	275b0 <__mulsf3>
   26170:	e00b883a 	mov	r5,fp
   26174:	e009883a 	mov	r4,fp
   26178:	102d883a 	mov	r22,r2
   2617c:	00275b00 	call	275b0 <__mulsf3>
   26180:	014f9534 	movhi	r5,15956
   26184:	297c5084 	addi	r5,r5,-3774
   26188:	1009883a 	mov	r4,r2
   2618c:	1021883a 	mov	r16,r2
   26190:	00275b00 	call	275b0 <__mulsf3>
   26194:	014f9b34 	movhi	r5,15980
   26198:	294c9544 	addi	r5,r5,12885
   2619c:	1009883a 	mov	r4,r2
   261a0:	0026b740 	call	26b74 <__addsf3>
   261a4:	800b883a 	mov	r5,r16
   261a8:	1009883a 	mov	r4,r2
   261ac:	00275b00 	call	275b0 <__mulsf3>
   261b0:	014fa334 	movhi	r5,16012
   261b4:	2968c144 	addi	r5,r5,-23803
   261b8:	1009883a 	mov	r4,r2
   261bc:	0026b740 	call	26b74 <__addsf3>
   261c0:	800b883a 	mov	r5,r16
   261c4:	1009883a 	mov	r4,r2
   261c8:	00275b00 	call	275b0 <__mulsf3>
   261cc:	014faaf4 	movhi	r5,16043
   261d0:	296aaac4 	addi	r5,r5,-21845
   261d4:	1009883a 	mov	r4,r2
   261d8:	0026b740 	call	26b74 <__addsf3>
   261dc:	800b883a 	mov	r5,r16
   261e0:	1009883a 	mov	r4,r2
   261e4:	00275b00 	call	275b0 <__mulsf3>
   261e8:	014fb6f4 	movhi	r5,16091
   261ec:	295b6dc4 	addi	r5,r5,28087
   261f0:	1009883a 	mov	r4,r2
   261f4:	0026b740 	call	26b74 <__addsf3>
   261f8:	800b883a 	mov	r5,r16
   261fc:	1009883a 	mov	r4,r2
   26200:	00275b00 	call	275b0 <__mulsf3>
   26204:	014fc6b4 	movhi	r5,16154
   26208:	29666684 	addi	r5,r5,-26214
   2620c:	1009883a 	mov	r4,r2
   26210:	0026b740 	call	26b74 <__addsf3>
   26214:	800b883a 	mov	r5,r16
   26218:	8009883a 	mov	r4,r16
   2621c:	d8800015 	stw	r2,0(sp)
   26220:	00275b00 	call	275b0 <__mulsf3>
   26224:	d8c00017 	ldw	r3,0(sp)
   26228:	100b883a 	mov	r5,r2
   2622c:	1809883a 	mov	r4,r3
   26230:	00275b00 	call	275b0 <__mulsf3>
   26234:	a80b883a 	mov	r5,r21
   26238:	e009883a 	mov	r4,fp
   2623c:	1021883a 	mov	r16,r2
   26240:	0026b740 	call	26b74 <__addsf3>
   26244:	b00b883a 	mov	r5,r22
   26248:	1009883a 	mov	r4,r2
   2624c:	00275b00 	call	275b0 <__mulsf3>
   26250:	800b883a 	mov	r5,r16
   26254:	1009883a 	mov	r4,r2
   26258:	0026b740 	call	26b74 <__addsf3>
   2625c:	a80b883a 	mov	r5,r21
   26260:	a809883a 	mov	r4,r21
   26264:	d8800015 	stw	r2,0(sp)
   26268:	00275b00 	call	275b0 <__mulsf3>
   2626c:	01501034 	movhi	r5,16448
   26270:	1009883a 	mov	r4,r2
   26274:	d8800215 	stw	r2,8(sp)
   26278:	0026b740 	call	26b74 <__addsf3>
   2627c:	da000017 	ldw	r8,0(sp)
   26280:	1009883a 	mov	r4,r2
   26284:	400b883a 	mov	r5,r8
   26288:	da000115 	stw	r8,4(sp)
   2628c:	0026b740 	call	26b74 <__addsf3>
   26290:	1520703a 	and	r16,r2,r20
   26294:	800b883a 	mov	r5,r16
   26298:	a809883a 	mov	r4,r21
   2629c:	00275b00 	call	275b0 <__mulsf3>
   262a0:	8009883a 	mov	r4,r16
   262a4:	01501034 	movhi	r5,16448
   262a8:	d8800015 	stw	r2,0(sp)
   262ac:	00279b00 	call	279b0 <__subsf3>
   262b0:	da400217 	ldw	r9,8(sp)
   262b4:	1009883a 	mov	r4,r2
   262b8:	480b883a 	mov	r5,r9
   262bc:	00279b00 	call	279b0 <__subsf3>
   262c0:	da000117 	ldw	r8,4(sp)
   262c4:	100b883a 	mov	r5,r2
   262c8:	4009883a 	mov	r4,r8
   262cc:	00279b00 	call	279b0 <__subsf3>
   262d0:	e00b883a 	mov	r5,fp
   262d4:	1009883a 	mov	r4,r2
   262d8:	00275b00 	call	275b0 <__mulsf3>
   262dc:	800b883a 	mov	r5,r16
   262e0:	b009883a 	mov	r4,r22
   262e4:	102b883a 	mov	r21,r2
   262e8:	00275b00 	call	275b0 <__mulsf3>
   262ec:	a809883a 	mov	r4,r21
   262f0:	100b883a 	mov	r5,r2
   262f4:	0026b740 	call	26b74 <__addsf3>
   262f8:	d8c00017 	ldw	r3,0(sp)
   262fc:	100b883a 	mov	r5,r2
   26300:	102b883a 	mov	r21,r2
   26304:	1809883a 	mov	r4,r3
   26308:	0026b740 	call	26b74 <__addsf3>
   2630c:	1520703a 	and	r16,r2,r20
   26310:	014fddb4 	movhi	r5,16246
   26314:	8009883a 	mov	r4,r16
   26318:	294e0004 	addi	r5,r5,14336
   2631c:	00275b00 	call	275b0 <__mulsf3>
   26320:	d8c00017 	ldw	r3,0(sp)
   26324:	8009883a 	mov	r4,r16
   26328:	102d883a 	mov	r22,r2
   2632c:	180b883a 	mov	r5,r3
   26330:	00279b00 	call	279b0 <__subsf3>
   26334:	a809883a 	mov	r4,r21
   26338:	100b883a 	mov	r5,r2
   2633c:	00279b00 	call	279b0 <__subsf3>
   26340:	014fddb4 	movhi	r5,16246
   26344:	294e13c4 	addi	r5,r5,14415
   26348:	1009883a 	mov	r4,r2
   2634c:	00275b00 	call	275b0 <__mulsf3>
   26350:	014da7b4 	movhi	r5,13982
   26354:	8009883a 	mov	r4,r16
   26358:	2970e804 	addi	r5,r5,-15456
   2635c:	102b883a 	mov	r21,r2
   26360:	00275b00 	call	275b0 <__mulsf3>
   26364:	a809883a 	mov	r4,r21
   26368:	100b883a 	mov	r5,r2
   2636c:	0026b740 	call	26b74 <__addsf3>
   26370:	d9c00417 	ldw	r7,16(sp)
   26374:	1009883a 	mov	r4,r2
   26378:	380b883a 	mov	r5,r7
   2637c:	0026b740 	call	26b74 <__addsf3>
   26380:	d9800317 	ldw	r6,12(sp)
   26384:	102b883a 	mov	r21,r2
   26388:	3009883a 	mov	r4,r6
   2638c:	0027f000 	call	27f00 <__floatsisf>
   26390:	a80b883a 	mov	r5,r21
   26394:	b009883a 	mov	r4,r22
   26398:	1021883a 	mov	r16,r2
   2639c:	0026b740 	call	26b74 <__addsf3>
   263a0:	da800517 	ldw	r10,20(sp)
   263a4:	1009883a 	mov	r4,r2
   263a8:	500b883a 	mov	r5,r10
   263ac:	da800015 	stw	r10,0(sp)
   263b0:	0026b740 	call	26b74 <__addsf3>
   263b4:	800b883a 	mov	r5,r16
   263b8:	1009883a 	mov	r4,r2
   263bc:	0026b740 	call	26b74 <__addsf3>
   263c0:	1508703a 	and	r4,r2,r20
   263c4:	800b883a 	mov	r5,r16
   263c8:	2021883a 	mov	r16,r4
   263cc:	00279b00 	call	279b0 <__subsf3>
   263d0:	da800017 	ldw	r10,0(sp)
   263d4:	1009883a 	mov	r4,r2
   263d8:	500b883a 	mov	r5,r10
   263dc:	00279b00 	call	279b0 <__subsf3>
   263e0:	b00b883a 	mov	r5,r22
   263e4:	1009883a 	mov	r4,r2
   263e8:	00279b00 	call	279b0 <__subsf3>
   263ec:	100b883a 	mov	r5,r2
   263f0:	a809883a 	mov	r4,r21
   263f4:	00279b00 	call	279b0 <__subsf3>
   263f8:	1029883a 	mov	r20,r2
   263fc:	003e2b06 	br	25cac <__ieee754_powf+0x1d8>
   26400:	9cc00058 	cmpnei	r19,r19,1
   26404:	983dc71e 	bne	r19,zero,25b24 <__ieee754_powf+0x50>
   26408:	10a0003c 	xorhi	r2,r2,32768
   2640c:	003dc506 	br	25b24 <__ieee754_powf+0x50>
   26410:	3180004c 	andi	r6,r6,1
   26414:	04c00084 	movi	r19,2
   26418:	99a7c83a 	sub	r19,r19,r6
   2641c:	003dd306 	br	25b6c <__ieee754_powf+0x98>
   26420:	dfc00f17 	ldw	ra,60(sp)
   26424:	df000e17 	ldw	fp,56(sp)
   26428:	ddc00d17 	ldw	r23,52(sp)
   2642c:	dd800c17 	ldw	r22,48(sp)
   26430:	dd400b17 	ldw	r21,44(sp)
   26434:	dd000a17 	ldw	r20,40(sp)
   26438:	dcc00917 	ldw	r19,36(sp)
   2643c:	dc800817 	ldw	r18,32(sp)
   26440:	dc400717 	ldw	r17,28(sp)
   26444:	dc000617 	ldw	r16,24(sp)
   26448:	dec01004 	addi	sp,sp,64
   2644c:	00265d41 	jmpi	265d4 <__ieee754_sqrtf>
   26450:	048fe034 	movhi	r18,16256
   26454:	003e1906 	br	25cbc <__ieee754_powf+0x1e8>
   26458:	0090c5b4 	movhi	r2,17174
   2645c:	14004f16 	blt	r2,r16,2659c <__ieee754_powf+0xac8>
   26460:	80be381e 	bne	r16,r2,25d44 <__ieee754_powf+0x270>
   26464:	a00b883a 	mov	r5,r20
   26468:	9809883a 	mov	r4,r19
   2646c:	00279b00 	call	279b0 <__subsf3>
   26470:	880b883a 	mov	r5,r17
   26474:	1009883a 	mov	r4,r2
   26478:	00274440 	call	27444 <__gesf2>
   2647c:	1000470e 	bge	r2,zero,2659c <__ieee754_powf+0xac8>
   26480:	8005d5fa 	srai	r2,r16,23
   26484:	00c02034 	movhi	r3,128
   26488:	10bfe084 	addi	r2,r2,-126
   2648c:	1887d83a 	sra	r3,r3,r2
   26490:	00802034 	movhi	r2,128
   26494:	10bfffc4 	addi	r2,r2,-1
   26498:	1cc7883a 	add	r3,r3,r19
   2649c:	1809d5fa 	srai	r4,r3,23
   264a0:	18a6703a 	and	r19,r3,r2
   264a4:	9cc02034 	orhi	r19,r19,128
   264a8:	21003fcc 	andi	r4,r4,255
   264ac:	213fe044 	addi	r4,r4,-127
   264b0:	110bd83a 	sra	r5,r2,r4
   264b4:	008005c4 	movi	r2,23
   264b8:	1109c83a 	sub	r4,r2,r4
   264bc:	014a303a 	nor	r5,zero,r5
   264c0:	9927d83a 	sra	r19,r19,r4
   264c4:	28ca703a 	and	r5,r5,r3
   264c8:	b000010e 	bge	r22,zero,264d0 <__ieee754_powf+0x9fc>
   264cc:	04e7c83a 	sub	r19,zero,r19
   264d0:	a009883a 	mov	r4,r20
   264d4:	00279b00 	call	279b0 <__subsf3>
   264d8:	100b883a 	mov	r5,r2
   264dc:	8809883a 	mov	r4,r17
   264e0:	102b883a 	mov	r21,r2
   264e4:	0026b740 	call	26b74 <__addsf3>
   264e8:	982895fa 	slli	r20,r19,23
   264ec:	1007883a 	mov	r3,r2
   264f0:	003e1806 	br	25d54 <__ieee754_powf+0x280>
   264f4:	0015883a 	mov	r10,zero
   264f8:	000f883a 	mov	r7,zero
   264fc:	d8000215 	stw	zero,8(sp)
   26500:	020fe034 	movhi	r8,16256
   26504:	003ee506 	br	2609c <__ieee754_powf+0x5c8>
   26508:	0007883a 	mov	r3,zero
   2650c:	003ecf06 	br	2604c <__ieee754_powf+0x578>
   26510:	014cce74 	movhi	r5,13113
   26514:	296a8f04 	addi	r5,r5,-21956
   26518:	8809883a 	mov	r4,r17
   2651c:	0026b740 	call	26b74 <__addsf3>
   26520:	a00b883a 	mov	r5,r20
   26524:	9809883a 	mov	r4,r19
   26528:	102b883a 	mov	r21,r2
   2652c:	00279b00 	call	279b0 <__subsf3>
   26530:	100b883a 	mov	r5,r2
   26534:	a809883a 	mov	r4,r21
   26538:	00274440 	call	27444 <__gesf2>
   2653c:	00bfd00e 	bge	zero,r2,26480 <__ieee754_powf+0x9ac>
   26540:	015c52b4 	movhi	r5,29002
   26544:	9009883a 	mov	r4,r18
   26548:	297cb284 	addi	r5,r5,-3382
   2654c:	00275b00 	call	275b0 <__mulsf3>
   26550:	015c52b4 	movhi	r5,29002
   26554:	297cb284 	addi	r5,r5,-3382
   26558:	1009883a 	mov	r4,r2
   2655c:	00275b00 	call	275b0 <__mulsf3>
   26560:	003d7006 	br	25b24 <__ieee754_powf+0x50>
   26564:	283eaa0e 	bge	r5,zero,26010 <__ieee754_powf+0x53c>
   26568:	015c52b4 	movhi	r5,29002
   2656c:	297cb284 	addi	r5,r5,-3382
   26570:	2809883a 	mov	r4,r5
   26574:	00275b00 	call	275b0 <__mulsf3>
   26578:	003d6a06 	br	25b24 <__ieee754_powf+0x50>
   2657c:	028fc5b4 	movhi	r10,16150
   26580:	01cd74b4 	movhi	r7,13778
   26584:	00800834 	movhi	r2,32
   26588:	52b00004 	addi	r10,r10,-16384
   2658c:	39f3f704 	addi	r7,r7,-12324
   26590:	d8800215 	stw	r2,8(sp)
   26594:	020ff034 	movhi	r8,16320
   26598:	003ec006 	br	2609c <__ieee754_powf+0x5c8>
   2659c:	014368b4 	movhi	r5,3490
   265a0:	9009883a 	mov	r4,r18
   265a4:	29509804 	addi	r5,r5,16992
   265a8:	00275b00 	call	275b0 <__mulsf3>
   265ac:	014368b4 	movhi	r5,3490
   265b0:	29509804 	addi	r5,r5,16992
   265b4:	1009883a 	mov	r4,r2
   265b8:	00275b00 	call	275b0 <__mulsf3>
   265bc:	003d5906 	br	25b24 <__ieee754_powf+0x50>
   265c0:	1009883a 	mov	r4,r2
   265c4:	980b883a 	mov	r5,r19
   265c8:	002684c0 	call	2684c <scalbnf>
   265cc:	1009883a 	mov	r4,r2
   265d0:	003e4a06 	br	25efc <__ieee754_powf+0x428>

000265d4 <__ieee754_sqrtf>:
   265d4:	00a00034 	movhi	r2,32768
   265d8:	defffe04 	addi	sp,sp,-8
   265dc:	10bfffc4 	addi	r2,r2,-1
   265e0:	dc000015 	stw	r16,0(sp)
   265e4:	dfc00115 	stw	ra,4(sp)
   265e8:	1104703a 	and	r2,r2,r4
   265ec:	00dfe034 	movhi	r3,32640
   265f0:	2021883a 	mov	r16,r4
   265f4:	200b883a 	mov	r5,r4
   265f8:	10c0362e 	bgeu	r2,r3,266d4 <__ieee754_sqrtf+0x100>
   265fc:	10003026 	beq	r2,zero,266c0 <__ieee754_sqrtf+0xec>
   26600:	2005883a 	mov	r2,r4
   26604:	20003d16 	blt	r4,zero,266fc <__ieee754_sqrtf+0x128>
   26608:	211fe02c 	andhi	r4,r4,32640
   2660c:	8007d5fa 	srai	r3,r16,23
   26610:	2000081e 	bne	r4,zero,26634 <__ieee754_sqrtf+0x60>
   26614:	8400202c 	andhi	r16,r16,128
   26618:	8000401e 	bne	r16,zero,2671c <__ieee754_sqrtf+0x148>
   2661c:	1085883a 	add	r2,r2,r2
   26620:	1100202c 	andhi	r4,r2,128
   26624:	800b883a 	mov	r5,r16
   26628:	84000044 	addi	r16,r16,1
   2662c:	203ffb26 	beq	r4,zero,2661c <__ieee754_sqrtf+0x48>
   26630:	1947c83a 	sub	r3,r3,r5
   26634:	01002034 	movhi	r4,128
   26638:	213fffc4 	addi	r4,r4,-1
   2663c:	1104703a 	and	r2,r2,r4
   26640:	18ffe044 	addi	r3,r3,-127
   26644:	11002034 	orhi	r4,r2,128
   26648:	1940004c 	andi	r5,r3,1
   2664c:	2105883a 	add	r2,r4,r4
   26650:	2800281e 	bne	r5,zero,266f4 <__ieee754_sqrtf+0x120>
   26654:	1821d07a 	srai	r16,r3,1
   26658:	01000644 	movi	r4,25
   2665c:	000f883a 	mov	r7,zero
   26660:	000d883a 	mov	r6,zero
   26664:	00c04034 	movhi	r3,256
   26668:	30cb883a 	add	r5,r6,r3
   2666c:	213fffc4 	addi	r4,r4,-1
   26670:	11400316 	blt	r2,r5,26680 <__ieee754_sqrtf+0xac>
   26674:	28cd883a 	add	r6,r5,r3
   26678:	1145c83a 	sub	r2,r2,r5
   2667c:	38cf883a 	add	r7,r7,r3
   26680:	1806d07a 	srli	r3,r3,1
   26684:	1085883a 	add	r2,r2,r2
   26688:	203ff71e 	bne	r4,zero,26668 <__ieee754_sqrtf+0x94>
   2668c:	10000326 	beq	r2,zero,2669c <__ieee754_sqrtf+0xc8>
   26690:	39c00044 	addi	r7,r7,1
   26694:	00bfff84 	movi	r2,-2
   26698:	388e703a 	and	r7,r7,r2
   2669c:	380fd07a 	srai	r7,r7,1
   266a0:	800495fa 	slli	r2,r16,23
   266a4:	040fc034 	movhi	r16,16128
   266a8:	3c21883a 	add	r16,r7,r16
   266ac:	1405883a 	add	r2,r2,r16
   266b0:	dfc00117 	ldw	ra,4(sp)
   266b4:	dc000017 	ldw	r16,0(sp)
   266b8:	dec00204 	addi	sp,sp,8
   266bc:	f800283a 	ret
   266c0:	2005883a 	mov	r2,r4
   266c4:	dfc00117 	ldw	ra,4(sp)
   266c8:	dc000017 	ldw	r16,0(sp)
   266cc:	dec00204 	addi	sp,sp,8
   266d0:	f800283a 	ret
   266d4:	00275b00 	call	275b0 <__mulsf3>
   266d8:	800b883a 	mov	r5,r16
   266dc:	1009883a 	mov	r4,r2
   266e0:	0026b740 	call	26b74 <__addsf3>
   266e4:	dfc00117 	ldw	ra,4(sp)
   266e8:	dc000017 	ldw	r16,0(sp)
   266ec:	dec00204 	addi	sp,sp,8
   266f0:	f800283a 	ret
   266f4:	200490ba 	slli	r2,r4,2
   266f8:	003fd606 	br	26654 <__ieee754_sqrtf+0x80>
   266fc:	00279b00 	call	279b0 <__subsf3>
   26700:	100b883a 	mov	r5,r2
   26704:	1009883a 	mov	r4,r2
   26708:	0026fe00 	call	26fe0 <__divsf3>
   2670c:	dfc00117 	ldw	ra,4(sp)
   26710:	dc000017 	ldw	r16,0(sp)
   26714:	dec00204 	addi	sp,sp,8
   26718:	f800283a 	ret
   2671c:	017fffc4 	movi	r5,-1
   26720:	003fc306 	br	26630 <__ieee754_sqrtf+0x5c>

00026724 <rintf>:
   26724:	defffb04 	addi	sp,sp,-20
   26728:	dc000115 	stw	r16,4(sp)
   2672c:	04200034 	movhi	r16,32768
   26730:	843fffc4 	addi	r16,r16,-1
   26734:	8106703a 	and	r3,r16,r4
   26738:	180ad5fa 	srli	r5,r3,23
   2673c:	dfc00415 	stw	ra,16(sp)
   26740:	dc800315 	stw	r18,12(sp)
   26744:	297fe044 	addi	r5,r5,-127
   26748:	dc400215 	stw	r17,8(sp)
   2674c:	298005c8 	cmpgei	r6,r5,23
   26750:	2005883a 	mov	r2,r4
   26754:	3000221e 	bne	r6,zero,267e0 <rintf+0xbc>
   26758:	18001b26 	beq	r3,zero,267c8 <rintf+0xa4>
   2675c:	2023883a 	mov	r17,r4
   26760:	2008d7fa 	srli	r4,r4,31
   26764:	28002316 	blt	r5,zero,267f4 <rintf+0xd0>
   26768:	00c02034 	movhi	r3,128
   2676c:	18ffffc4 	addi	r3,r3,-1
   26770:	1947d83a 	sra	r3,r3,r5
   26774:	10cc703a 	and	r6,r2,r3
   26778:	30001326 	beq	r6,zero,267c8 <rintf+0xa4>
   2677c:	1806d07a 	srli	r3,r3,1
   26780:	10cc703a 	and	r6,r2,r3
   26784:	30000526 	beq	r6,zero,2679c <rintf+0x78>
   26788:	00800834 	movhi	r2,32
   2678c:	1145d83a 	sra	r2,r2,r5
   26790:	00c6303a 	nor	r3,zero,r3
   26794:	1c46703a 	and	r3,r3,r17
   26798:	1884b03a 	or	r2,r3,r2
   2679c:	200890ba 	slli	r4,r4,2
   267a0:	00c00134 	movhi	r3,4
   267a4:	100b883a 	mov	r5,r2
   267a8:	20c7883a 	add	r3,r4,r3
   267ac:	1c2b2117 	ldw	r16,-21372(r3)
   267b0:	8009883a 	mov	r4,r16
   267b4:	0026b740 	call	26b74 <__addsf3>
   267b8:	d8800015 	stw	r2,0(sp)
   267bc:	d9000017 	ldw	r4,0(sp)
   267c0:	800b883a 	mov	r5,r16
   267c4:	00279b00 	call	279b0 <__subsf3>
   267c8:	dfc00417 	ldw	ra,16(sp)
   267cc:	dc800317 	ldw	r18,12(sp)
   267d0:	dc400217 	ldw	r17,8(sp)
   267d4:	dc000117 	ldw	r16,4(sp)
   267d8:	dec00504 	addi	sp,sp,20
   267dc:	f800283a 	ret
   267e0:	015fe034 	movhi	r5,32640
   267e4:	197ff836 	bltu	r3,r5,267c8 <rintf+0xa4>
   267e8:	200b883a 	mov	r5,r4
   267ec:	0026b740 	call	26b74 <__addsf3>
   267f0:	003ff506 	br	267c8 <rintf+0xa4>
   267f4:	00802034 	movhi	r2,128
   267f8:	200890ba 	slli	r4,r4,2
   267fc:	10bfffc4 	addi	r2,r2,-1
   26800:	8884703a 	and	r2,r17,r2
   26804:	0085c83a 	sub	r2,zero,r2
   26808:	00c00134 	movhi	r3,4
   2680c:	20c7883a 	add	r3,r4,r3
   26810:	1004d27a 	srli	r2,r2,9
   26814:	1cab2117 	ldw	r18,-21372(r3)
   26818:	897ffc2c 	andhi	r5,r17,65520
   2681c:	1080102c 	andhi	r2,r2,64
   26820:	114ab03a 	or	r5,r2,r5
   26824:	9009883a 	mov	r4,r18
   26828:	0026b740 	call	26b74 <__addsf3>
   2682c:	d8800015 	stw	r2,0(sp)
   26830:	d9000017 	ldw	r4,0(sp)
   26834:	900b883a 	mov	r5,r18
   26838:	00279b00 	call	279b0 <__subsf3>
   2683c:	1404703a 	and	r2,r2,r16
   26840:	88e0002c 	andhi	r3,r17,32768
   26844:	10c4b03a 	or	r2,r2,r3
   26848:	003fdf06 	br	267c8 <rintf+0xa4>

0002684c <scalbnf>:
   2684c:	00e00034 	movhi	r3,32768
   26850:	18ffffc4 	addi	r3,r3,-1
   26854:	1906703a 	and	r3,r3,r4
   26858:	2005883a 	mov	r2,r4
   2685c:	18002626 	beq	r3,zero,268f8 <scalbnf+0xac>
   26860:	defffe04 	addi	sp,sp,-8
   26864:	dc000015 	stw	r16,0(sp)
   26868:	dfc00115 	stw	ra,4(sp)
   2686c:	019fe034 	movhi	r6,32640
   26870:	2821883a 	mov	r16,r5
   26874:	200b883a 	mov	r5,r4
   26878:	19801a2e 	bgeu	r3,r6,268e4 <scalbnf+0x98>
   2687c:	215fe02c 	andhi	r5,r4,32640
   26880:	28001e1e 	bne	r5,zero,268fc <scalbnf+0xb0>
   26884:	01530034 	movhi	r5,19456
   26888:	00275b00 	call	275b0 <__mulsf3>
   2688c:	00fffff4 	movhi	r3,65535
   26890:	18cf2c04 	addi	r3,r3,15536
   26894:	1009883a 	mov	r4,r2
   26898:	80c02616 	blt	r16,r3,26934 <scalbnf+0xe8>
   2689c:	1007d5fa 	srai	r3,r2,23
   268a0:	18c03fcc 	andi	r3,r3,255
   268a4:	18fff9c4 	addi	r3,r3,-25
   268a8:	1c07883a 	add	r3,r3,r16
   268ac:	19403fd0 	cmplti	r5,r3,255
   268b0:	2800161e 	bne	r5,zero,2690c <scalbnf+0xc0>
   268b4:	011c52b4 	movhi	r4,29002
   268b8:	213cb284 	addi	r4,r4,-3382
   268bc:	1000020e 	bge	r2,zero,268c8 <scalbnf+0x7c>
   268c0:	013c52b4 	movhi	r4,61770
   268c4:	213cb284 	addi	r4,r4,-3382
   268c8:	015c52b4 	movhi	r5,29002
   268cc:	297cb284 	addi	r5,r5,-3382
   268d0:	00275b00 	call	275b0 <__mulsf3>
   268d4:	dfc00117 	ldw	ra,4(sp)
   268d8:	dc000017 	ldw	r16,0(sp)
   268dc:	dec00204 	addi	sp,sp,8
   268e0:	f800283a 	ret
   268e4:	0026b740 	call	26b74 <__addsf3>
   268e8:	dfc00117 	ldw	ra,4(sp)
   268ec:	dc000017 	ldw	r16,0(sp)
   268f0:	dec00204 	addi	sp,sp,8
   268f4:	f800283a 	ret
   268f8:	f800283a 	ret
   268fc:	1806d5fa 	srli	r3,r3,23
   26900:	1c07883a 	add	r3,r3,r16
   26904:	19403fd0 	cmplti	r5,r3,255
   26908:	283fea26 	beq	r5,zero,268b4 <scalbnf+0x68>
   2690c:	00c01016 	blt	zero,r3,26950 <scalbnf+0x104>
   26910:	197ffa88 	cmpgei	r5,r3,-22
   26914:	2800171e 	bne	r5,zero,26974 <scalbnf+0x128>
   26918:	00f0d414 	movui	r3,50000
   2691c:	1c3fe516 	blt	r3,r16,268b4 <scalbnf+0x68>
   26920:	010368b4 	movhi	r4,3490
   26924:	21109804 	addi	r4,r4,16992
   26928:	1000020e 	bge	r2,zero,26934 <scalbnf+0xe8>
   2692c:	012368b4 	movhi	r4,36258
   26930:	21109804 	addi	r4,r4,16992
   26934:	014368b4 	movhi	r5,3490
   26938:	29509804 	addi	r5,r5,16992
   2693c:	00275b00 	call	275b0 <__mulsf3>
   26940:	dfc00117 	ldw	ra,4(sp)
   26944:	dc000017 	ldw	r16,0(sp)
   26948:	dec00204 	addi	sp,sp,8
   2694c:	f800283a 	ret
   26950:	180695fa 	slli	r3,r3,23
   26954:	00a02034 	movhi	r2,32896
   26958:	10bfffc4 	addi	r2,r2,-1
   2695c:	2084703a 	and	r2,r4,r2
   26960:	10c4b03a 	or	r2,r2,r3
   26964:	dfc00117 	ldw	ra,4(sp)
   26968:	dc000017 	ldw	r16,0(sp)
   2696c:	dec00204 	addi	sp,sp,8
   26970:	f800283a 	ret
   26974:	18c00644 	addi	r3,r3,25
   26978:	180695fa 	slli	r3,r3,23
   2697c:	00a02034 	movhi	r2,32896
   26980:	10bfffc4 	addi	r2,r2,-1
   26984:	2088703a 	and	r4,r4,r2
   26988:	014cc034 	movhi	r5,13056
   2698c:	1908b03a 	or	r4,r3,r4
   26990:	00275b00 	call	275b0 <__mulsf3>
   26994:	003fd406 	br	268e8 <scalbnf+0x9c>

00026998 <__divsi3>:
   26998:	20001a16 	blt	r4,zero,26a04 <__divsi3+0x6c>
   2699c:	000f883a 	mov	r7,zero
   269a0:	2800020e 	bge	r5,zero,269ac <__divsi3+0x14>
   269a4:	014bc83a 	sub	r5,zero,r5
   269a8:	39c0005c 	xori	r7,r7,1
   269ac:	200d883a 	mov	r6,r4
   269b0:	00c00044 	movi	r3,1
   269b4:	2900092e 	bgeu	r5,r4,269dc <__divsi3+0x44>
   269b8:	00800804 	movi	r2,32
   269bc:	00c00044 	movi	r3,1
   269c0:	00000106 	br	269c8 <__divsi3+0x30>
   269c4:	10001226 	beq	r2,zero,26a10 <__divsi3+0x78>
   269c8:	294b883a 	add	r5,r5,r5
   269cc:	10bfffc4 	addi	r2,r2,-1
   269d0:	18c7883a 	add	r3,r3,r3
   269d4:	293ffb36 	bltu	r5,r4,269c4 <__divsi3+0x2c>
   269d8:	18000d26 	beq	r3,zero,26a10 <__divsi3+0x78>
   269dc:	0005883a 	mov	r2,zero
   269e0:	31400236 	bltu	r6,r5,269ec <__divsi3+0x54>
   269e4:	314dc83a 	sub	r6,r6,r5
   269e8:	10c4b03a 	or	r2,r2,r3
   269ec:	1806d07a 	srli	r3,r3,1
   269f0:	280ad07a 	srli	r5,r5,1
   269f4:	183ffa1e 	bne	r3,zero,269e0 <__divsi3+0x48>
   269f8:	38000126 	beq	r7,zero,26a00 <__divsi3+0x68>
   269fc:	0085c83a 	sub	r2,zero,r2
   26a00:	f800283a 	ret
   26a04:	0109c83a 	sub	r4,zero,r4
   26a08:	01c00044 	movi	r7,1
   26a0c:	003fe406 	br	269a0 <__divsi3+0x8>
   26a10:	0005883a 	mov	r2,zero
   26a14:	003ff806 	br	269f8 <__divsi3+0x60>

00026a18 <__modsi3>:
   26a18:	20001916 	blt	r4,zero,26a80 <__modsi3+0x68>
   26a1c:	000f883a 	mov	r7,zero
   26a20:	2005883a 	mov	r2,r4
   26a24:	2800010e 	bge	r5,zero,26a2c <__modsi3+0x14>
   26a28:	014bc83a 	sub	r5,zero,r5
   26a2c:	00c00044 	movi	r3,1
   26a30:	2900092e 	bgeu	r5,r4,26a58 <__modsi3+0x40>
   26a34:	01800804 	movi	r6,32
   26a38:	00c00044 	movi	r3,1
   26a3c:	00000106 	br	26a44 <__modsi3+0x2c>
   26a40:	30000d26 	beq	r6,zero,26a78 <__modsi3+0x60>
   26a44:	294b883a 	add	r5,r5,r5
   26a48:	31bfffc4 	addi	r6,r6,-1
   26a4c:	18c7883a 	add	r3,r3,r3
   26a50:	293ffb36 	bltu	r5,r4,26a40 <__modsi3+0x28>
   26a54:	18000826 	beq	r3,zero,26a78 <__modsi3+0x60>
   26a58:	1806d07a 	srli	r3,r3,1
   26a5c:	11400136 	bltu	r2,r5,26a64 <__modsi3+0x4c>
   26a60:	1145c83a 	sub	r2,r2,r5
   26a64:	280ad07a 	srli	r5,r5,1
   26a68:	183ffb1e 	bne	r3,zero,26a58 <__modsi3+0x40>
   26a6c:	38000126 	beq	r7,zero,26a74 <__modsi3+0x5c>
   26a70:	0085c83a 	sub	r2,zero,r2
   26a74:	f800283a 	ret
   26a78:	2005883a 	mov	r2,r4
   26a7c:	003ffb06 	br	26a6c <__modsi3+0x54>
   26a80:	0109c83a 	sub	r4,zero,r4
   26a84:	01c00044 	movi	r7,1
   26a88:	003fe506 	br	26a20 <__modsi3+0x8>

00026a8c <__udivsi3>:
   26a8c:	200d883a 	mov	r6,r4
   26a90:	2900152e 	bgeu	r5,r4,26ae8 <__udivsi3+0x5c>
   26a94:	28001416 	blt	r5,zero,26ae8 <__udivsi3+0x5c>
   26a98:	00800804 	movi	r2,32
   26a9c:	00c00044 	movi	r3,1
   26aa0:	00000206 	br	26aac <__udivsi3+0x20>
   26aa4:	10000e26 	beq	r2,zero,26ae0 <__udivsi3+0x54>
   26aa8:	28000516 	blt	r5,zero,26ac0 <__udivsi3+0x34>
   26aac:	294b883a 	add	r5,r5,r5
   26ab0:	10bfffc4 	addi	r2,r2,-1
   26ab4:	18c7883a 	add	r3,r3,r3
   26ab8:	293ffa36 	bltu	r5,r4,26aa4 <__udivsi3+0x18>
   26abc:	18000826 	beq	r3,zero,26ae0 <__udivsi3+0x54>
   26ac0:	0005883a 	mov	r2,zero
   26ac4:	31400236 	bltu	r6,r5,26ad0 <__udivsi3+0x44>
   26ac8:	314dc83a 	sub	r6,r6,r5
   26acc:	10c4b03a 	or	r2,r2,r3
   26ad0:	1806d07a 	srli	r3,r3,1
   26ad4:	280ad07a 	srli	r5,r5,1
   26ad8:	183ffa1e 	bne	r3,zero,26ac4 <__udivsi3+0x38>
   26adc:	f800283a 	ret
   26ae0:	0005883a 	mov	r2,zero
   26ae4:	f800283a 	ret
   26ae8:	00c00044 	movi	r3,1
   26aec:	003ff406 	br	26ac0 <__udivsi3+0x34>

00026af0 <__umodsi3>:
   26af0:	2005883a 	mov	r2,r4
   26af4:	2900132e 	bgeu	r5,r4,26b44 <__umodsi3+0x54>
   26af8:	28001216 	blt	r5,zero,26b44 <__umodsi3+0x54>
   26afc:	01800804 	movi	r6,32
   26b00:	00c00044 	movi	r3,1
   26b04:	00000206 	br	26b10 <__umodsi3+0x20>
   26b08:	30000c26 	beq	r6,zero,26b3c <__umodsi3+0x4c>
   26b0c:	28000516 	blt	r5,zero,26b24 <__umodsi3+0x34>
   26b10:	294b883a 	add	r5,r5,r5
   26b14:	31bfffc4 	addi	r6,r6,-1
   26b18:	18c7883a 	add	r3,r3,r3
   26b1c:	293ffa36 	bltu	r5,r4,26b08 <__umodsi3+0x18>
   26b20:	18000626 	beq	r3,zero,26b3c <__umodsi3+0x4c>
   26b24:	1806d07a 	srli	r3,r3,1
   26b28:	11400136 	bltu	r2,r5,26b30 <__umodsi3+0x40>
   26b2c:	1145c83a 	sub	r2,r2,r5
   26b30:	280ad07a 	srli	r5,r5,1
   26b34:	183ffb1e 	bne	r3,zero,26b24 <__umodsi3+0x34>
   26b38:	f800283a 	ret
   26b3c:	2005883a 	mov	r2,r4
   26b40:	f800283a 	ret
   26b44:	00c00044 	movi	r3,1
   26b48:	003ff606 	br	26b24 <__umodsi3+0x34>

00026b4c <__mulsi3>:
   26b4c:	0005883a 	mov	r2,zero
   26b50:	20000726 	beq	r4,zero,26b70 <__mulsi3+0x24>
   26b54:	20c0004c 	andi	r3,r4,1
   26b58:	2008d07a 	srli	r4,r4,1
   26b5c:	18000126 	beq	r3,zero,26b64 <__mulsi3+0x18>
   26b60:	1145883a 	add	r2,r2,r5
   26b64:	294b883a 	add	r5,r5,r5
   26b68:	203ffa1e 	bne	r4,zero,26b54 <__mulsi3+0x8>
   26b6c:	f800283a 	ret
   26b70:	f800283a 	ret

00026b74 <__addsf3>:
   26b74:	defffc04 	addi	sp,sp,-16
   26b78:	2806d5fa 	srli	r3,r5,23
   26b7c:	dc000015 	stw	r16,0(sp)
   26b80:	2020d5fa 	srli	r16,r4,23
   26b84:	200cd7fa 	srli	r6,r4,31
   26b88:	00802034 	movhi	r2,128
   26b8c:	2812d7fa 	srli	r9,r5,31
   26b90:	10bfffc4 	addi	r2,r2,-1
   26b94:	1114703a 	and	r10,r2,r4
   26b98:	1b003fcc 	andi	r12,r3,255
   26b9c:	dc400115 	stw	r17,4(sp)
   26ba0:	84003fcc 	andi	r16,r16,255
   26ba4:	115a703a 	and	r13,r2,r5
   26ba8:	dfc00315 	stw	ra,12(sp)
   26bac:	dc800215 	stw	r18,8(sp)
   26bb0:	500e90fa 	slli	r7,r10,3
   26bb4:	681090fa 	slli	r8,r13,3
   26bb8:	5007883a 	mov	r3,r10
   26bbc:	3023883a 	mov	r17,r6
   26bc0:	8317c83a 	sub	r11,r16,r12
   26bc4:	32403926 	beq	r6,r9,26cac <__addsf3+0x138>
   26bc8:	02c02e0e 	bge	zero,r11,26c84 <__addsf3+0x110>
   26bcc:	60004c26 	beq	r12,zero,26d00 <__addsf3+0x18c>
   26bd0:	80803fe0 	cmpeqi	r2,r16,255
   26bd4:	1000801e 	bne	r2,zero,26dd8 <__addsf3+0x264>
   26bd8:	42010034 	orhi	r8,r8,1024
   26bdc:	58800710 	cmplti	r2,r11,28
   26be0:	10009e1e 	bne	r2,zero,26e5c <__addsf3+0x2e8>
   26be4:	01000044 	movi	r4,1
   26be8:	3909c83a 	sub	r4,r7,r4
   26bec:	2081002c 	andhi	r2,r4,1024
   26bf0:	10006826 	beq	r2,zero,26d94 <__addsf3+0x220>
   26bf4:	04810034 	movhi	r18,1024
   26bf8:	94bfffc4 	addi	r18,r18,-1
   26bfc:	24a4703a 	and	r18,r4,r18
   26c00:	9009883a 	mov	r4,r18
   26c04:	002a8940 	call	2a894 <__clzsi2>
   26c08:	10bffec4 	addi	r2,r2,-5
   26c0c:	9088983a 	sll	r4,r18,r2
   26c10:	1400880e 	bge	r2,r16,26e34 <__addsf3+0x2c0>
   26c14:	00ff0034 	movhi	r3,64512
   26c18:	18ffffc4 	addi	r3,r3,-1
   26c1c:	80a1c83a 	sub	r16,r16,r2
   26c20:	20c8703a 	and	r4,r4,r3
   26c24:	208001cc 	andi	r2,r4,7
   26c28:	10000426 	beq	r2,zero,26c3c <__addsf3+0xc8>
   26c2c:	208003cc 	andi	r2,r4,15
   26c30:	10800120 	cmpeqi	r2,r2,4
   26c34:	1000011e 	bne	r2,zero,26c3c <__addsf3+0xc8>
   26c38:	21000104 	addi	r4,r4,4
   26c3c:	2081002c 	andhi	r2,r4,1024
   26c40:	10005626 	beq	r2,zero,26d9c <__addsf3+0x228>
   26c44:	84000044 	addi	r16,r16,1
   26c48:	80803fe0 	cmpeqi	r2,r16,255
   26c4c:	1000461e 	bne	r2,zero,26d68 <__addsf3+0x1f4>
   26c50:	200491ba 	slli	r2,r4,6
   26c54:	1006d27a 	srli	r3,r2,9
   26c58:	84003fcc 	andi	r16,r16,255
   26c5c:	800495fa 	slli	r2,r16,23
   26c60:	882297fa 	slli	r17,r17,31
   26c64:	10c4b03a 	or	r2,r2,r3
   26c68:	1444b03a 	or	r2,r2,r17
   26c6c:	dfc00317 	ldw	ra,12(sp)
   26c70:	dc800217 	ldw	r18,8(sp)
   26c74:	dc400117 	ldw	r17,4(sp)
   26c78:	dc000017 	ldw	r16,0(sp)
   26c7c:	dec00404 	addi	sp,sp,16
   26c80:	f800283a 	ret
   26c84:	58002526 	beq	r11,zero,26d1c <__addsf3+0x1a8>
   26c88:	6417c83a 	sub	r11,r12,r16
   26c8c:	8000821e 	bne	r16,zero,26e98 <__addsf3+0x324>
   26c90:	38006426 	beq	r7,zero,26e24 <__addsf3+0x2b0>
   26c94:	58bfffc4 	addi	r2,r11,-1
   26c98:	1000c226 	beq	r2,zero,26fa4 <__addsf3+0x430>
   26c9c:	5ac03fe0 	cmpeqi	r11,r11,255
   26ca0:	58004b1e 	bne	r11,zero,26dd0 <__addsf3+0x25c>
   26ca4:	1017883a 	mov	r11,r2
   26ca8:	00007e06 	br	26ea4 <__addsf3+0x330>
   26cac:	02c0510e 	bge	zero,r11,26df4 <__addsf3+0x280>
   26cb0:	60002626 	beq	r12,zero,26d4c <__addsf3+0x1d8>
   26cb4:	80803fe0 	cmpeqi	r2,r16,255
   26cb8:	1000471e 	bne	r2,zero,26dd8 <__addsf3+0x264>
   26cbc:	42010034 	orhi	r8,r8,1024
   26cc0:	58800710 	cmplti	r2,r11,28
   26cc4:	10007e1e 	bne	r2,zero,26ec0 <__addsf3+0x34c>
   26cc8:	01000044 	movi	r4,1
   26ccc:	21c9883a 	add	r4,r4,r7
   26cd0:	2081002c 	andhi	r2,r4,1024
   26cd4:	10002f26 	beq	r2,zero,26d94 <__addsf3+0x220>
   26cd8:	84000044 	addi	r16,r16,1
   26cdc:	80803fe0 	cmpeqi	r2,r16,255
   26ce0:	1000211e 	bne	r2,zero,26d68 <__addsf3+0x1f4>
   26ce4:	2004d07a 	srli	r2,r4,1
   26ce8:	00df8034 	movhi	r3,32256
   26cec:	18ffffc4 	addi	r3,r3,-1
   26cf0:	2100004c 	andi	r4,r4,1
   26cf4:	10c4703a 	and	r2,r2,r3
   26cf8:	1108b03a 	or	r4,r2,r4
   26cfc:	003fc906 	br	26c24 <__addsf3+0xb0>
   26d00:	40004a26 	beq	r8,zero,26e2c <__addsf3+0x2b8>
   26d04:	58bfffc4 	addi	r2,r11,-1
   26d08:	10009326 	beq	r2,zero,26f58 <__addsf3+0x3e4>
   26d0c:	59003fe0 	cmpeqi	r4,r11,255
   26d10:	2000311e 	bne	r4,zero,26dd8 <__addsf3+0x264>
   26d14:	1017883a 	mov	r11,r2
   26d18:	003fb006 	br	26bdc <__addsf3+0x68>
   26d1c:	81800044 	addi	r6,r16,1
   26d20:	31803f8c 	andi	r6,r6,254
   26d24:	3000541e 	bne	r6,zero,26e78 <__addsf3+0x304>
   26d28:	80007e1e 	bne	r16,zero,26f24 <__addsf3+0x3b0>
   26d2c:	3800a326 	beq	r7,zero,26fbc <__addsf3+0x448>
   26d30:	40009326 	beq	r8,zero,26f80 <__addsf3+0x40c>
   26d34:	3a09c83a 	sub	r4,r7,r8
   26d38:	2081002c 	andhi	r2,r4,1024
   26d3c:	1000a626 	beq	r2,zero,26fd8 <__addsf3+0x464>
   26d40:	41c9c83a 	sub	r4,r8,r7
   26d44:	4823883a 	mov	r17,r9
   26d48:	003fb606 	br	26c24 <__addsf3+0xb0>
   26d4c:	40003726 	beq	r8,zero,26e2c <__addsf3+0x2b8>
   26d50:	58bfffc4 	addi	r2,r11,-1
   26d54:	10007b26 	beq	r2,zero,26f44 <__addsf3+0x3d0>
   26d58:	5ac03fe0 	cmpeqi	r11,r11,255
   26d5c:	58001e1e 	bne	r11,zero,26dd8 <__addsf3+0x264>
   26d60:	1017883a 	mov	r11,r2
   26d64:	003fd606 	br	26cc0 <__addsf3+0x14c>
   26d68:	043fffc4 	movi	r16,-1
   26d6c:	0007883a 	mov	r3,zero
   26d70:	003fb906 	br	26c58 <__addsf3+0xe4>
   26d74:	80800044 	addi	r2,r16,1
   26d78:	11803f8c 	andi	r6,r2,254
   26d7c:	30005726 	beq	r6,zero,26edc <__addsf3+0x368>
   26d80:	10c03fe0 	cmpeqi	r3,r2,255
   26d84:	183ff81e 	bne	r3,zero,26d68 <__addsf3+0x1f4>
   26d88:	3a09883a 	add	r4,r7,r8
   26d8c:	2008d07a 	srli	r4,r4,1
   26d90:	1021883a 	mov	r16,r2
   26d94:	208001cc 	andi	r2,r4,7
   26d98:	103fa41e 	bne	r2,zero,26c2c <__addsf3+0xb8>
   26d9c:	2014d0fa 	srli	r10,r4,3
   26da0:	80803fe0 	cmpeqi	r2,r16,255
   26da4:	10000c1e 	bne	r2,zero,26dd8 <__addsf3+0x264>
   26da8:	00802034 	movhi	r2,128
   26dac:	10bfffc4 	addi	r2,r2,-1
   26db0:	5086703a 	and	r3,r10,r2
   26db4:	003fa806 	br	26c58 <__addsf3+0xe4>
   26db8:	38000626 	beq	r7,zero,26dd4 <__addsf3+0x260>
   26dbc:	40000626 	beq	r8,zero,26dd8 <__addsf3+0x264>
   26dc0:	2080102c 	andhi	r2,r4,64
   26dc4:	10000426 	beq	r2,zero,26dd8 <__addsf3+0x264>
   26dc8:	2940102c 	andhi	r5,r5,64
   26dcc:	2800021e 	bne	r5,zero,26dd8 <__addsf3+0x264>
   26dd0:	4823883a 	mov	r17,r9
   26dd4:	6815883a 	mov	r10,r13
   26dd8:	503fe326 	beq	r10,zero,26d68 <__addsf3+0x1f4>
   26ddc:	00802034 	movhi	r2,128
   26de0:	50c01034 	orhi	r3,r10,64
   26de4:	10bfffc4 	addi	r2,r2,-1
   26de8:	1886703a 	and	r3,r3,r2
   26dec:	043fffc4 	movi	r16,-1
   26df0:	003f9906 	br	26c58 <__addsf3+0xe4>
   26df4:	583fdf26 	beq	r11,zero,26d74 <__addsf3+0x200>
   26df8:	6417c83a 	sub	r11,r12,r16
   26dfc:	80004226 	beq	r16,zero,26f08 <__addsf3+0x394>
   26e00:	60803fe0 	cmpeqi	r2,r12,255
   26e04:	103ff31e 	bne	r2,zero,26dd4 <__addsf3+0x260>
   26e08:	39c10034 	orhi	r7,r7,1024
   26e0c:	58800710 	cmplti	r2,r11,28
   26e10:	10005d1e 	bne	r2,zero,26f88 <__addsf3+0x414>
   26e14:	01000044 	movi	r4,1
   26e18:	2209883a 	add	r4,r4,r8
   26e1c:	6021883a 	mov	r16,r12
   26e20:	003fab06 	br	26cd0 <__addsf3+0x15c>
   26e24:	4823883a 	mov	r17,r9
   26e28:	6815883a 	mov	r10,r13
   26e2c:	5821883a 	mov	r16,r11
   26e30:	003fdb06 	br	26da0 <__addsf3+0x22c>
   26e34:	1405c83a 	sub	r2,r2,r16
   26e38:	14800044 	addi	r18,r2,1
   26e3c:	00800804 	movi	r2,32
   26e40:	1485c83a 	sub	r2,r2,r18
   26e44:	2084983a 	sll	r2,r4,r2
   26e48:	2488d83a 	srl	r4,r4,r18
   26e4c:	0021883a 	mov	r16,zero
   26e50:	1004c03a 	cmpne	r2,r2,zero
   26e54:	1108b03a 	or	r4,r2,r4
   26e58:	003f7206 	br	26c24 <__addsf3+0xb0>
   26e5c:	01000804 	movi	r4,32
   26e60:	22c9c83a 	sub	r4,r4,r11
   26e64:	4108983a 	sll	r4,r8,r4
   26e68:	42d0d83a 	srl	r8,r8,r11
   26e6c:	2008c03a 	cmpne	r4,r4,zero
   26e70:	2208b03a 	or	r4,r4,r8
   26e74:	003f5c06 	br	26be8 <__addsf3+0x74>
   26e78:	3a25c83a 	sub	r18,r7,r8
   26e7c:	9081002c 	andhi	r2,r18,1024
   26e80:	10002d1e 	bne	r2,zero,26f38 <__addsf3+0x3c4>
   26e84:	903f5e1e 	bne	r18,zero,26c00 <__addsf3+0x8c>
   26e88:	0023883a 	mov	r17,zero
   26e8c:	0021883a 	mov	r16,zero
   26e90:	0007883a 	mov	r3,zero
   26e94:	003f7006 	br	26c58 <__addsf3+0xe4>
   26e98:	60803fe0 	cmpeqi	r2,r12,255
   26e9c:	103fcc1e 	bne	r2,zero,26dd0 <__addsf3+0x25c>
   26ea0:	39c10034 	orhi	r7,r7,1024
   26ea4:	58800710 	cmplti	r2,r11,28
   26ea8:	10002e1e 	bne	r2,zero,26f64 <__addsf3+0x3f0>
   26eac:	01000044 	movi	r4,1
   26eb0:	4109c83a 	sub	r4,r8,r4
   26eb4:	4823883a 	mov	r17,r9
   26eb8:	6021883a 	mov	r16,r12
   26ebc:	003f4b06 	br	26bec <__addsf3+0x78>
   26ec0:	01000804 	movi	r4,32
   26ec4:	22c9c83a 	sub	r4,r4,r11
   26ec8:	4108983a 	sll	r4,r8,r4
   26ecc:	42d0d83a 	srl	r8,r8,r11
   26ed0:	2008c03a 	cmpne	r4,r4,zero
   26ed4:	2208b03a 	or	r4,r4,r8
   26ed8:	003f7c06 	br	26ccc <__addsf3+0x158>
   26edc:	803fb61e 	bne	r16,zero,26db8 <__addsf3+0x244>
   26ee0:	38003a26 	beq	r7,zero,26fcc <__addsf3+0x458>
   26ee4:	40002626 	beq	r8,zero,26f80 <__addsf3+0x40c>
   26ee8:	3a09883a 	add	r4,r7,r8
   26eec:	2081002c 	andhi	r2,r4,1024
   26ef0:	103fa826 	beq	r2,zero,26d94 <__addsf3+0x220>
   26ef4:	00bf0034 	movhi	r2,64512
   26ef8:	10bfffc4 	addi	r2,r2,-1
   26efc:	2088703a 	and	r4,r4,r2
   26f00:	04000044 	movi	r16,1
   26f04:	003fa306 	br	26d94 <__addsf3+0x220>
   26f08:	383fc726 	beq	r7,zero,26e28 <__addsf3+0x2b4>
   26f0c:	58bfffc4 	addi	r2,r11,-1
   26f10:	10000c26 	beq	r2,zero,26f44 <__addsf3+0x3d0>
   26f14:	5ac03fe0 	cmpeqi	r11,r11,255
   26f18:	583fae1e 	bne	r11,zero,26dd4 <__addsf3+0x260>
   26f1c:	1017883a 	mov	r11,r2
   26f20:	003fba06 	br	26e0c <__addsf3+0x298>
   26f24:	383fa51e 	bne	r7,zero,26dbc <__addsf3+0x248>
   26f28:	403fa91e 	bne	r8,zero,26dd0 <__addsf3+0x25c>
   26f2c:	0023883a 	mov	r17,zero
   26f30:	1007883a 	mov	r3,r2
   26f34:	003fad06 	br	26dec <__addsf3+0x278>
   26f38:	41e5c83a 	sub	r18,r8,r7
   26f3c:	4823883a 	mov	r17,r9
   26f40:	003f2f06 	br	26c00 <__addsf3+0x8c>
   26f44:	3a09883a 	add	r4,r7,r8
   26f48:	2081002c 	andhi	r2,r4,1024
   26f4c:	10001926 	beq	r2,zero,26fb4 <__addsf3+0x440>
   26f50:	04000084 	movi	r16,2
   26f54:	003f6306 	br	26ce4 <__addsf3+0x170>
   26f58:	3a09c83a 	sub	r4,r7,r8
   26f5c:	04000044 	movi	r16,1
   26f60:	003f2206 	br	26bec <__addsf3+0x78>
   26f64:	00800804 	movi	r2,32
   26f68:	12c5c83a 	sub	r2,r2,r11
   26f6c:	3884983a 	sll	r2,r7,r2
   26f70:	3aced83a 	srl	r7,r7,r11
   26f74:	1008c03a 	cmpne	r4,r2,zero
   26f78:	21c8b03a 	or	r4,r4,r7
   26f7c:	003fcc06 	br	26eb0 <__addsf3+0x33c>
   26f80:	0021883a 	mov	r16,zero
   26f84:	003f3406 	br	26c58 <__addsf3+0xe4>
   26f88:	01000804 	movi	r4,32
   26f8c:	22c9c83a 	sub	r4,r4,r11
   26f90:	3908983a 	sll	r4,r7,r4
   26f94:	3aced83a 	srl	r7,r7,r11
   26f98:	2008c03a 	cmpne	r4,r4,zero
   26f9c:	21c8b03a 	or	r4,r4,r7
   26fa0:	003f9d06 	br	26e18 <__addsf3+0x2a4>
   26fa4:	41c9c83a 	sub	r4,r8,r7
   26fa8:	4823883a 	mov	r17,r9
   26fac:	04000044 	movi	r16,1
   26fb0:	003f0e06 	br	26bec <__addsf3+0x78>
   26fb4:	04000044 	movi	r16,1
   26fb8:	003f7606 	br	26d94 <__addsf3+0x220>
   26fbc:	403fb226 	beq	r8,zero,26e88 <__addsf3+0x314>
   26fc0:	4823883a 	mov	r17,r9
   26fc4:	6807883a 	mov	r3,r13
   26fc8:	003f2306 	br	26c58 <__addsf3+0xe4>
   26fcc:	6807883a 	mov	r3,r13
   26fd0:	0021883a 	mov	r16,zero
   26fd4:	003f2006 	br	26c58 <__addsf3+0xe4>
   26fd8:	203fab26 	beq	r4,zero,26e88 <__addsf3+0x314>
   26fdc:	003f6d06 	br	26d94 <__addsf3+0x220>

00026fe0 <__divsf3>:
   26fe0:	defff604 	addi	sp,sp,-40
   26fe4:	2006d5fa 	srli	r3,r4,23
   26fe8:	dd400615 	stw	r21,24(sp)
   26fec:	202ad7fa 	srli	r21,r4,31
   26ff0:	00802034 	movhi	r2,128
   26ff4:	dc800315 	stw	r18,12(sp)
   26ff8:	dc000115 	stw	r16,4(sp)
   26ffc:	10bfffc4 	addi	r2,r2,-1
   27000:	dfc00915 	stw	ra,36(sp)
   27004:	ddc00815 	stw	r23,32(sp)
   27008:	dd800715 	stw	r22,28(sp)
   2700c:	dd000515 	stw	r20,20(sp)
   27010:	dcc00415 	stw	r19,16(sp)
   27014:	dc400215 	stw	r17,8(sp)
   27018:	18c03fcc 	andi	r3,r3,255
   2701c:	1120703a 	and	r16,r2,r4
   27020:	a825883a 	mov	r18,r21
   27024:	18007b26 	beq	r3,zero,27214 <__divsf3+0x234>
   27028:	18803fe0 	cmpeqi	r2,r3,255
   2702c:	10007e1e 	bne	r2,zero,27228 <__divsf3+0x248>
   27030:	800490fa 	slli	r2,r16,3
   27034:	1d3fe044 	addi	r20,r3,-127
   27038:	0023883a 	mov	r17,zero
   2703c:	14010034 	orhi	r16,r2,1024
   27040:	002d883a 	mov	r22,zero
   27044:	2806d5fa 	srli	r3,r5,23
   27048:	01002034 	movhi	r4,128
   2704c:	213fffc4 	addi	r4,r4,-1
   27050:	18c03fcc 	andi	r3,r3,255
   27054:	282ed7fa 	srli	r23,r5,31
   27058:	2166703a 	and	r19,r4,r5
   2705c:	18005326 	beq	r3,zero,271ac <__divsf3+0x1cc>
   27060:	18803fe0 	cmpeqi	r2,r3,255
   27064:	10004d1e 	bne	r2,zero,2719c <__divsf3+0x1bc>
   27068:	980a90fa 	slli	r5,r19,3
   2706c:	18ffe044 	addi	r3,r3,-127
   27070:	a0e9c83a 	sub	r20,r20,r3
   27074:	2cc10034 	orhi	r19,r5,1024
   27078:	0007883a 	mov	r3,zero
   2707c:	1c62b03a 	or	r17,r3,r17
   27080:	882290ba 	slli	r17,r17,2
   27084:	008000b4 	movhi	r2,2
   27088:	bd6af03a 	xor	r21,r23,r21
   2708c:	8885883a 	add	r2,r17,r2
   27090:	109c2717 	ldw	r2,28828(r2)
   27094:	a809883a 	mov	r4,r21
   27098:	1000683a 	jmp	r2
   2709c:	00027360 	cmpeqi	zero,zero,2509
   270a0:	000272a0 	cmpeqi	zero,zero,2506
   270a4:	00027150 	cmplti	zero,zero,2501
   270a8:	000270e0 	cmpeqi	zero,zero,2499
   270ac:	00027150 	cmplti	zero,zero,2501
   270b0:	0002730c 	andi	zero,zero,2508
   270b4:	00027150 	cmplti	zero,zero,2501
   270b8:	000270e0 	cmpeqi	zero,zero,2499
   270bc:	000272a0 	cmpeqi	zero,zero,2506
   270c0:	000272a0 	cmpeqi	zero,zero,2506
   270c4:	0002730c 	andi	zero,zero,2508
   270c8:	000270e0 	cmpeqi	zero,zero,2499
   270cc:	000270ec 	andhi	zero,zero,2499
   270d0:	000270ec 	andhi	zero,zero,2499
   270d4:	000270ec 	andhi	zero,zero,2499
   270d8:	00027324 	muli	zero,zero,2508
   270dc:	0027883a 	mov	r19,zero
   270e0:	b825883a 	mov	r18,r23
   270e4:	9821883a 	mov	r16,r19
   270e8:	182d883a 	mov	r22,r3
   270ec:	b08000a0 	cmpeqi	r2,r22,2
   270f0:	1000831e 	bne	r2,zero,27300 <__divsf3+0x320>
   270f4:	b08000e0 	cmpeqi	r2,r22,3
   270f8:	1000941e 	bne	r2,zero,2734c <__divsf3+0x36c>
   270fc:	b5800060 	cmpeqi	r22,r22,1
   27100:	b000141e 	bne	r22,zero,27154 <__divsf3+0x174>
   27104:	a0801fc4 	addi	r2,r20,127
   27108:	0080690e 	bge	zero,r2,272b0 <__divsf3+0x2d0>
   2710c:	80c001cc 	andi	r3,r16,7
   27110:	18000426 	beq	r3,zero,27124 <__divsf3+0x144>
   27114:	80c003cc 	andi	r3,r16,15
   27118:	18c00120 	cmpeqi	r3,r3,4
   2711c:	1800011e 	bne	r3,zero,27124 <__divsf3+0x144>
   27120:	84000104 	addi	r16,r16,4
   27124:	80c2002c 	andhi	r3,r16,2048
   27128:	18000426 	beq	r3,zero,2713c <__divsf3+0x15c>
   2712c:	00be0034 	movhi	r2,63488
   27130:	10bfffc4 	addi	r2,r2,-1
   27134:	80a0703a 	and	r16,r16,r2
   27138:	a0802004 	addi	r2,r20,128
   2713c:	10c03fc8 	cmpgei	r3,r2,255
   27140:	18006f1e 	bne	r3,zero,27300 <__divsf3+0x320>
   27144:	802091ba 	slli	r16,r16,6
   27148:	8020d27a 	srli	r16,r16,9
   2714c:	00000306 	br	2715c <__divsf3+0x17c>
   27150:	a825883a 	mov	r18,r21
   27154:	0005883a 	mov	r2,zero
   27158:	0021883a 	mov	r16,zero
   2715c:	10803fcc 	andi	r2,r2,255
   27160:	100495fa 	slli	r2,r2,23
   27164:	902497fa 	slli	r18,r18,31
   27168:	1404b03a 	or	r2,r2,r16
   2716c:	1484b03a 	or	r2,r2,r18
   27170:	dfc00917 	ldw	ra,36(sp)
   27174:	ddc00817 	ldw	r23,32(sp)
   27178:	dd800717 	ldw	r22,28(sp)
   2717c:	dd400617 	ldw	r21,24(sp)
   27180:	dd000517 	ldw	r20,20(sp)
   27184:	dcc00417 	ldw	r19,16(sp)
   27188:	dc800317 	ldw	r18,12(sp)
   2718c:	dc400217 	ldw	r17,8(sp)
   27190:	dc000117 	ldw	r16,4(sp)
   27194:	dec00a04 	addi	sp,sp,40
   27198:	f800283a 	ret
   2719c:	a53fc044 	addi	r20,r20,-255
   271a0:	98003d1e 	bne	r19,zero,27298 <__divsf3+0x2b8>
   271a4:	00c00084 	movi	r3,2
   271a8:	00000206 	br	271b4 <__divsf3+0x1d4>
   271ac:	9800321e 	bne	r19,zero,27278 <__divsf3+0x298>
   271b0:	00c00044 	movi	r3,1
   271b4:	1c62b03a 	or	r17,r3,r17
   271b8:	882290ba 	slli	r17,r17,2
   271bc:	008000b4 	movhi	r2,2
   271c0:	bd6af03a 	xor	r21,r23,r21
   271c4:	8885883a 	add	r2,r17,r2
   271c8:	109c7517 	ldw	r2,29140(r2)
   271cc:	a809883a 	mov	r4,r21
   271d0:	1000683a 	jmp	r2
   271d4:	000272a0 	cmpeqi	zero,zero,2506
   271d8:	000272a0 	cmpeqi	zero,zero,2506
   271dc:	00027150 	cmplti	zero,zero,2501
   271e0:	000270dc 	xori	zero,zero,2499
   271e4:	00027150 	cmplti	zero,zero,2501
   271e8:	0002730c 	andi	zero,zero,2508
   271ec:	00027150 	cmplti	zero,zero,2501
   271f0:	000270dc 	xori	zero,zero,2499
   271f4:	000272a0 	cmpeqi	zero,zero,2506
   271f8:	000272a0 	cmpeqi	zero,zero,2506
   271fc:	0002730c 	andi	zero,zero,2508
   27200:	000270dc 	xori	zero,zero,2499
   27204:	000270ec 	andhi	zero,zero,2499
   27208:	000270ec 	andhi	zero,zero,2499
   2720c:	000270ec 	andhi	zero,zero,2499
   27210:	00027320 	cmpeqi	zero,zero,2508
   27214:	80000d1e 	bne	r16,zero,2724c <__divsf3+0x26c>
   27218:	04400104 	movi	r17,4
   2721c:	0029883a 	mov	r20,zero
   27220:	05800044 	movi	r22,1
   27224:	003f8706 	br	27044 <__divsf3+0x64>
   27228:	8000041e 	bne	r16,zero,2723c <__divsf3+0x25c>
   2722c:	04400204 	movi	r17,8
   27230:	05003fc4 	movi	r20,255
   27234:	05800084 	movi	r22,2
   27238:	003f8206 	br	27044 <__divsf3+0x64>
   2723c:	04400304 	movi	r17,12
   27240:	05003fc4 	movi	r20,255
   27244:	058000c4 	movi	r22,3
   27248:	003f7e06 	br	27044 <__divsf3+0x64>
   2724c:	8009883a 	mov	r4,r16
   27250:	d9400015 	stw	r5,0(sp)
   27254:	002a8940 	call	2a894 <__clzsi2>
   27258:	10fffec4 	addi	r3,r2,-5
   2725c:	80e0983a 	sll	r16,r16,r3
   27260:	00ffe284 	movi	r3,-118
   27264:	d9400017 	ldw	r5,0(sp)
   27268:	18a9c83a 	sub	r20,r3,r2
   2726c:	0023883a 	mov	r17,zero
   27270:	002d883a 	mov	r22,zero
   27274:	003f7306 	br	27044 <__divsf3+0x64>
   27278:	9809883a 	mov	r4,r19
   2727c:	002a8940 	call	2a894 <__clzsi2>
   27280:	a087883a 	add	r3,r20,r2
   27284:	113ffec4 	addi	r4,r2,-5
   27288:	1d001d84 	addi	r20,r3,118
   2728c:	9926983a 	sll	r19,r19,r4
   27290:	0007883a 	mov	r3,zero
   27294:	003f7906 	br	2707c <__divsf3+0x9c>
   27298:	00c000c4 	movi	r3,3
   2729c:	003f7706 	br	2707c <__divsf3+0x9c>
   272a0:	2025883a 	mov	r18,r4
   272a4:	00bfffc4 	movi	r2,-1
   272a8:	0021883a 	mov	r16,zero
   272ac:	003fab06 	br	2715c <__divsf3+0x17c>
   272b0:	00c00044 	movi	r3,1
   272b4:	1885c83a 	sub	r2,r3,r2
   272b8:	10c00708 	cmpgei	r3,r2,28
   272bc:	183fa51e 	bne	r3,zero,27154 <__divsf3+0x174>
   272c0:	a0c02784 	addi	r3,r20,158
   272c4:	80c6983a 	sll	r3,r16,r3
   272c8:	8084d83a 	srl	r2,r16,r2
   272cc:	1820c03a 	cmpne	r16,r3,zero
   272d0:	1404b03a 	or	r2,r2,r16
   272d4:	10c001cc 	andi	r3,r2,7
   272d8:	18000426 	beq	r3,zero,272ec <__divsf3+0x30c>
   272dc:	10c003cc 	andi	r3,r2,15
   272e0:	18c00120 	cmpeqi	r3,r3,4
   272e4:	1800011e 	bne	r3,zero,272ec <__divsf3+0x30c>
   272e8:	10800104 	addi	r2,r2,4
   272ec:	10c1002c 	andhi	r3,r2,1024
   272f0:	18003426 	beq	r3,zero,273c4 <__divsf3+0x3e4>
   272f4:	00800044 	movi	r2,1
   272f8:	0021883a 	mov	r16,zero
   272fc:	003f9706 	br	2715c <__divsf3+0x17c>
   27300:	00bfffc4 	movi	r2,-1
   27304:	0021883a 	mov	r16,zero
   27308:	003f9406 	br	2715c <__divsf3+0x17c>
   2730c:	04002034 	movhi	r16,128
   27310:	0025883a 	mov	r18,zero
   27314:	843fffc4 	addi	r16,r16,-1
   27318:	00bfffc4 	movi	r2,-1
   2731c:	003f8f06 	br	2715c <__divsf3+0x17c>
   27320:	0027883a 	mov	r19,zero
   27324:	8080102c 	andhi	r2,r16,64
   27328:	10000826 	beq	r2,zero,2734c <__divsf3+0x36c>
   2732c:	9880102c 	andhi	r2,r19,64
   27330:	1000061e 	bne	r2,zero,2734c <__divsf3+0x36c>
   27334:	00802034 	movhi	r2,128
   27338:	9c001034 	orhi	r16,r19,64
   2733c:	10bfffc4 	addi	r2,r2,-1
   27340:	80a0703a 	and	r16,r16,r2
   27344:	b825883a 	mov	r18,r23
   27348:	003ff306 	br	27318 <__divsf3+0x338>
   2734c:	00802034 	movhi	r2,128
   27350:	84001034 	orhi	r16,r16,64
   27354:	10bfffc4 	addi	r2,r2,-1
   27358:	80a0703a 	and	r16,r16,r2
   2735c:	003fee06 	br	27318 <__divsf3+0x338>
   27360:	8004917a 	slli	r2,r16,5
   27364:	980a917a 	slli	r5,r19,5
   27368:	1140122e 	bgeu	r2,r5,273b4 <__divsf3+0x3d4>
   2736c:	a53fffc4 	addi	r20,r20,-1
   27370:	010006c4 	movi	r4,27
   27374:	0021883a 	mov	r16,zero
   27378:	1007883a 	mov	r3,r2
   2737c:	213fffc4 	addi	r4,r4,-1
   27380:	1085883a 	add	r2,r2,r2
   27384:	8421883a 	add	r16,r16,r16
   27388:	18000116 	blt	r3,zero,27390 <__divsf3+0x3b0>
   2738c:	11400236 	bltu	r2,r5,27398 <__divsf3+0x3b8>
   27390:	1145c83a 	sub	r2,r2,r5
   27394:	84000054 	ori	r16,r16,1
   27398:	203ff71e 	bne	r4,zero,27378 <__divsf3+0x398>
   2739c:	1004c03a 	cmpne	r2,r2,zero
   273a0:	1420b03a 	or	r16,r2,r16
   273a4:	a0801fc4 	addi	r2,r20,127
   273a8:	a825883a 	mov	r18,r21
   273ac:	00bf5716 	blt	zero,r2,2710c <__divsf3+0x12c>
   273b0:	003fbf06 	br	272b0 <__divsf3+0x2d0>
   273b4:	1145c83a 	sub	r2,r2,r5
   273b8:	01000684 	movi	r4,26
   273bc:	04000044 	movi	r16,1
   273c0:	003fed06 	br	27378 <__divsf3+0x398>
   273c4:	102091ba 	slli	r16,r2,6
   273c8:	0005883a 	mov	r2,zero
   273cc:	8020d27a 	srli	r16,r16,9
   273d0:	003f6206 	br	2715c <__divsf3+0x17c>

000273d4 <__eqsf2>:
   273d4:	200cd5fa 	srli	r6,r4,23
   273d8:	2806d5fa 	srli	r3,r5,23
   273dc:	00802034 	movhi	r2,128
   273e0:	31803fcc 	andi	r6,r6,255
   273e4:	10bfffc4 	addi	r2,r2,-1
   273e8:	31c03fd8 	cmpnei	r7,r6,255
   273ec:	2010d7fa 	srli	r8,r4,31
   273f0:	2812d7fa 	srli	r9,r5,31
   273f4:	1108703a 	and	r4,r2,r4
   273f8:	18c03fcc 	andi	r3,r3,255
   273fc:	1144703a 	and	r2,r2,r5
   27400:	38000626 	beq	r7,zero,2741c <__eqsf2+0x48>
   27404:	19403fe0 	cmpeqi	r5,r3,255
   27408:	2800021e 	bne	r5,zero,27414 <__eqsf2+0x40>
   2740c:	30c0011e 	bne	r6,r3,27414 <__eqsf2+0x40>
   27410:	20800626 	beq	r4,r2,2742c <__eqsf2+0x58>
   27414:	00800044 	movi	r2,1
   27418:	f800283a 	ret
   2741c:	203ffd1e 	bne	r4,zero,27414 <__eqsf2+0x40>
   27420:	18c03fd8 	cmpnei	r3,r3,255
   27424:	183ffb1e 	bne	r3,zero,27414 <__eqsf2+0x40>
   27428:	103ffa1e 	bne	r2,zero,27414 <__eqsf2+0x40>
   2742c:	42400326 	beq	r8,r9,2743c <__eqsf2+0x68>
   27430:	303ff81e 	bne	r6,zero,27414 <__eqsf2+0x40>
   27434:	2004c03a 	cmpne	r2,r4,zero
   27438:	f800283a 	ret
   2743c:	0005883a 	mov	r2,zero
   27440:	f800283a 	ret

00027444 <__gesf2>:
   27444:	200cd5fa 	srli	r6,r4,23
   27448:	280ed5fa 	srli	r7,r5,23
   2744c:	00c02034 	movhi	r3,128
   27450:	31803fcc 	andi	r6,r6,255
   27454:	18ffffc4 	addi	r3,r3,-1
   27458:	32003fd8 	cmpnei	r8,r6,255
   2745c:	2012d7fa 	srli	r9,r4,31
   27460:	2804d7fa 	srli	r2,r5,31
   27464:	1908703a 	and	r4,r3,r4
   27468:	1946703a 	and	r3,r3,r5
   2746c:	39403fcc 	andi	r5,r7,255
   27470:	40000826 	beq	r8,zero,27494 <__gesf2+0x50>
   27474:	29c03fd8 	cmpnei	r7,r5,255
   27478:	38000926 	beq	r7,zero,274a0 <__gesf2+0x5c>
   2747c:	3000121e 	bne	r6,zero,274c8 <__gesf2+0x84>
   27480:	28000e1e 	bne	r5,zero,274bc <__gesf2+0x78>
   27484:	18000d1e 	bne	r3,zero,274bc <__gesf2+0x78>
   27488:	2000081e 	bne	r4,zero,274ac <__gesf2+0x68>
   2748c:	0005883a 	mov	r2,zero
   27490:	f800283a 	ret
   27494:	2000171e 	bne	r4,zero,274f4 <__gesf2+0xb0>
   27498:	29c03fe0 	cmpeqi	r7,r5,255
   2749c:	38000a26 	beq	r7,zero,274c8 <__gesf2+0x84>
   274a0:	1800141e 	bne	r3,zero,274f4 <__gesf2+0xb0>
   274a4:	30000526 	beq	r6,zero,274bc <__gesf2+0x78>
   274a8:	48800a26 	beq	r9,r2,274d4 <__gesf2+0x90>
   274ac:	00800044 	movi	r2,1
   274b0:	48000426 	beq	r9,zero,274c4 <__gesf2+0x80>
   274b4:	00bfffc4 	movi	r2,-1
   274b8:	f800283a 	ret
   274bc:	203ffa1e 	bne	r4,zero,274a8 <__gesf2+0x64>
   274c0:	103ffc26 	beq	r2,zero,274b4 <__gesf2+0x70>
   274c4:	f800283a 	ret
   274c8:	283ff71e 	bne	r5,zero,274a8 <__gesf2+0x64>
   274cc:	183ff61e 	bne	r3,zero,274a8 <__gesf2+0x64>
   274d0:	003ff606 	br	274ac <__gesf2+0x68>
   274d4:	29800416 	blt	r5,r6,274e8 <__gesf2+0xa4>
   274d8:	317ff916 	blt	r6,r5,274c0 <__gesf2+0x7c>
   274dc:	19000236 	bltu	r3,r4,274e8 <__gesf2+0xa4>
   274e0:	20ffea2e 	bgeu	r4,r3,2748c <__gesf2+0x48>
   274e4:	003ff606 	br	274c0 <__gesf2+0x7c>
   274e8:	103ff21e 	bne	r2,zero,274b4 <__gesf2+0x70>
   274ec:	00800044 	movi	r2,1
   274f0:	f800283a 	ret
   274f4:	00bfff84 	movi	r2,-2
   274f8:	f800283a 	ret

000274fc <__lesf2>:
   274fc:	200cd5fa 	srli	r6,r4,23
   27500:	280ed5fa 	srli	r7,r5,23
   27504:	00c02034 	movhi	r3,128
   27508:	31803fcc 	andi	r6,r6,255
   2750c:	18ffffc4 	addi	r3,r3,-1
   27510:	32003fd8 	cmpnei	r8,r6,255
   27514:	2012d7fa 	srli	r9,r4,31
   27518:	2804d7fa 	srli	r2,r5,31
   2751c:	1908703a 	and	r4,r3,r4
   27520:	1946703a 	and	r3,r3,r5
   27524:	39403fcc 	andi	r5,r7,255
   27528:	40000826 	beq	r8,zero,2754c <__lesf2+0x50>
   2752c:	29c03fd8 	cmpnei	r7,r5,255
   27530:	38000926 	beq	r7,zero,27558 <__lesf2+0x5c>
   27534:	3000181e 	bne	r6,zero,27598 <__lesf2+0x9c>
   27538:	2800091e 	bne	r5,zero,27560 <__lesf2+0x64>
   2753c:	1800081e 	bne	r3,zero,27560 <__lesf2+0x64>
   27540:	2000091e 	bne	r4,zero,27568 <__lesf2+0x6c>
   27544:	0005883a 	mov	r2,zero
   27548:	f800283a 	ret
   2754c:	20000a1e 	bne	r4,zero,27578 <__lesf2+0x7c>
   27550:	29c03fe0 	cmpeqi	r7,r5,255
   27554:	38001026 	beq	r7,zero,27598 <__lesf2+0x9c>
   27558:	1800071e 	bne	r3,zero,27578 <__lesf2+0x7c>
   2755c:	3000011e 	bne	r6,zero,27564 <__lesf2+0x68>
   27560:	20000b26 	beq	r4,zero,27590 <__lesf2+0x94>
   27564:	48800626 	beq	r9,r2,27580 <__lesf2+0x84>
   27568:	00800044 	movi	r2,1
   2756c:	48000926 	beq	r9,zero,27594 <__lesf2+0x98>
   27570:	00bfffc4 	movi	r2,-1
   27574:	f800283a 	ret
   27578:	00800084 	movi	r2,2
   2757c:	f800283a 	ret
   27580:	29800816 	blt	r5,r6,275a4 <__lesf2+0xa8>
   27584:	31400216 	blt	r6,r5,27590 <__lesf2+0x94>
   27588:	19000636 	bltu	r3,r4,275a4 <__lesf2+0xa8>
   2758c:	20ffed2e 	bgeu	r4,r3,27544 <__lesf2+0x48>
   27590:	103ff726 	beq	r2,zero,27570 <__lesf2+0x74>
   27594:	f800283a 	ret
   27598:	283ff21e 	bne	r5,zero,27564 <__lesf2+0x68>
   2759c:	183ff11e 	bne	r3,zero,27564 <__lesf2+0x68>
   275a0:	003ff106 	br	27568 <__lesf2+0x6c>
   275a4:	103ff21e 	bne	r2,zero,27570 <__lesf2+0x74>
   275a8:	00800044 	movi	r2,1
   275ac:	f800283a 	ret

000275b0 <__mulsf3>:
   275b0:	defff504 	addi	sp,sp,-44
   275b4:	dc400215 	stw	r17,8(sp)
   275b8:	2022d5fa 	srli	r17,r4,23
   275bc:	dc000115 	stw	r16,4(sp)
   275c0:	04002034 	movhi	r16,128
   275c4:	dd800715 	stw	r22,28(sp)
   275c8:	843fffc4 	addi	r16,r16,-1
   275cc:	dfc00a15 	stw	ra,40(sp)
   275d0:	df000915 	stw	fp,36(sp)
   275d4:	ddc00815 	stw	r23,32(sp)
   275d8:	dd400615 	stw	r21,24(sp)
   275dc:	dd000515 	stw	r20,20(sp)
   275e0:	dcc00415 	stw	r19,16(sp)
   275e4:	dc800315 	stw	r18,12(sp)
   275e8:	8c403fcc 	andi	r17,r17,255
   275ec:	202cd7fa 	srli	r22,r4,31
   275f0:	8120703a 	and	r16,r16,r4
   275f4:	88008d26 	beq	r17,zero,2782c <__mulsf3+0x27c>
   275f8:	88803fe0 	cmpeqi	r2,r17,255
   275fc:	1000901e 	bne	r2,zero,27840 <__mulsf3+0x290>
   27600:	802090fa 	slli	r16,r16,3
   27604:	8c7fe044 	addi	r17,r17,-127
   27608:	0025883a 	mov	r18,zero
   2760c:	84010034 	orhi	r16,r16,1024
   27610:	0029883a 	mov	r20,zero
   27614:	2804d5fa 	srli	r2,r5,23
   27618:	01002034 	movhi	r4,128
   2761c:	213fffc4 	addi	r4,r4,-1
   27620:	10803fcc 	andi	r2,r2,255
   27624:	282ed7fa 	srli	r23,r5,31
   27628:	2166703a 	and	r19,r4,r5
   2762c:	10007b26 	beq	r2,zero,2781c <__mulsf3+0x26c>
   27630:	10c03fe0 	cmpeqi	r3,r2,255
   27634:	1800871e 	bne	r3,zero,27854 <__mulsf3+0x2a4>
   27638:	980890fa 	slli	r4,r19,3
   2763c:	10bfe044 	addi	r2,r2,-127
   27640:	88a3883a 	add	r17,r17,r2
   27644:	24c10034 	orhi	r19,r4,1024
   27648:	0007883a 	mov	r3,zero
   2764c:	90800428 	cmpgeui	r2,r18,16
   27650:	b5eaf03a 	xor	r21,r22,r23
   27654:	8f000044 	addi	fp,r17,1
   27658:	1000341e 	bne	r2,zero,2772c <__mulsf3+0x17c>
   2765c:	902490ba 	slli	r18,r18,2
   27660:	008000b4 	movhi	r2,2
   27664:	9085883a 	add	r2,r18,r2
   27668:	109d9c17 	ldw	r2,30320(r2)
   2766c:	1000683a 	jmp	r2
   27670:	0002772c 	andhi	zero,zero,2524
   27674:	000276b4 	movhi	zero,2522
   27678:	000276b4 	movhi	zero,2522
   2767c:	000276b0 	cmpltui	zero,zero,2522
   27680:	000276bc 	xorhi	zero,zero,2522
   27684:	000276bc 	xorhi	zero,zero,2522
   27688:	000278e0 	cmpeqi	zero,zero,2531
   2768c:	000276b0 	cmpltui	zero,zero,2522
   27690:	000276bc 	xorhi	zero,zero,2522
   27694:	000278e0 	cmpeqi	zero,zero,2531
   27698:	000276bc 	xorhi	zero,zero,2522
   2769c:	000276b0 	cmpltui	zero,zero,2522
   276a0:	00027868 	cmpgeui	zero,zero,2529
   276a4:	00027868 	cmpgeui	zero,zero,2529
   276a8:	00027868 	cmpgeui	zero,zero,2529
   276ac:	00027944 	movi	zero,2533
   276b0:	b82b883a 	mov	r21,r23
   276b4:	9821883a 	mov	r16,r19
   276b8:	1829883a 	mov	r20,r3
   276bc:	a08000a0 	cmpeqi	r2,r20,2
   276c0:	1000171e 	bne	r2,zero,27720 <__mulsf3+0x170>
   276c4:	a08000e0 	cmpeqi	r2,r20,3
   276c8:	1000b41e 	bne	r2,zero,2799c <__mulsf3+0x3ec>
   276cc:	a0800060 	cmpeqi	r2,r20,1
   276d0:	10003f26 	beq	r2,zero,277d0 <__mulsf3+0x220>
   276d4:	0007883a 	mov	r3,zero
   276d8:	0009883a 	mov	r4,zero
   276dc:	1c003fcc 	andi	r16,r3,255
   276e0:	802095fa 	slli	r16,r16,23
   276e4:	a80497fa 	slli	r2,r21,31
   276e8:	8120b03a 	or	r16,r16,r4
   276ec:	8084b03a 	or	r2,r16,r2
   276f0:	dfc00a17 	ldw	ra,40(sp)
   276f4:	df000917 	ldw	fp,36(sp)
   276f8:	ddc00817 	ldw	r23,32(sp)
   276fc:	dd800717 	ldw	r22,28(sp)
   27700:	dd400617 	ldw	r21,24(sp)
   27704:	dd000517 	ldw	r20,20(sp)
   27708:	dcc00417 	ldw	r19,16(sp)
   2770c:	dc800317 	ldw	r18,12(sp)
   27710:	dc400217 	ldw	r17,8(sp)
   27714:	dc000117 	ldw	r16,4(sp)
   27718:	dec00b04 	addi	sp,sp,44
   2771c:	f800283a 	ret
   27720:	00ffffc4 	movi	r3,-1
   27724:	0009883a 	mov	r4,zero
   27728:	003fec06 	br	276dc <__mulsf3+0x12c>
   2772c:	8028d43a 	srli	r20,r16,16
   27730:	9cbfffcc 	andi	r18,r19,65535
   27734:	843fffcc 	andi	r16,r16,65535
   27738:	900b883a 	mov	r5,r18
   2773c:	8009883a 	mov	r4,r16
   27740:	0026b4c0 	call	26b4c <__mulsi3>
   27744:	9826d43a 	srli	r19,r19,16
   27748:	900b883a 	mov	r5,r18
   2774c:	a009883a 	mov	r4,r20
   27750:	1025883a 	mov	r18,r2
   27754:	0026b4c0 	call	26b4c <__mulsi3>
   27758:	980b883a 	mov	r5,r19
   2775c:	a009883a 	mov	r4,r20
   27760:	1029883a 	mov	r20,r2
   27764:	0026b4c0 	call	26b4c <__mulsi3>
   27768:	9809883a 	mov	r4,r19
   2776c:	800b883a 	mov	r5,r16
   27770:	1027883a 	mov	r19,r2
   27774:	0026b4c0 	call	26b4c <__mulsi3>
   27778:	9006d43a 	srli	r3,r18,16
   2777c:	1505883a 	add	r2,r2,r20
   27780:	1887883a 	add	r3,r3,r2
   27784:	1d00022e 	bgeu	r3,r20,27790 <__mulsf3+0x1e0>
   27788:	00800074 	movhi	r2,1
   2778c:	98a7883a 	add	r19,r19,r2
   27790:	1808943a 	slli	r4,r3,16
   27794:	1820d43a 	srli	r16,r3,16
   27798:	94bfffcc 	andi	r18,r18,65535
   2779c:	2489883a 	add	r4,r4,r18
   277a0:	200a91ba 	slli	r5,r4,6
   277a4:	84e1883a 	add	r16,r16,r19
   277a8:	802091ba 	slli	r16,r16,6
   277ac:	2008d6ba 	srli	r4,r4,26
   277b0:	2804c03a 	cmpne	r2,r5,zero
   277b4:	80c2002c 	andhi	r3,r16,2048
   277b8:	1108b03a 	or	r4,r2,r4
   277bc:	8120b03a 	or	r16,r16,r4
   277c0:	18007026 	beq	r3,zero,27984 <__mulsf3+0x3d4>
   277c4:	8004d07a 	srli	r2,r16,1
   277c8:	8400004c 	andi	r16,r16,1
   277cc:	1420b03a 	or	r16,r2,r16
   277d0:	e0c01fc4 	addi	r3,fp,127
   277d4:	00c0470e 	bge	zero,r3,278f4 <__mulsf3+0x344>
   277d8:	808001cc 	andi	r2,r16,7
   277dc:	10000426 	beq	r2,zero,277f0 <__mulsf3+0x240>
   277e0:	808003cc 	andi	r2,r16,15
   277e4:	10800120 	cmpeqi	r2,r2,4
   277e8:	1000011e 	bne	r2,zero,277f0 <__mulsf3+0x240>
   277ec:	84000104 	addi	r16,r16,4
   277f0:	8082002c 	andhi	r2,r16,2048
   277f4:	10000426 	beq	r2,zero,27808 <__mulsf3+0x258>
   277f8:	00be0034 	movhi	r2,63488
   277fc:	10bfffc4 	addi	r2,r2,-1
   27800:	80a0703a 	and	r16,r16,r2
   27804:	e0c02004 	addi	r3,fp,128
   27808:	18803fc8 	cmpgei	r2,r3,255
   2780c:	103fc41e 	bne	r2,zero,27720 <__mulsf3+0x170>
   27810:	802091ba 	slli	r16,r16,6
   27814:	8008d27a 	srli	r4,r16,9
   27818:	003fb006 	br	276dc <__mulsf3+0x12c>
   2781c:	9800281e 	bne	r19,zero,278c0 <__mulsf3+0x310>
   27820:	94800054 	ori	r18,r18,1
   27824:	00c00044 	movi	r3,1
   27828:	003f8806 	br	2764c <__mulsf3+0x9c>
   2782c:	8000191e 	bne	r16,zero,27894 <__mulsf3+0x2e4>
   27830:	04800104 	movi	r18,4
   27834:	0023883a 	mov	r17,zero
   27838:	05000044 	movi	r20,1
   2783c:	003f7506 	br	27614 <__mulsf3+0x64>
   27840:	8000101e 	bne	r16,zero,27884 <__mulsf3+0x2d4>
   27844:	04800204 	movi	r18,8
   27848:	04403fc4 	movi	r17,255
   2784c:	05000084 	movi	r20,2
   27850:	003f7006 	br	27614 <__mulsf3+0x64>
   27854:	8c403fc4 	addi	r17,r17,255
   27858:	9800071e 	bne	r19,zero,27878 <__mulsf3+0x2c8>
   2785c:	94800094 	ori	r18,r18,2
   27860:	00c00084 	movi	r3,2
   27864:	003f7906 	br	2764c <__mulsf3+0x9c>
   27868:	a08000a0 	cmpeqi	r2,r20,2
   2786c:	b02b883a 	mov	r21,r22
   27870:	103f9426 	beq	r2,zero,276c4 <__mulsf3+0x114>
   27874:	003faa06 	br	27720 <__mulsf3+0x170>
   27878:	948000d4 	ori	r18,r18,3
   2787c:	00c000c4 	movi	r3,3
   27880:	003f7206 	br	2764c <__mulsf3+0x9c>
   27884:	04800304 	movi	r18,12
   27888:	04403fc4 	movi	r17,255
   2788c:	050000c4 	movi	r20,3
   27890:	003f6006 	br	27614 <__mulsf3+0x64>
   27894:	8009883a 	mov	r4,r16
   27898:	d9400015 	stw	r5,0(sp)
   2789c:	002a8940 	call	2a894 <__clzsi2>
   278a0:	10fffec4 	addi	r3,r2,-5
   278a4:	047fe284 	movi	r17,-118
   278a8:	80e0983a 	sll	r16,r16,r3
   278ac:	d9400017 	ldw	r5,0(sp)
   278b0:	88a3c83a 	sub	r17,r17,r2
   278b4:	0025883a 	mov	r18,zero
   278b8:	0029883a 	mov	r20,zero
   278bc:	003f5506 	br	27614 <__mulsf3+0x64>
   278c0:	9809883a 	mov	r4,r19
   278c4:	002a8940 	call	2a894 <__clzsi2>
   278c8:	10fffec4 	addi	r3,r2,-5
   278cc:	88a3c83a 	sub	r17,r17,r2
   278d0:	98e6983a 	sll	r19,r19,r3
   278d4:	8c7fe284 	addi	r17,r17,-118
   278d8:	0007883a 	mov	r3,zero
   278dc:	003f5b06 	br	2764c <__mulsf3+0x9c>
   278e0:	01002034 	movhi	r4,128
   278e4:	002b883a 	mov	r21,zero
   278e8:	213fffc4 	addi	r4,r4,-1
   278ec:	00ffffc4 	movi	r3,-1
   278f0:	003f7a06 	br	276dc <__mulsf3+0x12c>
   278f4:	00800044 	movi	r2,1
   278f8:	10c7c83a 	sub	r3,r2,r3
   278fc:	18800708 	cmpgei	r2,r3,28
   27900:	103f741e 	bne	r2,zero,276d4 <__mulsf3+0x124>
   27904:	e1002784 	addi	r4,fp,158
   27908:	8108983a 	sll	r4,r16,r4
   2790c:	80e0d83a 	srl	r16,r16,r3
   27910:	2008c03a 	cmpne	r4,r4,zero
   27914:	8120b03a 	or	r16,r16,r4
   27918:	808001cc 	andi	r2,r16,7
   2791c:	10000426 	beq	r2,zero,27930 <__mulsf3+0x380>
   27920:	808003cc 	andi	r2,r16,15
   27924:	10800120 	cmpeqi	r2,r2,4
   27928:	1000011e 	bne	r2,zero,27930 <__mulsf3+0x380>
   2792c:	84000104 	addi	r16,r16,4
   27930:	8081002c 	andhi	r2,r16,1024
   27934:	10001526 	beq	r2,zero,2798c <__mulsf3+0x3dc>
   27938:	00c00044 	movi	r3,1
   2793c:	0009883a 	mov	r4,zero
   27940:	003f6606 	br	276dc <__mulsf3+0x12c>
   27944:	8080102c 	andhi	r2,r16,64
   27948:	10000826 	beq	r2,zero,2796c <__mulsf3+0x3bc>
   2794c:	9880102c 	andhi	r2,r19,64
   27950:	1000061e 	bne	r2,zero,2796c <__mulsf3+0x3bc>
   27954:	00802034 	movhi	r2,128
   27958:	99001034 	orhi	r4,r19,64
   2795c:	10bfffc4 	addi	r2,r2,-1
   27960:	2088703a 	and	r4,r4,r2
   27964:	b82b883a 	mov	r21,r23
   27968:	003fe006 	br	278ec <__mulsf3+0x33c>
   2796c:	00802034 	movhi	r2,128
   27970:	81001034 	orhi	r4,r16,64
   27974:	10bfffc4 	addi	r2,r2,-1
   27978:	2088703a 	and	r4,r4,r2
   2797c:	b02b883a 	mov	r21,r22
   27980:	003fda06 	br	278ec <__mulsf3+0x33c>
   27984:	8839883a 	mov	fp,r17
   27988:	003f9106 	br	277d0 <__mulsf3+0x220>
   2798c:	802091ba 	slli	r16,r16,6
   27990:	0007883a 	mov	r3,zero
   27994:	8008d27a 	srli	r4,r16,9
   27998:	003f5006 	br	276dc <__mulsf3+0x12c>
   2799c:	00802034 	movhi	r2,128
   279a0:	81001034 	orhi	r4,r16,64
   279a4:	10bfffc4 	addi	r2,r2,-1
   279a8:	2088703a 	and	r4,r4,r2
   279ac:	003fcf06 	br	278ec <__mulsf3+0x33c>

000279b0 <__subsf3>:
   279b0:	2804d5fa 	srli	r2,r5,23
   279b4:	2006d5fa 	srli	r3,r4,23
   279b8:	200cd7fa 	srli	r6,r4,31
   279bc:	01c02034 	movhi	r7,128
   279c0:	defffc04 	addi	sp,sp,-16
   279c4:	39ffffc4 	addi	r7,r7,-1
   279c8:	12803fcc 	andi	r10,r2,255
   279cc:	3908703a 	and	r4,r7,r4
   279d0:	dc800215 	stw	r18,8(sp)
   279d4:	394e703a 	and	r7,r7,r5
   279d8:	dc400115 	stw	r17,4(sp)
   279dc:	1c803fcc 	andi	r18,r3,255
   279e0:	dfc00315 	stw	ra,12(sp)
   279e4:	dc000015 	stw	r16,0(sp)
   279e8:	50803fd8 	cmpnei	r2,r10,255
   279ec:	3023883a 	mov	r17,r6
   279f0:	201090fa 	slli	r8,r4,3
   279f4:	280ad7fa 	srli	r5,r5,31
   279f8:	381290fa 	slli	r9,r7,3
   279fc:	2019883a 	mov	r12,r4
   27a00:	31803fcc 	andi	r6,r6,255
   27a04:	9297c83a 	sub	r11,r18,r10
   27a08:	10003f26 	beq	r2,zero,27b08 <__subsf3+0x158>
   27a0c:	2880005c 	xori	r2,r5,1
   27a10:	30804526 	beq	r6,r2,27b28 <__subsf3+0x178>
   27a14:	02c0310e 	bge	zero,r11,27adc <__subsf3+0x12c>
   27a18:	50003f1e 	bne	r10,zero,27b18 <__subsf3+0x168>
   27a1c:	48009526 	beq	r9,zero,27c74 <__subsf3+0x2c4>
   27a20:	58bfffc4 	addi	r2,r11,-1
   27a24:	1000de26 	beq	r2,zero,27da0 <__subsf3+0x3f0>
   27a28:	59003fe0 	cmpeqi	r4,r11,255
   27a2c:	20007d1e 	bne	r4,zero,27c24 <__subsf3+0x274>
   27a30:	1017883a 	mov	r11,r2
   27a34:	58800710 	cmplti	r2,r11,28
   27a38:	10009a1e 	bne	r2,zero,27ca4 <__subsf3+0x2f4>
   27a3c:	01000044 	movi	r4,1
   27a40:	4109c83a 	sub	r4,r8,r4
   27a44:	2081002c 	andhi	r2,r4,1024
   27a48:	10006a26 	beq	r2,zero,27bf4 <__subsf3+0x244>
   27a4c:	04010034 	movhi	r16,1024
   27a50:	843fffc4 	addi	r16,r16,-1
   27a54:	2420703a 	and	r16,r4,r16
   27a58:	8009883a 	mov	r4,r16
   27a5c:	002a8940 	call	2a894 <__clzsi2>
   27a60:	10bffec4 	addi	r2,r2,-5
   27a64:	8088983a 	sll	r4,r16,r2
   27a68:	1480840e 	bge	r2,r18,27c7c <__subsf3+0x2cc>
   27a6c:	00ff0034 	movhi	r3,64512
   27a70:	18ffffc4 	addi	r3,r3,-1
   27a74:	90a5c83a 	sub	r18,r18,r2
   27a78:	20c8703a 	and	r4,r4,r3
   27a7c:	208001cc 	andi	r2,r4,7
   27a80:	10000426 	beq	r2,zero,27a94 <__subsf3+0xe4>
   27a84:	208003cc 	andi	r2,r4,15
   27a88:	10800120 	cmpeqi	r2,r2,4
   27a8c:	1000011e 	bne	r2,zero,27a94 <__subsf3+0xe4>
   27a90:	21000104 	addi	r4,r4,4
   27a94:	2081002c 	andhi	r2,r4,1024
   27a98:	10005826 	beq	r2,zero,27bfc <__subsf3+0x24c>
   27a9c:	90c00044 	addi	r3,r18,1
   27aa0:	18803fe0 	cmpeqi	r2,r3,255
   27aa4:	1000481e 	bne	r2,zero,27bc8 <__subsf3+0x218>
   27aa8:	200891ba 	slli	r4,r4,6
   27aac:	2008d27a 	srli	r4,r4,9
   27ab0:	18803fcc 	andi	r2,r3,255
   27ab4:	100495fa 	slli	r2,r2,23
   27ab8:	880697fa 	slli	r3,r17,31
   27abc:	1108b03a 	or	r4,r2,r4
   27ac0:	20c4b03a 	or	r2,r4,r3
   27ac4:	dfc00317 	ldw	ra,12(sp)
   27ac8:	dc800217 	ldw	r18,8(sp)
   27acc:	dc400117 	ldw	r17,4(sp)
   27ad0:	dc000017 	ldw	r16,0(sp)
   27ad4:	dec00404 	addi	sp,sp,16
   27ad8:	f800283a 	ret
   27adc:	58002726 	beq	r11,zero,27b7c <__subsf3+0x1cc>
   27ae0:	5497c83a 	sub	r11,r10,r18
   27ae4:	1023883a 	mov	r17,r2
   27ae8:	9000751e 	bne	r18,zero,27cc0 <__subsf3+0x310>
   27aec:	40006026 	beq	r8,zero,27c70 <__subsf3+0x2c0>
   27af0:	58bfffc4 	addi	r2,r11,-1
   27af4:	1000cb26 	beq	r2,zero,27e24 <__subsf3+0x474>
   27af8:	5ac03fe0 	cmpeqi	r11,r11,255
   27afc:	5800481e 	bne	r11,zero,27c20 <__subsf3+0x270>
   27b00:	1017883a 	mov	r11,r2
   27b04:	00007106 	br	27ccc <__subsf3+0x31c>
   27b08:	483fc026 	beq	r9,zero,27a0c <__subsf3+0x5c>
   27b0c:	28803fcc 	andi	r2,r5,255
   27b10:	31404b26 	beq	r6,r5,27c40 <__subsf3+0x290>
   27b14:	02fff10e 	bge	zero,r11,27adc <__subsf3+0x12c>
   27b18:	90803fe0 	cmpeqi	r2,r18,255
   27b1c:	1000411e 	bne	r2,zero,27c24 <__subsf3+0x274>
   27b20:	4a410034 	orhi	r9,r9,1024
   27b24:	003fc306 	br	27a34 <__subsf3+0x84>
   27b28:	02c0450e 	bge	zero,r11,27c40 <__subsf3+0x290>
   27b2c:	50001f26 	beq	r10,zero,27bac <__subsf3+0x1fc>
   27b30:	90803fe0 	cmpeqi	r2,r18,255
   27b34:	10003b1e 	bne	r2,zero,27c24 <__subsf3+0x274>
   27b38:	4a410034 	orhi	r9,r9,1024
   27b3c:	58800710 	cmplti	r2,r11,28
   27b40:	1000701e 	bne	r2,zero,27d04 <__subsf3+0x354>
   27b44:	01000044 	movi	r4,1
   27b48:	2209883a 	add	r4,r4,r8
   27b4c:	2081002c 	andhi	r2,r4,1024
   27b50:	10002826 	beq	r2,zero,27bf4 <__subsf3+0x244>
   27b54:	94800044 	addi	r18,r18,1
   27b58:	90803fe0 	cmpeqi	r2,r18,255
   27b5c:	10001a1e 	bne	r2,zero,27bc8 <__subsf3+0x218>
   27b60:	2004d07a 	srli	r2,r4,1
   27b64:	00df8034 	movhi	r3,32256
   27b68:	18ffffc4 	addi	r3,r3,-1
   27b6c:	2100004c 	andi	r4,r4,1
   27b70:	10c4703a 	and	r2,r2,r3
   27b74:	1108b03a 	or	r4,r2,r4
   27b78:	003fc006 	br	27a7c <__subsf3+0xcc>
   27b7c:	90c00044 	addi	r3,r18,1
   27b80:	18c03f8c 	andi	r3,r3,254
   27b84:	1800571e 	bne	r3,zero,27ce4 <__subsf3+0x334>
   27b88:	90007a1e 	bne	r18,zero,27d74 <__subsf3+0x3c4>
   27b8c:	4000a126 	beq	r8,zero,27e14 <__subsf3+0x464>
   27b90:	48008d26 	beq	r9,zero,27dc8 <__subsf3+0x418>
   27b94:	4249c83a 	sub	r4,r8,r9
   27b98:	20c1002c 	andhi	r3,r4,1024
   27b9c:	1800a726 	beq	r3,zero,27e3c <__subsf3+0x48c>
   27ba0:	4a09c83a 	sub	r4,r9,r8
   27ba4:	1023883a 	mov	r17,r2
   27ba8:	003fb406 	br	27a7c <__subsf3+0xcc>
   27bac:	48003126 	beq	r9,zero,27c74 <__subsf3+0x2c4>
   27bb0:	58bfffc4 	addi	r2,r11,-1
   27bb4:	10007526 	beq	r2,zero,27d8c <__subsf3+0x3dc>
   27bb8:	5ac03fe0 	cmpeqi	r11,r11,255
   27bbc:	5800191e 	bne	r11,zero,27c24 <__subsf3+0x274>
   27bc0:	1017883a 	mov	r11,r2
   27bc4:	003fdd06 	br	27b3c <__subsf3+0x18c>
   27bc8:	00ffffc4 	movi	r3,-1
   27bcc:	0009883a 	mov	r4,zero
   27bd0:	003fb706 	br	27ab0 <__subsf3+0x100>
   27bd4:	90c00044 	addi	r3,r18,1
   27bd8:	19403f8c 	andi	r5,r3,254
   27bdc:	28005026 	beq	r5,zero,27d20 <__subsf3+0x370>
   27be0:	18803fe0 	cmpeqi	r2,r3,255
   27be4:	103ff81e 	bne	r2,zero,27bc8 <__subsf3+0x218>
   27be8:	4249883a 	add	r4,r8,r9
   27bec:	2008d07a 	srli	r4,r4,1
   27bf0:	1825883a 	mov	r18,r3
   27bf4:	208001cc 	andi	r2,r4,7
   27bf8:	103fa21e 	bne	r2,zero,27a84 <__subsf3+0xd4>
   27bfc:	2018d0fa 	srli	r12,r4,3
   27c00:	90803fe0 	cmpeqi	r2,r18,255
   27c04:	1000071e 	bne	r2,zero,27c24 <__subsf3+0x274>
   27c08:	01002034 	movhi	r4,128
   27c0c:	213fffc4 	addi	r4,r4,-1
   27c10:	6108703a 	and	r4,r12,r4
   27c14:	9007883a 	mov	r3,r18
   27c18:	003fa506 	br	27ab0 <__subsf3+0x100>
   27c1c:	40006c1e 	bne	r8,zero,27dd0 <__subsf3+0x420>
   27c20:	3819883a 	mov	r12,r7
   27c24:	603fe826 	beq	r12,zero,27bc8 <__subsf3+0x218>
   27c28:	00802034 	movhi	r2,128
   27c2c:	61001034 	orhi	r4,r12,64
   27c30:	10bfffc4 	addi	r2,r2,-1
   27c34:	2088703a 	and	r4,r4,r2
   27c38:	00ffffc4 	movi	r3,-1
   27c3c:	003f9c06 	br	27ab0 <__subsf3+0x100>
   27c40:	583fe426 	beq	r11,zero,27bd4 <__subsf3+0x224>
   27c44:	5497c83a 	sub	r11,r10,r18
   27c48:	90004026 	beq	r18,zero,27d4c <__subsf3+0x39c>
   27c4c:	50803fe0 	cmpeqi	r2,r10,255
   27c50:	103ff31e 	bne	r2,zero,27c20 <__subsf3+0x270>
   27c54:	42010034 	orhi	r8,r8,1024
   27c58:	58800710 	cmplti	r2,r11,28
   27c5c:	1000641e 	bne	r2,zero,27df0 <__subsf3+0x440>
   27c60:	01000044 	movi	r4,1
   27c64:	2249883a 	add	r4,r4,r9
   27c68:	5025883a 	mov	r18,r10
   27c6c:	003fb706 	br	27b4c <__subsf3+0x19c>
   27c70:	3819883a 	mov	r12,r7
   27c74:	5825883a 	mov	r18,r11
   27c78:	003fe106 	br	27c00 <__subsf3+0x250>
   27c7c:	1485c83a 	sub	r2,r2,r18
   27c80:	14000044 	addi	r16,r2,1
   27c84:	00800804 	movi	r2,32
   27c88:	1405c83a 	sub	r2,r2,r16
   27c8c:	2084983a 	sll	r2,r4,r2
   27c90:	2408d83a 	srl	r4,r4,r16
   27c94:	0025883a 	mov	r18,zero
   27c98:	1004c03a 	cmpne	r2,r2,zero
   27c9c:	1108b03a 	or	r4,r2,r4
   27ca0:	003f7606 	br	27a7c <__subsf3+0xcc>
   27ca4:	01000804 	movi	r4,32
   27ca8:	22c9c83a 	sub	r4,r4,r11
   27cac:	4908983a 	sll	r4,r9,r4
   27cb0:	4ad2d83a 	srl	r9,r9,r11
   27cb4:	2008c03a 	cmpne	r4,r4,zero
   27cb8:	2248b03a 	or	r4,r4,r9
   27cbc:	003f6006 	br	27a40 <__subsf3+0x90>
   27cc0:	50803fe0 	cmpeqi	r2,r10,255
   27cc4:	103fd61e 	bne	r2,zero,27c20 <__subsf3+0x270>
   27cc8:	42010034 	orhi	r8,r8,1024
   27ccc:	58800710 	cmplti	r2,r11,28
   27cd0:	1000361e 	bne	r2,zero,27dac <__subsf3+0x3fc>
   27cd4:	01000044 	movi	r4,1
   27cd8:	4909c83a 	sub	r4,r9,r4
   27cdc:	5025883a 	mov	r18,r10
   27ce0:	003f5806 	br	27a44 <__subsf3+0x94>
   27ce4:	4261c83a 	sub	r16,r8,r9
   27ce8:	80c1002c 	andhi	r3,r16,1024
   27cec:	18001e1e 	bne	r3,zero,27d68 <__subsf3+0x3b8>
   27cf0:	803f591e 	bne	r16,zero,27a58 <__subsf3+0xa8>
   27cf4:	0023883a 	mov	r17,zero
   27cf8:	0007883a 	mov	r3,zero
   27cfc:	0009883a 	mov	r4,zero
   27d00:	003f6b06 	br	27ab0 <__subsf3+0x100>
   27d04:	01000804 	movi	r4,32
   27d08:	22c9c83a 	sub	r4,r4,r11
   27d0c:	4908983a 	sll	r4,r9,r4
   27d10:	4ad2d83a 	srl	r9,r9,r11
   27d14:	2008c03a 	cmpne	r4,r4,zero
   27d18:	2248b03a 	or	r4,r4,r9
   27d1c:	003f8a06 	br	27b48 <__subsf3+0x198>
   27d20:	903fbe1e 	bne	r18,zero,27c1c <__subsf3+0x26c>
   27d24:	40004226 	beq	r8,zero,27e30 <__subsf3+0x480>
   27d28:	48002726 	beq	r9,zero,27dc8 <__subsf3+0x418>
   27d2c:	4249883a 	add	r4,r8,r9
   27d30:	2081002c 	andhi	r2,r4,1024
   27d34:	103faf26 	beq	r2,zero,27bf4 <__subsf3+0x244>
   27d38:	00bf0034 	movhi	r2,64512
   27d3c:	10bfffc4 	addi	r2,r2,-1
   27d40:	2088703a 	and	r4,r4,r2
   27d44:	04800044 	movi	r18,1
   27d48:	003faa06 	br	27bf4 <__subsf3+0x244>
   27d4c:	403fc826 	beq	r8,zero,27c70 <__subsf3+0x2c0>
   27d50:	58bfffc4 	addi	r2,r11,-1
   27d54:	10000d26 	beq	r2,zero,27d8c <__subsf3+0x3dc>
   27d58:	5ac03fe0 	cmpeqi	r11,r11,255
   27d5c:	583fb01e 	bne	r11,zero,27c20 <__subsf3+0x270>
   27d60:	1017883a 	mov	r11,r2
   27d64:	003fbc06 	br	27c58 <__subsf3+0x2a8>
   27d68:	4a21c83a 	sub	r16,r9,r8
   27d6c:	1023883a 	mov	r17,r2
   27d70:	003f3906 	br	27a58 <__subsf3+0xa8>
   27d74:	4000161e 	bne	r8,zero,27dd0 <__subsf3+0x420>
   27d78:	48001a1e 	bne	r9,zero,27de4 <__subsf3+0x434>
   27d7c:	01002034 	movhi	r4,128
   27d80:	0023883a 	mov	r17,zero
   27d84:	213fffc4 	addi	r4,r4,-1
   27d88:	003fab06 	br	27c38 <__subsf3+0x288>
   27d8c:	4249883a 	add	r4,r8,r9
   27d90:	2081002c 	andhi	r2,r4,1024
   27d94:	10001d26 	beq	r2,zero,27e0c <__subsf3+0x45c>
   27d98:	04800084 	movi	r18,2
   27d9c:	003f7006 	br	27b60 <__subsf3+0x1b0>
   27da0:	4249c83a 	sub	r4,r8,r9
   27da4:	04800044 	movi	r18,1
   27da8:	003f2606 	br	27a44 <__subsf3+0x94>
   27dac:	00c00804 	movi	r3,32
   27db0:	1ac7c83a 	sub	r3,r3,r11
   27db4:	40c6983a 	sll	r3,r8,r3
   27db8:	42d0d83a 	srl	r8,r8,r11
   27dbc:	1808c03a 	cmpne	r4,r3,zero
   27dc0:	2208b03a 	or	r4,r4,r8
   27dc4:	003fc406 	br	27cd8 <__subsf3+0x328>
   27dc8:	0007883a 	mov	r3,zero
   27dcc:	003f3806 	br	27ab0 <__subsf3+0x100>
   27dd0:	483f9426 	beq	r9,zero,27c24 <__subsf3+0x274>
   27dd4:	2100102c 	andhi	r4,r4,64
   27dd8:	203f9226 	beq	r4,zero,27c24 <__subsf3+0x274>
   27ddc:	38c0102c 	andhi	r3,r7,64
   27de0:	183f901e 	bne	r3,zero,27c24 <__subsf3+0x274>
   27de4:	1023883a 	mov	r17,r2
   27de8:	3819883a 	mov	r12,r7
   27dec:	003f8d06 	br	27c24 <__subsf3+0x274>
   27df0:	01000804 	movi	r4,32
   27df4:	22c9c83a 	sub	r4,r4,r11
   27df8:	4106983a 	sll	r3,r8,r4
   27dfc:	42d0d83a 	srl	r8,r8,r11
   27e00:	1808c03a 	cmpne	r4,r3,zero
   27e04:	2208b03a 	or	r4,r4,r8
   27e08:	003f9606 	br	27c64 <__subsf3+0x2b4>
   27e0c:	04800044 	movi	r18,1
   27e10:	003f7806 	br	27bf4 <__subsf3+0x244>
   27e14:	483fb726 	beq	r9,zero,27cf4 <__subsf3+0x344>
   27e18:	1023883a 	mov	r17,r2
   27e1c:	3809883a 	mov	r4,r7
   27e20:	003f2306 	br	27ab0 <__subsf3+0x100>
   27e24:	4a09c83a 	sub	r4,r9,r8
   27e28:	04800044 	movi	r18,1
   27e2c:	003f0506 	br	27a44 <__subsf3+0x94>
   27e30:	3809883a 	mov	r4,r7
   27e34:	0007883a 	mov	r3,zero
   27e38:	003f1d06 	br	27ab0 <__subsf3+0x100>
   27e3c:	203fad26 	beq	r4,zero,27cf4 <__subsf3+0x344>
   27e40:	003f6c06 	br	27bf4 <__subsf3+0x244>

00027e44 <__unordsf2>:
   27e44:	2006d5fa 	srli	r3,r4,23
   27e48:	00802034 	movhi	r2,128
   27e4c:	10bfffc4 	addi	r2,r2,-1
   27e50:	18c03fcc 	andi	r3,r3,255
   27e54:	18c03fd8 	cmpnei	r3,r3,255
   27e58:	1108703a 	and	r4,r2,r4
   27e5c:	280cd5fa 	srli	r6,r5,23
   27e60:	1144703a 	and	r2,r2,r5
   27e64:	18000526 	beq	r3,zero,27e7c <__unordsf2+0x38>
   27e68:	31803fcc 	andi	r6,r6,255
   27e6c:	31803fd8 	cmpnei	r6,r6,255
   27e70:	30000526 	beq	r6,zero,27e88 <__unordsf2+0x44>
   27e74:	0005883a 	mov	r2,zero
   27e78:	f800283a 	ret
   27e7c:	203ffa26 	beq	r4,zero,27e68 <__unordsf2+0x24>
   27e80:	00800044 	movi	r2,1
   27e84:	f800283a 	ret
   27e88:	1004c03a 	cmpne	r2,r2,zero
   27e8c:	f800283a 	ret

00027e90 <__fixsfsi>:
   27e90:	200ad5fa 	srli	r5,r4,23
   27e94:	00c02034 	movhi	r3,128
   27e98:	18ffffc4 	addi	r3,r3,-1
   27e9c:	29403fcc 	andi	r5,r5,255
   27ea0:	29801fd0 	cmplti	r6,r5,127
   27ea4:	200ed7fa 	srli	r7,r4,31
   27ea8:	1906703a 	and	r3,r3,r4
   27eac:	3000061e 	bne	r6,zero,27ec8 <__fixsfsi+0x38>
   27eb0:	28802790 	cmplti	r2,r5,158
   27eb4:	1000061e 	bne	r2,zero,27ed0 <__fixsfsi+0x40>
   27eb8:	00a00034 	movhi	r2,32768
   27ebc:	10bfffc4 	addi	r2,r2,-1
   27ec0:	3885883a 	add	r2,r7,r2
   27ec4:	f800283a 	ret
   27ec8:	0005883a 	mov	r2,zero
   27ecc:	f800283a 	ret
   27ed0:	28802590 	cmplti	r2,r5,150
   27ed4:	18c02034 	orhi	r3,r3,128
   27ed8:	1000051e 	bne	r2,zero,27ef0 <__fixsfsi+0x60>
   27edc:	28bfda84 	addi	r2,r5,-150
   27ee0:	1884983a 	sll	r2,r3,r2
   27ee4:	383ff926 	beq	r7,zero,27ecc <__fixsfsi+0x3c>
   27ee8:	0085c83a 	sub	r2,zero,r2
   27eec:	f800283a 	ret
   27ef0:	00802584 	movi	r2,150
   27ef4:	1145c83a 	sub	r2,r2,r5
   27ef8:	1884d83a 	srl	r2,r3,r2
   27efc:	003ff906 	br	27ee4 <__fixsfsi+0x54>

00027f00 <__floatsisf>:
   27f00:	defffd04 	addi	sp,sp,-12
   27f04:	dfc00215 	stw	ra,8(sp)
   27f08:	dc400115 	stw	r17,4(sp)
   27f0c:	dc000015 	stw	r16,0(sp)
   27f10:	20001226 	beq	r4,zero,27f5c <__floatsisf+0x5c>
   27f14:	2022d7fa 	srli	r17,r4,31
   27f18:	2021883a 	mov	r16,r4
   27f1c:	20003816 	blt	r4,zero,28000 <__floatsisf+0x100>
   27f20:	8009883a 	mov	r4,r16
   27f24:	002a8940 	call	2a894 <__clzsi2>
   27f28:	1009883a 	mov	r4,r2
   27f2c:	00802784 	movi	r2,158
   27f30:	1105c83a 	sub	r2,r2,r4
   27f34:	10c025c8 	cmpgei	r3,r2,151
   27f38:	1800151e 	bne	r3,zero,27f90 <__floatsisf+0x90>
   27f3c:	20c00248 	cmpgei	r3,r4,9
   27f40:	18003126 	beq	r3,zero,28008 <__floatsisf+0x108>
   27f44:	213ffe04 	addi	r4,r4,-8
   27f48:	8120983a 	sll	r16,r16,r4
   27f4c:	00c02034 	movhi	r3,128
   27f50:	18ffffc4 	addi	r3,r3,-1
   27f54:	80e0703a 	and	r16,r16,r3
   27f58:	00000306 	br	27f68 <__floatsisf+0x68>
   27f5c:	0023883a 	mov	r17,zero
   27f60:	0005883a 	mov	r2,zero
   27f64:	0021883a 	mov	r16,zero
   27f68:	10803fcc 	andi	r2,r2,255
   27f6c:	100495fa 	slli	r2,r2,23
   27f70:	882297fa 	slli	r17,r17,31
   27f74:	1404b03a 	or	r2,r2,r16
   27f78:	1444b03a 	or	r2,r2,r17
   27f7c:	dfc00217 	ldw	ra,8(sp)
   27f80:	dc400117 	ldw	r17,4(sp)
   27f84:	dc000017 	ldw	r16,0(sp)
   27f88:	dec00304 	addi	sp,sp,12
   27f8c:	f800283a 	ret
   27f90:	10c02690 	cmplti	r3,r2,154
   27f94:	1800071e 	bne	r3,zero,27fb4 <__floatsisf+0xb4>
   27f98:	20c006c4 	addi	r3,r4,27
   27f9c:	01400144 	movi	r5,5
   27fa0:	80c6983a 	sll	r3,r16,r3
   27fa4:	290bc83a 	sub	r5,r5,r4
   27fa8:	814ad83a 	srl	r5,r16,r5
   27fac:	1806c03a 	cmpne	r3,r3,zero
   27fb0:	28e0b03a 	or	r16,r5,r3
   27fb4:	20c00188 	cmpgei	r3,r4,6
   27fb8:	1800171e 	bne	r3,zero,28018 <__floatsisf+0x118>
   27fbc:	00ff0034 	movhi	r3,64512
   27fc0:	18ffffc4 	addi	r3,r3,-1
   27fc4:	818001cc 	andi	r6,r16,7
   27fc8:	80ca703a 	and	r5,r16,r3
   27fcc:	30000926 	beq	r6,zero,27ff4 <__floatsisf+0xf4>
   27fd0:	818003cc 	andi	r6,r16,15
   27fd4:	31800120 	cmpeqi	r6,r6,4
   27fd8:	3000061e 	bne	r6,zero,27ff4 <__floatsisf+0xf4>
   27fdc:	29400104 	addi	r5,r5,4
   27fe0:	2981002c 	andhi	r6,r5,1024
   27fe4:	30000326 	beq	r6,zero,27ff4 <__floatsisf+0xf4>
   27fe8:	28ca703a 	and	r5,r5,r3
   27fec:	00c027c4 	movi	r3,159
   27ff0:	1905c83a 	sub	r2,r3,r4
   27ff4:	282091ba 	slli	r16,r5,6
   27ff8:	8020d27a 	srli	r16,r16,9
   27ffc:	003fda06 	br	27f68 <__floatsisf+0x68>
   28000:	0121c83a 	sub	r16,zero,r4
   28004:	003fc606 	br	27f20 <__floatsisf+0x20>
   28008:	01002034 	movhi	r4,128
   2800c:	213fffc4 	addi	r4,r4,-1
   28010:	8120703a 	and	r16,r16,r4
   28014:	003fd406 	br	27f68 <__floatsisf+0x68>
   28018:	20fffec4 	addi	r3,r4,-5
   2801c:	80e0983a 	sll	r16,r16,r3
   28020:	003fe606 	br	27fbc <__floatsisf+0xbc>

00028024 <__floatunsisf>:
   28024:	defffe04 	addi	sp,sp,-8
   28028:	dfc00115 	stw	ra,4(sp)
   2802c:	dc000015 	stw	r16,0(sp)
   28030:	20000f26 	beq	r4,zero,28070 <__floatunsisf+0x4c>
   28034:	2021883a 	mov	r16,r4
   28038:	002a8940 	call	2a894 <__clzsi2>
   2803c:	1009883a 	mov	r4,r2
   28040:	00802784 	movi	r2,158
   28044:	1105c83a 	sub	r2,r2,r4
   28048:	10c025c8 	cmpgei	r3,r2,151
   2804c:	1800111e 	bne	r3,zero,28094 <__floatunsisf+0x70>
   28050:	20c00248 	cmpgei	r3,r4,9
   28054:	18002b26 	beq	r3,zero,28104 <__floatunsisf+0xe0>
   28058:	213ffe04 	addi	r4,r4,-8
   2805c:	8120983a 	sll	r16,r16,r4
   28060:	00c02034 	movhi	r3,128
   28064:	18ffffc4 	addi	r3,r3,-1
   28068:	80e0703a 	and	r16,r16,r3
   2806c:	00000206 	br	28078 <__floatunsisf+0x54>
   28070:	0005883a 	mov	r2,zero
   28074:	0021883a 	mov	r16,zero
   28078:	10803fcc 	andi	r2,r2,255
   2807c:	100495fa 	slli	r2,r2,23
   28080:	1404b03a 	or	r2,r2,r16
   28084:	dfc00117 	ldw	ra,4(sp)
   28088:	dc000017 	ldw	r16,0(sp)
   2808c:	dec00204 	addi	sp,sp,8
   28090:	f800283a 	ret
   28094:	10c02690 	cmplti	r3,r2,154
   28098:	1800071e 	bne	r3,zero,280b8 <__floatunsisf+0x94>
   2809c:	20c006c4 	addi	r3,r4,27
   280a0:	80ca983a 	sll	r5,r16,r3
   280a4:	00c00144 	movi	r3,5
   280a8:	1907c83a 	sub	r3,r3,r4
   280ac:	80e0d83a 	srl	r16,r16,r3
   280b0:	2806c03a 	cmpne	r3,r5,zero
   280b4:	1c20b03a 	or	r16,r3,r16
   280b8:	20c00188 	cmpgei	r3,r4,6
   280bc:	1800151e 	bne	r3,zero,28114 <__floatunsisf+0xf0>
   280c0:	00ff0034 	movhi	r3,64512
   280c4:	18ffffc4 	addi	r3,r3,-1
   280c8:	818001cc 	andi	r6,r16,7
   280cc:	80ca703a 	and	r5,r16,r3
   280d0:	30000926 	beq	r6,zero,280f8 <__floatunsisf+0xd4>
   280d4:	840003cc 	andi	r16,r16,15
   280d8:	84000120 	cmpeqi	r16,r16,4
   280dc:	8000061e 	bne	r16,zero,280f8 <__floatunsisf+0xd4>
   280e0:	29400104 	addi	r5,r5,4
   280e4:	2981002c 	andhi	r6,r5,1024
   280e8:	30000326 	beq	r6,zero,280f8 <__floatunsisf+0xd4>
   280ec:	28ca703a 	and	r5,r5,r3
   280f0:	00c027c4 	movi	r3,159
   280f4:	1905c83a 	sub	r2,r3,r4
   280f8:	282091ba 	slli	r16,r5,6
   280fc:	8020d27a 	srli	r16,r16,9
   28100:	003fdd06 	br	28078 <__floatunsisf+0x54>
   28104:	01002034 	movhi	r4,128
   28108:	213fffc4 	addi	r4,r4,-1
   2810c:	8120703a 	and	r16,r16,r4
   28110:	003fd906 	br	28078 <__floatunsisf+0x54>
   28114:	20fffec4 	addi	r3,r4,-5
   28118:	80e0983a 	sll	r16,r16,r3
   2811c:	003fe806 	br	280c0 <__floatunsisf+0x9c>

00028120 <__adddf3>:
   28120:	02000434 	movhi	r8,16
   28124:	423fffc4 	addi	r8,r8,-1
   28128:	2806d53a 	srli	r3,r5,20
   2812c:	3804d53a 	srli	r2,r7,20
   28130:	2a14703a 	and	r10,r5,r8
   28134:	3a12703a 	and	r9,r7,r8
   28138:	280ad7fa 	srli	r5,r5,31
   2813c:	501490fa 	slli	r10,r10,3
   28140:	2018d77a 	srli	r12,r4,29
   28144:	481290fa 	slli	r9,r9,3
   28148:	3016d77a 	srli	r11,r6,29
   2814c:	380ed7fa 	srli	r7,r7,31
   28150:	defffb04 	addi	sp,sp,-20
   28154:	dc800215 	stw	r18,8(sp)
   28158:	dc000015 	stw	r16,0(sp)
   2815c:	1c81ffcc 	andi	r18,r3,2047
   28160:	1081ffcc 	andi	r2,r2,2047
   28164:	dfc00415 	stw	ra,16(sp)
   28168:	dcc00315 	stw	r19,12(sp)
   2816c:	dc400115 	stw	r17,4(sp)
   28170:	201c90fa 	slli	r14,r4,3
   28174:	301a90fa 	slli	r13,r6,3
   28178:	2821883a 	mov	r16,r5
   2817c:	6294b03a 	or	r10,r12,r10
   28180:	5a52b03a 	or	r9,r11,r9
   28184:	9087c83a 	sub	r3,r18,r2
   28188:	29c06126 	beq	r5,r7,28310 <__adddf3+0x1f0>
   2818c:	00c0550e 	bge	zero,r3,282e4 <__adddf3+0x1c4>
   28190:	10007326 	beq	r2,zero,28360 <__adddf3+0x240>
   28194:	9081ffd8 	cmpnei	r2,r18,2047
   28198:	1000bd26 	beq	r2,zero,28490 <__adddf3+0x370>
   2819c:	4a402034 	orhi	r9,r9,128
   281a0:	18800e48 	cmpgei	r2,r3,57
   281a4:	1000ef1e 	bne	r2,zero,28564 <__adddf3+0x444>
   281a8:	18800808 	cmpgei	r2,r3,32
   281ac:	1001321e 	bne	r2,zero,28678 <__adddf3+0x558>
   281b0:	00800804 	movi	r2,32
   281b4:	10c5c83a 	sub	r2,r2,r3
   281b8:	68c8d83a 	srl	r4,r13,r3
   281bc:	48a2983a 	sll	r17,r9,r2
   281c0:	689a983a 	sll	r13,r13,r2
   281c4:	48c6d83a 	srl	r3,r9,r3
   281c8:	8922b03a 	or	r17,r17,r4
   281cc:	681ac03a 	cmpne	r13,r13,zero
   281d0:	8b62b03a 	or	r17,r17,r13
   281d4:	50d5c83a 	sub	r10,r10,r3
   281d8:	7463c83a 	sub	r17,r14,r17
   281dc:	7451803a 	cmpltu	r8,r14,r17
   281e0:	5211c83a 	sub	r8,r10,r8
   281e4:	4080202c 	andhi	r2,r8,128
   281e8:	10008d26 	beq	r2,zero,28420 <__adddf3+0x300>
   281ec:	02402034 	movhi	r9,128
   281f0:	4a7fffc4 	addi	r9,r9,-1
   281f4:	4266703a 	and	r19,r8,r9
   281f8:	9800b326 	beq	r19,zero,284c8 <__adddf3+0x3a8>
   281fc:	9809883a 	mov	r4,r19
   28200:	002a8940 	call	2a894 <__clzsi2>
   28204:	10fffe04 	addi	r3,r2,-8
   28208:	02000804 	movi	r8,32
   2820c:	40d1c83a 	sub	r8,r8,r3
   28210:	8a10d83a 	srl	r8,r17,r8
   28214:	98d2983a 	sll	r9,r19,r3
   28218:	88e2983a 	sll	r17,r17,r3
   2821c:	4250b03a 	or	r8,r8,r9
   28220:	1c80b216 	blt	r3,r18,284ec <__adddf3+0x3cc>
   28224:	1c87c83a 	sub	r3,r3,r18
   28228:	19000044 	addi	r4,r3,1
   2822c:	20800808 	cmpgei	r2,r4,32
   28230:	10006f1e 	bne	r2,zero,283f0 <__adddf3+0x2d0>
   28234:	00800804 	movi	r2,32
   28238:	1105c83a 	sub	r2,r2,r4
   2823c:	8906d83a 	srl	r3,r17,r4
   28240:	88a2983a 	sll	r17,r17,r2
   28244:	4084983a 	sll	r2,r8,r2
   28248:	4110d83a 	srl	r8,r8,r4
   2824c:	8822c03a 	cmpne	r17,r17,zero
   28250:	10c4b03a 	or	r2,r2,r3
   28254:	1462b03a 	or	r17,r2,r17
   28258:	0025883a 	mov	r18,zero
   2825c:	888001cc 	andi	r2,r17,7
   28260:	10000726 	beq	r2,zero,28280 <__adddf3+0x160>
   28264:	888003cc 	andi	r2,r17,15
   28268:	10800120 	cmpeqi	r2,r2,4
   2826c:	1000041e 	bne	r2,zero,28280 <__adddf3+0x160>
   28270:	88c00104 	addi	r3,r17,4
   28274:	1c63803a 	cmpltu	r17,r3,r17
   28278:	4451883a 	add	r8,r8,r17
   2827c:	1823883a 	mov	r17,r3
   28280:	4080202c 	andhi	r2,r8,128
   28284:	10006826 	beq	r2,zero,28428 <__adddf3+0x308>
   28288:	90c00044 	addi	r3,r18,1
   2828c:	1881ffe0 	cmpeqi	r2,r3,2047
   28290:	18c1ffcc 	andi	r3,r3,2047
   28294:	10007a1e 	bne	r2,zero,28480 <__adddf3+0x360>
   28298:	00bfe034 	movhi	r2,65408
   2829c:	10bfffc4 	addi	r2,r2,-1
   282a0:	4090703a 	and	r8,r8,r2
   282a4:	4004977a 	slli	r2,r8,29
   282a8:	4010927a 	slli	r8,r8,9
   282ac:	8822d0fa 	srli	r17,r17,3
   282b0:	4010d33a 	srli	r8,r8,12
   282b4:	1444b03a 	or	r2,r2,r17
   282b8:	1806953a 	slli	r3,r3,20
   282bc:	802097fa 	slli	r16,r16,31
   282c0:	1a06b03a 	or	r3,r3,r8
   282c4:	1c06b03a 	or	r3,r3,r16
   282c8:	dfc00417 	ldw	ra,16(sp)
   282cc:	dcc00317 	ldw	r19,12(sp)
   282d0:	dc800217 	ldw	r18,8(sp)
   282d4:	dc400117 	ldw	r17,4(sp)
   282d8:	dc000017 	ldw	r16,0(sp)
   282dc:	dec00504 	addi	sp,sp,20
   282e0:	f800283a 	ret
   282e4:	18002626 	beq	r3,zero,28380 <__adddf3+0x260>
   282e8:	1487c83a 	sub	r3,r2,r18
   282ec:	9000ba1e 	bne	r18,zero,285d8 <__adddf3+0x4b8>
   282f0:	5388b03a 	or	r4,r10,r14
   282f4:	20011826 	beq	r4,zero,28758 <__adddf3+0x638>
   282f8:	193fffc4 	addi	r4,r3,-1
   282fc:	20015726 	beq	r4,zero,2885c <__adddf3+0x73c>
   28300:	18c1ffd8 	cmpnei	r3,r3,2047
   28304:	18013026 	beq	r3,zero,287c8 <__adddf3+0x6a8>
   28308:	2007883a 	mov	r3,r4
   2830c:	0000b506 	br	285e4 <__adddf3+0x4c4>
   28310:	00c07b0e 	bge	zero,r3,28500 <__adddf3+0x3e0>
   28314:	10002e26 	beq	r2,zero,283d0 <__adddf3+0x2b0>
   28318:	9081ffd8 	cmpnei	r2,r18,2047
   2831c:	10005c26 	beq	r2,zero,28490 <__adddf3+0x370>
   28320:	4a402034 	orhi	r9,r9,128
   28324:	18800e48 	cmpgei	r2,r3,57
   28328:	10004b1e 	bne	r2,zero,28458 <__adddf3+0x338>
   2832c:	18800808 	cmpgei	r2,r3,32
   28330:	1000ec26 	beq	r2,zero,286e4 <__adddf3+0x5c4>
   28334:	1c7ff804 	addi	r17,r3,-32
   28338:	19000820 	cmpeqi	r4,r3,32
   2833c:	4c44d83a 	srl	r2,r9,r17
   28340:	2000041e 	bne	r4,zero,28354 <__adddf3+0x234>
   28344:	01001004 	movi	r4,64
   28348:	20c7c83a 	sub	r3,r4,r3
   2834c:	48d2983a 	sll	r9,r9,r3
   28350:	6a5ab03a 	or	r13,r13,r9
   28354:	6822c03a 	cmpne	r17,r13,zero
   28358:	88a2b03a 	or	r17,r17,r2
   2835c:	00004006 	br	28460 <__adddf3+0x340>
   28360:	4b44b03a 	or	r2,r9,r13
   28364:	10008226 	beq	r2,zero,28570 <__adddf3+0x450>
   28368:	18bfffc4 	addi	r2,r3,-1
   2836c:	10011026 	beq	r2,zero,287b0 <__adddf3+0x690>
   28370:	18c1ffd8 	cmpnei	r3,r3,2047
   28374:	18004626 	beq	r3,zero,28490 <__adddf3+0x370>
   28378:	1007883a 	mov	r3,r2
   2837c:	003f8806 	br	281a0 <__adddf3+0x80>
   28380:	90800044 	addi	r2,r18,1
   28384:	1081ff8c 	andi	r2,r2,2046
   28388:	1000a51e 	bne	r2,zero,28620 <__adddf3+0x500>
   2838c:	538ab03a 	or	r5,r10,r14
   28390:	4b44b03a 	or	r2,r9,r13
   28394:	9000f81e 	bne	r18,zero,28778 <__adddf3+0x658>
   28398:	28013726 	beq	r5,zero,28878 <__adddf3+0x758>
   2839c:	10011226 	beq	r2,zero,287e8 <__adddf3+0x6c8>
   283a0:	7363c83a 	sub	r17,r14,r13
   283a4:	7445803a 	cmpltu	r2,r14,r17
   283a8:	5251c83a 	sub	r8,r10,r9
   283ac:	4091c83a 	sub	r8,r8,r2
   283b0:	4080202c 	andhi	r2,r8,128
   283b4:	10018f26 	beq	r2,zero,289f4 <__adddf3+0x8d4>
   283b8:	6ba3c83a 	sub	r17,r13,r14
   283bc:	4a95c83a 	sub	r10,r9,r10
   283c0:	6c51803a 	cmpltu	r8,r13,r17
   283c4:	5211c83a 	sub	r8,r10,r8
   283c8:	3821883a 	mov	r16,r7
   283cc:	003fa306 	br	2825c <__adddf3+0x13c>
   283d0:	4b44b03a 	or	r2,r9,r13
   283d4:	10006626 	beq	r2,zero,28570 <__adddf3+0x450>
   283d8:	18bfffc4 	addi	r2,r3,-1
   283dc:	1000ec26 	beq	r2,zero,28790 <__adddf3+0x670>
   283e0:	18c1ffd8 	cmpnei	r3,r3,2047
   283e4:	18012d26 	beq	r3,zero,2889c <__adddf3+0x77c>
   283e8:	1007883a 	mov	r3,r2
   283ec:	003fcd06 	br	28324 <__adddf3+0x204>
   283f0:	18fff844 	addi	r3,r3,-31
   283f4:	20800820 	cmpeqi	r2,r4,32
   283f8:	40c6d83a 	srl	r3,r8,r3
   283fc:	1000041e 	bne	r2,zero,28410 <__adddf3+0x2f0>
   28400:	00801004 	movi	r2,64
   28404:	1109c83a 	sub	r4,r2,r4
   28408:	4110983a 	sll	r8,r8,r4
   2840c:	8a22b03a 	or	r17,r17,r8
   28410:	8822c03a 	cmpne	r17,r17,zero
   28414:	88e2b03a 	or	r17,r17,r3
   28418:	0011883a 	mov	r8,zero
   2841c:	0025883a 	mov	r18,zero
   28420:	888001cc 	andi	r2,r17,7
   28424:	103f8f1e 	bne	r2,zero,28264 <__adddf3+0x144>
   28428:	8822d0fa 	srli	r17,r17,3
   2842c:	4004977a 	slli	r2,r8,29
   28430:	4014d0fa 	srli	r10,r8,3
   28434:	9007883a 	mov	r3,r18
   28438:	8884b03a 	or	r2,r17,r2
   2843c:	1901ffe0 	cmpeqi	r4,r3,2047
   28440:	2000191e 	bne	r4,zero,284a8 <__adddf3+0x388>
   28444:	02000434 	movhi	r8,16
   28448:	423fffc4 	addi	r8,r8,-1
   2844c:	5210703a 	and	r8,r10,r8
   28450:	18c1ffcc 	andi	r3,r3,2047
   28454:	003f9806 	br	282b8 <__adddf3+0x198>
   28458:	4b62b03a 	or	r17,r9,r13
   2845c:	8822c03a 	cmpne	r17,r17,zero
   28460:	8ba3883a 	add	r17,r17,r14
   28464:	8b91803a 	cmpltu	r8,r17,r14
   28468:	4291883a 	add	r8,r8,r10
   2846c:	4080202c 	andhi	r2,r8,128
   28470:	103feb26 	beq	r2,zero,28420 <__adddf3+0x300>
   28474:	94800044 	addi	r18,r18,1
   28478:	9081ffe0 	cmpeqi	r2,r18,2047
   2847c:	10007426 	beq	r2,zero,28650 <__adddf3+0x530>
   28480:	00c1ffc4 	movi	r3,2047
   28484:	0011883a 	mov	r8,zero
   28488:	0005883a 	mov	r2,zero
   2848c:	003f8a06 	br	282b8 <__adddf3+0x198>
   28490:	500a977a 	slli	r5,r10,29
   28494:	00c80034 	movhi	r3,8192
   28498:	18ffffc4 	addi	r3,r3,-1
   2849c:	5014d0fa 	srli	r10,r10,3
   284a0:	20c4703a 	and	r2,r4,r3
   284a4:	1144b03a 	or	r2,r2,r5
   284a8:	1286b03a 	or	r3,r2,r10
   284ac:	18015426 	beq	r3,zero,28a00 <__adddf3+0x8e0>
   284b0:	00c00434 	movhi	r3,16
   284b4:	18ffffc4 	addi	r3,r3,-1
   284b8:	52000234 	orhi	r8,r10,8
   284bc:	40d0703a 	and	r8,r8,r3
   284c0:	00c1ffc4 	movi	r3,2047
   284c4:	003f7c06 	br	282b8 <__adddf3+0x198>
   284c8:	8809883a 	mov	r4,r17
   284cc:	002a8940 	call	2a894 <__clzsi2>
   284d0:	10c00604 	addi	r3,r2,24
   284d4:	19000808 	cmpgei	r4,r3,32
   284d8:	203f4b26 	beq	r4,zero,28208 <__adddf3+0xe8>
   284dc:	123ffe04 	addi	r8,r2,-8
   284e0:	8a10983a 	sll	r8,r17,r8
   284e4:	0023883a 	mov	r17,zero
   284e8:	1cbf4e0e 	bge	r3,r18,28224 <__adddf3+0x104>
   284ec:	00bfe034 	movhi	r2,65408
   284f0:	10bfffc4 	addi	r2,r2,-1
   284f4:	90e5c83a 	sub	r18,r18,r3
   284f8:	4090703a 	and	r8,r8,r2
   284fc:	003f5706 	br	2825c <__adddf3+0x13c>
   28500:	18002226 	beq	r3,zero,2858c <__adddf3+0x46c>
   28504:	1487c83a 	sub	r3,r2,r18
   28508:	90006e26 	beq	r18,zero,286c4 <__adddf3+0x5a4>
   2850c:	1101ffd8 	cmpnei	r4,r2,2047
   28510:	2000e926 	beq	r4,zero,288b8 <__adddf3+0x798>
   28514:	52802034 	orhi	r10,r10,128
   28518:	19000e48 	cmpgei	r4,r3,57
   2851c:	2000b91e 	bne	r4,zero,28804 <__adddf3+0x6e4>
   28520:	19000808 	cmpgei	r4,r3,32
   28524:	2001101e 	bne	r4,zero,28968 <__adddf3+0x848>
   28528:	01000804 	movi	r4,32
   2852c:	20c9c83a 	sub	r4,r4,r3
   28530:	5122983a 	sll	r17,r10,r4
   28534:	70cad83a 	srl	r5,r14,r3
   28538:	7108983a 	sll	r4,r14,r4
   2853c:	50d4d83a 	srl	r10,r10,r3
   28540:	8962b03a 	or	r17,r17,r5
   28544:	2008c03a 	cmpne	r4,r4,zero
   28548:	8922b03a 	or	r17,r17,r4
   2854c:	4a93883a 	add	r9,r9,r10
   28550:	8b63883a 	add	r17,r17,r13
   28554:	8b51803a 	cmpltu	r8,r17,r13
   28558:	4251883a 	add	r8,r8,r9
   2855c:	1025883a 	mov	r18,r2
   28560:	003fc206 	br	2846c <__adddf3+0x34c>
   28564:	4b62b03a 	or	r17,r9,r13
   28568:	8822c03a 	cmpne	r17,r17,zero
   2856c:	003f1a06 	br	281d8 <__adddf3+0xb8>
   28570:	500c977a 	slli	r6,r10,29
   28574:	01480034 	movhi	r5,8192
   28578:	297fffc4 	addi	r5,r5,-1
   2857c:	2144703a 	and	r2,r4,r5
   28580:	5014d0fa 	srli	r10,r10,3
   28584:	1184b03a 	or	r2,r2,r6
   28588:	003fac06 	br	2843c <__adddf3+0x31c>
   2858c:	90800044 	addi	r2,r18,1
   28590:	1141ff8c 	andi	r5,r2,2046
   28594:	28005e1e 	bne	r5,zero,28710 <__adddf3+0x5f0>
   28598:	5384b03a 	or	r2,r10,r14
   2859c:	9000a71e 	bne	r18,zero,2883c <__adddf3+0x71c>
   285a0:	1000e526 	beq	r2,zero,28938 <__adddf3+0x818>
   285a4:	4b44b03a 	or	r2,r9,r13
   285a8:	10008f26 	beq	r2,zero,287e8 <__adddf3+0x6c8>
   285ac:	7363883a 	add	r17,r14,r13
   285b0:	5255883a 	add	r10,r10,r9
   285b4:	8b91803a 	cmpltu	r8,r17,r14
   285b8:	5211883a 	add	r8,r10,r8
   285bc:	4080202c 	andhi	r2,r8,128
   285c0:	103f9726 	beq	r2,zero,28420 <__adddf3+0x300>
   285c4:	00bfe034 	movhi	r2,65408
   285c8:	10bfffc4 	addi	r2,r2,-1
   285cc:	4090703a 	and	r8,r8,r2
   285d0:	04800044 	movi	r18,1
   285d4:	003f9206 	br	28420 <__adddf3+0x300>
   285d8:	1101ffd8 	cmpnei	r4,r2,2047
   285dc:	20007a26 	beq	r4,zero,287c8 <__adddf3+0x6a8>
   285e0:	52802034 	orhi	r10,r10,128
   285e4:	19000e48 	cmpgei	r4,r3,57
   285e8:	20002e1e 	bne	r4,zero,286a4 <__adddf3+0x584>
   285ec:	19000808 	cmpgei	r4,r3,32
   285f0:	2000871e 	bne	r4,zero,28810 <__adddf3+0x6f0>
   285f4:	01000804 	movi	r4,32
   285f8:	20c9c83a 	sub	r4,r4,r3
   285fc:	5122983a 	sll	r17,r10,r4
   28600:	70cad83a 	srl	r5,r14,r3
   28604:	711c983a 	sll	r14,r14,r4
   28608:	50d4d83a 	srl	r10,r10,r3
   2860c:	8962b03a 	or	r17,r17,r5
   28610:	701cc03a 	cmpne	r14,r14,zero
   28614:	8ba2b03a 	or	r17,r17,r14
   28618:	4a93c83a 	sub	r9,r9,r10
   2861c:	00002306 	br	286ac <__adddf3+0x58c>
   28620:	7363c83a 	sub	r17,r14,r13
   28624:	5267c83a 	sub	r19,r10,r9
   28628:	7451803a 	cmpltu	r8,r14,r17
   2862c:	9a27c83a 	sub	r19,r19,r8
   28630:	9880202c 	andhi	r2,r19,128
   28634:	1000421e 	bne	r2,zero,28740 <__adddf3+0x620>
   28638:	8cc4b03a 	or	r2,r17,r19
   2863c:	103eee1e 	bne	r2,zero,281f8 <__adddf3+0xd8>
   28640:	0015883a 	mov	r10,zero
   28644:	0021883a 	mov	r16,zero
   28648:	003f7e06 	br	28444 <__adddf3+0x324>
   2864c:	04800084 	movi	r18,2
   28650:	00bfe034 	movhi	r2,65408
   28654:	10bfffc4 	addi	r2,r2,-1
   28658:	8806d07a 	srli	r3,r17,1
   2865c:	4090703a 	and	r8,r8,r2
   28660:	400497fa 	slli	r2,r8,31
   28664:	8c40004c 	andi	r17,r17,1
   28668:	1c62b03a 	or	r17,r3,r17
   2866c:	4010d07a 	srli	r8,r8,1
   28670:	1462b03a 	or	r17,r2,r17
   28674:	003ef906 	br	2825c <__adddf3+0x13c>
   28678:	1c7ff804 	addi	r17,r3,-32
   2867c:	19000820 	cmpeqi	r4,r3,32
   28680:	4c44d83a 	srl	r2,r9,r17
   28684:	2000041e 	bne	r4,zero,28698 <__adddf3+0x578>
   28688:	01001004 	movi	r4,64
   2868c:	20c7c83a 	sub	r3,r4,r3
   28690:	48d2983a 	sll	r9,r9,r3
   28694:	6a5ab03a 	or	r13,r13,r9
   28698:	6822c03a 	cmpne	r17,r13,zero
   2869c:	88a2b03a 	or	r17,r17,r2
   286a0:	003ecd06 	br	281d8 <__adddf3+0xb8>
   286a4:	5394b03a 	or	r10,r10,r14
   286a8:	5022c03a 	cmpne	r17,r10,zero
   286ac:	6c63c83a 	sub	r17,r13,r17
   286b0:	6c51803a 	cmpltu	r8,r13,r17
   286b4:	4a11c83a 	sub	r8,r9,r8
   286b8:	3821883a 	mov	r16,r7
   286bc:	1025883a 	mov	r18,r2
   286c0:	003ec806 	br	281e4 <__adddf3+0xc4>
   286c4:	5388b03a 	or	r4,r10,r14
   286c8:	20008226 	beq	r4,zero,288d4 <__adddf3+0x7b4>
   286cc:	193fffc4 	addi	r4,r3,-1
   286d0:	2000b026 	beq	r4,zero,28994 <__adddf3+0x874>
   286d4:	18c1ffd8 	cmpnei	r3,r3,2047
   286d8:	18007726 	beq	r3,zero,288b8 <__adddf3+0x798>
   286dc:	2007883a 	mov	r3,r4
   286e0:	003f8d06 	br	28518 <__adddf3+0x3f8>
   286e4:	00800804 	movi	r2,32
   286e8:	10c5c83a 	sub	r2,r2,r3
   286ec:	68c8d83a 	srl	r4,r13,r3
   286f0:	48a2983a 	sll	r17,r9,r2
   286f4:	689a983a 	sll	r13,r13,r2
   286f8:	48c6d83a 	srl	r3,r9,r3
   286fc:	8922b03a 	or	r17,r17,r4
   28700:	681ac03a 	cmpne	r13,r13,zero
   28704:	8b62b03a 	or	r17,r17,r13
   28708:	50d5883a 	add	r10,r10,r3
   2870c:	003f5406 	br	28460 <__adddf3+0x340>
   28710:	10c1ffe0 	cmpeqi	r3,r2,2047
   28714:	183f5a1e 	bne	r3,zero,28480 <__adddf3+0x360>
   28718:	7351883a 	add	r8,r14,r13
   2871c:	4387803a 	cmpltu	r3,r8,r14
   28720:	5255883a 	add	r10,r10,r9
   28724:	50c7883a 	add	r3,r10,r3
   28728:	401ad07a 	srli	r13,r8,1
   2872c:	182297fa 	slli	r17,r3,31
   28730:	1810d07a 	srli	r8,r3,1
   28734:	1025883a 	mov	r18,r2
   28738:	8b62b03a 	or	r17,r17,r13
   2873c:	003f3806 	br	28420 <__adddf3+0x300>
   28740:	6ba3c83a 	sub	r17,r13,r14
   28744:	4a93c83a 	sub	r9,r9,r10
   28748:	6c51803a 	cmpltu	r8,r13,r17
   2874c:	4a27c83a 	sub	r19,r9,r8
   28750:	3821883a 	mov	r16,r7
   28754:	003ea806 	br	281f8 <__adddf3+0xd8>
   28758:	480a977a 	slli	r5,r9,29
   2875c:	01080034 	movhi	r4,8192
   28760:	213fffc4 	addi	r4,r4,-1
   28764:	3104703a 	and	r2,r6,r4
   28768:	4814d0fa 	srli	r10,r9,3
   2876c:	1144b03a 	or	r2,r2,r5
   28770:	3821883a 	mov	r16,r7
   28774:	003f3106 	br	2843c <__adddf3+0x31c>
   28778:	28005d1e 	bne	r5,zero,288f0 <__adddf3+0x7d0>
   2877c:	1000121e 	bne	r2,zero,287c8 <__adddf3+0x6a8>
   28780:	0021883a 	mov	r16,zero
   28784:	4015883a 	mov	r10,r8
   28788:	00bfffc4 	movi	r2,-1
   2878c:	003f4806 	br	284b0 <__adddf3+0x390>
   28790:	7363883a 	add	r17,r14,r13
   28794:	5255883a 	add	r10,r10,r9
   28798:	8b91803a 	cmpltu	r8,r17,r14
   2879c:	5211883a 	add	r8,r10,r8
   287a0:	4080202c 	andhi	r2,r8,128
   287a4:	103fa91e 	bne	r2,zero,2864c <__adddf3+0x52c>
   287a8:	04800044 	movi	r18,1
   287ac:	003f1c06 	br	28420 <__adddf3+0x300>
   287b0:	7363c83a 	sub	r17,r14,r13
   287b4:	5255c83a 	sub	r10,r10,r9
   287b8:	7451803a 	cmpltu	r8,r14,r17
   287bc:	5211c83a 	sub	r8,r10,r8
   287c0:	04800044 	movi	r18,1
   287c4:	003e8706 	br	281e4 <__adddf3+0xc4>
   287c8:	4806977a 	slli	r3,r9,29
   287cc:	00880034 	movhi	r2,8192
   287d0:	10bfffc4 	addi	r2,r2,-1
   287d4:	3084703a 	and	r2,r6,r2
   287d8:	4814d0fa 	srli	r10,r9,3
   287dc:	10c4b03a 	or	r2,r2,r3
   287e0:	3821883a 	mov	r16,r7
   287e4:	003f3006 	br	284a8 <__adddf3+0x388>
   287e8:	500a977a 	slli	r5,r10,29
   287ec:	00880034 	movhi	r2,8192
   287f0:	10bfffc4 	addi	r2,r2,-1
   287f4:	2084703a 	and	r2,r4,r2
   287f8:	5014d0fa 	srli	r10,r10,3
   287fc:	1144b03a 	or	r2,r2,r5
   28800:	003f1006 	br	28444 <__adddf3+0x324>
   28804:	5394b03a 	or	r10,r10,r14
   28808:	5022c03a 	cmpne	r17,r10,zero
   2880c:	003f5006 	br	28550 <__adddf3+0x430>
   28810:	1c7ff804 	addi	r17,r3,-32
   28814:	19400820 	cmpeqi	r5,r3,32
   28818:	5448d83a 	srl	r4,r10,r17
   2881c:	2800041e 	bne	r5,zero,28830 <__adddf3+0x710>
   28820:	01401004 	movi	r5,64
   28824:	28c7c83a 	sub	r3,r5,r3
   28828:	50d4983a 	sll	r10,r10,r3
   2882c:	729cb03a 	or	r14,r14,r10
   28830:	7022c03a 	cmpne	r17,r14,zero
   28834:	8922b03a 	or	r17,r17,r4
   28838:	003f9c06 	br	286ac <__adddf3+0x58c>
   2883c:	10005a1e 	bne	r2,zero,289a8 <__adddf3+0x888>
   28840:	4804977a 	slli	r2,r9,29
   28844:	00c80034 	movhi	r3,8192
   28848:	18ffffc4 	addi	r3,r3,-1
   2884c:	30cc703a 	and	r6,r6,r3
   28850:	4814d0fa 	srli	r10,r9,3
   28854:	1184b03a 	or	r2,r2,r6
   28858:	003f1306 	br	284a8 <__adddf3+0x388>
   2885c:	6ba3c83a 	sub	r17,r13,r14
   28860:	4a95c83a 	sub	r10,r9,r10
   28864:	6c51803a 	cmpltu	r8,r13,r17
   28868:	5211c83a 	sub	r8,r10,r8
   2886c:	3821883a 	mov	r16,r7
   28870:	04800044 	movi	r18,1
   28874:	003e5b06 	br	281e4 <__adddf3+0xc4>
   28878:	103f7126 	beq	r2,zero,28640 <__adddf3+0x520>
   2887c:	4808977a 	slli	r4,r9,29
   28880:	00880034 	movhi	r2,8192
   28884:	10bfffc4 	addi	r2,r2,-1
   28888:	3084703a 	and	r2,r6,r2
   2888c:	4814d0fa 	srli	r10,r9,3
   28890:	1104b03a 	or	r2,r2,r4
   28894:	3821883a 	mov	r16,r7
   28898:	003eea06 	br	28444 <__adddf3+0x324>
   2889c:	5006977a 	slli	r3,r10,29
   288a0:	00880034 	movhi	r2,8192
   288a4:	10bfffc4 	addi	r2,r2,-1
   288a8:	2084703a 	and	r2,r4,r2
   288ac:	5014d0fa 	srli	r10,r10,3
   288b0:	10c4b03a 	or	r2,r2,r3
   288b4:	003efc06 	br	284a8 <__adddf3+0x388>
   288b8:	4806977a 	slli	r3,r9,29
   288bc:	00880034 	movhi	r2,8192
   288c0:	10bfffc4 	addi	r2,r2,-1
   288c4:	3084703a 	and	r2,r6,r2
   288c8:	4814d0fa 	srli	r10,r9,3
   288cc:	10c4b03a 	or	r2,r2,r3
   288d0:	003ef506 	br	284a8 <__adddf3+0x388>
   288d4:	4808977a 	slli	r4,r9,29
   288d8:	00880034 	movhi	r2,8192
   288dc:	10bfffc4 	addi	r2,r2,-1
   288e0:	3084703a 	and	r2,r6,r2
   288e4:	4814d0fa 	srli	r10,r9,3
   288e8:	1104b03a 	or	r2,r2,r4
   288ec:	003ed306 	br	2843c <__adddf3+0x31c>
   288f0:	500a977a 	slli	r5,r10,29
   288f4:	5014d0fa 	srli	r10,r10,3
   288f8:	10001626 	beq	r2,zero,28954 <__adddf3+0x834>
   288fc:	00c80034 	movhi	r3,8192
   28900:	18ffffc4 	addi	r3,r3,-1
   28904:	20c4703a 	and	r2,r4,r3
   28908:	5100022c 	andhi	r4,r10,8
   2890c:	1144b03a 	or	r2,r2,r5
   28910:	203ee526 	beq	r4,zero,284a8 <__adddf3+0x388>
   28914:	4808d0fa 	srli	r4,r9,3
   28918:	2140022c 	andhi	r5,r4,8
   2891c:	283ee21e 	bne	r5,zero,284a8 <__adddf3+0x388>
   28920:	4812977a 	slli	r9,r9,29
   28924:	30c4703a 	and	r2,r6,r3
   28928:	3821883a 	mov	r16,r7
   2892c:	1244b03a 	or	r2,r2,r9
   28930:	2015883a 	mov	r10,r4
   28934:	003edc06 	br	284a8 <__adddf3+0x388>
   28938:	4804977a 	slli	r2,r9,29
   2893c:	01080034 	movhi	r4,8192
   28940:	213fffc4 	addi	r4,r4,-1
   28944:	310c703a 	and	r6,r6,r4
   28948:	4814d0fa 	srli	r10,r9,3
   2894c:	1184b03a 	or	r2,r2,r6
   28950:	003ebc06 	br	28444 <__adddf3+0x324>
   28954:	00880034 	movhi	r2,8192
   28958:	10bfffc4 	addi	r2,r2,-1
   2895c:	2084703a 	and	r2,r4,r2
   28960:	1144b03a 	or	r2,r2,r5
   28964:	003ed006 	br	284a8 <__adddf3+0x388>
   28968:	193ff804 	addi	r4,r3,-32
   2896c:	19400820 	cmpeqi	r5,r3,32
   28970:	5108d83a 	srl	r4,r10,r4
   28974:	2800041e 	bne	r5,zero,28988 <__adddf3+0x868>
   28978:	01401004 	movi	r5,64
   2897c:	28c7c83a 	sub	r3,r5,r3
   28980:	50d4983a 	sll	r10,r10,r3
   28984:	729cb03a 	or	r14,r14,r10
   28988:	7022c03a 	cmpne	r17,r14,zero
   2898c:	8922b03a 	or	r17,r17,r4
   28990:	003eef06 	br	28550 <__adddf3+0x430>
   28994:	7363883a 	add	r17,r14,r13
   28998:	5255883a 	add	r10,r10,r9
   2899c:	8b51803a 	cmpltu	r8,r17,r13
   289a0:	5211883a 	add	r8,r10,r8
   289a4:	003f7e06 	br	287a0 <__adddf3+0x680>
   289a8:	4b50b03a 	or	r8,r9,r13
   289ac:	500a977a 	slli	r5,r10,29
   289b0:	5014d0fa 	srli	r10,r10,3
   289b4:	403fe726 	beq	r8,zero,28954 <__adddf3+0x834>
   289b8:	00c80034 	movhi	r3,8192
   289bc:	18ffffc4 	addi	r3,r3,-1
   289c0:	20c4703a 	and	r2,r4,r3
   289c4:	5100022c 	andhi	r4,r10,8
   289c8:	1144b03a 	or	r2,r2,r5
   289cc:	203eb626 	beq	r4,zero,284a8 <__adddf3+0x388>
   289d0:	4808d0fa 	srli	r4,r9,3
   289d4:	2140022c 	andhi	r5,r4,8
   289d8:	283eb31e 	bne	r5,zero,284a8 <__adddf3+0x388>
   289dc:	4804977a 	slli	r2,r9,29
   289e0:	30cc703a 	and	r6,r6,r3
   289e4:	3821883a 	mov	r16,r7
   289e8:	3084b03a 	or	r2,r6,r2
   289ec:	2015883a 	mov	r10,r4
   289f0:	003ead06 	br	284a8 <__adddf3+0x388>
   289f4:	8a04b03a 	or	r2,r17,r8
   289f8:	103f1126 	beq	r2,zero,28640 <__adddf3+0x520>
   289fc:	003e8806 	br	28420 <__adddf3+0x300>
   28a00:	0005883a 	mov	r2,zero
   28a04:	00c1ffc4 	movi	r3,2047
   28a08:	0011883a 	mov	r8,zero
   28a0c:	003e2a06 	br	282b8 <__adddf3+0x198>

00028a10 <__divdf3>:
   28a10:	2810d53a 	srli	r8,r5,20
   28a14:	defff004 	addi	sp,sp,-64
   28a18:	dc000615 	stw	r16,24(sp)
   28a1c:	04000434 	movhi	r16,16
   28a20:	df000e15 	stw	fp,56(sp)
   28a24:	ddc00d15 	stw	r23,52(sp)
   28a28:	dd800c15 	stw	r22,48(sp)
   28a2c:	dd000a15 	stw	r20,40(sp)
   28a30:	843fffc4 	addi	r16,r16,-1
   28a34:	dfc00f15 	stw	ra,60(sp)
   28a38:	dd400b15 	stw	r21,44(sp)
   28a3c:	dcc00915 	stw	r19,36(sp)
   28a40:	dc800815 	stw	r18,32(sp)
   28a44:	dc400715 	stw	r17,28(sp)
   28a48:	4201ffcc 	andi	r8,r8,2047
   28a4c:	282ed7fa 	srli	r23,r5,31
   28a50:	3039883a 	mov	fp,r6
   28a54:	382d883a 	mov	r22,r7
   28a58:	2029883a 	mov	r20,r4
   28a5c:	2c20703a 	and	r16,r5,r16
   28a60:	40006826 	beq	r8,zero,28c04 <__divdf3+0x1f4>
   28a64:	4081ffe0 	cmpeqi	r2,r8,2047
   28a68:	1000791e 	bne	r2,zero,28c50 <__divdf3+0x240>
   28a6c:	2026d77a 	srli	r19,r4,29
   28a70:	800a90fa 	slli	r5,r16,3
   28a74:	202890fa 	slli	r20,r4,3
   28a78:	44bf0044 	addi	r18,r8,-1023
   28a7c:	994ab03a 	or	r5,r19,r5
   28a80:	2cc02034 	orhi	r19,r5,128
   28a84:	0021883a 	mov	r16,zero
   28a88:	0023883a 	mov	r17,zero
   28a8c:	b010d53a 	srli	r8,r22,20
   28a90:	00c00434 	movhi	r3,16
   28a94:	18ffffc4 	addi	r3,r3,-1
   28a98:	4201ffcc 	andi	r8,r8,2047
   28a9c:	b02ad7fa 	srli	r21,r22,31
   28aa0:	b0ec703a 	and	r22,r22,r3
   28aa4:	40004626 	beq	r8,zero,28bc0 <__divdf3+0x1b0>
   28aa8:	4081ffe0 	cmpeqi	r2,r8,2047
   28aac:	10006f1e 	bne	r2,zero,28c6c <__divdf3+0x25c>
   28ab0:	b00690fa 	slli	r3,r22,3
   28ab4:	e004d77a 	srli	r2,fp,29
   28ab8:	e01290fa 	slli	r9,fp,3
   28abc:	423f0044 	addi	r8,r8,-1023
   28ac0:	10c6b03a 	or	r3,r2,r3
   28ac4:	1d802034 	orhi	r22,r3,128
   28ac8:	9225c83a 	sub	r18,r18,r8
   28acc:	0007883a 	mov	r3,zero
   28ad0:	80800428 	cmpgeui	r2,r16,16
   28ad4:	bd4ef03a 	xor	r7,r23,r21
   28ad8:	1000a71e 	bne	r2,zero,28d78 <__divdf3+0x368>
   28adc:	800c90ba 	slli	r6,r16,2
   28ae0:	008000f4 	movhi	r2,3
   28ae4:	3085883a 	add	r2,r6,r2
   28ae8:	10a2bc17 	ldw	r2,-29968(r2)
   28aec:	1000683a 	jmp	r2
   28af0:	00028d78 	rdprs	zero,zero,2613
   28af4:	00028b9c 	xori	zero,zero,2606
   28af8:	00028b4c 	andi	zero,zero,2605
   28afc:	00028bac 	andhi	zero,zero,2606
   28b00:	00028b4c 	andi	zero,zero,2605
   28b04:	00028d1c 	xori	zero,zero,2612
   28b08:	00028b4c 	andi	zero,zero,2605
   28b0c:	00028bac 	andhi	zero,zero,2606
   28b10:	00028b9c 	xori	zero,zero,2606
   28b14:	00028b9c 	xori	zero,zero,2606
   28b18:	00028d1c 	xori	zero,zero,2612
   28b1c:	00028bac 	andhi	zero,zero,2606
   28b20:	00028b30 	cmpltui	zero,zero,2604
   28b24:	00028b30 	cmpltui	zero,zero,2604
   28b28:	00028b30 	cmpltui	zero,zero,2604
   28b2c:	00028d34 	movhi	zero,2612
   28b30:	b80f883a 	mov	r7,r23
   28b34:	888000a0 	cmpeqi	r2,r17,2
   28b38:	1000181e 	bne	r2,zero,28b9c <__divdf3+0x18c>
   28b3c:	888000e0 	cmpeqi	r2,r17,3
   28b40:	1001f61e 	bne	r2,zero,2931c <__divdf3+0x90c>
   28b44:	88800060 	cmpeqi	r2,r17,1
   28b48:	10006126 	beq	r2,zero,28cd0 <__divdf3+0x2c0>
   28b4c:	0007883a 	mov	r3,zero
   28b50:	000b883a 	mov	r5,zero
   28b54:	0029883a 	mov	r20,zero
   28b58:	1806953a 	slli	r3,r3,20
   28b5c:	380e97fa 	slli	r7,r7,31
   28b60:	a005883a 	mov	r2,r20
   28b64:	1946b03a 	or	r3,r3,r5
   28b68:	19c6b03a 	or	r3,r3,r7
   28b6c:	dfc00f17 	ldw	ra,60(sp)
   28b70:	df000e17 	ldw	fp,56(sp)
   28b74:	ddc00d17 	ldw	r23,52(sp)
   28b78:	dd800c17 	ldw	r22,48(sp)
   28b7c:	dd400b17 	ldw	r21,44(sp)
   28b80:	dd000a17 	ldw	r20,40(sp)
   28b84:	dcc00917 	ldw	r19,36(sp)
   28b88:	dc800817 	ldw	r18,32(sp)
   28b8c:	dc400717 	ldw	r17,28(sp)
   28b90:	dc000617 	ldw	r16,24(sp)
   28b94:	dec01004 	addi	sp,sp,64
   28b98:	f800283a 	ret
   28b9c:	00c1ffc4 	movi	r3,2047
   28ba0:	000b883a 	mov	r5,zero
   28ba4:	0029883a 	mov	r20,zero
   28ba8:	003feb06 	br	28b58 <__divdf3+0x148>
   28bac:	a80f883a 	mov	r7,r21
   28bb0:	b027883a 	mov	r19,r22
   28bb4:	4829883a 	mov	r20,r9
   28bb8:	1823883a 	mov	r17,r3
   28bbc:	003fdd06 	br	28b34 <__divdf3+0x124>
   28bc0:	b712b03a 	or	r9,r22,fp
   28bc4:	48003e26 	beq	r9,zero,28cc0 <__divdf3+0x2b0>
   28bc8:	b0017726 	beq	r22,zero,291a8 <__divdf3+0x798>
   28bcc:	b009883a 	mov	r4,r22
   28bd0:	002a8940 	call	2a894 <__clzsi2>
   28bd4:	117ffd44 	addi	r5,r2,-11
   28bd8:	01000744 	movi	r4,29
   28bdc:	127ffe04 	addi	r9,r2,-8
   28be0:	2149c83a 	sub	r4,r4,r5
   28be4:	b246983a 	sll	r3,r22,r9
   28be8:	e108d83a 	srl	r4,fp,r4
   28bec:	e252983a 	sll	r9,fp,r9
   28bf0:	20ecb03a 	or	r22,r4,r3
   28bf4:	1491883a 	add	r8,r2,r18
   28bf8:	4480fcc4 	addi	r18,r8,1011
   28bfc:	0007883a 	mov	r3,zero
   28c00:	003fb306 	br	28ad0 <__divdf3+0xc0>
   28c04:	8126b03a 	or	r19,r16,r4
   28c08:	2023883a 	mov	r17,r4
   28c0c:	98002726 	beq	r19,zero,28cac <__divdf3+0x29c>
   28c10:	80017026 	beq	r16,zero,291d4 <__divdf3+0x7c4>
   28c14:	8009883a 	mov	r4,r16
   28c18:	002a8940 	call	2a894 <__clzsi2>
   28c1c:	113ffd44 	addi	r4,r2,-11
   28c20:	00c00744 	movi	r3,29
   28c24:	14fffe04 	addi	r19,r2,-8
   28c28:	1907c83a 	sub	r3,r3,r4
   28c2c:	84ca983a 	sll	r5,r16,r19
   28c30:	88c6d83a 	srl	r3,r17,r3
   28c34:	8ce8983a 	sll	r20,r17,r19
   28c38:	1966b03a 	or	r19,r3,r5
   28c3c:	023f0344 	movi	r8,-1011
   28c40:	40a5c83a 	sub	r18,r8,r2
   28c44:	0021883a 	mov	r16,zero
   28c48:	0023883a 	mov	r17,zero
   28c4c:	003f8f06 	br	28a8c <__divdf3+0x7c>
   28c50:	8126b03a 	or	r19,r16,r4
   28c54:	9800101e 	bne	r19,zero,28c98 <__divdf3+0x288>
   28c58:	0029883a 	mov	r20,zero
   28c5c:	04000204 	movi	r16,8
   28c60:	0481ffc4 	movi	r18,2047
   28c64:	04400084 	movi	r17,2
   28c68:	003f8806 	br	28a8c <__divdf3+0x7c>
   28c6c:	b712b03a 	or	r9,r22,fp
   28c70:	94be0044 	addi	r18,r18,-2047
   28c74:	4800041e 	bne	r9,zero,28c88 <__divdf3+0x278>
   28c78:	84000094 	ori	r16,r16,2
   28c7c:	002d883a 	mov	r22,zero
   28c80:	00c00084 	movi	r3,2
   28c84:	003f9206 	br	28ad0 <__divdf3+0xc0>
   28c88:	840000d4 	ori	r16,r16,3
   28c8c:	e013883a 	mov	r9,fp
   28c90:	00c000c4 	movi	r3,3
   28c94:	003f8e06 	br	28ad0 <__divdf3+0xc0>
   28c98:	8027883a 	mov	r19,r16
   28c9c:	0481ffc4 	movi	r18,2047
   28ca0:	04000304 	movi	r16,12
   28ca4:	044000c4 	movi	r17,3
   28ca8:	003f7806 	br	28a8c <__divdf3+0x7c>
   28cac:	0029883a 	mov	r20,zero
   28cb0:	04000104 	movi	r16,4
   28cb4:	0025883a 	mov	r18,zero
   28cb8:	04400044 	movi	r17,1
   28cbc:	003f7306 	br	28a8c <__divdf3+0x7c>
   28cc0:	84000054 	ori	r16,r16,1
   28cc4:	002d883a 	mov	r22,zero
   28cc8:	00c00044 	movi	r3,1
   28ccc:	003f8006 	br	28ad0 <__divdf3+0xc0>
   28cd0:	9440ffc4 	addi	r17,r18,1023
   28cd4:	0441050e 	bge	zero,r17,290ec <__divdf3+0x6dc>
   28cd8:	a08001cc 	andi	r2,r20,7
   28cdc:	10016c1e 	bne	r2,zero,29290 <__divdf3+0x880>
   28ce0:	a008d0fa 	srli	r4,r20,3
   28ce4:	9880402c 	andhi	r2,r19,256
   28ce8:	10000426 	beq	r2,zero,28cfc <__divdf3+0x2ec>
   28cec:	00bfc034 	movhi	r2,65280
   28cf0:	10bfffc4 	addi	r2,r2,-1
   28cf4:	98a6703a 	and	r19,r19,r2
   28cf8:	94410004 	addi	r17,r18,1024
   28cfc:	8881ffc8 	cmpgei	r2,r17,2047
   28d00:	103fa61e 	bne	r2,zero,28b9c <__divdf3+0x18c>
   28d04:	9828977a 	slli	r20,r19,29
   28d08:	980a927a 	slli	r5,r19,9
   28d0c:	88c1ffcc 	andi	r3,r17,2047
   28d10:	a128b03a 	or	r20,r20,r4
   28d14:	280ad33a 	srli	r5,r5,12
   28d18:	003f8f06 	br	28b58 <__divdf3+0x148>
   28d1c:	01400434 	movhi	r5,16
   28d20:	000f883a 	mov	r7,zero
   28d24:	297fffc4 	addi	r5,r5,-1
   28d28:	053fffc4 	movi	r20,-1
   28d2c:	00c1ffc4 	movi	r3,2047
   28d30:	003f8906 	br	28b58 <__divdf3+0x148>
   28d34:	9880022c 	andhi	r2,r19,8
   28d38:	10000926 	beq	r2,zero,28d60 <__divdf3+0x350>
   28d3c:	b080022c 	andhi	r2,r22,8
   28d40:	1000071e 	bne	r2,zero,28d60 <__divdf3+0x350>
   28d44:	00800434 	movhi	r2,16
   28d48:	b1400234 	orhi	r5,r22,8
   28d4c:	10bfffc4 	addi	r2,r2,-1
   28d50:	288a703a 	and	r5,r5,r2
   28d54:	a80f883a 	mov	r7,r21
   28d58:	4829883a 	mov	r20,r9
   28d5c:	003ff306 	br	28d2c <__divdf3+0x31c>
   28d60:	00800434 	movhi	r2,16
   28d64:	99400234 	orhi	r5,r19,8
   28d68:	10bfffc4 	addi	r2,r2,-1
   28d6c:	288a703a 	and	r5,r5,r2
   28d70:	b80f883a 	mov	r7,r23
   28d74:	003fed06 	br	28d2c <__divdf3+0x31c>
   28d78:	b4c10536 	bltu	r22,r19,29190 <__divdf3+0x780>
   28d7c:	b4c10326 	beq	r22,r19,2918c <__divdf3+0x77c>
   28d80:	94bfffc4 	addi	r18,r18,-1
   28d84:	a039883a 	mov	fp,r20
   28d88:	9821883a 	mov	r16,r19
   28d8c:	0023883a 	mov	r17,zero
   28d90:	b006923a 	slli	r3,r22,8
   28d94:	482cd63a 	srli	r22,r9,24
   28d98:	8009883a 	mov	r4,r16
   28d9c:	182ed43a 	srli	r23,r3,16
   28da0:	b0ecb03a 	or	r22,r22,r3
   28da4:	d9c00015 	stw	r7,0(sp)
   28da8:	b80b883a 	mov	r5,r23
   28dac:	482a923a 	slli	r21,r9,8
   28db0:	b53fffcc 	andi	r20,r22,65535
   28db4:	0026a8c0 	call	26a8c <__udivsi3>
   28db8:	100b883a 	mov	r5,r2
   28dbc:	a009883a 	mov	r4,r20
   28dc0:	1027883a 	mov	r19,r2
   28dc4:	0026b4c0 	call	26b4c <__mulsi3>
   28dc8:	8009883a 	mov	r4,r16
   28dcc:	b80b883a 	mov	r5,r23
   28dd0:	1021883a 	mov	r16,r2
   28dd4:	0026af00 	call	26af0 <__umodsi3>
   28dd8:	1004943a 	slli	r2,r2,16
   28ddc:	e008d43a 	srli	r4,fp,16
   28de0:	d9c00017 	ldw	r7,0(sp)
   28de4:	2088b03a 	or	r4,r4,r2
   28de8:	2400042e 	bgeu	r4,r16,28dfc <__divdf3+0x3ec>
   28dec:	2589883a 	add	r4,r4,r22
   28df0:	98bfffc4 	addi	r2,r19,-1
   28df4:	2581082e 	bgeu	r4,r22,29218 <__divdf3+0x808>
   28df8:	1027883a 	mov	r19,r2
   28dfc:	2421c83a 	sub	r16,r4,r16
   28e00:	b80b883a 	mov	r5,r23
   28e04:	8009883a 	mov	r4,r16
   28e08:	d9c00215 	stw	r7,8(sp)
   28e0c:	0026a8c0 	call	26a8c <__udivsi3>
   28e10:	100b883a 	mov	r5,r2
   28e14:	a009883a 	mov	r4,r20
   28e18:	d8800115 	stw	r2,4(sp)
   28e1c:	0026b4c0 	call	26b4c <__mulsi3>
   28e20:	b80b883a 	mov	r5,r23
   28e24:	8009883a 	mov	r4,r16
   28e28:	d8800015 	stw	r2,0(sp)
   28e2c:	0026af00 	call	26af0 <__umodsi3>
   28e30:	100c943a 	slli	r6,r2,16
   28e34:	d8c00017 	ldw	r3,0(sp)
   28e38:	e73fffcc 	andi	fp,fp,65535
   28e3c:	e18cb03a 	or	r6,fp,r6
   28e40:	da000117 	ldw	r8,4(sp)
   28e44:	d9c00217 	ldw	r7,8(sp)
   28e48:	30c0042e 	bgeu	r6,r3,28e5c <__divdf3+0x44c>
   28e4c:	358d883a 	add	r6,r6,r22
   28e50:	40bfffc4 	addi	r2,r8,-1
   28e54:	3580ec2e 	bgeu	r6,r22,29208 <__divdf3+0x7f8>
   28e58:	1011883a 	mov	r8,r2
   28e5c:	9826943a 	slli	r19,r19,16
   28e60:	af3fffcc 	andi	fp,r21,65535
   28e64:	30c7c83a 	sub	r3,r6,r3
   28e68:	9a26b03a 	or	r19,r19,r8
   28e6c:	9810d43a 	srli	r8,r19,16
   28e70:	9abfffcc 	andi	r10,r19,65535
   28e74:	5009883a 	mov	r4,r10
   28e78:	e00b883a 	mov	r5,fp
   28e7c:	d9c00515 	stw	r7,20(sp)
   28e80:	d8c00315 	stw	r3,12(sp)
   28e84:	da800415 	stw	r10,16(sp)
   28e88:	da000015 	stw	r8,0(sp)
   28e8c:	0026b4c0 	call	26b4c <__mulsi3>
   28e90:	da000017 	ldw	r8,0(sp)
   28e94:	e00b883a 	mov	r5,fp
   28e98:	d8800215 	stw	r2,8(sp)
   28e9c:	4009883a 	mov	r4,r8
   28ea0:	0026b4c0 	call	26b4c <__mulsi3>
   28ea4:	da000017 	ldw	r8,0(sp)
   28ea8:	a820d43a 	srli	r16,r21,16
   28eac:	d8800115 	stw	r2,4(sp)
   28eb0:	4009883a 	mov	r4,r8
   28eb4:	800b883a 	mov	r5,r16
   28eb8:	0026b4c0 	call	26b4c <__mulsi3>
   28ebc:	da800417 	ldw	r10,16(sp)
   28ec0:	8009883a 	mov	r4,r16
   28ec4:	d8800015 	stw	r2,0(sp)
   28ec8:	500b883a 	mov	r5,r10
   28ecc:	0026b4c0 	call	26b4c <__mulsi3>
   28ed0:	d9800217 	ldw	r6,8(sp)
   28ed4:	da000117 	ldw	r8,4(sp)
   28ed8:	da400017 	ldw	r9,0(sp)
   28edc:	3008d43a 	srli	r4,r6,16
   28ee0:	1205883a 	add	r2,r2,r8
   28ee4:	d8c00317 	ldw	r3,12(sp)
   28ee8:	2089883a 	add	r4,r4,r2
   28eec:	d9c00517 	ldw	r7,20(sp)
   28ef0:	2200022e 	bgeu	r4,r8,28efc <__divdf3+0x4ec>
   28ef4:	00800074 	movhi	r2,1
   28ef8:	4893883a 	add	r9,r9,r2
   28efc:	200ad43a 	srli	r5,r4,16
   28f00:	2008943a 	slli	r4,r4,16
   28f04:	31bfffcc 	andi	r6,r6,65535
   28f08:	2a4b883a 	add	r5,r5,r9
   28f0c:	218d883a 	add	r6,r4,r6
   28f10:	19409436 	bltu	r3,r5,29164 <__divdf3+0x754>
   28f14:	19409226 	beq	r3,r5,29160 <__divdf3+0x750>
   28f18:	898dc83a 	sub	r6,r17,r6
   28f1c:	89a3803a 	cmpltu	r17,r17,r6
   28f20:	1947c83a 	sub	r3,r3,r5
   28f24:	1c47c83a 	sub	r3,r3,r17
   28f28:	9440ffc4 	addi	r17,r18,1023
   28f2c:	b0c0d326 	beq	r22,r3,2927c <__divdf3+0x86c>
   28f30:	1809883a 	mov	r4,r3
   28f34:	b80b883a 	mov	r5,r23
   28f38:	d9800315 	stw	r6,12(sp)
   28f3c:	d9c00215 	stw	r7,8(sp)
   28f40:	d8c00015 	stw	r3,0(sp)
   28f44:	0026a8c0 	call	26a8c <__udivsi3>
   28f48:	100b883a 	mov	r5,r2
   28f4c:	a009883a 	mov	r4,r20
   28f50:	d8800115 	stw	r2,4(sp)
   28f54:	0026b4c0 	call	26b4c <__mulsi3>
   28f58:	d8c00017 	ldw	r3,0(sp)
   28f5c:	b80b883a 	mov	r5,r23
   28f60:	d8800015 	stw	r2,0(sp)
   28f64:	1809883a 	mov	r4,r3
   28f68:	0026af00 	call	26af0 <__umodsi3>
   28f6c:	d9800317 	ldw	r6,12(sp)
   28f70:	1006943a 	slli	r3,r2,16
   28f74:	da400017 	ldw	r9,0(sp)
   28f78:	3008d43a 	srli	r4,r6,16
   28f7c:	da000117 	ldw	r8,4(sp)
   28f80:	d9c00217 	ldw	r7,8(sp)
   28f84:	20c6b03a 	or	r3,r4,r3
   28f88:	1a40062e 	bgeu	r3,r9,28fa4 <__divdf3+0x594>
   28f8c:	1d87883a 	add	r3,r3,r22
   28f90:	40bfffc4 	addi	r2,r8,-1
   28f94:	1d80c836 	bltu	r3,r22,292b8 <__divdf3+0x8a8>
   28f98:	1a40c72e 	bgeu	r3,r9,292b8 <__divdf3+0x8a8>
   28f9c:	423fff84 	addi	r8,r8,-2
   28fa0:	1d87883a 	add	r3,r3,r22
   28fa4:	1a47c83a 	sub	r3,r3,r9
   28fa8:	1809883a 	mov	r4,r3
   28fac:	b80b883a 	mov	r5,r23
   28fb0:	d9800415 	stw	r6,16(sp)
   28fb4:	d9c00315 	stw	r7,12(sp)
   28fb8:	da000215 	stw	r8,8(sp)
   28fbc:	d8c00115 	stw	r3,4(sp)
   28fc0:	0026a8c0 	call	26a8c <__udivsi3>
   28fc4:	100b883a 	mov	r5,r2
   28fc8:	a009883a 	mov	r4,r20
   28fcc:	d8800015 	stw	r2,0(sp)
   28fd0:	0026b4c0 	call	26b4c <__mulsi3>
   28fd4:	d8c00117 	ldw	r3,4(sp)
   28fd8:	b80b883a 	mov	r5,r23
   28fdc:	102f883a 	mov	r23,r2
   28fe0:	1809883a 	mov	r4,r3
   28fe4:	0026af00 	call	26af0 <__umodsi3>
   28fe8:	d9800417 	ldw	r6,16(sp)
   28fec:	1004943a 	slli	r2,r2,16
   28ff0:	da400017 	ldw	r9,0(sp)
   28ff4:	31bfffcc 	andi	r6,r6,65535
   28ff8:	308cb03a 	or	r6,r6,r2
   28ffc:	da000217 	ldw	r8,8(sp)
   29000:	d9c00317 	ldw	r7,12(sp)
   29004:	35c0062e 	bgeu	r6,r23,29020 <__divdf3+0x610>
   29008:	358d883a 	add	r6,r6,r22
   2900c:	48bfffc4 	addi	r2,r9,-1
   29010:	3580a736 	bltu	r6,r22,292b0 <__divdf3+0x8a0>
   29014:	35c0a62e 	bgeu	r6,r23,292b0 <__divdf3+0x8a0>
   29018:	4a7fff84 	addi	r9,r9,-2
   2901c:	358d883a 	add	r6,r6,r22
   29020:	4028943a 	slli	r20,r8,16
   29024:	35d5c83a 	sub	r10,r6,r23
   29028:	e009883a 	mov	r4,fp
   2902c:	a268b03a 	or	r20,r20,r9
   29030:	a23fffcc 	andi	r8,r20,65535
   29034:	a02ed43a 	srli	r23,r20,16
   29038:	400b883a 	mov	r5,r8
   2903c:	d9c00315 	stw	r7,12(sp)
   29040:	da800215 	stw	r10,8(sp)
   29044:	da000115 	stw	r8,4(sp)
   29048:	0026b4c0 	call	26b4c <__mulsi3>
   2904c:	e00b883a 	mov	r5,fp
   29050:	b809883a 	mov	r4,r23
   29054:	1039883a 	mov	fp,r2
   29058:	0026b4c0 	call	26b4c <__mulsi3>
   2905c:	8009883a 	mov	r4,r16
   29060:	b80b883a 	mov	r5,r23
   29064:	d8800015 	stw	r2,0(sp)
   29068:	0026b4c0 	call	26b4c <__mulsi3>
   2906c:	da000117 	ldw	r8,4(sp)
   29070:	8009883a 	mov	r4,r16
   29074:	1021883a 	mov	r16,r2
   29078:	400b883a 	mov	r5,r8
   2907c:	0026b4c0 	call	26b4c <__mulsi3>
   29080:	d9800017 	ldw	r6,0(sp)
   29084:	e006d43a 	srli	r3,fp,16
   29088:	da800217 	ldw	r10,8(sp)
   2908c:	1185883a 	add	r2,r2,r6
   29090:	1887883a 	add	r3,r3,r2
   29094:	d9c00317 	ldw	r7,12(sp)
   29098:	1980022e 	bgeu	r3,r6,290a4 <__divdf3+0x694>
   2909c:	00800074 	movhi	r2,1
   290a0:	80a1883a 	add	r16,r16,r2
   290a4:	1808d43a 	srli	r4,r3,16
   290a8:	1806943a 	slli	r3,r3,16
   290ac:	e73fffcc 	andi	fp,fp,65535
   290b0:	2409883a 	add	r4,r4,r16
   290b4:	1f07883a 	add	r3,r3,fp
   290b8:	51000436 	bltu	r10,r4,290cc <__divdf3+0x6bc>
   290bc:	51000226 	beq	r10,r4,290c8 <__divdf3+0x6b8>
   290c0:	a5000054 	ori	r20,r20,1
   290c4:	003f0306 	br	28cd4 <__divdf3+0x2c4>
   290c8:	183f0226 	beq	r3,zero,28cd4 <__divdf3+0x2c4>
   290cc:	b28d883a 	add	r6,r22,r10
   290d0:	a0bfffc4 	addi	r2,r20,-1
   290d4:	35806536 	bltu	r6,r22,2926c <__divdf3+0x85c>
   290d8:	31008036 	bltu	r6,r4,292dc <__divdf3+0x8cc>
   290dc:	31009426 	beq	r6,r4,29330 <__divdf3+0x920>
   290e0:	1029883a 	mov	r20,r2
   290e4:	003ff606 	br	290c0 <__divdf3+0x6b0>
   290e8:	053fffc4 	movi	r20,-1
   290ec:	01400044 	movi	r5,1
   290f0:	2c4bc83a 	sub	r5,r5,r17
   290f4:	28800e48 	cmpgei	r2,r5,57
   290f8:	103e941e 	bne	r2,zero,28b4c <__divdf3+0x13c>
   290fc:	28800808 	cmpgei	r2,r5,32
   29100:	1000491e 	bne	r2,zero,29228 <__divdf3+0x818>
   29104:	92010784 	addi	r8,r18,1054
   29108:	9a04983a 	sll	r2,r19,r8
   2910c:	a146d83a 	srl	r3,r20,r5
   29110:	a210983a 	sll	r8,r20,r8
   29114:	994ad83a 	srl	r5,r19,r5
   29118:	10e8b03a 	or	r20,r2,r3
   2911c:	4010c03a 	cmpne	r8,r8,zero
   29120:	a228b03a 	or	r20,r20,r8
   29124:	a08001cc 	andi	r2,r20,7
   29128:	10000726 	beq	r2,zero,29148 <__divdf3+0x738>
   2912c:	a08003cc 	andi	r2,r20,15
   29130:	10800120 	cmpeqi	r2,r2,4
   29134:	1000041e 	bne	r2,zero,29148 <__divdf3+0x738>
   29138:	a0800104 	addi	r2,r20,4
   2913c:	1529803a 	cmpltu	r20,r2,r20
   29140:	2d0b883a 	add	r5,r5,r20
   29144:	1029883a 	mov	r20,r2
   29148:	2880202c 	andhi	r2,r5,128
   2914c:	10006f26 	beq	r2,zero,2930c <__divdf3+0x8fc>
   29150:	00c00044 	movi	r3,1
   29154:	000b883a 	mov	r5,zero
   29158:	0029883a 	mov	r20,zero
   2915c:	003e7e06 	br	28b58 <__divdf3+0x148>
   29160:	89bf6d2e 	bgeu	r17,r6,28f18 <__divdf3+0x508>
   29164:	8d63883a 	add	r17,r17,r21
   29168:	8d45803a 	cmpltu	r2,r17,r21
   2916c:	1585883a 	add	r2,r2,r22
   29170:	1887883a 	add	r3,r3,r2
   29174:	98bfffc4 	addi	r2,r19,-1
   29178:	b0c0202e 	bgeu	r22,r3,291fc <__divdf3+0x7ec>
   2917c:	19405136 	bltu	r3,r5,292c4 <__divdf3+0x8b4>
   29180:	28c04f26 	beq	r5,r3,292c0 <__divdf3+0x8b0>
   29184:	1027883a 	mov	r19,r2
   29188:	003f6306 	br	28f18 <__divdf3+0x508>
   2918c:	a27efc36 	bltu	r20,r9,28d80 <__divdf3+0x370>
   29190:	983897fa 	slli	fp,r19,31
   29194:	a004d07a 	srli	r2,r20,1
   29198:	9820d07a 	srli	r16,r19,1
   2919c:	a02297fa 	slli	r17,r20,31
   291a0:	e0b8b03a 	or	fp,fp,r2
   291a4:	003efa06 	br	28d90 <__divdf3+0x380>
   291a8:	e009883a 	mov	r4,fp
   291ac:	002a8940 	call	2a894 <__clzsi2>
   291b0:	11400544 	addi	r5,r2,21
   291b4:	29000748 	cmpgei	r4,r5,29
   291b8:	1007883a 	mov	r3,r2
   291bc:	10800804 	addi	r2,r2,32
   291c0:	203e8526 	beq	r4,zero,28bd8 <__divdf3+0x1c8>
   291c4:	18fffe04 	addi	r3,r3,-8
   291c8:	e0ec983a 	sll	r22,fp,r3
   291cc:	0013883a 	mov	r9,zero
   291d0:	003e8806 	br	28bf4 <__divdf3+0x1e4>
   291d4:	002a8940 	call	2a894 <__clzsi2>
   291d8:	11000544 	addi	r4,r2,21
   291dc:	20c00748 	cmpgei	r3,r4,29
   291e0:	100b883a 	mov	r5,r2
   291e4:	10800804 	addi	r2,r2,32
   291e8:	183e8d26 	beq	r3,zero,28c20 <__divdf3+0x210>
   291ec:	297ffe04 	addi	r5,r5,-8
   291f0:	a166983a 	sll	r19,r20,r5
   291f4:	0029883a 	mov	r20,zero
   291f8:	003e9006 	br	28c3c <__divdf3+0x22c>
   291fc:	b0ffe11e 	bne	r22,r3,29184 <__divdf3+0x774>
   29200:	8d7fe036 	bltu	r17,r21,29184 <__divdf3+0x774>
   29204:	003fdd06 	br	2917c <__divdf3+0x76c>
   29208:	30ff132e 	bgeu	r6,r3,28e58 <__divdf3+0x448>
   2920c:	423fff84 	addi	r8,r8,-2
   29210:	358d883a 	add	r6,r6,r22
   29214:	003f1106 	br	28e5c <__divdf3+0x44c>
   29218:	243ef72e 	bgeu	r4,r16,28df8 <__divdf3+0x3e8>
   2921c:	9cffff84 	addi	r19,r19,-2
   29220:	2589883a 	add	r4,r4,r22
   29224:	003ef506 	br	28dfc <__divdf3+0x3ec>
   29228:	00fff844 	movi	r3,-31
   2922c:	1c47c83a 	sub	r3,r3,r17
   29230:	29400820 	cmpeqi	r5,r5,32
   29234:	98c6d83a 	srl	r3,r19,r3
   29238:	2800031e 	bne	r5,zero,29248 <__divdf3+0x838>
   2923c:	91410f84 	addi	r5,r18,1086
   29240:	994a983a 	sll	r5,r19,r5
   29244:	a168b03a 	or	r20,r20,r5
   29248:	a028c03a 	cmpne	r20,r20,zero
   2924c:	a0e8b03a 	or	r20,r20,r3
   29250:	a4c001cc 	andi	r19,r20,7
   29254:	9800291e 	bne	r19,zero,292fc <__divdf3+0x8ec>
   29258:	000b883a 	mov	r5,zero
   2925c:	a028d0fa 	srli	r20,r20,3
   29260:	0007883a 	mov	r3,zero
   29264:	a4e8b03a 	or	r20,r20,r19
   29268:	003e3b06 	br	28b58 <__divdf3+0x148>
   2926c:	1029883a 	mov	r20,r2
   29270:	313f931e 	bne	r6,r4,290c0 <__divdf3+0x6b0>
   29274:	1d7f921e 	bne	r3,r21,290c0 <__divdf3+0x6b0>
   29278:	003e9606 	br	28cd4 <__divdf3+0x2c4>
   2927c:	047f9a0e 	bge	zero,r17,290e8 <__divdf3+0x6d8>
   29280:	0009883a 	mov	r4,zero
   29284:	05000044 	movi	r20,1
   29288:	9d27883a 	add	r19,r19,r20
   2928c:	003e9506 	br	28ce4 <__divdf3+0x2d4>
   29290:	a08003cc 	andi	r2,r20,15
   29294:	10800118 	cmpnei	r2,r2,4
   29298:	103e9126 	beq	r2,zero,28ce0 <__divdf3+0x2d0>
   2929c:	a1000104 	addi	r4,r20,4
   292a0:	00bffec4 	movi	r2,-5
   292a4:	2008d0fa 	srli	r4,r4,3
   292a8:	1529803a 	cmpltu	r20,r2,r20
   292ac:	003ff606 	br	29288 <__divdf3+0x878>
   292b0:	1013883a 	mov	r9,r2
   292b4:	003f5a06 	br	29020 <__divdf3+0x610>
   292b8:	1011883a 	mov	r8,r2
   292bc:	003f3906 	br	28fa4 <__divdf3+0x594>
   292c0:	89bfb02e 	bgeu	r17,r6,29184 <__divdf3+0x774>
   292c4:	8d63883a 	add	r17,r17,r21
   292c8:	8d45803a 	cmpltu	r2,r17,r21
   292cc:	1585883a 	add	r2,r2,r22
   292d0:	9cffff84 	addi	r19,r19,-2
   292d4:	1887883a 	add	r3,r3,r2
   292d8:	003f0f06 	br	28f18 <__divdf3+0x508>
   292dc:	ad45883a 	add	r2,r21,r21
   292e0:	156b803a 	cmpltu	r21,r2,r21
   292e4:	adad883a 	add	r22,r21,r22
   292e8:	358d883a 	add	r6,r6,r22
   292ec:	a53fff84 	addi	r20,r20,-2
   292f0:	102b883a 	mov	r21,r2
   292f4:	313fdf26 	beq	r6,r4,29274 <__divdf3+0x864>
   292f8:	003f7106 	br	290c0 <__divdf3+0x6b0>
   292fc:	a08003cc 	andi	r2,r20,15
   29300:	10800118 	cmpnei	r2,r2,4
   29304:	000b883a 	mov	r5,zero
   29308:	103f8b1e 	bne	r2,zero,29138 <__divdf3+0x728>
   2930c:	2804927a 	slli	r2,r5,9
   29310:	2826977a 	slli	r19,r5,29
   29314:	100ad33a 	srli	r5,r2,12
   29318:	003fd006 	br	2925c <__divdf3+0x84c>
   2931c:	00800434 	movhi	r2,16
   29320:	99400234 	orhi	r5,r19,8
   29324:	10bfffc4 	addi	r2,r2,-1
   29328:	288a703a 	and	r5,r5,r2
   2932c:	003e7f06 	br	28d2c <__divdf3+0x31c>
   29330:	a8ffea36 	bltu	r21,r3,292dc <__divdf3+0x8cc>
   29334:	1029883a 	mov	r20,r2
   29338:	1d7f611e 	bne	r3,r21,290c0 <__divdf3+0x6b0>
   2933c:	003e6506 	br	28cd4 <__divdf3+0x2c4>

00029340 <__gedf2>:
   29340:	2810d53a 	srli	r8,r5,20
   29344:	3812d53a 	srli	r9,r7,20
   29348:	00c00434 	movhi	r3,16
   2934c:	4201ffcc 	andi	r8,r8,2047
   29350:	18ffffc4 	addi	r3,r3,-1
   29354:	4281ffd8 	cmpnei	r10,r8,2047
   29358:	2816d7fa 	srli	r11,r5,31
   2935c:	3804d7fa 	srli	r2,r7,31
   29360:	28ca703a 	and	r5,r5,r3
   29364:	38ce703a 	and	r7,r7,r3
   29368:	48c1ffcc 	andi	r3,r9,2047
   2936c:	50000a26 	beq	r10,zero,29398 <__gedf2+0x58>
   29370:	1a41ffd8 	cmpnei	r9,r3,2047
   29374:	48000c26 	beq	r9,zero,293a8 <__gedf2+0x68>
   29378:	4000171e 	bne	r8,zero,293d8 <__gedf2+0x98>
   2937c:	2912b03a 	or	r9,r5,r4
   29380:	1800121e 	bne	r3,zero,293cc <__gedf2+0x8c>
   29384:	3994b03a 	or	r10,r7,r6
   29388:	5000101e 	bne	r10,zero,293cc <__gedf2+0x8c>
   2938c:	48000a1e 	bne	r9,zero,293b8 <__gedf2+0x78>
   29390:	0005883a 	mov	r2,zero
   29394:	f800283a 	ret
   29398:	2912b03a 	or	r9,r5,r4
   2939c:	48001d1e 	bne	r9,zero,29414 <__gedf2+0xd4>
   293a0:	1a41ffe0 	cmpeqi	r9,r3,2047
   293a4:	48000c26 	beq	r9,zero,293d8 <__gedf2+0x98>
   293a8:	3992b03a 	or	r9,r7,r6
   293ac:	4800191e 	bne	r9,zero,29414 <__gedf2+0xd4>
   293b0:	40000526 	beq	r8,zero,293c8 <__gedf2+0x88>
   293b4:	58800c26 	beq	r11,r2,293e8 <__gedf2+0xa8>
   293b8:	00800044 	movi	r2,1
   293bc:	58000526 	beq	r11,zero,293d4 <__gedf2+0x94>
   293c0:	00bfffc4 	movi	r2,-1
   293c4:	f800283a 	ret
   293c8:	2912b03a 	or	r9,r5,r4
   293cc:	483ff91e 	bne	r9,zero,293b4 <__gedf2+0x74>
   293d0:	103ffb26 	beq	r2,zero,293c0 <__gedf2+0x80>
   293d4:	f800283a 	ret
   293d8:	183ff61e 	bne	r3,zero,293b4 <__gedf2+0x74>
   293dc:	3992b03a 	or	r9,r7,r6
   293e0:	483ff41e 	bne	r9,zero,293b4 <__gedf2+0x74>
   293e4:	003ff406 	br	293b8 <__gedf2+0x78>
   293e8:	1a000716 	blt	r3,r8,29408 <__gedf2+0xc8>
   293ec:	40fff816 	blt	r8,r3,293d0 <__gedf2+0x90>
   293f0:	397ff136 	bltu	r7,r5,293b8 <__gedf2+0x78>
   293f4:	29c00926 	beq	r5,r7,2941c <__gedf2+0xdc>
   293f8:	29ffe52e 	bgeu	r5,r7,29390 <__gedf2+0x50>
   293fc:	583ff026 	beq	r11,zero,293c0 <__gedf2+0x80>
   29400:	5805883a 	mov	r2,r11
   29404:	f800283a 	ret
   29408:	103fed1e 	bne	r2,zero,293c0 <__gedf2+0x80>
   2940c:	00800044 	movi	r2,1
   29410:	f800283a 	ret
   29414:	00bfff84 	movi	r2,-2
   29418:	f800283a 	ret
   2941c:	313fe636 	bltu	r6,r4,293b8 <__gedf2+0x78>
   29420:	21bfdb2e 	bgeu	r4,r6,29390 <__gedf2+0x50>
   29424:	003ff506 	br	293fc <__gedf2+0xbc>

00029428 <__ledf2>:
   29428:	2810d53a 	srli	r8,r5,20
   2942c:	3812d53a 	srli	r9,r7,20
   29430:	00c00434 	movhi	r3,16
   29434:	4201ffcc 	andi	r8,r8,2047
   29438:	18ffffc4 	addi	r3,r3,-1
   2943c:	4281ffd8 	cmpnei	r10,r8,2047
   29440:	2816d7fa 	srli	r11,r5,31
   29444:	3804d7fa 	srli	r2,r7,31
   29448:	28ca703a 	and	r5,r5,r3
   2944c:	38ce703a 	and	r7,r7,r3
   29450:	48c1ffcc 	andi	r3,r9,2047
   29454:	50000a26 	beq	r10,zero,29480 <__ledf2+0x58>
   29458:	1a41ffd8 	cmpnei	r9,r3,2047
   2945c:	48000c26 	beq	r9,zero,29490 <__ledf2+0x68>
   29460:	4000191e 	bne	r8,zero,294c8 <__ledf2+0xa0>
   29464:	2912b03a 	or	r9,r5,r4
   29468:	18000d1e 	bne	r3,zero,294a0 <__ledf2+0x78>
   2946c:	3994b03a 	or	r10,r7,r6
   29470:	50000b1e 	bne	r10,zero,294a0 <__ledf2+0x78>
   29474:	48000c1e 	bne	r9,zero,294a8 <__ledf2+0x80>
   29478:	0005883a 	mov	r2,zero
   2947c:	f800283a 	ret
   29480:	2912b03a 	or	r9,r5,r4
   29484:	48000c1e 	bne	r9,zero,294b8 <__ledf2+0x90>
   29488:	1a41ffe0 	cmpeqi	r9,r3,2047
   2948c:	48000e26 	beq	r9,zero,294c8 <__ledf2+0xa0>
   29490:	3992b03a 	or	r9,r7,r6
   29494:	4800081e 	bne	r9,zero,294b8 <__ledf2+0x90>
   29498:	4000021e 	bne	r8,zero,294a4 <__ledf2+0x7c>
   2949c:	2912b03a 	or	r9,r5,r4
   294a0:	48000726 	beq	r9,zero,294c0 <__ledf2+0x98>
   294a4:	58800c26 	beq	r11,r2,294d8 <__ledf2+0xb0>
   294a8:	00800044 	movi	r2,1
   294ac:	58000526 	beq	r11,zero,294c4 <__ledf2+0x9c>
   294b0:	00bfffc4 	movi	r2,-1
   294b4:	f800283a 	ret
   294b8:	00800084 	movi	r2,2
   294bc:	f800283a 	ret
   294c0:	103ffb26 	beq	r2,zero,294b0 <__ledf2+0x88>
   294c4:	f800283a 	ret
   294c8:	183ff61e 	bne	r3,zero,294a4 <__ledf2+0x7c>
   294cc:	3992b03a 	or	r9,r7,r6
   294d0:	483ff41e 	bne	r9,zero,294a4 <__ledf2+0x7c>
   294d4:	003ff406 	br	294a8 <__ledf2+0x80>
   294d8:	1a00030e 	bge	r3,r8,294e8 <__ledf2+0xc0>
   294dc:	103ff41e 	bne	r2,zero,294b0 <__ledf2+0x88>
   294e0:	00800044 	movi	r2,1
   294e4:	f800283a 	ret
   294e8:	40fff516 	blt	r8,r3,294c0 <__ledf2+0x98>
   294ec:	397fee36 	bltu	r7,r5,294a8 <__ledf2+0x80>
   294f0:	29c00426 	beq	r5,r7,29504 <__ledf2+0xdc>
   294f4:	29ffe02e 	bgeu	r5,r7,29478 <__ledf2+0x50>
   294f8:	583fed26 	beq	r11,zero,294b0 <__ledf2+0x88>
   294fc:	5805883a 	mov	r2,r11
   29500:	f800283a 	ret
   29504:	313fe836 	bltu	r6,r4,294a8 <__ledf2+0x80>
   29508:	21bfdb2e 	bgeu	r4,r6,29478 <__ledf2+0x50>
   2950c:	003ffa06 	br	294f8 <__ledf2+0xd0>

00029510 <__muldf3>:
   29510:	2810d53a 	srli	r8,r5,20
   29514:	defff004 	addi	sp,sp,-64
   29518:	00800434 	movhi	r2,16
   2951c:	df000e15 	stw	fp,56(sp)
   29520:	dd000a15 	stw	r20,40(sp)
   29524:	dcc00915 	stw	r19,36(sp)
   29528:	dc400715 	stw	r17,28(sp)
   2952c:	10bfffc4 	addi	r2,r2,-1
   29530:	dfc00f15 	stw	ra,60(sp)
   29534:	ddc00d15 	stw	r23,52(sp)
   29538:	dd800c15 	stw	r22,48(sp)
   2953c:	dd400b15 	stw	r21,44(sp)
   29540:	dc800815 	stw	r18,32(sp)
   29544:	dc000615 	stw	r16,24(sp)
   29548:	4201ffcc 	andi	r8,r8,2047
   2954c:	2828d7fa 	srli	r20,r5,31
   29550:	2023883a 	mov	r17,r4
   29554:	3039883a 	mov	fp,r6
   29558:	28a6703a 	and	r19,r5,r2
   2955c:	40013426 	beq	r8,zero,29a30 <__muldf3+0x520>
   29560:	4081ffe0 	cmpeqi	r2,r8,2047
   29564:	1001461e 	bne	r2,zero,29a80 <__muldf3+0x570>
   29568:	980a90fa 	slli	r5,r19,3
   2956c:	2026d77a 	srli	r19,r4,29
   29570:	202490fa 	slli	r18,r4,3
   29574:	423f0044 	addi	r8,r8,-1023
   29578:	9966b03a 	or	r19,r19,r5
   2957c:	9cc02034 	orhi	r19,r19,128
   29580:	002b883a 	mov	r21,zero
   29584:	002d883a 	mov	r22,zero
   29588:	3804d53a 	srli	r2,r7,20
   2958c:	00c00434 	movhi	r3,16
   29590:	18ffffc4 	addi	r3,r3,-1
   29594:	1081ffcc 	andi	r2,r2,2047
   29598:	382ed7fa 	srli	r23,r7,31
   2959c:	38e0703a 	and	r16,r7,r3
   295a0:	10011026 	beq	r2,zero,299e4 <__muldf3+0x4d4>
   295a4:	10c1ffe0 	cmpeqi	r3,r2,2047
   295a8:	18013c1e 	bne	r3,zero,29a9c <__muldf3+0x58c>
   295ac:	e008d77a 	srli	r4,fp,29
   295b0:	802090fa 	slli	r16,r16,3
   295b4:	e02290fa 	slli	r17,fp,3
   295b8:	10bf0044 	addi	r2,r2,-1023
   295bc:	2420b03a 	or	r16,r4,r16
   295c0:	84002034 	orhi	r16,r16,128
   295c4:	4091883a 	add	r8,r8,r2
   295c8:	0009883a 	mov	r4,zero
   295cc:	a8800428 	cmpgeui	r2,r21,16
   295d0:	a5ccf03a 	xor	r6,r20,r23
   295d4:	41c00044 	addi	r7,r8,1
   295d8:	1000371e 	bne	r2,zero,296b8 <__muldf3+0x1a8>
   295dc:	a80490ba 	slli	r2,r21,2
   295e0:	00c000f4 	movhi	r3,3
   295e4:	10c7883a 	add	r3,r2,r3
   295e8:	18a57c17 	ldw	r2,-27152(r3)
   295ec:	1000683a 	jmp	r2
   295f0:	000296b8 	rdprs	zero,zero,2650
   295f4:	00029634 	movhi	zero,2648
   295f8:	00029634 	movhi	zero,2648
   295fc:	00029630 	cmpltui	zero,zero,2648
   29600:	00029640 	call	2964 <__alt_mem_nios_system_shared_memory+0x964>
   29604:	00029640 	call	2964 <__alt_mem_nios_system_shared_memory+0x964>
   29608:	00029b10 	cmplti	zero,zero,2668
   2960c:	00029630 	cmpltui	zero,zero,2648
   29610:	00029640 	call	2964 <__alt_mem_nios_system_shared_memory+0x964>
   29614:	00029b10 	cmplti	zero,zero,2668
   29618:	00029640 	call	2964 <__alt_mem_nios_system_shared_memory+0x964>
   2961c:	00029630 	cmpltui	zero,zero,2648
   29620:	00029ab8 	rdprs	zero,zero,2666
   29624:	00029ab8 	rdprs	zero,zero,2666
   29628:	00029ab8 	rdprs	zero,zero,2666
   2962c:	00029b9c 	xori	zero,zero,2670
   29630:	b80d883a 	mov	r6,r23
   29634:	8027883a 	mov	r19,r16
   29638:	8825883a 	mov	r18,r17
   2963c:	202d883a 	mov	r22,r4
   29640:	b08000a0 	cmpeqi	r2,r22,2
   29644:	1000181e 	bne	r2,zero,296a8 <__muldf3+0x198>
   29648:	b08000e0 	cmpeqi	r2,r22,3
   2964c:	1001961e 	bne	r2,zero,29ca8 <__muldf3+0x798>
   29650:	b0800060 	cmpeqi	r2,r22,1
   29654:	1000c926 	beq	r2,zero,2997c <__muldf3+0x46c>
   29658:	0007883a 	mov	r3,zero
   2965c:	0027883a 	mov	r19,zero
   29660:	0025883a 	mov	r18,zero
   29664:	1806953a 	slli	r3,r3,20
   29668:	300c97fa 	slli	r6,r6,31
   2966c:	9005883a 	mov	r2,r18
   29670:	1cc6b03a 	or	r3,r3,r19
   29674:	1986b03a 	or	r3,r3,r6
   29678:	dfc00f17 	ldw	ra,60(sp)
   2967c:	df000e17 	ldw	fp,56(sp)
   29680:	ddc00d17 	ldw	r23,52(sp)
   29684:	dd800c17 	ldw	r22,48(sp)
   29688:	dd400b17 	ldw	r21,44(sp)
   2968c:	dd000a17 	ldw	r20,40(sp)
   29690:	dcc00917 	ldw	r19,36(sp)
   29694:	dc800817 	ldw	r18,32(sp)
   29698:	dc400717 	ldw	r17,28(sp)
   2969c:	dc000617 	ldw	r16,24(sp)
   296a0:	dec01004 	addi	sp,sp,64
   296a4:	f800283a 	ret
   296a8:	00c1ffc4 	movi	r3,2047
   296ac:	0027883a 	mov	r19,zero
   296b0:	0025883a 	mov	r18,zero
   296b4:	003feb06 	br	29664 <__muldf3+0x154>
   296b8:	9028d43a 	srli	r20,r18,16
   296bc:	8f3fffcc 	andi	fp,r17,65535
   296c0:	957fffcc 	andi	r21,r18,65535
   296c4:	a80b883a 	mov	r5,r21
   296c8:	e009883a 	mov	r4,fp
   296cc:	d9800315 	stw	r6,12(sp)
   296d0:	da000215 	stw	r8,8(sp)
   296d4:	d9c00115 	stw	r7,4(sp)
   296d8:	8822d43a 	srli	r17,r17,16
   296dc:	0026b4c0 	call	26b4c <__mulsi3>
   296e0:	e00b883a 	mov	r5,fp
   296e4:	a009883a 	mov	r4,r20
   296e8:	102d883a 	mov	r22,r2
   296ec:	0026b4c0 	call	26b4c <__mulsi3>
   296f0:	880b883a 	mov	r5,r17
   296f4:	a009883a 	mov	r4,r20
   296f8:	102f883a 	mov	r23,r2
   296fc:	0026b4c0 	call	26b4c <__mulsi3>
   29700:	a80b883a 	mov	r5,r21
   29704:	8809883a 	mov	r4,r17
   29708:	d8800015 	stw	r2,0(sp)
   2970c:	0026b4c0 	call	26b4c <__mulsi3>
   29710:	b006d43a 	srli	r3,r22,16
   29714:	15e5883a 	add	r18,r2,r23
   29718:	d9c00117 	ldw	r7,4(sp)
   2971c:	1c87883a 	add	r3,r3,r18
   29720:	da000217 	ldw	r8,8(sp)
   29724:	d9800317 	ldw	r6,12(sp)
   29728:	1dc0042e 	bgeu	r3,r23,2973c <__muldf3+0x22c>
   2972c:	d9000017 	ldw	r4,0(sp)
   29730:	00800074 	movhi	r2,1
   29734:	2085883a 	add	r2,r4,r2
   29738:	d8800015 	stw	r2,0(sp)
   2973c:	1804943a 	slli	r2,r3,16
   29740:	85ffffcc 	andi	r23,r16,65535
   29744:	b5bfffcc 	andi	r22,r22,65535
   29748:	1585883a 	add	r2,r2,r22
   2974c:	a80b883a 	mov	r5,r21
   29750:	b809883a 	mov	r4,r23
   29754:	1824d43a 	srli	r18,r3,16
   29758:	d9800515 	stw	r6,20(sp)
   2975c:	da000415 	stw	r8,16(sp)
   29760:	d9c00315 	stw	r7,12(sp)
   29764:	8020d43a 	srli	r16,r16,16
   29768:	d8800115 	stw	r2,4(sp)
   2976c:	0026b4c0 	call	26b4c <__mulsi3>
   29770:	a009883a 	mov	r4,r20
   29774:	b80b883a 	mov	r5,r23
   29778:	d8800215 	stw	r2,8(sp)
   2977c:	0026b4c0 	call	26b4c <__mulsi3>
   29780:	a009883a 	mov	r4,r20
   29784:	800b883a 	mov	r5,r16
   29788:	102d883a 	mov	r22,r2
   2978c:	0026b4c0 	call	26b4c <__mulsi3>
   29790:	a80b883a 	mov	r5,r21
   29794:	8009883a 	mov	r4,r16
   29798:	1029883a 	mov	r20,r2
   2979c:	0026b4c0 	call	26b4c <__mulsi3>
   297a0:	da800217 	ldw	r10,8(sp)
   297a4:	1585883a 	add	r2,r2,r22
   297a8:	d9c00317 	ldw	r7,12(sp)
   297ac:	5006d43a 	srli	r3,r10,16
   297b0:	da000417 	ldw	r8,16(sp)
   297b4:	d9800517 	ldw	r6,20(sp)
   297b8:	1887883a 	add	r3,r3,r2
   297bc:	1d80022e 	bgeu	r3,r22,297c8 <__muldf3+0x2b8>
   297c0:	00800074 	movhi	r2,1
   297c4:	a0a9883a 	add	r20,r20,r2
   297c8:	1804d43a 	srli	r2,r3,16
   297cc:	1806943a 	slli	r3,r3,16
   297d0:	982cd43a 	srli	r22,r19,16
   297d4:	9d7fffcc 	andi	r21,r19,65535
   297d8:	e009883a 	mov	r4,fp
   297dc:	54ffffcc 	andi	r19,r10,65535
   297e0:	a80b883a 	mov	r5,r21
   297e4:	1ce7883a 	add	r19,r3,r19
   297e8:	d9800515 	stw	r6,20(sp)
   297ec:	da000415 	stw	r8,16(sp)
   297f0:	d9c00315 	stw	r7,12(sp)
   297f4:	1529883a 	add	r20,r2,r20
   297f8:	0026b4c0 	call	26b4c <__mulsi3>
   297fc:	e00b883a 	mov	r5,fp
   29800:	b009883a 	mov	r4,r22
   29804:	d8800215 	stw	r2,8(sp)
   29808:	0026b4c0 	call	26b4c <__mulsi3>
   2980c:	8809883a 	mov	r4,r17
   29810:	b00b883a 	mov	r5,r22
   29814:	1039883a 	mov	fp,r2
   29818:	0026b4c0 	call	26b4c <__mulsi3>
   2981c:	8809883a 	mov	r4,r17
   29820:	a80b883a 	mov	r5,r21
   29824:	1023883a 	mov	r17,r2
   29828:	0026b4c0 	call	26b4c <__mulsi3>
   2982c:	d8c00217 	ldw	r3,8(sp)
   29830:	1705883a 	add	r2,r2,fp
   29834:	d9c00317 	ldw	r7,12(sp)
   29838:	1808d43a 	srli	r4,r3,16
   2983c:	da000417 	ldw	r8,16(sp)
   29840:	d9800517 	ldw	r6,20(sp)
   29844:	2089883a 	add	r4,r4,r2
   29848:	94e5883a 	add	r18,r18,r19
   2984c:	2700022e 	bgeu	r4,fp,29858 <__muldf3+0x348>
   29850:	00800074 	movhi	r2,1
   29854:	88a3883a 	add	r17,r17,r2
   29858:	2004d43a 	srli	r2,r4,16
   2985c:	2038943a 	slli	fp,r4,16
   29860:	18ffffcc 	andi	r3,r3,65535
   29864:	b809883a 	mov	r4,r23
   29868:	a80b883a 	mov	r5,r21
   2986c:	d9800415 	stw	r6,16(sp)
   29870:	da000315 	stw	r8,12(sp)
   29874:	d9c00215 	stw	r7,8(sp)
   29878:	e0f9883a 	add	fp,fp,r3
   2987c:	1463883a 	add	r17,r2,r17
   29880:	0026b4c0 	call	26b4c <__mulsi3>
   29884:	b80b883a 	mov	r5,r23
   29888:	b009883a 	mov	r4,r22
   2988c:	102f883a 	mov	r23,r2
   29890:	0026b4c0 	call	26b4c <__mulsi3>
   29894:	b00b883a 	mov	r5,r22
   29898:	8009883a 	mov	r4,r16
   2989c:	102d883a 	mov	r22,r2
   298a0:	0026b4c0 	call	26b4c <__mulsi3>
   298a4:	a80b883a 	mov	r5,r21
   298a8:	8009883a 	mov	r4,r16
   298ac:	1021883a 	mov	r16,r2
   298b0:	0026b4c0 	call	26b4c <__mulsi3>
   298b4:	b80ad43a 	srli	r5,r23,16
   298b8:	1585883a 	add	r2,r2,r22
   298bc:	d9c00217 	ldw	r7,8(sp)
   298c0:	288b883a 	add	r5,r5,r2
   298c4:	da000317 	ldw	r8,12(sp)
   298c8:	d9800417 	ldw	r6,16(sp)
   298cc:	2d80022e 	bgeu	r5,r22,298d8 <__muldf3+0x3c8>
   298d0:	00800074 	movhi	r2,1
   298d4:	80a1883a 	add	r16,r16,r2
   298d8:	2806943a 	slli	r3,r5,16
   298dc:	d8800017 	ldw	r2,0(sp)
   298e0:	bdffffcc 	andi	r23,r23,65535
   298e4:	1dc7883a 	add	r3,r3,r23
   298e8:	90ab883a 	add	r21,r18,r2
   298ec:	acd5803a 	cmpltu	r10,r21,r19
   298f0:	1d07883a 	add	r3,r3,r20
   298f4:	af2b883a 	add	r21,r21,fp
   298f8:	1a97883a 	add	r11,r3,r10
   298fc:	af09803a 	cmpltu	r4,r21,fp
   29900:	2826d43a 	srli	r19,r5,16
   29904:	5c53883a 	add	r9,r11,r17
   29908:	4905883a 	add	r2,r9,r4
   2990c:	1d07803a 	cmpltu	r3,r3,r20
   29910:	5a95803a 	cmpltu	r10,r11,r10
   29914:	1a86b03a 	or	r3,r3,r10
   29918:	1109803a 	cmpltu	r4,r2,r4
   2991c:	4c53803a 	cmpltu	r9,r9,r17
   29920:	1ce7883a 	add	r19,r3,r19
   29924:	4908b03a 	or	r4,r9,r4
   29928:	a824927a 	slli	r18,r21,9
   2992c:	d8c00117 	ldw	r3,4(sp)
   29930:	9927883a 	add	r19,r19,r4
   29934:	9c27883a 	add	r19,r19,r16
   29938:	9826927a 	slli	r19,r19,9
   2993c:	a82ad5fa 	srli	r21,r21,23
   29940:	100ad5fa 	srli	r5,r2,23
   29944:	90e4b03a 	or	r18,r18,r3
   29948:	1004927a 	slli	r2,r2,9
   2994c:	9024c03a 	cmpne	r18,r18,zero
   29950:	9564b03a 	or	r18,r18,r21
   29954:	98c0402c 	andhi	r3,r19,256
   29958:	90a4b03a 	or	r18,r18,r2
   2995c:	9966b03a 	or	r19,r19,r5
   29960:	1800b626 	beq	r3,zero,29c3c <__muldf3+0x72c>
   29964:	9006d07a 	srli	r3,r18,1
   29968:	980497fa 	slli	r2,r19,31
   2996c:	9480004c 	andi	r18,r18,1
   29970:	9826d07a 	srli	r19,r19,1
   29974:	1c86b03a 	or	r3,r3,r18
   29978:	18a4b03a 	or	r18,r3,r2
   2997c:	3900ffc4 	addi	r4,r7,1023
   29980:	0100690e 	bge	zero,r4,29b28 <__muldf3+0x618>
   29984:	908001cc 	andi	r2,r18,7
   29988:	10000726 	beq	r2,zero,299a8 <__muldf3+0x498>
   2998c:	908003cc 	andi	r2,r18,15
   29990:	10800120 	cmpeqi	r2,r2,4
   29994:	1000041e 	bne	r2,zero,299a8 <__muldf3+0x498>
   29998:	90800104 	addi	r2,r18,4
   2999c:	14a5803a 	cmpltu	r18,r2,r18
   299a0:	9ca7883a 	add	r19,r19,r18
   299a4:	1025883a 	mov	r18,r2
   299a8:	9880402c 	andhi	r2,r19,256
   299ac:	10000426 	beq	r2,zero,299c0 <__muldf3+0x4b0>
   299b0:	00bfc034 	movhi	r2,65280
   299b4:	10bfffc4 	addi	r2,r2,-1
   299b8:	98a6703a 	and	r19,r19,r2
   299bc:	39010004 	addi	r4,r7,1024
   299c0:	2081ffc8 	cmpgei	r2,r4,2047
   299c4:	103f381e 	bne	r2,zero,296a8 <__muldf3+0x198>
   299c8:	9804977a 	slli	r2,r19,29
   299cc:	9024d0fa 	srli	r18,r18,3
   299d0:	9826927a 	slli	r19,r19,9
   299d4:	20c1ffcc 	andi	r3,r4,2047
   299d8:	14a4b03a 	or	r18,r2,r18
   299dc:	9826d33a 	srli	r19,r19,12
   299e0:	003f2006 	br	29664 <__muldf3+0x154>
   299e4:	8722b03a 	or	r17,r16,fp
   299e8:	88004526 	beq	r17,zero,29b00 <__muldf3+0x5f0>
   299ec:	da000015 	stw	r8,0(sp)
   299f0:	80008626 	beq	r16,zero,29c0c <__muldf3+0x6fc>
   299f4:	8009883a 	mov	r4,r16
   299f8:	002a8940 	call	2a894 <__clzsi2>
   299fc:	da000017 	ldw	r8,0(sp)
   29a00:	117ffd44 	addi	r5,r2,-11
   29a04:	01000744 	movi	r4,29
   29a08:	147ffe04 	addi	r17,r2,-8
   29a0c:	2149c83a 	sub	r4,r4,r5
   29a10:	8460983a 	sll	r16,r16,r17
   29a14:	e108d83a 	srl	r4,fp,r4
   29a18:	e462983a 	sll	r17,fp,r17
   29a1c:	2420b03a 	or	r16,r4,r16
   29a20:	4091c83a 	sub	r8,r8,r2
   29a24:	423f0344 	addi	r8,r8,-1011
   29a28:	0009883a 	mov	r4,zero
   29a2c:	003ee706 	br	295cc <__muldf3+0xbc>
   29a30:	9924b03a 	or	r18,r19,r4
   29a34:	90002d26 	beq	r18,zero,29aec <__muldf3+0x5dc>
   29a38:	d9c00015 	stw	r7,0(sp)
   29a3c:	98006826 	beq	r19,zero,29be0 <__muldf3+0x6d0>
   29a40:	9809883a 	mov	r4,r19
   29a44:	002a8940 	call	2a894 <__clzsi2>
   29a48:	d9c00017 	ldw	r7,0(sp)
   29a4c:	113ffd44 	addi	r4,r2,-11
   29a50:	00c00744 	movi	r3,29
   29a54:	14bffe04 	addi	r18,r2,-8
   29a58:	1907c83a 	sub	r3,r3,r4
   29a5c:	9ca6983a 	sll	r19,r19,r18
   29a60:	88c6d83a 	srl	r3,r17,r3
   29a64:	8ca4983a 	sll	r18,r17,r18
   29a68:	1ce6b03a 	or	r19,r3,r19
   29a6c:	023f0344 	movi	r8,-1011
   29a70:	4091c83a 	sub	r8,r8,r2
   29a74:	002b883a 	mov	r21,zero
   29a78:	002d883a 	mov	r22,zero
   29a7c:	003ec206 	br	29588 <__muldf3+0x78>
   29a80:	9924b03a 	or	r18,r19,r4
   29a84:	9000141e 	bne	r18,zero,29ad8 <__muldf3+0x5c8>
   29a88:	0027883a 	mov	r19,zero
   29a8c:	05400204 	movi	r21,8
   29a90:	0201ffc4 	movi	r8,2047
   29a94:	05800084 	movi	r22,2
   29a98:	003ebb06 	br	29588 <__muldf3+0x78>
   29a9c:	8722b03a 	or	r17,r16,fp
   29aa0:	4201ffc4 	addi	r8,r8,2047
   29aa4:	8800081e 	bne	r17,zero,29ac8 <__muldf3+0x5b8>
   29aa8:	ad400094 	ori	r21,r21,2
   29aac:	0021883a 	mov	r16,zero
   29ab0:	01000084 	movi	r4,2
   29ab4:	003ec506 	br	295cc <__muldf3+0xbc>
   29ab8:	b08000a0 	cmpeqi	r2,r22,2
   29abc:	a00d883a 	mov	r6,r20
   29ac0:	103ee126 	beq	r2,zero,29648 <__muldf3+0x138>
   29ac4:	003ef806 	br	296a8 <__muldf3+0x198>
   29ac8:	ad4000d4 	ori	r21,r21,3
   29acc:	e023883a 	mov	r17,fp
   29ad0:	010000c4 	movi	r4,3
   29ad4:	003ebd06 	br	295cc <__muldf3+0xbc>
   29ad8:	2025883a 	mov	r18,r4
   29adc:	05400304 	movi	r21,12
   29ae0:	0201ffc4 	movi	r8,2047
   29ae4:	058000c4 	movi	r22,3
   29ae8:	003ea706 	br	29588 <__muldf3+0x78>
   29aec:	0027883a 	mov	r19,zero
   29af0:	05400104 	movi	r21,4
   29af4:	0011883a 	mov	r8,zero
   29af8:	05800044 	movi	r22,1
   29afc:	003ea206 	br	29588 <__muldf3+0x78>
   29b00:	ad400054 	ori	r21,r21,1
   29b04:	0021883a 	mov	r16,zero
   29b08:	01000044 	movi	r4,1
   29b0c:	003eaf06 	br	295cc <__muldf3+0xbc>
   29b10:	04c00434 	movhi	r19,16
   29b14:	000d883a 	mov	r6,zero
   29b18:	9cffffc4 	addi	r19,r19,-1
   29b1c:	04bfffc4 	movi	r18,-1
   29b20:	00c1ffc4 	movi	r3,2047
   29b24:	003ecf06 	br	29664 <__muldf3+0x154>
   29b28:	00800044 	movi	r2,1
   29b2c:	1105c83a 	sub	r2,r2,r4
   29b30:	10c00e48 	cmpgei	r3,r2,57
   29b34:	183ec81e 	bne	r3,zero,29658 <__muldf3+0x148>
   29b38:	10c00808 	cmpgei	r3,r2,32
   29b3c:	1800411e 	bne	r3,zero,29c44 <__muldf3+0x734>
   29b40:	39c10784 	addi	r7,r7,1054
   29b44:	99c6983a 	sll	r3,r19,r7
   29b48:	9088d83a 	srl	r4,r18,r2
   29b4c:	91ce983a 	sll	r7,r18,r7
   29b50:	98a6d83a 	srl	r19,r19,r2
   29b54:	1904b03a 	or	r2,r3,r4
   29b58:	3824c03a 	cmpne	r18,r7,zero
   29b5c:	1484b03a 	or	r2,r2,r18
   29b60:	10c001cc 	andi	r3,r2,7
   29b64:	18000726 	beq	r3,zero,29b84 <__muldf3+0x674>
   29b68:	10c003cc 	andi	r3,r2,15
   29b6c:	18c00120 	cmpeqi	r3,r3,4
   29b70:	1800041e 	bne	r3,zero,29b84 <__muldf3+0x674>
   29b74:	10c00104 	addi	r3,r2,4
   29b78:	1885803a 	cmpltu	r2,r3,r2
   29b7c:	98a7883a 	add	r19,r19,r2
   29b80:	1805883a 	mov	r2,r3
   29b84:	98c0202c 	andhi	r3,r19,128
   29b88:	18004326 	beq	r3,zero,29c98 <__muldf3+0x788>
   29b8c:	00c00044 	movi	r3,1
   29b90:	0027883a 	mov	r19,zero
   29b94:	0025883a 	mov	r18,zero
   29b98:	003eb206 	br	29664 <__muldf3+0x154>
   29b9c:	9880022c 	andhi	r2,r19,8
   29ba0:	10000926 	beq	r2,zero,29bc8 <__muldf3+0x6b8>
   29ba4:	8080022c 	andhi	r2,r16,8
   29ba8:	1000071e 	bne	r2,zero,29bc8 <__muldf3+0x6b8>
   29bac:	00800434 	movhi	r2,16
   29bb0:	84c00234 	orhi	r19,r16,8
   29bb4:	10bfffc4 	addi	r2,r2,-1
   29bb8:	98a6703a 	and	r19,r19,r2
   29bbc:	b80d883a 	mov	r6,r23
   29bc0:	8825883a 	mov	r18,r17
   29bc4:	003fd606 	br	29b20 <__muldf3+0x610>
   29bc8:	00800434 	movhi	r2,16
   29bcc:	9cc00234 	orhi	r19,r19,8
   29bd0:	10bfffc4 	addi	r2,r2,-1
   29bd4:	98a6703a 	and	r19,r19,r2
   29bd8:	a00d883a 	mov	r6,r20
   29bdc:	003fd006 	br	29b20 <__muldf3+0x610>
   29be0:	002a8940 	call	2a894 <__clzsi2>
   29be4:	11000544 	addi	r4,r2,21
   29be8:	21400748 	cmpgei	r5,r4,29
   29bec:	1007883a 	mov	r3,r2
   29bf0:	d9c00017 	ldw	r7,0(sp)
   29bf4:	10800804 	addi	r2,r2,32
   29bf8:	283f9526 	beq	r5,zero,29a50 <__muldf3+0x540>
   29bfc:	18fffe04 	addi	r3,r3,-8
   29c00:	88e6983a 	sll	r19,r17,r3
   29c04:	0025883a 	mov	r18,zero
   29c08:	003f9806 	br	29a6c <__muldf3+0x55c>
   29c0c:	e009883a 	mov	r4,fp
   29c10:	002a8940 	call	2a894 <__clzsi2>
   29c14:	11400544 	addi	r5,r2,21
   29c18:	29000748 	cmpgei	r4,r5,29
   29c1c:	1007883a 	mov	r3,r2
   29c20:	da000017 	ldw	r8,0(sp)
   29c24:	10800804 	addi	r2,r2,32
   29c28:	203f7626 	beq	r4,zero,29a04 <__muldf3+0x4f4>
   29c2c:	1c3ffe04 	addi	r16,r3,-8
   29c30:	e420983a 	sll	r16,fp,r16
   29c34:	0023883a 	mov	r17,zero
   29c38:	003f7906 	br	29a20 <__muldf3+0x510>
   29c3c:	400f883a 	mov	r7,r8
   29c40:	003f4e06 	br	2997c <__muldf3+0x46c>
   29c44:	00fff844 	movi	r3,-31
   29c48:	1907c83a 	sub	r3,r3,r4
   29c4c:	10800820 	cmpeqi	r2,r2,32
   29c50:	98c6d83a 	srl	r3,r19,r3
   29c54:	1000031e 	bne	r2,zero,29c64 <__muldf3+0x754>
   29c58:	39c10f84 	addi	r7,r7,1086
   29c5c:	99e6983a 	sll	r19,r19,r7
   29c60:	94e4b03a 	or	r18,r18,r19
   29c64:	9024c03a 	cmpne	r18,r18,zero
   29c68:	90c4b03a 	or	r2,r18,r3
   29c6c:	148001cc 	andi	r18,r2,7
   29c70:	9000051e 	bne	r18,zero,29c88 <__muldf3+0x778>
   29c74:	0027883a 	mov	r19,zero
   29c78:	1004d0fa 	srli	r2,r2,3
   29c7c:	0007883a 	mov	r3,zero
   29c80:	14a4b03a 	or	r18,r2,r18
   29c84:	003e7706 	br	29664 <__muldf3+0x154>
   29c88:	10c003cc 	andi	r3,r2,15
   29c8c:	18c00118 	cmpnei	r3,r3,4
   29c90:	0027883a 	mov	r19,zero
   29c94:	183fb71e 	bne	r3,zero,29b74 <__muldf3+0x664>
   29c98:	9806927a 	slli	r3,r19,9
   29c9c:	9824977a 	slli	r18,r19,29
   29ca0:	1826d33a 	srli	r19,r3,12
   29ca4:	003ff406 	br	29c78 <__muldf3+0x768>
   29ca8:	00800434 	movhi	r2,16
   29cac:	9cc00234 	orhi	r19,r19,8
   29cb0:	10bfffc4 	addi	r2,r2,-1
   29cb4:	98a6703a 	and	r19,r19,r2
   29cb8:	003f9906 	br	29b20 <__muldf3+0x610>

00029cbc <__subdf3>:
   29cbc:	00800434 	movhi	r2,16
   29cc0:	3810d53a 	srli	r8,r7,20
   29cc4:	10bfffc4 	addi	r2,r2,-1
   29cc8:	2806d53a 	srli	r3,r5,20
   29ccc:	2892703a 	and	r9,r5,r2
   29cd0:	3884703a 	and	r2,r7,r2
   29cd4:	280ad7fa 	srli	r5,r5,31
   29cd8:	481290fa 	slli	r9,r9,3
   29cdc:	2018d77a 	srli	r12,r4,29
   29ce0:	100490fa 	slli	r2,r2,3
   29ce4:	3016d77a 	srli	r11,r6,29
   29ce8:	defffb04 	addi	sp,sp,-20
   29cec:	4201ffcc 	andi	r8,r8,2047
   29cf0:	dc800215 	stw	r18,8(sp)
   29cf4:	dc400115 	stw	r17,4(sp)
   29cf8:	1c81ffcc 	andi	r18,r3,2047
   29cfc:	dfc00415 	stw	ra,16(sp)
   29d00:	dcc00315 	stw	r19,12(sp)
   29d04:	dc000015 	stw	r16,0(sp)
   29d08:	4281ffd8 	cmpnei	r10,r8,2047
   29d0c:	2823883a 	mov	r17,r5
   29d10:	201c90fa 	slli	r14,r4,3
   29d14:	380ed7fa 	srli	r7,r7,31
   29d18:	301a90fa 	slli	r13,r6,3
   29d1c:	29403fcc 	andi	r5,r5,255
   29d20:	6252b03a 	or	r9,r12,r9
   29d24:	589eb03a 	or	r15,r11,r2
   29d28:	9207c83a 	sub	r3,r18,r8
   29d2c:	50006826 	beq	r10,zero,29ed0 <__subdf3+0x214>
   29d30:	3ac0005c 	xori	r11,r7,1
   29d34:	2ac07326 	beq	r5,r11,29f04 <__subdf3+0x248>
   29d38:	00c0590e 	bge	zero,r3,29ea0 <__subdf3+0x1e4>
   29d3c:	4000691e 	bne	r8,zero,29ee4 <__subdf3+0x228>
   29d40:	7b44b03a 	or	r2,r15,r13
   29d44:	1000fb26 	beq	r2,zero,2a134 <__subdf3+0x478>
   29d48:	18bfffc4 	addi	r2,r3,-1
   29d4c:	10019126 	beq	r2,zero,2a394 <__subdf3+0x6d8>
   29d50:	18c1ffd8 	cmpnei	r3,r3,2047
   29d54:	1800c326 	beq	r3,zero,2a064 <__subdf3+0x3a8>
   29d58:	1007883a 	mov	r3,r2
   29d5c:	18800e48 	cmpgei	r2,r3,57
   29d60:	1000651e 	bne	r2,zero,29ef8 <__subdf3+0x23c>
   29d64:	18800808 	cmpgei	r2,r3,32
   29d68:	1001331e 	bne	r2,zero,2a238 <__subdf3+0x57c>
   29d6c:	00800804 	movi	r2,32
   29d70:	10c5c83a 	sub	r2,r2,r3
   29d74:	78a0983a 	sll	r16,r15,r2
   29d78:	68c8d83a 	srl	r4,r13,r3
   29d7c:	689a983a 	sll	r13,r13,r2
   29d80:	78c4d83a 	srl	r2,r15,r3
   29d84:	8120b03a 	or	r16,r16,r4
   29d88:	681ac03a 	cmpne	r13,r13,zero
   29d8c:	8360b03a 	or	r16,r16,r13
   29d90:	4893c83a 	sub	r9,r9,r2
   29d94:	7421c83a 	sub	r16,r14,r16
   29d98:	7409803a 	cmpltu	r4,r14,r16
   29d9c:	4909c83a 	sub	r4,r9,r4
   29da0:	2080202c 	andhi	r2,r4,128
   29da4:	10009326 	beq	r2,zero,29ff4 <__subdf3+0x338>
   29da8:	04c02034 	movhi	r19,128
   29dac:	9cffffc4 	addi	r19,r19,-1
   29db0:	24e6703a 	and	r19,r4,r19
   29db4:	9800b926 	beq	r19,zero,2a09c <__subdf3+0x3e0>
   29db8:	9809883a 	mov	r4,r19
   29dbc:	002a8940 	call	2a894 <__clzsi2>
   29dc0:	10fffe04 	addi	r3,r2,-8
   29dc4:	01000804 	movi	r4,32
   29dc8:	20c9c83a 	sub	r4,r4,r3
   29dcc:	8108d83a 	srl	r4,r16,r4
   29dd0:	98e6983a 	sll	r19,r19,r3
   29dd4:	80e0983a 	sll	r16,r16,r3
   29dd8:	24c8b03a 	or	r4,r4,r19
   29ddc:	1c80b816 	blt	r3,r18,2a0c0 <__subdf3+0x404>
   29de0:	1c87c83a 	sub	r3,r3,r18
   29de4:	19400044 	addi	r5,r3,1
   29de8:	28800808 	cmpgei	r2,r5,32
   29dec:	1000751e 	bne	r2,zero,29fc4 <__subdf3+0x308>
   29df0:	00800804 	movi	r2,32
   29df4:	1145c83a 	sub	r2,r2,r5
   29df8:	8146d83a 	srl	r3,r16,r5
   29dfc:	80a0983a 	sll	r16,r16,r2
   29e00:	2084983a 	sll	r2,r4,r2
   29e04:	2148d83a 	srl	r4,r4,r5
   29e08:	8020c03a 	cmpne	r16,r16,zero
   29e0c:	10c4b03a 	or	r2,r2,r3
   29e10:	1420b03a 	or	r16,r2,r16
   29e14:	0025883a 	mov	r18,zero
   29e18:	808001cc 	andi	r2,r16,7
   29e1c:	10000726 	beq	r2,zero,29e3c <__subdf3+0x180>
   29e20:	808003cc 	andi	r2,r16,15
   29e24:	10800120 	cmpeqi	r2,r2,4
   29e28:	1000041e 	bne	r2,zero,29e3c <__subdf3+0x180>
   29e2c:	80800104 	addi	r2,r16,4
   29e30:	1421803a 	cmpltu	r16,r2,r16
   29e34:	2409883a 	add	r4,r4,r16
   29e38:	1021883a 	mov	r16,r2
   29e3c:	2080202c 	andhi	r2,r4,128
   29e40:	10006e26 	beq	r2,zero,29ffc <__subdf3+0x340>
   29e44:	90c00044 	addi	r3,r18,1
   29e48:	1881ffe0 	cmpeqi	r2,r3,2047
   29e4c:	18c1ffcc 	andi	r3,r3,2047
   29e50:	1000801e 	bne	r2,zero,2a054 <__subdf3+0x398>
   29e54:	00bfe034 	movhi	r2,65408
   29e58:	10bfffc4 	addi	r2,r2,-1
   29e5c:	2088703a 	and	r4,r4,r2
   29e60:	2004977a 	slli	r2,r4,29
   29e64:	2008927a 	slli	r4,r4,9
   29e68:	8020d0fa 	srli	r16,r16,3
   29e6c:	2008d33a 	srli	r4,r4,12
   29e70:	1404b03a 	or	r2,r2,r16
   29e74:	1806953a 	slli	r3,r3,20
   29e78:	882297fa 	slli	r17,r17,31
   29e7c:	1906b03a 	or	r3,r3,r4
   29e80:	1c46b03a 	or	r3,r3,r17
   29e84:	dfc00417 	ldw	ra,16(sp)
   29e88:	dcc00317 	ldw	r19,12(sp)
   29e8c:	dc800217 	ldw	r18,8(sp)
   29e90:	dc400117 	ldw	r17,4(sp)
   29e94:	dc000017 	ldw	r16,0(sp)
   29e98:	dec00504 	addi	sp,sp,20
   29e9c:	f800283a 	ret
   29ea0:	18002c26 	beq	r3,zero,29f54 <__subdf3+0x298>
   29ea4:	4487c83a 	sub	r3,r8,r18
   29ea8:	5823883a 	mov	r17,r11
   29eac:	9000bb1e 	bne	r18,zero,2a19c <__subdf3+0x4e0>
   29eb0:	4b84b03a 	or	r2,r9,r14
   29eb4:	10011726 	beq	r2,zero,2a314 <__subdf3+0x658>
   29eb8:	18bfffc4 	addi	r2,r3,-1
   29ebc:	10016326 	beq	r2,zero,2a44c <__subdf3+0x790>
   29ec0:	18c1ffd8 	cmpnei	r3,r3,2047
   29ec4:	18012c26 	beq	r3,zero,2a378 <__subdf3+0x6bc>
   29ec8:	1007883a 	mov	r3,r2
   29ecc:	0000b506 	br	2a1a4 <__subdf3+0x4e8>
   29ed0:	7b44b03a 	or	r2,r15,r13
   29ed4:	103f9626 	beq	r2,zero,29d30 <__subdf3+0x74>
   29ed8:	3ac03fcc 	andi	r11,r7,255
   29edc:	29c07d26 	beq	r5,r7,2a0d4 <__subdf3+0x418>
   29ee0:	00ffef0e 	bge	zero,r3,29ea0 <__subdf3+0x1e4>
   29ee4:	9081ffd8 	cmpnei	r2,r18,2047
   29ee8:	10005e26 	beq	r2,zero,2a064 <__subdf3+0x3a8>
   29eec:	18800e48 	cmpgei	r2,r3,57
   29ef0:	7bc02034 	orhi	r15,r15,128
   29ef4:	103f9b26 	beq	r2,zero,29d64 <__subdf3+0xa8>
   29ef8:	7b60b03a 	or	r16,r15,r13
   29efc:	8020c03a 	cmpne	r16,r16,zero
   29f00:	003fa406 	br	29d94 <__subdf3+0xd8>
   29f04:	00c0730e 	bge	zero,r3,2a0d4 <__subdf3+0x418>
   29f08:	40002626 	beq	r8,zero,29fa4 <__subdf3+0x2e8>
   29f0c:	9081ffd8 	cmpnei	r2,r18,2047
   29f10:	10005426 	beq	r2,zero,2a064 <__subdf3+0x3a8>
   29f14:	7bc02034 	orhi	r15,r15,128
   29f18:	18800e48 	cmpgei	r2,r3,57
   29f1c:	1000431e 	bne	r2,zero,2a02c <__subdf3+0x370>
   29f20:	18800808 	cmpgei	r2,r3,32
   29f24:	1000de26 	beq	r2,zero,2a2a0 <__subdf3+0x5e4>
   29f28:	1c3ff804 	addi	r16,r3,-32
   29f2c:	18800820 	cmpeqi	r2,r3,32
   29f30:	7c0ad83a 	srl	r5,r15,r16
   29f34:	1000041e 	bne	r2,zero,29f48 <__subdf3+0x28c>
   29f38:	00801004 	movi	r2,64
   29f3c:	10c5c83a 	sub	r2,r2,r3
   29f40:	7884983a 	sll	r2,r15,r2
   29f44:	689ab03a 	or	r13,r13,r2
   29f48:	6820c03a 	cmpne	r16,r13,zero
   29f4c:	8160b03a 	or	r16,r16,r5
   29f50:	00003806 	br	2a034 <__subdf3+0x378>
   29f54:	90800044 	addi	r2,r18,1
   29f58:	1081ff8c 	andi	r2,r2,2046
   29f5c:	1000a01e 	bne	r2,zero,2a1e0 <__subdf3+0x524>
   29f60:	4b8ab03a 	or	r5,r9,r14
   29f64:	7b44b03a 	or	r2,r15,r13
   29f68:	9000f11e 	bne	r18,zero,2a330 <__subdf3+0x674>
   29f6c:	28012e26 	beq	r5,zero,2a428 <__subdf3+0x76c>
   29f70:	10010e26 	beq	r2,zero,2a3ac <__subdf3+0x6f0>
   29f74:	7361c83a 	sub	r16,r14,r13
   29f78:	7405803a 	cmpltu	r2,r14,r16
   29f7c:	4bc9c83a 	sub	r4,r9,r15
   29f80:	2089c83a 	sub	r4,r4,r2
   29f84:	2080202c 	andhi	r2,r4,128
   29f88:	10016d26 	beq	r2,zero,2a540 <__subdf3+0x884>
   29f8c:	6ba1c83a 	sub	r16,r13,r14
   29f90:	7a49c83a 	sub	r4,r15,r9
   29f94:	6c1b803a 	cmpltu	r13,r13,r16
   29f98:	2349c83a 	sub	r4,r4,r13
   29f9c:	5823883a 	mov	r17,r11
   29fa0:	003f9d06 	br	29e18 <__subdf3+0x15c>
   29fa4:	7b44b03a 	or	r2,r15,r13
   29fa8:	10006226 	beq	r2,zero,2a134 <__subdf3+0x478>
   29fac:	18bfffc4 	addi	r2,r3,-1
   29fb0:	1000e926 	beq	r2,zero,2a358 <__subdf3+0x69c>
   29fb4:	18c1ffd8 	cmpnei	r3,r3,2047
   29fb8:	18012a26 	beq	r3,zero,2a464 <__subdf3+0x7a8>
   29fbc:	1007883a 	mov	r3,r2
   29fc0:	003fd506 	br	29f18 <__subdf3+0x25c>
   29fc4:	18fff844 	addi	r3,r3,-31
   29fc8:	28800820 	cmpeqi	r2,r5,32
   29fcc:	20c6d83a 	srl	r3,r4,r3
   29fd0:	1000041e 	bne	r2,zero,29fe4 <__subdf3+0x328>
   29fd4:	00801004 	movi	r2,64
   29fd8:	114bc83a 	sub	r5,r2,r5
   29fdc:	2148983a 	sll	r4,r4,r5
   29fe0:	8120b03a 	or	r16,r16,r4
   29fe4:	8020c03a 	cmpne	r16,r16,zero
   29fe8:	80e0b03a 	or	r16,r16,r3
   29fec:	0009883a 	mov	r4,zero
   29ff0:	0025883a 	mov	r18,zero
   29ff4:	808001cc 	andi	r2,r16,7
   29ff8:	103f891e 	bne	r2,zero,29e20 <__subdf3+0x164>
   29ffc:	8020d0fa 	srli	r16,r16,3
   2a000:	2004977a 	slli	r2,r4,29
   2a004:	2012d0fa 	srli	r9,r4,3
   2a008:	9007883a 	mov	r3,r18
   2a00c:	8084b03a 	or	r2,r16,r2
   2a010:	1901ffe0 	cmpeqi	r4,r3,2047
   2a014:	2000191e 	bne	r4,zero,2a07c <__subdf3+0x3c0>
   2a018:	01000434 	movhi	r4,16
   2a01c:	213fffc4 	addi	r4,r4,-1
   2a020:	4908703a 	and	r4,r9,r4
   2a024:	18c1ffcc 	andi	r3,r3,2047
   2a028:	003f9206 	br	29e74 <__subdf3+0x1b8>
   2a02c:	7b60b03a 	or	r16,r15,r13
   2a030:	8020c03a 	cmpne	r16,r16,zero
   2a034:	83a1883a 	add	r16,r16,r14
   2a038:	8389803a 	cmpltu	r4,r16,r14
   2a03c:	2249883a 	add	r4,r4,r9
   2a040:	2080202c 	andhi	r2,r4,128
   2a044:	103feb26 	beq	r2,zero,29ff4 <__subdf3+0x338>
   2a048:	94800044 	addi	r18,r18,1
   2a04c:	9081ffe0 	cmpeqi	r2,r18,2047
   2a050:	10006f26 	beq	r2,zero,2a210 <__subdf3+0x554>
   2a054:	00c1ffc4 	movi	r3,2047
   2a058:	0009883a 	mov	r4,zero
   2a05c:	0005883a 	mov	r2,zero
   2a060:	003f8406 	br	29e74 <__subdf3+0x1b8>
   2a064:	4806977a 	slli	r3,r9,29
   2a068:	00880034 	movhi	r2,8192
   2a06c:	10bfffc4 	addi	r2,r2,-1
   2a070:	4812d0fa 	srli	r9,r9,3
   2a074:	2088703a 	and	r4,r4,r2
   2a078:	20c4b03a 	or	r2,r4,r3
   2a07c:	4886b03a 	or	r3,r9,r2
   2a080:	18013726 	beq	r3,zero,2a560 <__subdf3+0x8a4>
   2a084:	00c00434 	movhi	r3,16
   2a088:	18ffffc4 	addi	r3,r3,-1
   2a08c:	49000234 	orhi	r4,r9,8
   2a090:	20c8703a 	and	r4,r4,r3
   2a094:	00c1ffc4 	movi	r3,2047
   2a098:	003f7606 	br	29e74 <__subdf3+0x1b8>
   2a09c:	8009883a 	mov	r4,r16
   2a0a0:	002a8940 	call	2a894 <__clzsi2>
   2a0a4:	10c00604 	addi	r3,r2,24
   2a0a8:	19000808 	cmpgei	r4,r3,32
   2a0ac:	203f4526 	beq	r4,zero,29dc4 <__subdf3+0x108>
   2a0b0:	113ffe04 	addi	r4,r2,-8
   2a0b4:	8108983a 	sll	r4,r16,r4
   2a0b8:	0021883a 	mov	r16,zero
   2a0bc:	1cbf480e 	bge	r3,r18,29de0 <__subdf3+0x124>
   2a0c0:	00bfe034 	movhi	r2,65408
   2a0c4:	10bfffc4 	addi	r2,r2,-1
   2a0c8:	90e5c83a 	sub	r18,r18,r3
   2a0cc:	2088703a 	and	r4,r4,r2
   2a0d0:	003f5106 	br	29e18 <__subdf3+0x15c>
   2a0d4:	18001e26 	beq	r3,zero,2a150 <__subdf3+0x494>
   2a0d8:	4487c83a 	sub	r3,r8,r18
   2a0dc:	90006826 	beq	r18,zero,2a280 <__subdf3+0x5c4>
   2a0e0:	5000a526 	beq	r10,zero,2a378 <__subdf3+0x6bc>
   2a0e4:	4a402034 	orhi	r9,r9,128
   2a0e8:	18800e48 	cmpgei	r2,r3,57
   2a0ec:	1000b61e 	bne	r2,zero,2a3c8 <__subdf3+0x70c>
   2a0f0:	18800808 	cmpgei	r2,r3,32
   2a0f4:	1001021e 	bne	r2,zero,2a500 <__subdf3+0x844>
   2a0f8:	00800804 	movi	r2,32
   2a0fc:	10c5c83a 	sub	r2,r2,r3
   2a100:	48a0983a 	sll	r16,r9,r2
   2a104:	70c8d83a 	srl	r4,r14,r3
   2a108:	7084983a 	sll	r2,r14,r2
   2a10c:	48d2d83a 	srl	r9,r9,r3
   2a110:	8120b03a 	or	r16,r16,r4
   2a114:	1004c03a 	cmpne	r2,r2,zero
   2a118:	80a0b03a 	or	r16,r16,r2
   2a11c:	7a5f883a 	add	r15,r15,r9
   2a120:	8361883a 	add	r16,r16,r13
   2a124:	8349803a 	cmpltu	r4,r16,r13
   2a128:	23c9883a 	add	r4,r4,r15
   2a12c:	4025883a 	mov	r18,r8
   2a130:	003fc306 	br	2a040 <__subdf3+0x384>
   2a134:	480a977a 	slli	r5,r9,29
   2a138:	00880034 	movhi	r2,8192
   2a13c:	10bfffc4 	addi	r2,r2,-1
   2a140:	2088703a 	and	r4,r4,r2
   2a144:	4812d0fa 	srli	r9,r9,3
   2a148:	2144b03a 	or	r2,r4,r5
   2a14c:	003fb006 	br	2a010 <__subdf3+0x354>
   2a150:	90800044 	addi	r2,r18,1
   2a154:	1141ff8c 	andi	r5,r2,2046
   2a158:	28005c1e 	bne	r5,zero,2a2cc <__subdf3+0x610>
   2a15c:	4b84b03a 	or	r2,r9,r14
   2a160:	9000a71e 	bne	r18,zero,2a400 <__subdf3+0x744>
   2a164:	1000df26 	beq	r2,zero,2a4e4 <__subdf3+0x828>
   2a168:	7b44b03a 	or	r2,r15,r13
   2a16c:	10008f26 	beq	r2,zero,2a3ac <__subdf3+0x6f0>
   2a170:	7361883a 	add	r16,r14,r13
   2a174:	4bc9883a 	add	r4,r9,r15
   2a178:	839d803a 	cmpltu	r14,r16,r14
   2a17c:	2389883a 	add	r4,r4,r14
   2a180:	2080202c 	andhi	r2,r4,128
   2a184:	103f9b26 	beq	r2,zero,29ff4 <__subdf3+0x338>
   2a188:	00bfe034 	movhi	r2,65408
   2a18c:	10bfffc4 	addi	r2,r2,-1
   2a190:	2088703a 	and	r4,r4,r2
   2a194:	04800044 	movi	r18,1
   2a198:	003f9606 	br	29ff4 <__subdf3+0x338>
   2a19c:	50007626 	beq	r10,zero,2a378 <__subdf3+0x6bc>
   2a1a0:	4a402034 	orhi	r9,r9,128
   2a1a4:	18800e48 	cmpgei	r2,r3,57
   2a1a8:	10002e1e 	bne	r2,zero,2a264 <__subdf3+0x5a8>
   2a1ac:	18800808 	cmpgei	r2,r3,32
   2a1b0:	1000881e 	bne	r2,zero,2a3d4 <__subdf3+0x718>
   2a1b4:	00800804 	movi	r2,32
   2a1b8:	10c5c83a 	sub	r2,r2,r3
   2a1bc:	48a0983a 	sll	r16,r9,r2
   2a1c0:	70c8d83a 	srl	r4,r14,r3
   2a1c4:	709c983a 	sll	r14,r14,r2
   2a1c8:	48d2d83a 	srl	r9,r9,r3
   2a1cc:	8120b03a 	or	r16,r16,r4
   2a1d0:	701cc03a 	cmpne	r14,r14,zero
   2a1d4:	83a0b03a 	or	r16,r16,r14
   2a1d8:	7a5fc83a 	sub	r15,r15,r9
   2a1dc:	00002306 	br	2a26c <__subdf3+0x5b0>
   2a1e0:	7361c83a 	sub	r16,r14,r13
   2a1e4:	4be7c83a 	sub	r19,r9,r15
   2a1e8:	7409803a 	cmpltu	r4,r14,r16
   2a1ec:	9927c83a 	sub	r19,r19,r4
   2a1f0:	9880202c 	andhi	r2,r19,128
   2a1f4:	1000411e 	bne	r2,zero,2a2fc <__subdf3+0x640>
   2a1f8:	84c4b03a 	or	r2,r16,r19
   2a1fc:	103eed1e 	bne	r2,zero,29db4 <__subdf3+0xf8>
   2a200:	0013883a 	mov	r9,zero
   2a204:	0023883a 	mov	r17,zero
   2a208:	003f8306 	br	2a018 <__subdf3+0x35c>
   2a20c:	04800084 	movi	r18,2
   2a210:	00bfe034 	movhi	r2,65408
   2a214:	10bfffc4 	addi	r2,r2,-1
   2a218:	8006d07a 	srli	r3,r16,1
   2a21c:	2088703a 	and	r4,r4,r2
   2a220:	200497fa 	slli	r2,r4,31
   2a224:	8400004c 	andi	r16,r16,1
   2a228:	1c20b03a 	or	r16,r3,r16
   2a22c:	2008d07a 	srli	r4,r4,1
   2a230:	1420b03a 	or	r16,r2,r16
   2a234:	003ef806 	br	29e18 <__subdf3+0x15c>
   2a238:	1c3ff804 	addi	r16,r3,-32
   2a23c:	18800820 	cmpeqi	r2,r3,32
   2a240:	7c0ad83a 	srl	r5,r15,r16
   2a244:	1000041e 	bne	r2,zero,2a258 <__subdf3+0x59c>
   2a248:	00801004 	movi	r2,64
   2a24c:	10c5c83a 	sub	r2,r2,r3
   2a250:	7884983a 	sll	r2,r15,r2
   2a254:	689ab03a 	or	r13,r13,r2
   2a258:	6820c03a 	cmpne	r16,r13,zero
   2a25c:	8160b03a 	or	r16,r16,r5
   2a260:	003ecc06 	br	29d94 <__subdf3+0xd8>
   2a264:	4b92b03a 	or	r9,r9,r14
   2a268:	4820c03a 	cmpne	r16,r9,zero
   2a26c:	6c21c83a 	sub	r16,r13,r16
   2a270:	6c09803a 	cmpltu	r4,r13,r16
   2a274:	7909c83a 	sub	r4,r15,r4
   2a278:	4025883a 	mov	r18,r8
   2a27c:	003ec806 	br	29da0 <__subdf3+0xe4>
   2a280:	4b84b03a 	or	r2,r9,r14
   2a284:	10007e26 	beq	r2,zero,2a480 <__subdf3+0x7c4>
   2a288:	18bfffc4 	addi	r2,r3,-1
   2a28c:	1000a726 	beq	r2,zero,2a52c <__subdf3+0x870>
   2a290:	18c1ffd8 	cmpnei	r3,r3,2047
   2a294:	18003826 	beq	r3,zero,2a378 <__subdf3+0x6bc>
   2a298:	1007883a 	mov	r3,r2
   2a29c:	003f9206 	br	2a0e8 <__subdf3+0x42c>
   2a2a0:	00800804 	movi	r2,32
   2a2a4:	10c5c83a 	sub	r2,r2,r3
   2a2a8:	78a0983a 	sll	r16,r15,r2
   2a2ac:	68c8d83a 	srl	r4,r13,r3
   2a2b0:	689a983a 	sll	r13,r13,r2
   2a2b4:	78c4d83a 	srl	r2,r15,r3
   2a2b8:	8120b03a 	or	r16,r16,r4
   2a2bc:	681ac03a 	cmpne	r13,r13,zero
   2a2c0:	8360b03a 	or	r16,r16,r13
   2a2c4:	4893883a 	add	r9,r9,r2
   2a2c8:	003f5a06 	br	2a034 <__subdf3+0x378>
   2a2cc:	10c1ffe0 	cmpeqi	r3,r2,2047
   2a2d0:	183f601e 	bne	r3,zero,2a054 <__subdf3+0x398>
   2a2d4:	735b883a 	add	r13,r14,r13
   2a2d8:	6b9d803a 	cmpltu	r14,r13,r14
   2a2dc:	4bc9883a 	add	r4,r9,r15
   2a2e0:	2389883a 	add	r4,r4,r14
   2a2e4:	202097fa 	slli	r16,r4,31
   2a2e8:	681ad07a 	srli	r13,r13,1
   2a2ec:	2008d07a 	srli	r4,r4,1
   2a2f0:	1025883a 	mov	r18,r2
   2a2f4:	8360b03a 	or	r16,r16,r13
   2a2f8:	003f3e06 	br	29ff4 <__subdf3+0x338>
   2a2fc:	6ba1c83a 	sub	r16,r13,r14
   2a300:	7a49c83a 	sub	r4,r15,r9
   2a304:	6c1b803a 	cmpltu	r13,r13,r16
   2a308:	2367c83a 	sub	r19,r4,r13
   2a30c:	5823883a 	mov	r17,r11
   2a310:	003ea806 	br	29db4 <__subdf3+0xf8>
   2a314:	7808977a 	slli	r4,r15,29
   2a318:	00880034 	movhi	r2,8192
   2a31c:	10bfffc4 	addi	r2,r2,-1
   2a320:	308c703a 	and	r6,r6,r2
   2a324:	7812d0fa 	srli	r9,r15,3
   2a328:	3104b03a 	or	r2,r6,r4
   2a32c:	003f3806 	br	2a010 <__subdf3+0x354>
   2a330:	28005a1e 	bne	r5,zero,2a49c <__subdf3+0x7e0>
   2a334:	10008526 	beq	r2,zero,2a54c <__subdf3+0x890>
   2a338:	7806977a 	slli	r3,r15,29
   2a33c:	00880034 	movhi	r2,8192
   2a340:	10bfffc4 	addi	r2,r2,-1
   2a344:	3084703a 	and	r2,r6,r2
   2a348:	7812d0fa 	srli	r9,r15,3
   2a34c:	10c4b03a 	or	r2,r2,r3
   2a350:	5823883a 	mov	r17,r11
   2a354:	003f4906 	br	2a07c <__subdf3+0x3c0>
   2a358:	7361883a 	add	r16,r14,r13
   2a35c:	4bc9883a 	add	r4,r9,r15
   2a360:	839d803a 	cmpltu	r14,r16,r14
   2a364:	2389883a 	add	r4,r4,r14
   2a368:	2080202c 	andhi	r2,r4,128
   2a36c:	103fa71e 	bne	r2,zero,2a20c <__subdf3+0x550>
   2a370:	04800044 	movi	r18,1
   2a374:	003f1f06 	br	29ff4 <__subdf3+0x338>
   2a378:	7806977a 	slli	r3,r15,29
   2a37c:	00880034 	movhi	r2,8192
   2a380:	10bfffc4 	addi	r2,r2,-1
   2a384:	3084703a 	and	r2,r6,r2
   2a388:	7812d0fa 	srli	r9,r15,3
   2a38c:	10c4b03a 	or	r2,r2,r3
   2a390:	003f3a06 	br	2a07c <__subdf3+0x3c0>
   2a394:	7361c83a 	sub	r16,r14,r13
   2a398:	4bc9c83a 	sub	r4,r9,r15
   2a39c:	741d803a 	cmpltu	r14,r14,r16
   2a3a0:	2389c83a 	sub	r4,r4,r14
   2a3a4:	04800044 	movi	r18,1
   2a3a8:	003e7d06 	br	29da0 <__subdf3+0xe4>
   2a3ac:	480a977a 	slli	r5,r9,29
   2a3b0:	00880034 	movhi	r2,8192
   2a3b4:	10bfffc4 	addi	r2,r2,-1
   2a3b8:	2084703a 	and	r2,r4,r2
   2a3bc:	4812d0fa 	srli	r9,r9,3
   2a3c0:	1144b03a 	or	r2,r2,r5
   2a3c4:	003f1406 	br	2a018 <__subdf3+0x35c>
   2a3c8:	4b92b03a 	or	r9,r9,r14
   2a3cc:	4820c03a 	cmpne	r16,r9,zero
   2a3d0:	003f5306 	br	2a120 <__subdf3+0x464>
   2a3d4:	1c3ff804 	addi	r16,r3,-32
   2a3d8:	19000820 	cmpeqi	r4,r3,32
   2a3dc:	4c04d83a 	srl	r2,r9,r16
   2a3e0:	2000041e 	bne	r4,zero,2a3f4 <__subdf3+0x738>
   2a3e4:	01001004 	movi	r4,64
   2a3e8:	20c7c83a 	sub	r3,r4,r3
   2a3ec:	48d2983a 	sll	r9,r9,r3
   2a3f0:	725cb03a 	or	r14,r14,r9
   2a3f4:	7020c03a 	cmpne	r16,r14,zero
   2a3f8:	80a0b03a 	or	r16,r16,r2
   2a3fc:	003f9b06 	br	2a26c <__subdf3+0x5b0>
   2a400:	103fdd26 	beq	r2,zero,2a378 <__subdf3+0x6bc>
   2a404:	7b5ab03a 	or	r13,r15,r13
   2a408:	480a977a 	slli	r5,r9,29
   2a40c:	4812d0fa 	srli	r9,r9,3
   2a410:	6800251e 	bne	r13,zero,2a4a8 <__subdf3+0x7ec>
   2a414:	00880034 	movhi	r2,8192
   2a418:	10bfffc4 	addi	r2,r2,-1
   2a41c:	2084703a 	and	r2,r4,r2
   2a420:	1144b03a 	or	r2,r2,r5
   2a424:	003f1506 	br	2a07c <__subdf3+0x3c0>
   2a428:	103f7526 	beq	r2,zero,2a200 <__subdf3+0x544>
   2a42c:	7808977a 	slli	r4,r15,29
   2a430:	00880034 	movhi	r2,8192
   2a434:	10bfffc4 	addi	r2,r2,-1
   2a438:	3084703a 	and	r2,r6,r2
   2a43c:	7812d0fa 	srli	r9,r15,3
   2a440:	1104b03a 	or	r2,r2,r4
   2a444:	5823883a 	mov	r17,r11
   2a448:	003ef306 	br	2a018 <__subdf3+0x35c>
   2a44c:	6ba1c83a 	sub	r16,r13,r14
   2a450:	7a49c83a 	sub	r4,r15,r9
   2a454:	6c1b803a 	cmpltu	r13,r13,r16
   2a458:	2349c83a 	sub	r4,r4,r13
   2a45c:	04800044 	movi	r18,1
   2a460:	003e4f06 	br	29da0 <__subdf3+0xe4>
   2a464:	4806977a 	slli	r3,r9,29
   2a468:	00880034 	movhi	r2,8192
   2a46c:	10bfffc4 	addi	r2,r2,-1
   2a470:	2084703a 	and	r2,r4,r2
   2a474:	4812d0fa 	srli	r9,r9,3
   2a478:	10c4b03a 	or	r2,r2,r3
   2a47c:	003eff06 	br	2a07c <__subdf3+0x3c0>
   2a480:	7808977a 	slli	r4,r15,29
   2a484:	00880034 	movhi	r2,8192
   2a488:	10bfffc4 	addi	r2,r2,-1
   2a48c:	3084703a 	and	r2,r6,r2
   2a490:	7812d0fa 	srli	r9,r15,3
   2a494:	1104b03a 	or	r2,r2,r4
   2a498:	003edd06 	br	2a010 <__subdf3+0x354>
   2a49c:	480a977a 	slli	r5,r9,29
   2a4a0:	4812d0fa 	srli	r9,r9,3
   2a4a4:	103fdb26 	beq	r2,zero,2a414 <__subdf3+0x758>
   2a4a8:	00c80034 	movhi	r3,8192
   2a4ac:	18ffffc4 	addi	r3,r3,-1
   2a4b0:	20c4703a 	and	r2,r4,r3
   2a4b4:	4900022c 	andhi	r4,r9,8
   2a4b8:	1144b03a 	or	r2,r2,r5
   2a4bc:	203eef26 	beq	r4,zero,2a07c <__subdf3+0x3c0>
   2a4c0:	7808d0fa 	srli	r4,r15,3
   2a4c4:	2140022c 	andhi	r5,r4,8
   2a4c8:	283eec1e 	bne	r5,zero,2a07c <__subdf3+0x3c0>
   2a4cc:	7804977a 	slli	r2,r15,29
   2a4d0:	30cc703a 	and	r6,r6,r3
   2a4d4:	5823883a 	mov	r17,r11
   2a4d8:	3084b03a 	or	r2,r6,r2
   2a4dc:	2013883a 	mov	r9,r4
   2a4e0:	003ee606 	br	2a07c <__subdf3+0x3c0>
   2a4e4:	7808977a 	slli	r4,r15,29
   2a4e8:	00880034 	movhi	r2,8192
   2a4ec:	10bfffc4 	addi	r2,r2,-1
   2a4f0:	3084703a 	and	r2,r6,r2
   2a4f4:	7812d0fa 	srli	r9,r15,3
   2a4f8:	1104b03a 	or	r2,r2,r4
   2a4fc:	003ec606 	br	2a018 <__subdf3+0x35c>
   2a500:	18bff804 	addi	r2,r3,-32
   2a504:	19000820 	cmpeqi	r4,r3,32
   2a508:	4884d83a 	srl	r2,r9,r2
   2a50c:	2000041e 	bne	r4,zero,2a520 <__subdf3+0x864>
   2a510:	01001004 	movi	r4,64
   2a514:	20c7c83a 	sub	r3,r4,r3
   2a518:	48d2983a 	sll	r9,r9,r3
   2a51c:	725cb03a 	or	r14,r14,r9
   2a520:	7020c03a 	cmpne	r16,r14,zero
   2a524:	80a0b03a 	or	r16,r16,r2
   2a528:	003efd06 	br	2a120 <__subdf3+0x464>
   2a52c:	7361883a 	add	r16,r14,r13
   2a530:	4bc9883a 	add	r4,r9,r15
   2a534:	835b803a 	cmpltu	r13,r16,r13
   2a538:	2349883a 	add	r4,r4,r13
   2a53c:	003f8a06 	br	2a368 <__subdf3+0x6ac>
   2a540:	8104b03a 	or	r2,r16,r4
   2a544:	103f2e26 	beq	r2,zero,2a200 <__subdf3+0x544>
   2a548:	003eaa06 	br	29ff4 <__subdf3+0x338>
   2a54c:	02400434 	movhi	r9,16
   2a550:	0023883a 	mov	r17,zero
   2a554:	00bfffc4 	movi	r2,-1
   2a558:	4a7fffc4 	addi	r9,r9,-1
   2a55c:	003ec906 	br	2a084 <__subdf3+0x3c8>
   2a560:	0005883a 	mov	r2,zero
   2a564:	00c1ffc4 	movi	r3,2047
   2a568:	0009883a 	mov	r4,zero
   2a56c:	003e4106 	br	29e74 <__subdf3+0x1b8>

0002a570 <__floatsidf>:
   2a570:	defffd04 	addi	sp,sp,-12
   2a574:	dfc00215 	stw	ra,8(sp)
   2a578:	dc400115 	stw	r17,4(sp)
   2a57c:	dc000015 	stw	r16,0(sp)
   2a580:	20001326 	beq	r4,zero,2a5d0 <__floatsidf+0x60>
   2a584:	2022d7fa 	srli	r17,r4,31
   2a588:	2021883a 	mov	r16,r4
   2a58c:	20002416 	blt	r4,zero,2a620 <__floatsidf+0xb0>
   2a590:	8009883a 	mov	r4,r16
   2a594:	002a8940 	call	2a894 <__clzsi2>
   2a598:	01010784 	movi	r4,1054
   2a59c:	2089c83a 	sub	r4,r4,r2
   2a5a0:	114002c8 	cmpgei	r5,r2,11
   2a5a4:	20c1ffcc 	andi	r3,r4,2047
   2a5a8:	2800161e 	bne	r5,zero,2a604 <__floatsidf+0x94>
   2a5ac:	010002c4 	movi	r4,11
   2a5b0:	2089c83a 	sub	r4,r4,r2
   2a5b4:	810ad83a 	srl	r5,r16,r4
   2a5b8:	01000434 	movhi	r4,16
   2a5bc:	10800544 	addi	r2,r2,21
   2a5c0:	213fffc4 	addi	r4,r4,-1
   2a5c4:	8084983a 	sll	r2,r16,r2
   2a5c8:	290a703a 	and	r5,r5,r4
   2a5cc:	00000406 	br	2a5e0 <__floatsidf+0x70>
   2a5d0:	0023883a 	mov	r17,zero
   2a5d4:	0007883a 	mov	r3,zero
   2a5d8:	000b883a 	mov	r5,zero
   2a5dc:	0005883a 	mov	r2,zero
   2a5e0:	1808953a 	slli	r4,r3,20
   2a5e4:	880697fa 	slli	r3,r17,31
   2a5e8:	2148b03a 	or	r4,r4,r5
   2a5ec:	20c6b03a 	or	r3,r4,r3
   2a5f0:	dfc00217 	ldw	ra,8(sp)
   2a5f4:	dc400117 	ldw	r17,4(sp)
   2a5f8:	dc000017 	ldw	r16,0(sp)
   2a5fc:	dec00304 	addi	sp,sp,12
   2a600:	f800283a 	ret
   2a604:	10bffd44 	addi	r2,r2,-11
   2a608:	808a983a 	sll	r5,r16,r2
   2a60c:	00800434 	movhi	r2,16
   2a610:	10bfffc4 	addi	r2,r2,-1
   2a614:	288a703a 	and	r5,r5,r2
   2a618:	0005883a 	mov	r2,zero
   2a61c:	003ff006 	br	2a5e0 <__floatsidf+0x70>
   2a620:	0121c83a 	sub	r16,zero,r4
   2a624:	003fda06 	br	2a590 <__floatsidf+0x20>

0002a628 <__extendsfdf2>:
   2a628:	200ad5fa 	srli	r5,r4,23
   2a62c:	defffd04 	addi	sp,sp,-12
   2a630:	dc000015 	stw	r16,0(sp)
   2a634:	29403fcc 	andi	r5,r5,255
   2a638:	04002034 	movhi	r16,128
   2a63c:	28800044 	addi	r2,r5,1
   2a640:	dc400115 	stw	r17,4(sp)
   2a644:	843fffc4 	addi	r16,r16,-1
   2a648:	dfc00215 	stw	ra,8(sp)
   2a64c:	10803f8c 	andi	r2,r2,254
   2a650:	2022d7fa 	srli	r17,r4,31
   2a654:	8120703a 	and	r16,r16,r4
   2a658:	10000d26 	beq	r2,zero,2a690 <__extendsfdf2+0x68>
   2a65c:	8008d0fa 	srli	r4,r16,3
   2a660:	8020977a 	slli	r16,r16,29
   2a664:	28c0e004 	addi	r3,r5,896
   2a668:	180a953a 	slli	r5,r3,20
   2a66c:	880697fa 	slli	r3,r17,31
   2a670:	8005883a 	mov	r2,r16
   2a674:	290ab03a 	or	r5,r5,r4
   2a678:	28c6b03a 	or	r3,r5,r3
   2a67c:	dfc00217 	ldw	ra,8(sp)
   2a680:	dc400117 	ldw	r17,4(sp)
   2a684:	dc000017 	ldw	r16,0(sp)
   2a688:	dec00304 	addi	sp,sp,12
   2a68c:	f800283a 	ret
   2a690:	2800111e 	bne	r5,zero,2a6d8 <__extendsfdf2+0xb0>
   2a694:	80001926 	beq	r16,zero,2a6fc <__extendsfdf2+0xd4>
   2a698:	8009883a 	mov	r4,r16
   2a69c:	002a8940 	call	2a894 <__clzsi2>
   2a6a0:	10c002c8 	cmpgei	r3,r2,11
   2a6a4:	18001b1e 	bne	r3,zero,2a714 <__extendsfdf2+0xec>
   2a6a8:	010002c4 	movi	r4,11
   2a6ac:	2089c83a 	sub	r4,r4,r2
   2a6b0:	10c00544 	addi	r3,r2,21
   2a6b4:	810ad83a 	srl	r5,r16,r4
   2a6b8:	80e0983a 	sll	r16,r16,r3
   2a6bc:	01000434 	movhi	r4,16
   2a6c0:	00c0e244 	movi	r3,905
   2a6c4:	213fffc4 	addi	r4,r4,-1
   2a6c8:	1887c83a 	sub	r3,r3,r2
   2a6cc:	2908703a 	and	r4,r5,r4
   2a6d0:	18c1ffcc 	andi	r3,r3,2047
   2a6d4:	003fe406 	br	2a668 <__extendsfdf2+0x40>
   2a6d8:	80000b26 	beq	r16,zero,2a708 <__extendsfdf2+0xe0>
   2a6dc:	800ad0fa 	srli	r5,r16,3
   2a6e0:	00800434 	movhi	r2,16
   2a6e4:	10bfffc4 	addi	r2,r2,-1
   2a6e8:	29000234 	orhi	r4,r5,8
   2a6ec:	8020977a 	slli	r16,r16,29
   2a6f0:	2088703a 	and	r4,r4,r2
   2a6f4:	00c1ffc4 	movi	r3,2047
   2a6f8:	003fdb06 	br	2a668 <__extendsfdf2+0x40>
   2a6fc:	0007883a 	mov	r3,zero
   2a700:	0009883a 	mov	r4,zero
   2a704:	003fd806 	br	2a668 <__extendsfdf2+0x40>
   2a708:	00c1ffc4 	movi	r3,2047
   2a70c:	0009883a 	mov	r4,zero
   2a710:	003fd506 	br	2a668 <__extendsfdf2+0x40>
   2a714:	113ffd44 	addi	r4,r2,-11
   2a718:	810a983a 	sll	r5,r16,r4
   2a71c:	0021883a 	mov	r16,zero
   2a720:	003fe606 	br	2a6bc <__extendsfdf2+0x94>

0002a724 <__truncdfsf2>:
   2a724:	2804d53a 	srli	r2,r5,20
   2a728:	00c00434 	movhi	r3,16
   2a72c:	18ffffc4 	addi	r3,r3,-1
   2a730:	28c6703a 	and	r3,r5,r3
   2a734:	180c90fa 	slli	r6,r3,3
   2a738:	1081ffcc 	andi	r2,r2,2047
   2a73c:	2006d77a 	srli	r3,r4,29
   2a740:	11c00044 	addi	r7,r2,1
   2a744:	39c1ff8c 	andi	r7,r7,2046
   2a748:	280ad7fa 	srli	r5,r5,31
   2a74c:	201090fa 	slli	r8,r4,3
   2a750:	1986b03a 	or	r3,r3,r6
   2a754:	38000b26 	beq	r7,zero,2a784 <__truncdfsf2+0x60>
   2a758:	11bf2004 	addi	r6,r2,-896
   2a75c:	31c03fc8 	cmpgei	r7,r6,255
   2a760:	38001226 	beq	r7,zero,2a7ac <__truncdfsf2+0x88>
   2a764:	00bfffc4 	movi	r2,-1
   2a768:	0007883a 	mov	r3,zero
   2a76c:	10803fcc 	andi	r2,r2,255
   2a770:	100495fa 	slli	r2,r2,23
   2a774:	280a97fa 	slli	r5,r5,31
   2a778:	10c4b03a 	or	r2,r2,r3
   2a77c:	1144b03a 	or	r2,r2,r5
   2a780:	f800283a 	ret
   2a784:	1a10b03a 	or	r8,r3,r8
   2a788:	1000041e 	bne	r2,zero,2a79c <__truncdfsf2+0x78>
   2a78c:	40001d1e 	bne	r8,zero,2a804 <__truncdfsf2+0xe0>
   2a790:	0005883a 	mov	r2,zero
   2a794:	0007883a 	mov	r3,zero
   2a798:	003ff406 	br	2a76c <__truncdfsf2+0x48>
   2a79c:	403ff126 	beq	r8,zero,2a764 <__truncdfsf2+0x40>
   2a7a0:	18c01034 	orhi	r3,r3,64
   2a7a4:	00bfffc4 	movi	r2,-1
   2a7a8:	003ff006 	br	2a76c <__truncdfsf2+0x48>
   2a7ac:	0180170e 	bge	zero,r6,2a80c <__truncdfsf2+0xe8>
   2a7b0:	200891ba 	slli	r4,r4,6
   2a7b4:	180690fa 	slli	r3,r3,3
   2a7b8:	4010d77a 	srli	r8,r8,29
   2a7bc:	2008c03a 	cmpne	r4,r4,zero
   2a7c0:	20c6b03a 	or	r3,r4,r3
   2a7c4:	1a06b03a 	or	r3,r3,r8
   2a7c8:	188001cc 	andi	r2,r3,7
   2a7cc:	10002f26 	beq	r2,zero,2a88c <__truncdfsf2+0x168>
   2a7d0:	188003cc 	andi	r2,r3,15
   2a7d4:	10800118 	cmpnei	r2,r2,4
   2a7d8:	10000126 	beq	r2,zero,2a7e0 <__truncdfsf2+0xbc>
   2a7dc:	18c00104 	addi	r3,r3,4
   2a7e0:	1881002c 	andhi	r2,r3,1024
   2a7e4:	10002926 	beq	r2,zero,2a88c <__truncdfsf2+0x168>
   2a7e8:	30800044 	addi	r2,r6,1
   2a7ec:	11003fe0 	cmpeqi	r4,r2,255
   2a7f0:	203fdc1e 	bne	r4,zero,2a764 <__truncdfsf2+0x40>
   2a7f4:	180691ba 	slli	r3,r3,6
   2a7f8:	1806d27a 	srli	r3,r3,9
   2a7fc:	003fdb06 	br	2a76c <__truncdfsf2+0x48>
   2a800:	0005883a 	mov	r2,zero
   2a804:	00c00144 	movi	r3,5
   2a808:	003ffa06 	br	2a7f4 <__truncdfsf2+0xd0>
   2a80c:	313ffa50 	cmplti	r4,r6,-23
   2a810:	203ffb1e 	bne	r4,zero,2a800 <__truncdfsf2+0xdc>
   2a814:	01c00784 	movi	r7,30
   2a818:	398fc83a 	sub	r7,r7,r6
   2a81c:	3a400808 	cmpgei	r9,r7,32
   2a820:	19002034 	orhi	r4,r3,128
   2a824:	48001126 	beq	r9,zero,2a86c <__truncdfsf2+0x148>
   2a828:	00ffff84 	movi	r3,-2
   2a82c:	198dc83a 	sub	r6,r3,r6
   2a830:	39c00820 	cmpeqi	r7,r7,32
   2a834:	218cd83a 	srl	r6,r4,r6
   2a838:	3800031e 	bne	r7,zero,2a848 <__truncdfsf2+0x124>
   2a83c:	10ff2884 	addi	r3,r2,-862
   2a840:	20c8983a 	sll	r4,r4,r3
   2a844:	4110b03a 	or	r8,r8,r4
   2a848:	4006c03a 	cmpne	r3,r8,zero
   2a84c:	1986b03a 	or	r3,r3,r6
   2a850:	188001cc 	andi	r2,r3,7
   2a854:	000d883a 	mov	r6,zero
   2a858:	103fdd1e 	bne	r2,zero,2a7d0 <__truncdfsf2+0xac>
   2a85c:	1881002c 	andhi	r2,r3,1024
   2a860:	103fe426 	beq	r2,zero,2a7f4 <__truncdfsf2+0xd0>
   2a864:	00800044 	movi	r2,1
   2a868:	003fe206 	br	2a7f4 <__truncdfsf2+0xd0>
   2a86c:	10ff2084 	addi	r3,r2,-894
   2a870:	40c4983a 	sll	r2,r8,r3
   2a874:	20c8983a 	sll	r4,r4,r3
   2a878:	41c6d83a 	srl	r3,r8,r7
   2a87c:	1004c03a 	cmpne	r2,r2,zero
   2a880:	1108b03a 	or	r4,r2,r4
   2a884:	1906b03a 	or	r3,r3,r4
   2a888:	003ff106 	br	2a850 <__truncdfsf2+0x12c>
   2a88c:	3005883a 	mov	r2,r6
   2a890:	003fd806 	br	2a7f4 <__truncdfsf2+0xd0>

0002a894 <__clzsi2>:
   2a894:	00bfffd4 	movui	r2,65535
   2a898:	11000436 	bltu	r2,r4,2a8ac <__clzsi2+0x18>
   2a89c:	20804030 	cmpltui	r2,r4,256
   2a8a0:	10000e26 	beq	r2,zero,2a8dc <__clzsi2+0x48>
   2a8a4:	01400804 	movi	r5,32
   2a8a8:	00000406 	br	2a8bc <__clzsi2+0x28>
   2a8ac:	00804034 	movhi	r2,256
   2a8b0:	20800736 	bltu	r4,r2,2a8d0 <__clzsi2+0x3c>
   2a8b4:	2008d63a 	srli	r4,r4,24
   2a8b8:	01400204 	movi	r5,8
   2a8bc:	00c00134 	movhi	r3,4
   2a8c0:	20c7883a 	add	r3,r4,r3
   2a8c4:	18a28703 	ldbu	r2,-30180(r3)
   2a8c8:	2885c83a 	sub	r2,r5,r2
   2a8cc:	f800283a 	ret
   2a8d0:	2008d43a 	srli	r4,r4,16
   2a8d4:	01400404 	movi	r5,16
   2a8d8:	003ff806 	br	2a8bc <__clzsi2+0x28>
   2a8dc:	2008d23a 	srli	r4,r4,8
   2a8e0:	01400604 	movi	r5,24
   2a8e4:	003ff506 	br	2a8bc <__clzsi2+0x28>

0002a8e8 <__errno>:
   2a8e8:	00800134 	movhi	r2,4
   2a8ec:	10ab2417 	ldw	r2,-21360(r2)
   2a8f0:	f800283a 	ret

0002a8f4 <_printf_r>:
   2a8f4:	defffd04 	addi	sp,sp,-12
   2a8f8:	2805883a 	mov	r2,r5
   2a8fc:	dfc00015 	stw	ra,0(sp)
   2a900:	d9800115 	stw	r6,4(sp)
   2a904:	d9c00215 	stw	r7,8(sp)
   2a908:	21400217 	ldw	r5,8(r4)
   2a90c:	d9c00104 	addi	r7,sp,4
   2a910:	100d883a 	mov	r6,r2
   2a914:	002aaf00 	call	2aaf0 <___vfprintf_internal_r>
   2a918:	dfc00017 	ldw	ra,0(sp)
   2a91c:	dec00304 	addi	sp,sp,12
   2a920:	f800283a 	ret

0002a924 <printf>:
   2a924:	defffc04 	addi	sp,sp,-16
   2a928:	dfc00015 	stw	ra,0(sp)
   2a92c:	d9400115 	stw	r5,4(sp)
   2a930:	d9800215 	stw	r6,8(sp)
   2a934:	d9c00315 	stw	r7,12(sp)
   2a938:	00800134 	movhi	r2,4
   2a93c:	10ab2417 	ldw	r2,-21360(r2)
   2a940:	200b883a 	mov	r5,r4
   2a944:	d9800104 	addi	r6,sp,4
   2a948:	11000217 	ldw	r4,8(r2)
   2a94c:	002cbf40 	call	2cbf4 <__vfprintf_internal>
   2a950:	dfc00017 	ldw	ra,0(sp)
   2a954:	dec00404 	addi	sp,sp,16
   2a958:	f800283a 	ret

0002a95c <_putchar_r>:
   2a95c:	21800217 	ldw	r6,8(r4)
   2a960:	00318981 	jmpi	31898 <_putc_r>

0002a964 <putchar>:
   2a964:	00800134 	movhi	r2,4
   2a968:	10ab2417 	ldw	r2,-21360(r2)
   2a96c:	200b883a 	mov	r5,r4
   2a970:	11800217 	ldw	r6,8(r2)
   2a974:	1009883a 	mov	r4,r2
   2a978:	00318981 	jmpi	31898 <_putc_r>

0002a97c <_puts_r>:
   2a97c:	defff504 	addi	sp,sp,-44
   2a980:	dc000815 	stw	r16,32(sp)
   2a984:	2021883a 	mov	r16,r4
   2a988:	2809883a 	mov	r4,r5
   2a98c:	dc400915 	stw	r17,36(sp)
   2a990:	dfc00a15 	stw	ra,40(sp)
   2a994:	2823883a 	mov	r17,r5
   2a998:	002aa580 	call	2aa58 <strlen>
   2a99c:	11000044 	addi	r4,r2,1
   2a9a0:	d8800515 	stw	r2,20(sp)
   2a9a4:	00800044 	movi	r2,1
   2a9a8:	00c00134 	movhi	r3,4
   2a9ac:	d8800715 	stw	r2,28(sp)
   2a9b0:	d8800404 	addi	r2,sp,16
   2a9b4:	18e2c704 	addi	r3,r3,-29924
   2a9b8:	d8800115 	stw	r2,4(sp)
   2a9bc:	00800084 	movi	r2,2
   2a9c0:	dc400415 	stw	r17,16(sp)
   2a9c4:	d8c00615 	stw	r3,24(sp)
   2a9c8:	d9000315 	stw	r4,12(sp)
   2a9cc:	d8800215 	stw	r2,8(sp)
   2a9d0:	81400217 	ldw	r5,8(r16)
   2a9d4:	80000226 	beq	r16,zero,2a9e0 <_puts_r+0x64>
   2a9d8:	80800e17 	ldw	r2,56(r16)
   2a9dc:	10001326 	beq	r2,zero,2aa2c <_puts_r+0xb0>
   2a9e0:	2880030b 	ldhu	r2,12(r5)
   2a9e4:	10c8000c 	andi	r3,r2,8192
   2a9e8:	1800061e 	bne	r3,zero,2aa04 <_puts_r+0x88>
   2a9ec:	28c01917 	ldw	r3,100(r5)
   2a9f0:	0137ffc4 	movi	r4,-8193
   2a9f4:	10880014 	ori	r2,r2,8192
   2a9f8:	1906703a 	and	r3,r3,r4
   2a9fc:	2880030d 	sth	r2,12(r5)
   2aa00:	28c01915 	stw	r3,100(r5)
   2aa04:	d9800104 	addi	r6,sp,4
   2aa08:	8009883a 	mov	r4,r16
   2aa0c:	002f26c0 	call	2f26c <__sfvwrite_r>
   2aa10:	10000b1e 	bne	r2,zero,2aa40 <_puts_r+0xc4>
   2aa14:	00800284 	movi	r2,10
   2aa18:	dfc00a17 	ldw	ra,40(sp)
   2aa1c:	dc400917 	ldw	r17,36(sp)
   2aa20:	dc000817 	ldw	r16,32(sp)
   2aa24:	dec00b04 	addi	sp,sp,44
   2aa28:	f800283a 	ret
   2aa2c:	8009883a 	mov	r4,r16
   2aa30:	d9400015 	stw	r5,0(sp)
   2aa34:	002ee0c0 	call	2ee0c <__sinit>
   2aa38:	d9400017 	ldw	r5,0(sp)
   2aa3c:	003fe806 	br	2a9e0 <_puts_r+0x64>
   2aa40:	00bfffc4 	movi	r2,-1
   2aa44:	003ff406 	br	2aa18 <_puts_r+0x9c>

0002aa48 <puts>:
   2aa48:	00800134 	movhi	r2,4
   2aa4c:	200b883a 	mov	r5,r4
   2aa50:	112b2417 	ldw	r4,-21360(r2)
   2aa54:	002a97c1 	jmpi	2a97c <_puts_r>

0002aa58 <strlen>:
   2aa58:	208000cc 	andi	r2,r4,3
   2aa5c:	10000926 	beq	r2,zero,2aa84 <strlen+0x2c>
   2aa60:	2005883a 	mov	r2,r4
   2aa64:	00000306 	br	2aa74 <strlen+0x1c>
   2aa68:	10800044 	addi	r2,r2,1
   2aa6c:	10c000cc 	andi	r3,r2,3
   2aa70:	18000526 	beq	r3,zero,2aa88 <strlen+0x30>
   2aa74:	10c00007 	ldb	r3,0(r2)
   2aa78:	183ffb1e 	bne	r3,zero,2aa68 <strlen+0x10>
   2aa7c:	1105c83a 	sub	r2,r2,r4
   2aa80:	f800283a 	ret
   2aa84:	2005883a 	mov	r2,r4
   2aa88:	11400017 	ldw	r5,0(r2)
   2aa8c:	01ffbff4 	movhi	r7,65279
   2aa90:	39ffbfc4 	addi	r7,r7,-257
   2aa94:	29c7883a 	add	r3,r5,r7
   2aa98:	01a02074 	movhi	r6,32897
   2aa9c:	014a303a 	nor	r5,zero,r5
   2aaa0:	1946703a 	and	r3,r3,r5
   2aaa4:	31a02004 	addi	r6,r6,-32640
   2aaa8:	1986703a 	and	r3,r3,r6
   2aaac:	1800071e 	bne	r3,zero,2aacc <strlen+0x74>
   2aab0:	11400117 	ldw	r5,4(r2)
   2aab4:	10800104 	addi	r2,r2,4
   2aab8:	29c7883a 	add	r3,r5,r7
   2aabc:	014a303a 	nor	r5,zero,r5
   2aac0:	1946703a 	and	r3,r3,r5
   2aac4:	1986703a 	and	r3,r3,r6
   2aac8:	183ff926 	beq	r3,zero,2aab0 <strlen+0x58>
   2aacc:	10c00007 	ldb	r3,0(r2)
   2aad0:	183fea26 	beq	r3,zero,2aa7c <strlen+0x24>
   2aad4:	10c00047 	ldb	r3,1(r2)
   2aad8:	10800044 	addi	r2,r2,1
   2aadc:	183fe726 	beq	r3,zero,2aa7c <strlen+0x24>
   2aae0:	10c00047 	ldb	r3,1(r2)
   2aae4:	10800044 	addi	r2,r2,1
   2aae8:	183ffa1e 	bne	r3,zero,2aad4 <strlen+0x7c>
   2aaec:	003fe306 	br	2aa7c <strlen+0x24>

0002aaf0 <___vfprintf_internal_r>:
   2aaf0:	deffbf04 	addi	sp,sp,-260
   2aaf4:	dfc04015 	stw	ra,256(sp)
   2aaf8:	dd803d15 	stw	r22,244(sp)
   2aafc:	dcc03a15 	stw	r19,232(sp)
   2ab00:	dc803915 	stw	r18,228(sp)
   2ab04:	2027883a 	mov	r19,r4
   2ab08:	2825883a 	mov	r18,r5
   2ab0c:	302d883a 	mov	r22,r6
   2ab10:	d9c00615 	stw	r7,24(sp)
   2ab14:	df003f15 	stw	fp,252(sp)
   2ab18:	ddc03e15 	stw	r23,248(sp)
   2ab1c:	dd403c15 	stw	r21,240(sp)
   2ab20:	dd003b15 	stw	r20,236(sp)
   2ab24:	dc403815 	stw	r17,224(sp)
   2ab28:	dc003715 	stw	r16,220(sp)
   2ab2c:	002f87c0 	call	2f87c <_localeconv_r>
   2ab30:	10800017 	ldw	r2,0(r2)
   2ab34:	1009883a 	mov	r4,r2
   2ab38:	d8800d15 	stw	r2,52(sp)
   2ab3c:	002aa580 	call	2aa58 <strlen>
   2ab40:	d8800b15 	stw	r2,44(sp)
   2ab44:	98000226 	beq	r19,zero,2ab50 <___vfprintf_internal_r+0x60>
   2ab48:	98800e17 	ldw	r2,56(r19)
   2ab4c:	1001e026 	beq	r2,zero,2b2d0 <___vfprintf_internal_r+0x7e0>
   2ab50:	9080030b 	ldhu	r2,12(r18)
   2ab54:	10c8000c 	andi	r3,r2,8192
   2ab58:	1800061e 	bne	r3,zero,2ab74 <___vfprintf_internal_r+0x84>
   2ab5c:	90c01917 	ldw	r3,100(r18)
   2ab60:	0137ffc4 	movi	r4,-8193
   2ab64:	10880014 	ori	r2,r2,8192
   2ab68:	1906703a 	and	r3,r3,r4
   2ab6c:	9080030d 	sth	r2,12(r18)
   2ab70:	90c01915 	stw	r3,100(r18)
   2ab74:	10c0020c 	andi	r3,r2,8
   2ab78:	1800fc26 	beq	r3,zero,2af6c <___vfprintf_internal_r+0x47c>
   2ab7c:	90c00417 	ldw	r3,16(r18)
   2ab80:	1800fa26 	beq	r3,zero,2af6c <___vfprintf_internal_r+0x47c>
   2ab84:	1080068c 	andi	r2,r2,26
   2ab88:	10800298 	cmpnei	r2,r2,10
   2ab8c:	1000ff26 	beq	r2,zero,2af8c <___vfprintf_internal_r+0x49c>
   2ab90:	d8802704 	addi	r2,sp,156
   2ab94:	b02f883a 	mov	r23,r22
   2ab98:	d8801a15 	stw	r2,104(sp)
   2ab9c:	d8001c15 	stw	zero,112(sp)
   2aba0:	d8001b15 	stw	zero,108(sp)
   2aba4:	d8000815 	stw	zero,32(sp)
   2aba8:	d8000915 	stw	zero,36(sp)
   2abac:	d8000a15 	stw	zero,40(sp)
   2abb0:	d8000c15 	stw	zero,48(sp)
   2abb4:	d8001015 	stw	zero,64(sp)
   2abb8:	d8000515 	stw	zero,20(sp)
   2abbc:	102d883a 	mov	r22,r2
   2abc0:	b8800007 	ldb	r2,0(r23)
   2abc4:	1000d726 	beq	r2,zero,2af24 <___vfprintf_internal_r+0x434>
   2abc8:	b821883a 	mov	r16,r23
   2abcc:	00000306 	br	2abdc <___vfprintf_internal_r+0xec>
   2abd0:	80800047 	ldb	r2,1(r16)
   2abd4:	84000044 	addi	r16,r16,1
   2abd8:	10012226 	beq	r2,zero,2b064 <___vfprintf_internal_r+0x574>
   2abdc:	10800958 	cmpnei	r2,r2,37
   2abe0:	103ffb1e 	bne	r2,zero,2abd0 <___vfprintf_internal_r+0xe0>
   2abe4:	85e3c83a 	sub	r17,r16,r23
   2abe8:	85c1201e 	bne	r16,r23,2b06c <___vfprintf_internal_r+0x57c>
   2abec:	80800003 	ldbu	r2,0(r16)
   2abf0:	10803fcc 	andi	r2,r2,255
   2abf4:	1080201c 	xori	r2,r2,128
   2abf8:	10bfe004 	addi	r2,r2,-128
   2abfc:	1000c926 	beq	r2,zero,2af24 <___vfprintf_internal_r+0x434>
   2ac00:	82c00047 	ldb	r11,1(r16)
   2ac04:	85c00044 	addi	r23,r16,1
   2ac08:	d8001345 	stb	zero,77(sp)
   2ac0c:	0009883a 	mov	r4,zero
   2ac10:	000b883a 	mov	r5,zero
   2ac14:	023fffc4 	movi	r8,-1
   2ac18:	0021883a 	mov	r16,zero
   2ac1c:	0019883a 	mov	r12,zero
   2ac20:	bdc00044 	addi	r23,r23,1
   2ac24:	5839883a 	mov	fp,r11
   2ac28:	e0bff804 	addi	r2,fp,-32
   2ac2c:	10c01668 	cmpgeui	r3,r2,89
   2ac30:	18006c1e 	bne	r3,zero,2ade4 <___vfprintf_internal_r+0x2f4>
   2ac34:	100490ba 	slli	r2,r2,2
   2ac38:	00c000f4 	movhi	r3,3
   2ac3c:	10c7883a 	add	r3,r2,r3
   2ac40:	18ab1217 	ldw	r2,-21432(r3)
   2ac44:	1000683a 	jmp	r2
   2ac48:	0002b598 	cmpnei	zero,zero,2774
   2ac4c:	0002ade4 	muli	zero,zero,2743
   2ac50:	0002ade4 	muli	zero,zero,2743
   2ac54:	0002b58c 	andi	zero,zero,2774
   2ac58:	0002ade4 	muli	zero,zero,2743
   2ac5c:	0002ade4 	muli	zero,zero,2743
   2ac60:	0002ade4 	muli	zero,zero,2743
   2ac64:	0002ade4 	muli	zero,zero,2743
   2ac68:	0002ade4 	muli	zero,zero,2743
   2ac6c:	0002ade4 	muli	zero,zero,2743
   2ac70:	0002b564 	muli	zero,zero,2773
   2ac74:	0002b554 	movui	zero,2773
   2ac78:	0002ade4 	muli	zero,zero,2743
   2ac7c:	0002b53c 	xorhi	zero,zero,2772
   2ac80:	0002b4f0 	cmpltui	zero,zero,2771
   2ac84:	0002ade4 	muli	zero,zero,2743
   2ac88:	0002b4e4 	muli	zero,zero,2771
   2ac8c:	0002adac 	andhi	zero,zero,2742
   2ac90:	0002adac 	andhi	zero,zero,2742
   2ac94:	0002adac 	andhi	zero,zero,2742
   2ac98:	0002adac 	andhi	zero,zero,2742
   2ac9c:	0002adac 	andhi	zero,zero,2742
   2aca0:	0002adac 	andhi	zero,zero,2742
   2aca4:	0002adac 	andhi	zero,zero,2742
   2aca8:	0002adac 	andhi	zero,zero,2742
   2acac:	0002adac 	andhi	zero,zero,2742
   2acb0:	0002ade4 	muli	zero,zero,2743
   2acb4:	0002ade4 	muli	zero,zero,2743
   2acb8:	0002ade4 	muli	zero,zero,2743
   2acbc:	0002ade4 	muli	zero,zero,2743
   2acc0:	0002ade4 	muli	zero,zero,2743
   2acc4:	0002ade4 	muli	zero,zero,2743
   2acc8:	0002ade4 	muli	zero,zero,2743
   2accc:	0002ade4 	muli	zero,zero,2743
   2acd0:	0002ade4 	muli	zero,zero,2743
   2acd4:	0002ade4 	muli	zero,zero,2743
   2acd8:	0002b3fc 	xorhi	zero,zero,2767
   2acdc:	0002b0c8 	cmpgei	zero,zero,2755
   2ace0:	0002ade4 	muli	zero,zero,2743
   2ace4:	0002b0c8 	cmpgei	zero,zero,2755
   2ace8:	0002ade4 	muli	zero,zero,2743
   2acec:	0002ade4 	muli	zero,zero,2743
   2acf0:	0002ade4 	muli	zero,zero,2743
   2acf4:	0002ade4 	muli	zero,zero,2743
   2acf8:	0002b3f0 	cmpltui	zero,zero,2767
   2acfc:	0002ade4 	muli	zero,zero,2743
   2ad00:	0002ade4 	muli	zero,zero,2743
   2ad04:	0002affc 	xorhi	zero,zero,2751
   2ad08:	0002ade4 	muli	zero,zero,2743
   2ad0c:	0002ade4 	muli	zero,zero,2743
   2ad10:	0002ade4 	muli	zero,zero,2743
   2ad14:	0002ade4 	muli	zero,zero,2743
   2ad18:	0002ade4 	muli	zero,zero,2743
   2ad1c:	0002afd4 	movui	zero,2751
   2ad20:	0002ade4 	muli	zero,zero,2743
   2ad24:	0002ade4 	muli	zero,zero,2743
   2ad28:	0002b3a8 	cmpgeui	zero,zero,2766
   2ad2c:	0002ade4 	muli	zero,zero,2743
   2ad30:	0002ade4 	muli	zero,zero,2743
   2ad34:	0002ade4 	muli	zero,zero,2743
   2ad38:	0002ade4 	muli	zero,zero,2743
   2ad3c:	0002ade4 	muli	zero,zero,2743
   2ad40:	0002ade4 	muli	zero,zero,2743
   2ad44:	0002ade4 	muli	zero,zero,2743
   2ad48:	0002ade4 	muli	zero,zero,2743
   2ad4c:	0002ade4 	muli	zero,zero,2743
   2ad50:	0002ade4 	muli	zero,zero,2743
   2ad54:	0002b380 	call	2b38 <__alt_mem_nios_system_shared_memory+0xb38>
   2ad58:	0002b2dc 	xori	zero,zero,2763
   2ad5c:	0002b0c8 	cmpgei	zero,zero,2755
   2ad60:	0002b0c8 	cmpgei	zero,zero,2755
   2ad64:	0002b0c8 	cmpgei	zero,zero,2755
   2ad68:	0002b374 	movhi	zero,2765
   2ad6c:	0002b2dc 	xori	zero,zero,2763
   2ad70:	0002ade4 	muli	zero,zero,2743
   2ad74:	0002ade4 	muli	zero,zero,2743
   2ad78:	0002b6ec 	andhi	zero,zero,2779
   2ad7c:	0002ade4 	muli	zero,zero,2743
   2ad80:	0002b6b0 	cmpltui	zero,zero,2778
   2ad84:	0002b000 	call	2b00 <__alt_mem_nios_system_shared_memory+0xb00>
   2ad88:	0002b670 	cmpltui	zero,zero,2777
   2ad8c:	0002b664 	muli	zero,zero,2777
   2ad90:	0002ade4 	muli	zero,zero,2743
   2ad94:	0002b60c 	andi	zero,zero,2776
   2ad98:	0002ade4 	muli	zero,zero,2743
   2ad9c:	0002afd8 	cmpnei	zero,zero,2751
   2ada0:	0002ade4 	muli	zero,zero,2743
   2ada4:	0002ade4 	muli	zero,zero,2743
   2ada8:	0002b5c4 	movi	zero,2775
   2adac:	0021883a 	mov	r16,zero
   2adb0:	e0fff404 	addi	r3,fp,-48
   2adb4:	800490ba 	slli	r2,r16,2
   2adb8:	bf000007 	ldb	fp,0(r23)
   2adbc:	bdc00044 	addi	r23,r23,1
   2adc0:	1421883a 	add	r16,r2,r16
   2adc4:	8421883a 	add	r16,r16,r16
   2adc8:	1c21883a 	add	r16,r3,r16
   2adcc:	e0fff404 	addi	r3,fp,-48
   2add0:	188002b0 	cmpltui	r2,r3,10
   2add4:	103ff71e 	bne	r2,zero,2adb4 <___vfprintf_internal_r+0x2c4>
   2add8:	e0bff804 	addi	r2,fp,-32
   2addc:	10c01668 	cmpgeui	r3,r2,89
   2ade0:	183f9426 	beq	r3,zero,2ac34 <___vfprintf_internal_r+0x144>
   2ade4:	21003fcc 	andi	r4,r4,255
   2ade8:	2006871e 	bne	r4,zero,2c808 <___vfprintf_internal_r+0x1d18>
   2adec:	e0004d26 	beq	fp,zero,2af24 <___vfprintf_internal_r+0x434>
   2adf0:	df001d05 	stb	fp,116(sp)
   2adf4:	d8001345 	stb	zero,77(sp)
   2adf8:	05000044 	movi	r20,1
   2adfc:	05400044 	movi	r21,1
   2ae00:	dc401d04 	addi	r17,sp,116
   2ae04:	db000415 	stw	r12,16(sp)
   2ae08:	0011883a 	mov	r8,zero
   2ae0c:	d8000715 	stw	zero,28(sp)
   2ae10:	d8800417 	ldw	r2,16(sp)
   2ae14:	1380008c 	andi	r14,r2,2
   2ae18:	70000126 	beq	r14,zero,2ae20 <___vfprintf_internal_r+0x330>
   2ae1c:	a5000084 	addi	r20,r20,2
   2ae20:	d8800417 	ldw	r2,16(sp)
   2ae24:	d8c01c17 	ldw	r3,112(sp)
   2ae28:	1340210c 	andi	r13,r2,132
   2ae2c:	6800021e 	bne	r13,zero,2ae38 <___vfprintf_internal_r+0x348>
   2ae30:	850fc83a 	sub	r7,r16,r20
   2ae34:	01c34516 	blt	zero,r7,2bb4c <___vfprintf_internal_r+0x105c>
   2ae38:	d8801347 	ldb	r2,77(sp)
   2ae3c:	10000c26 	beq	r2,zero,2ae70 <___vfprintf_internal_r+0x380>
   2ae40:	d8801b17 	ldw	r2,108(sp)
   2ae44:	d9001344 	addi	r4,sp,77
   2ae48:	18c00044 	addi	r3,r3,1
   2ae4c:	10800044 	addi	r2,r2,1
   2ae50:	b1000015 	stw	r4,0(r22)
   2ae54:	01000044 	movi	r4,1
   2ae58:	d8801b15 	stw	r2,108(sp)
   2ae5c:	b1000115 	stw	r4,4(r22)
   2ae60:	d8c01c15 	stw	r3,112(sp)
   2ae64:	10800208 	cmpgei	r2,r2,8
   2ae68:	1003791e 	bne	r2,zero,2bc50 <___vfprintf_internal_r+0x1160>
   2ae6c:	b5800204 	addi	r22,r22,8
   2ae70:	70000c26 	beq	r14,zero,2aea4 <___vfprintf_internal_r+0x3b4>
   2ae74:	d8801b17 	ldw	r2,108(sp)
   2ae78:	d9001384 	addi	r4,sp,78
   2ae7c:	18c00084 	addi	r3,r3,2
   2ae80:	10800044 	addi	r2,r2,1
   2ae84:	b1000015 	stw	r4,0(r22)
   2ae88:	01000084 	movi	r4,2
   2ae8c:	d8801b15 	stw	r2,108(sp)
   2ae90:	b1000115 	stw	r4,4(r22)
   2ae94:	d8c01c15 	stw	r3,112(sp)
   2ae98:	10800208 	cmpgei	r2,r2,8
   2ae9c:	10037a1e 	bne	r2,zero,2bc88 <___vfprintf_internal_r+0x1198>
   2aea0:	b5800204 	addi	r22,r22,8
   2aea4:	6b402018 	cmpnei	r13,r13,128
   2aea8:	68025b26 	beq	r13,zero,2b818 <___vfprintf_internal_r+0xd28>
   2aeac:	4551c83a 	sub	r8,r8,r21
   2aeb0:	02029316 	blt	zero,r8,2b900 <___vfprintf_internal_r+0xe10>
   2aeb4:	d8800417 	ldw	r2,16(sp)
   2aeb8:	1080400c 	andi	r2,r2,256
   2aebc:	1002101e 	bne	r2,zero,2b700 <___vfprintf_internal_r+0xc10>
   2aec0:	d8801b17 	ldw	r2,108(sp)
   2aec4:	1d47883a 	add	r3,r3,r21
   2aec8:	b4400015 	stw	r17,0(r22)
   2aecc:	10800044 	addi	r2,r2,1
   2aed0:	b5400115 	stw	r21,4(r22)
   2aed4:	d8801b15 	stw	r2,108(sp)
   2aed8:	d8c01c15 	stw	r3,112(sp)
   2aedc:	10800208 	cmpgei	r2,r2,8
   2aee0:	1003101e 	bne	r2,zero,2bb24 <___vfprintf_internal_r+0x1034>
   2aee4:	b5800204 	addi	r22,r22,8
   2aee8:	d8800417 	ldw	r2,16(sp)
   2aeec:	1440010c 	andi	r17,r2,4
   2aef0:	88000226 	beq	r17,zero,2aefc <___vfprintf_internal_r+0x40c>
   2aef4:	8523c83a 	sub	r17,r16,r20
   2aef8:	0440c616 	blt	zero,r17,2b214 <___vfprintf_internal_r+0x724>
   2aefc:	8500010e 	bge	r16,r20,2af04 <___vfprintf_internal_r+0x414>
   2af00:	a021883a 	mov	r16,r20
   2af04:	d8800517 	ldw	r2,20(sp)
   2af08:	1405883a 	add	r2,r2,r16
   2af0c:	d8800515 	stw	r2,20(sp)
   2af10:	1802c21e 	bne	r3,zero,2ba1c <___vfprintf_internal_r+0xf2c>
   2af14:	b8800007 	ldb	r2,0(r23)
   2af18:	d8001b15 	stw	zero,108(sp)
   2af1c:	dd802704 	addi	r22,sp,156
   2af20:	103f291e 	bne	r2,zero,2abc8 <___vfprintf_internal_r+0xd8>
   2af24:	d8801c17 	ldw	r2,112(sp)
   2af28:	1006391e 	bne	r2,zero,2c810 <___vfprintf_internal_r+0x1d20>
   2af2c:	9080030b 	ldhu	r2,12(r18)
   2af30:	1080100c 	andi	r2,r2,64
   2af34:	1006cf1e 	bne	r2,zero,2ca74 <___vfprintf_internal_r+0x1f84>
   2af38:	d8800517 	ldw	r2,20(sp)
   2af3c:	dfc04017 	ldw	ra,256(sp)
   2af40:	df003f17 	ldw	fp,252(sp)
   2af44:	ddc03e17 	ldw	r23,248(sp)
   2af48:	dd803d17 	ldw	r22,244(sp)
   2af4c:	dd403c17 	ldw	r21,240(sp)
   2af50:	dd003b17 	ldw	r20,236(sp)
   2af54:	dcc03a17 	ldw	r19,232(sp)
   2af58:	dc803917 	ldw	r18,228(sp)
   2af5c:	dc403817 	ldw	r17,224(sp)
   2af60:	dc003717 	ldw	r16,220(sp)
   2af64:	dec04104 	addi	sp,sp,260
   2af68:	f800283a 	ret
   2af6c:	900b883a 	mov	r5,r18
   2af70:	9809883a 	mov	r4,r19
   2af74:	002ccd00 	call	2ccd0 <__swsetup_r>
   2af78:	1006be1e 	bne	r2,zero,2ca74 <___vfprintf_internal_r+0x1f84>
   2af7c:	9080030b 	ldhu	r2,12(r18)
   2af80:	1080068c 	andi	r2,r2,26
   2af84:	10800298 	cmpnei	r2,r2,10
   2af88:	103f011e 	bne	r2,zero,2ab90 <___vfprintf_internal_r+0xa0>
   2af8c:	9080038f 	ldh	r2,14(r18)
   2af90:	103eff16 	blt	r2,zero,2ab90 <___vfprintf_internal_r+0xa0>
   2af94:	d9c00617 	ldw	r7,24(sp)
   2af98:	b00d883a 	mov	r6,r22
   2af9c:	900b883a 	mov	r5,r18
   2afa0:	9809883a 	mov	r4,r19
   2afa4:	dfc04017 	ldw	ra,256(sp)
   2afa8:	df003f17 	ldw	fp,252(sp)
   2afac:	ddc03e17 	ldw	r23,248(sp)
   2afb0:	dd803d17 	ldw	r22,244(sp)
   2afb4:	dd403c17 	ldw	r21,240(sp)
   2afb8:	dd003b17 	ldw	r20,236(sp)
   2afbc:	dcc03a17 	ldw	r19,232(sp)
   2afc0:	dc803917 	ldw	r18,228(sp)
   2afc4:	dc403817 	ldw	r17,224(sp)
   2afc8:	dc003717 	ldw	r16,220(sp)
   2afcc:	dec04104 	addi	sp,sp,260
   2afd0:	002cc101 	jmpi	2cc10 <__sbprintf>
   2afd4:	63000414 	ori	r12,r12,16
   2afd8:	6080080c 	andi	r2,r12,32
   2afdc:	10008126 	beq	r2,zero,2b1e4 <___vfprintf_internal_r+0x6f4>
   2afe0:	d8c00617 	ldw	r3,24(sp)
   2afe4:	00800044 	movi	r2,1
   2afe8:	1d000017 	ldw	r20,0(r3)
   2afec:	1d400117 	ldw	r21,4(r3)
   2aff0:	18c00204 	addi	r3,r3,8
   2aff4:	d8c00615 	stw	r3,24(sp)
   2aff8:	00000906 	br	2b020 <___vfprintf_internal_r+0x530>
   2affc:	63000414 	ori	r12,r12,16
   2b000:	6080080c 	andi	r2,r12,32
   2b004:	10006b26 	beq	r2,zero,2b1b4 <___vfprintf_internal_r+0x6c4>
   2b008:	d8c00617 	ldw	r3,24(sp)
   2b00c:	0005883a 	mov	r2,zero
   2b010:	1d000017 	ldw	r20,0(r3)
   2b014:	1d400117 	ldw	r21,4(r3)
   2b018:	18c00204 	addi	r3,r3,8
   2b01c:	d8c00615 	stw	r3,24(sp)
   2b020:	d8001345 	stb	zero,77(sp)
   2b024:	40ffffe0 	cmpeqi	r3,r8,-1
   2b028:	001b883a 	mov	r13,zero
   2b02c:	18010e1e 	bne	r3,zero,2b468 <___vfprintf_internal_r+0x978>
   2b030:	047fdfc4 	movi	r17,-129
   2b034:	6448703a 	and	r4,r12,r17
   2b038:	a546b03a 	or	r3,r20,r21
   2b03c:	d9000415 	stw	r4,16(sp)
   2b040:	1802c01e 	bne	r3,zero,2bb44 <___vfprintf_internal_r+0x1054>
   2b044:	40025f1e 	bne	r8,zero,2b9c4 <___vfprintf_internal_r+0xed4>
   2b048:	1003751e 	bne	r2,zero,2be20 <___vfprintf_internal_r+0x1330>
   2b04c:	6540004c 	andi	r21,r12,1
   2b050:	a803b026 	beq	r21,zero,2bf14 <___vfprintf_internal_r+0x1424>
   2b054:	00800c04 	movi	r2,48
   2b058:	d88026c5 	stb	r2,155(sp)
   2b05c:	dc4026c4 	addi	r17,sp,155
   2b060:	0000ba06 	br	2b34c <___vfprintf_internal_r+0x85c>
   2b064:	85e3c83a 	sub	r17,r16,r23
   2b068:	85ffae26 	beq	r16,r23,2af24 <___vfprintf_internal_r+0x434>
   2b06c:	d8c01c17 	ldw	r3,112(sp)
   2b070:	d8801b17 	ldw	r2,108(sp)
   2b074:	b5c00015 	stw	r23,0(r22)
   2b078:	1c47883a 	add	r3,r3,r17
   2b07c:	10800044 	addi	r2,r2,1
   2b080:	d8801b15 	stw	r2,108(sp)
   2b084:	b4400115 	stw	r17,4(r22)
   2b088:	d8c01c15 	stw	r3,112(sp)
   2b08c:	10800208 	cmpgei	r2,r2,8
   2b090:	1000061e 	bne	r2,zero,2b0ac <___vfprintf_internal_r+0x5bc>
   2b094:	b5800204 	addi	r22,r22,8
   2b098:	d8c00517 	ldw	r3,20(sp)
   2b09c:	80800003 	ldbu	r2,0(r16)
   2b0a0:	1c47883a 	add	r3,r3,r17
   2b0a4:	d8c00515 	stw	r3,20(sp)
   2b0a8:	003ed106 	br	2abf0 <___vfprintf_internal_r+0x100>
   2b0ac:	d9801a04 	addi	r6,sp,104
   2b0b0:	900b883a 	mov	r5,r18
   2b0b4:	9809883a 	mov	r4,r19
   2b0b8:	00322340 	call	32234 <__sprint_r>
   2b0bc:	103f9b1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2b0c0:	dd802704 	addi	r22,sp,156
   2b0c4:	003ff406 	br	2b098 <___vfprintf_internal_r+0x5a8>
   2b0c8:	21003fcc 	andi	r4,r4,255
   2b0cc:	2006671e 	bne	r4,zero,2ca6c <___vfprintf_internal_r+0x1f7c>
   2b0d0:	d8c00617 	ldw	r3,24(sp)
   2b0d4:	6080020c 	andi	r2,r12,8
   2b0d8:	19000204 	addi	r4,r3,8
   2b0dc:	d9000e15 	stw	r4,56(sp)
   2b0e0:	1003a71e 	bne	r2,zero,2bf80 <___vfprintf_internal_r+0x1490>
   2b0e4:	d8800617 	ldw	r2,24(sp)
   2b0e8:	10c00017 	ldw	r3,0(r2)
   2b0ec:	10800117 	ldw	r2,4(r2)
   2b0f0:	d8c00915 	stw	r3,36(sp)
   2b0f4:	d8800a15 	stw	r2,40(sp)
   2b0f8:	dd400a17 	ldw	r21,40(sp)
   2b0fc:	dd000917 	ldw	r20,36(sp)
   2b100:	00a00034 	movhi	r2,32768
   2b104:	10bfffc4 	addi	r2,r2,-1
   2b108:	a8a2703a 	and	r17,r21,r2
   2b10c:	01dffc34 	movhi	r7,32752
   2b110:	01bfffc4 	movi	r6,-1
   2b114:	39ffffc4 	addi	r7,r7,-1
   2b118:	a009883a 	mov	r4,r20
   2b11c:	880b883a 	mov	r5,r17
   2b120:	da000615 	stw	r8,24(sp)
   2b124:	db000415 	stw	r12,16(sp)
   2b128:	00354380 	call	35438 <__unorddf2>
   2b12c:	db000417 	ldw	r12,16(sp)
   2b130:	da000617 	ldw	r8,24(sp)
   2b134:	1004641e 	bne	r2,zero,2c2c8 <___vfprintf_internal_r+0x17d8>
   2b138:	01dffc34 	movhi	r7,32752
   2b13c:	01bfffc4 	movi	r6,-1
   2b140:	39ffffc4 	addi	r7,r7,-1
   2b144:	a009883a 	mov	r4,r20
   2b148:	880b883a 	mov	r5,r17
   2b14c:	00294280 	call	29428 <__ledf2>
   2b150:	db000417 	ldw	r12,16(sp)
   2b154:	da000617 	ldw	r8,24(sp)
   2b158:	00845b0e 	bge	zero,r2,2c2c8 <___vfprintf_internal_r+0x17d8>
   2b15c:	000d883a 	mov	r6,zero
   2b160:	000f883a 	mov	r7,zero
   2b164:	a009883a 	mov	r4,r20
   2b168:	a80b883a 	mov	r5,r21
   2b16c:	00294280 	call	29428 <__ledf2>
   2b170:	db000417 	ldw	r12,16(sp)
   2b174:	10059116 	blt	r2,zero,2c7bc <___vfprintf_internal_r+0x1ccc>
   2b178:	db401343 	ldbu	r13,77(sp)
   2b17c:	e0801210 	cmplti	r2,fp,72
   2b180:	1005391e 	bne	r2,zero,2c668 <___vfprintf_internal_r+0x1b78>
   2b184:	04400134 	movhi	r17,4
   2b188:	8c62c904 	addi	r17,r17,-29916
   2b18c:	00bfdfc4 	movi	r2,-129
   2b190:	6084703a 	and	r2,r12,r2
   2b194:	d8800415 	stw	r2,16(sp)
   2b198:	d8800e17 	ldw	r2,56(sp)
   2b19c:	050000c4 	movi	r20,3
   2b1a0:	054000c4 	movi	r21,3
   2b1a4:	d8800615 	stw	r2,24(sp)
   2b1a8:	0011883a 	mov	r8,zero
   2b1ac:	d8000715 	stw	zero,28(sp)
   2b1b0:	00006a06 	br	2b35c <___vfprintf_internal_r+0x86c>
   2b1b4:	d9000617 	ldw	r4,24(sp)
   2b1b8:	6080040c 	andi	r2,r12,16
   2b1bc:	20c00104 	addi	r3,r4,4
   2b1c0:	10036a1e 	bne	r2,zero,2bf6c <___vfprintf_internal_r+0x147c>
   2b1c4:	6080100c 	andi	r2,r12,64
   2b1c8:	10052126 	beq	r2,zero,2c650 <___vfprintf_internal_r+0x1b60>
   2b1cc:	d8800617 	ldw	r2,24(sp)
   2b1d0:	002b883a 	mov	r21,zero
   2b1d4:	d8c00615 	stw	r3,24(sp)
   2b1d8:	1500000b 	ldhu	r20,0(r2)
   2b1dc:	0005883a 	mov	r2,zero
   2b1e0:	003f8f06 	br	2b020 <___vfprintf_internal_r+0x530>
   2b1e4:	d9000617 	ldw	r4,24(sp)
   2b1e8:	6080040c 	andi	r2,r12,16
   2b1ec:	20c00104 	addi	r3,r4,4
   2b1f0:	1003501e 	bne	r2,zero,2bf34 <___vfprintf_internal_r+0x1444>
   2b1f4:	6080100c 	andi	r2,r12,64
   2b1f8:	10055926 	beq	r2,zero,2c760 <___vfprintf_internal_r+0x1c70>
   2b1fc:	d8800617 	ldw	r2,24(sp)
   2b200:	002b883a 	mov	r21,zero
   2b204:	d8c00615 	stw	r3,24(sp)
   2b208:	1500000b 	ldhu	r20,0(r2)
   2b20c:	00800044 	movi	r2,1
   2b210:	003f8306 	br	2b020 <___vfprintf_internal_r+0x530>
   2b214:	03000134 	movhi	r12,4
   2b218:	89000450 	cmplti	r4,r17,17
   2b21c:	d8801b17 	ldw	r2,108(sp)
   2b220:	6322dd04 	addi	r12,r12,-29836
   2b224:	20001b1e 	bne	r4,zero,2b294 <___vfprintf_internal_r+0x7a4>
   2b228:	05400404 	movi	r21,16
   2b22c:	6039883a 	mov	fp,r12
   2b230:	00000406 	br	2b244 <___vfprintf_internal_r+0x754>
   2b234:	8c7ffc04 	addi	r17,r17,-16
   2b238:	89000448 	cmpgei	r4,r17,17
   2b23c:	b5800204 	addi	r22,r22,8
   2b240:	20001326 	beq	r4,zero,2b290 <___vfprintf_internal_r+0x7a0>
   2b244:	10800044 	addi	r2,r2,1
   2b248:	18c00404 	addi	r3,r3,16
   2b24c:	b7000015 	stw	fp,0(r22)
   2b250:	b5400115 	stw	r21,4(r22)
   2b254:	d8c01c15 	stw	r3,112(sp)
   2b258:	d8801b15 	stw	r2,108(sp)
   2b25c:	11000208 	cmpgei	r4,r2,8
   2b260:	203ff426 	beq	r4,zero,2b234 <___vfprintf_internal_r+0x744>
   2b264:	d9801a04 	addi	r6,sp,104
   2b268:	900b883a 	mov	r5,r18
   2b26c:	9809883a 	mov	r4,r19
   2b270:	00322340 	call	32234 <__sprint_r>
   2b274:	103f2d1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2b278:	8c7ffc04 	addi	r17,r17,-16
   2b27c:	89000448 	cmpgei	r4,r17,17
   2b280:	d8c01c17 	ldw	r3,112(sp)
   2b284:	d8801b17 	ldw	r2,108(sp)
   2b288:	dd802704 	addi	r22,sp,156
   2b28c:	203fed1e 	bne	r4,zero,2b244 <___vfprintf_internal_r+0x754>
   2b290:	e019883a 	mov	r12,fp
   2b294:	10800044 	addi	r2,r2,1
   2b298:	1c47883a 	add	r3,r3,r17
   2b29c:	d8801b15 	stw	r2,108(sp)
   2b2a0:	b3000015 	stw	r12,0(r22)
   2b2a4:	b4400115 	stw	r17,4(r22)
   2b2a8:	d8c01c15 	stw	r3,112(sp)
   2b2ac:	10800210 	cmplti	r2,r2,8
   2b2b0:	103f121e 	bne	r2,zero,2aefc <___vfprintf_internal_r+0x40c>
   2b2b4:	d9801a04 	addi	r6,sp,104
   2b2b8:	900b883a 	mov	r5,r18
   2b2bc:	9809883a 	mov	r4,r19
   2b2c0:	00322340 	call	32234 <__sprint_r>
   2b2c4:	103f191e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2b2c8:	d8c01c17 	ldw	r3,112(sp)
   2b2cc:	003f0b06 	br	2aefc <___vfprintf_internal_r+0x40c>
   2b2d0:	9809883a 	mov	r4,r19
   2b2d4:	002ee0c0 	call	2ee0c <__sinit>
   2b2d8:	003e1d06 	br	2ab50 <___vfprintf_internal_r+0x60>
   2b2dc:	21003fcc 	andi	r4,r4,255
   2b2e0:	2005de1e 	bne	r4,zero,2ca5c <___vfprintf_internal_r+0x1f6c>
   2b2e4:	6080080c 	andi	r2,r12,32
   2b2e8:	10004926 	beq	r2,zero,2b410 <___vfprintf_internal_r+0x920>
   2b2ec:	d8c00617 	ldw	r3,24(sp)
   2b2f0:	18800117 	ldw	r2,4(r3)
   2b2f4:	1d000017 	ldw	r20,0(r3)
   2b2f8:	18c00204 	addi	r3,r3,8
   2b2fc:	d8c00615 	stw	r3,24(sp)
   2b300:	102b883a 	mov	r21,r2
   2b304:	10004e16 	blt	r2,zero,2b440 <___vfprintf_internal_r+0x950>
   2b308:	40bfffd8 	cmpnei	r2,r8,-1
   2b30c:	db401343 	ldbu	r13,77(sp)
   2b310:	10000626 	beq	r2,zero,2b32c <___vfprintf_internal_r+0x83c>
   2b314:	047fdfc4 	movi	r17,-129
   2b318:	6446703a 	and	r3,r12,r17
   2b31c:	a544b03a 	or	r2,r20,r21
   2b320:	d8c00415 	stw	r3,16(sp)
   2b324:	1002bd26 	beq	r2,zero,2be1c <___vfprintf_internal_r+0x132c>
   2b328:	db000417 	ldw	r12,16(sp)
   2b32c:	a803701e 	bne	r21,zero,2c0f0 <___vfprintf_internal_r+0x1600>
   2b330:	a08002a8 	cmpgeui	r2,r20,10
   2b334:	10036e1e 	bne	r2,zero,2c0f0 <___vfprintf_internal_r+0x1600>
   2b338:	a5000c04 	addi	r20,r20,48
   2b33c:	dd0026c5 	stb	r20,155(sp)
   2b340:	db000415 	stw	r12,16(sp)
   2b344:	05400044 	movi	r21,1
   2b348:	dc4026c4 	addi	r17,sp,155
   2b34c:	4029883a 	mov	r20,r8
   2b350:	4540010e 	bge	r8,r21,2b358 <___vfprintf_internal_r+0x868>
   2b354:	a829883a 	mov	r20,r21
   2b358:	d8000715 	stw	zero,28(sp)
   2b35c:	6b403fcc 	andi	r13,r13,255
   2b360:	6b40201c 	xori	r13,r13,128
   2b364:	6b7fe004 	addi	r13,r13,-128
   2b368:	683ea926 	beq	r13,zero,2ae10 <___vfprintf_internal_r+0x320>
   2b36c:	a5000044 	addi	r20,r20,1
   2b370:	003ea706 	br	2ae10 <___vfprintf_internal_r+0x320>
   2b374:	bac00007 	ldb	r11,0(r23)
   2b378:	63001014 	ori	r12,r12,64
   2b37c:	003e2806 	br	2ac20 <___vfprintf_internal_r+0x130>
   2b380:	d8c00617 	ldw	r3,24(sp)
   2b384:	d8001345 	stb	zero,77(sp)
   2b388:	05000044 	movi	r20,1
   2b38c:	18800017 	ldw	r2,0(r3)
   2b390:	18c00104 	addi	r3,r3,4
   2b394:	d8c00615 	stw	r3,24(sp)
   2b398:	d8801d05 	stb	r2,116(sp)
   2b39c:	05400044 	movi	r21,1
   2b3a0:	dc401d04 	addi	r17,sp,116
   2b3a4:	003e9706 	br	2ae04 <___vfprintf_internal_r+0x314>
   2b3a8:	21003fcc 	andi	r4,r4,255
   2b3ac:	2005a71e 	bne	r4,zero,2ca4c <___vfprintf_internal_r+0x1f5c>
   2b3b0:	00800134 	movhi	r2,4
   2b3b4:	10a2d104 	addi	r2,r2,-29884
   2b3b8:	d8800c15 	stw	r2,48(sp)
   2b3bc:	6080080c 	andi	r2,r12,32
   2b3c0:	10008726 	beq	r2,zero,2b5e0 <___vfprintf_internal_r+0xaf0>
   2b3c4:	d8800617 	ldw	r2,24(sp)
   2b3c8:	15000017 	ldw	r20,0(r2)
   2b3cc:	15400117 	ldw	r21,4(r2)
   2b3d0:	10800204 	addi	r2,r2,8
   2b3d4:	d8800615 	stw	r2,24(sp)
   2b3d8:	6080004c 	andi	r2,r12,1
   2b3dc:	10000226 	beq	r2,zero,2b3e8 <___vfprintf_internal_r+0x8f8>
   2b3e0:	a544b03a 	or	r2,r20,r21
   2b3e4:	1002cd1e 	bne	r2,zero,2bf1c <___vfprintf_internal_r+0x142c>
   2b3e8:	00800084 	movi	r2,2
   2b3ec:	003f0c06 	br	2b020 <___vfprintf_internal_r+0x530>
   2b3f0:	bac00007 	ldb	r11,0(r23)
   2b3f4:	63000214 	ori	r12,r12,8
   2b3f8:	003e0906 	br	2ac20 <___vfprintf_internal_r+0x130>
   2b3fc:	21003fcc 	andi	r4,r4,255
   2b400:	2005981e 	bne	r4,zero,2ca64 <___vfprintf_internal_r+0x1f74>
   2b404:	63000414 	ori	r12,r12,16
   2b408:	6080080c 	andi	r2,r12,32
   2b40c:	103fb71e 	bne	r2,zero,2b2ec <___vfprintf_internal_r+0x7fc>
   2b410:	d9000617 	ldw	r4,24(sp)
   2b414:	6080040c 	andi	r2,r12,16
   2b418:	20c00104 	addi	r3,r4,4
   2b41c:	1002dd1e 	bne	r2,zero,2bf94 <___vfprintf_internal_r+0x14a4>
   2b420:	6080100c 	andi	r2,r12,64
   2b424:	10048426 	beq	r2,zero,2c638 <___vfprintf_internal_r+0x1b48>
   2b428:	d8800617 	ldw	r2,24(sp)
   2b42c:	d8c00615 	stw	r3,24(sp)
   2b430:	1500000f 	ldh	r20,0(r2)
   2b434:	a02bd7fa 	srai	r21,r20,31
   2b438:	a805883a 	mov	r2,r21
   2b43c:	103fb20e 	bge	r2,zero,2b308 <___vfprintf_internal_r+0x818>
   2b440:	a004c03a 	cmpne	r2,r20,zero
   2b444:	056bc83a 	sub	r21,zero,r21
   2b448:	a8abc83a 	sub	r21,r21,r2
   2b44c:	00800b44 	movi	r2,45
   2b450:	d8801345 	stb	r2,77(sp)
   2b454:	40ffffe0 	cmpeqi	r3,r8,-1
   2b458:	0529c83a 	sub	r20,zero,r20
   2b45c:	03400b44 	movi	r13,45
   2b460:	00800044 	movi	r2,1
   2b464:	183ef226 	beq	r3,zero,2b030 <___vfprintf_internal_r+0x540>
   2b468:	10c00060 	cmpeqi	r3,r2,1
   2b46c:	183faf1e 	bne	r3,zero,2b32c <___vfprintf_internal_r+0x83c>
   2b470:	108000a0 	cmpeqi	r2,r2,2
   2b474:	1001581e 	bne	r2,zero,2b9d8 <___vfprintf_internal_r+0xee8>
   2b478:	dc402704 	addi	r17,sp,156
   2b47c:	a006d0fa 	srli	r3,r20,3
   2b480:	a808977a 	slli	r4,r21,29
   2b484:	a82ad0fa 	srli	r21,r21,3
   2b488:	a50001cc 	andi	r20,r20,7
   2b48c:	a0800c04 	addi	r2,r20,48
   2b490:	20e8b03a 	or	r20,r4,r3
   2b494:	88bfffc5 	stb	r2,-1(r17)
   2b498:	a546b03a 	or	r3,r20,r21
   2b49c:	880b883a 	mov	r5,r17
   2b4a0:	8c7fffc4 	addi	r17,r17,-1
   2b4a4:	183ff51e 	bne	r3,zero,2b47c <___vfprintf_internal_r+0x98c>
   2b4a8:	60c0004c 	andi	r3,r12,1
   2b4ac:	18015726 	beq	r3,zero,2ba0c <___vfprintf_internal_r+0xf1c>
   2b4b0:	10803fcc 	andi	r2,r2,255
   2b4b4:	1080201c 	xori	r2,r2,128
   2b4b8:	10bfe004 	addi	r2,r2,-128
   2b4bc:	10800c18 	cmpnei	r2,r2,48
   2b4c0:	10015226 	beq	r2,zero,2ba0c <___vfprintf_internal_r+0xf1c>
   2b4c4:	00800c04 	movi	r2,48
   2b4c8:	297fff84 	addi	r5,r5,-2
   2b4cc:	88bfffc5 	stb	r2,-1(r17)
   2b4d0:	d8802704 	addi	r2,sp,156
   2b4d4:	116bc83a 	sub	r21,r2,r5
   2b4d8:	db000415 	stw	r12,16(sp)
   2b4dc:	2823883a 	mov	r17,r5
   2b4e0:	003f9a06 	br	2b34c <___vfprintf_internal_r+0x85c>
   2b4e4:	bac00007 	ldb	r11,0(r23)
   2b4e8:	63002014 	ori	r12,r12,128
   2b4ec:	003dcc06 	br	2ac20 <___vfprintf_internal_r+0x130>
   2b4f0:	bf000007 	ldb	fp,0(r23)
   2b4f4:	b8800044 	addi	r2,r23,1
   2b4f8:	e0c00aa0 	cmpeqi	r3,fp,42
   2b4fc:	1805b11e 	bne	r3,zero,2cbc4 <___vfprintf_internal_r+0x20d4>
   2b500:	e0fff404 	addi	r3,fp,-48
   2b504:	198002b0 	cmpltui	r6,r3,10
   2b508:	102f883a 	mov	r23,r2
   2b50c:	0011883a 	mov	r8,zero
   2b510:	303dc526 	beq	r6,zero,2ac28 <___vfprintf_internal_r+0x138>
   2b514:	400490ba 	slli	r2,r8,2
   2b518:	bf000007 	ldb	fp,0(r23)
   2b51c:	bdc00044 	addi	r23,r23,1
   2b520:	1211883a 	add	r8,r2,r8
   2b524:	4211883a 	add	r8,r8,r8
   2b528:	40d1883a 	add	r8,r8,r3
   2b52c:	e0fff404 	addi	r3,fp,-48
   2b530:	188002b0 	cmpltui	r2,r3,10
   2b534:	103ff71e 	bne	r2,zero,2b514 <___vfprintf_internal_r+0xa24>
   2b538:	003dbb06 	br	2ac28 <___vfprintf_internal_r+0x138>
   2b53c:	bf000003 	ldbu	fp,0(r23)
   2b540:	e2c03fcc 	andi	r11,fp,255
   2b544:	5ac0201c 	xori	r11,r11,128
   2b548:	63000114 	ori	r12,r12,4
   2b54c:	5affe004 	addi	r11,r11,-128
   2b550:	003db306 	br	2ac20 <___vfprintf_internal_r+0x130>
   2b554:	bac00007 	ldb	r11,0(r23)
   2b558:	01000044 	movi	r4,1
   2b55c:	01400ac4 	movi	r5,43
   2b560:	003daf06 	br	2ac20 <___vfprintf_internal_r+0x130>
   2b564:	d8800617 	ldw	r2,24(sp)
   2b568:	bf000003 	ldbu	fp,0(r23)
   2b56c:	14000017 	ldw	r16,0(r2)
   2b570:	10800104 	addi	r2,r2,4
   2b574:	80028c16 	blt	r16,zero,2bfa8 <___vfprintf_internal_r+0x14b8>
   2b578:	d8800615 	stw	r2,24(sp)
   2b57c:	e2c03fcc 	andi	r11,fp,255
   2b580:	5ac0201c 	xori	r11,r11,128
   2b584:	5affe004 	addi	r11,r11,-128
   2b588:	003da506 	br	2ac20 <___vfprintf_internal_r+0x130>
   2b58c:	bac00007 	ldb	r11,0(r23)
   2b590:	63000054 	ori	r12,r12,1
   2b594:	003da206 	br	2ac20 <___vfprintf_internal_r+0x130>
   2b598:	28803fcc 	andi	r2,r5,255
   2b59c:	1080201c 	xori	r2,r2,128
   2b5a0:	10bfe004 	addi	r2,r2,-128
   2b5a4:	bf000003 	ldbu	fp,0(r23)
   2b5a8:	103ff41e 	bne	r2,zero,2b57c <___vfprintf_internal_r+0xa8c>
   2b5ac:	e2c03fcc 	andi	r11,fp,255
   2b5b0:	5ac0201c 	xori	r11,r11,128
   2b5b4:	01000044 	movi	r4,1
   2b5b8:	01400804 	movi	r5,32
   2b5bc:	5affe004 	addi	r11,r11,-128
   2b5c0:	003d9706 	br	2ac20 <___vfprintf_internal_r+0x130>
   2b5c4:	21003fcc 	andi	r4,r4,255
   2b5c8:	20051e1e 	bne	r4,zero,2ca44 <___vfprintf_internal_r+0x1f54>
   2b5cc:	00800134 	movhi	r2,4
   2b5d0:	10a2cc04 	addi	r2,r2,-29904
   2b5d4:	d8800c15 	stw	r2,48(sp)
   2b5d8:	6080080c 	andi	r2,r12,32
   2b5dc:	103f791e 	bne	r2,zero,2b3c4 <___vfprintf_internal_r+0x8d4>
   2b5e0:	d9000617 	ldw	r4,24(sp)
   2b5e4:	6080040c 	andi	r2,r12,16
   2b5e8:	20c00104 	addi	r3,r4,4
   2b5ec:	10025b1e 	bne	r2,zero,2bf5c <___vfprintf_internal_r+0x146c>
   2b5f0:	6080100c 	andi	r2,r12,64
   2b5f4:	10046026 	beq	r2,zero,2c778 <___vfprintf_internal_r+0x1c88>
   2b5f8:	d8800617 	ldw	r2,24(sp)
   2b5fc:	002b883a 	mov	r21,zero
   2b600:	d8c00615 	stw	r3,24(sp)
   2b604:	1500000b 	ldhu	r20,0(r2)
   2b608:	003f7306 	br	2b3d8 <___vfprintf_internal_r+0x8e8>
   2b60c:	d8800617 	ldw	r2,24(sp)
   2b610:	d8001345 	stb	zero,77(sp)
   2b614:	14400017 	ldw	r17,0(r2)
   2b618:	10c00104 	addi	r3,r2,4
   2b61c:	88028e26 	beq	r17,zero,2c058 <___vfprintf_internal_r+0x1568>
   2b620:	40bfffe0 	cmpeqi	r2,r8,-1
   2b624:	1003c01e 	bne	r2,zero,2c528 <___vfprintf_internal_r+0x1a38>
   2b628:	400d883a 	mov	r6,r8
   2b62c:	000b883a 	mov	r5,zero
   2b630:	8809883a 	mov	r4,r17
   2b634:	d8c00715 	stw	r3,28(sp)
   2b638:	db000615 	stw	r12,24(sp)
   2b63c:	da000415 	stw	r8,16(sp)
   2b640:	00302bc0 	call	302bc <memchr>
   2b644:	da000417 	ldw	r8,16(sp)
   2b648:	db000617 	ldw	r12,24(sp)
   2b64c:	d8c00717 	ldw	r3,28(sp)
   2b650:	1004ec26 	beq	r2,zero,2ca04 <___vfprintf_internal_r+0x1f14>
   2b654:	146bc83a 	sub	r21,r2,r17
   2b658:	a829883a 	mov	r20,r21
   2b65c:	d8c00615 	stw	r3,24(sp)
   2b660:	003de806 	br	2ae04 <___vfprintf_internal_r+0x314>
   2b664:	bac00007 	ldb	r11,0(r23)
   2b668:	63000814 	ori	r12,r12,32
   2b66c:	003d6c06 	br	2ac20 <___vfprintf_internal_r+0x130>
   2b670:	d8c00617 	ldw	r3,24(sp)
   2b674:	00800c04 	movi	r2,48
   2b678:	d8801385 	stb	r2,78(sp)
   2b67c:	00801e04 	movi	r2,120
   2b680:	01000134 	movhi	r4,4
   2b684:	d88013c5 	stb	r2,79(sp)
   2b688:	18800104 	addi	r2,r3,4
   2b68c:	d8800615 	stw	r2,24(sp)
   2b690:	20a2cc04 	addi	r2,r4,-29904
   2b694:	d8800c15 	stw	r2,48(sp)
   2b698:	1d000017 	ldw	r20,0(r3)
   2b69c:	002b883a 	mov	r21,zero
   2b6a0:	63000094 	ori	r12,r12,2
   2b6a4:	00800084 	movi	r2,2
   2b6a8:	07001e04 	movi	fp,120
   2b6ac:	003e5c06 	br	2b020 <___vfprintf_internal_r+0x530>
   2b6b0:	21003fcc 	andi	r4,r4,255
   2b6b4:	2004e71e 	bne	r4,zero,2ca54 <___vfprintf_internal_r+0x1f64>
   2b6b8:	d9000617 	ldw	r4,24(sp)
   2b6bc:	6080080c 	andi	r2,r12,32
   2b6c0:	20c00017 	ldw	r3,0(r4)
   2b6c4:	21000104 	addi	r4,r4,4
   2b6c8:	d9000615 	stw	r4,24(sp)
   2b6cc:	10021e1e 	bne	r2,zero,2bf48 <___vfprintf_internal_r+0x1458>
   2b6d0:	6080040c 	andi	r2,r12,16
   2b6d4:	1002ae1e 	bne	r2,zero,2c190 <___vfprintf_internal_r+0x16a0>
   2b6d8:	6300100c 	andi	r12,r12,64
   2b6dc:	6002ac26 	beq	r12,zero,2c190 <___vfprintf_internal_r+0x16a0>
   2b6e0:	d8800517 	ldw	r2,20(sp)
   2b6e4:	1880000d 	sth	r2,0(r3)
   2b6e8:	003d3506 	br	2abc0 <___vfprintf_internal_r+0xd0>
   2b6ec:	bac00007 	ldb	r11,0(r23)
   2b6f0:	58801b18 	cmpnei	r2,r11,108
   2b6f4:	10024926 	beq	r2,zero,2c01c <___vfprintf_internal_r+0x152c>
   2b6f8:	63000414 	ori	r12,r12,16
   2b6fc:	003d4806 	br	2ac20 <___vfprintf_internal_r+0x130>
   2b700:	e2c01990 	cmplti	r11,fp,102
   2b704:	5800cb1e 	bne	r11,zero,2ba34 <___vfprintf_internal_r+0xf44>
   2b708:	d9000917 	ldw	r4,36(sp)
   2b70c:	d9400a17 	ldw	r5,40(sp)
   2b710:	000d883a 	mov	r6,zero
   2b714:	000f883a 	mov	r7,zero
   2b718:	d8c00e15 	stw	r3,56(sp)
   2b71c:	00353b80 	call	353b8 <__eqdf2>
   2b720:	d8c00e17 	ldw	r3,56(sp)
   2b724:	1001641e 	bne	r2,zero,2bcb8 <___vfprintf_internal_r+0x11c8>
   2b728:	d8801b17 	ldw	r2,108(sp)
   2b72c:	01000134 	movhi	r4,4
   2b730:	2122d804 	addi	r4,r4,-29856
   2b734:	10800044 	addi	r2,r2,1
   2b738:	18c00044 	addi	r3,r3,1
   2b73c:	b1000015 	stw	r4,0(r22)
   2b740:	01000044 	movi	r4,1
   2b744:	d8801b15 	stw	r2,108(sp)
   2b748:	b1000115 	stw	r4,4(r22)
   2b74c:	d8c01c15 	stw	r3,112(sp)
   2b750:	10800208 	cmpgei	r2,r2,8
   2b754:	1003621e 	bne	r2,zero,2c4e0 <___vfprintf_internal_r+0x19f0>
   2b758:	b5800204 	addi	r22,r22,8
   2b75c:	d8801417 	ldw	r2,80(sp)
   2b760:	d9000817 	ldw	r4,32(sp)
   2b764:	1101e70e 	bge	r2,r4,2bf04 <___vfprintf_internal_r+0x1414>
   2b768:	d8800d17 	ldw	r2,52(sp)
   2b76c:	d9000b17 	ldw	r4,44(sp)
   2b770:	b0800015 	stw	r2,0(r22)
   2b774:	d8801b17 	ldw	r2,108(sp)
   2b778:	1907883a 	add	r3,r3,r4
   2b77c:	b1000115 	stw	r4,4(r22)
   2b780:	10800044 	addi	r2,r2,1
   2b784:	d8801b15 	stw	r2,108(sp)
   2b788:	d8c01c15 	stw	r3,112(sp)
   2b78c:	10800208 	cmpgei	r2,r2,8
   2b790:	1002291e 	bne	r2,zero,2c038 <___vfprintf_internal_r+0x1548>
   2b794:	b5800204 	addi	r22,r22,8
   2b798:	d8800817 	ldw	r2,32(sp)
   2b79c:	157fffc4 	addi	r21,r2,-1
   2b7a0:	057dd10e 	bge	zero,r21,2aee8 <___vfprintf_internal_r+0x3f8>
   2b7a4:	01c00134 	movhi	r7,4
   2b7a8:	a9000450 	cmplti	r4,r21,17
   2b7ac:	d8801b17 	ldw	r2,108(sp)
   2b7b0:	39e2d904 	addi	r7,r7,-29852
   2b7b4:	2003461e 	bne	r4,zero,2c4d0 <___vfprintf_internal_r+0x19e0>
   2b7b8:	07000404 	movi	fp,16
   2b7bc:	3823883a 	mov	r17,r7
   2b7c0:	00000406 	br	2b7d4 <___vfprintf_internal_r+0xce4>
   2b7c4:	b5800204 	addi	r22,r22,8
   2b7c8:	ad7ffc04 	addi	r21,r21,-16
   2b7cc:	a9000448 	cmpgei	r4,r21,17
   2b7d0:	20033e26 	beq	r4,zero,2c4cc <___vfprintf_internal_r+0x19dc>
   2b7d4:	10800044 	addi	r2,r2,1
   2b7d8:	18c00404 	addi	r3,r3,16
   2b7dc:	b4400015 	stw	r17,0(r22)
   2b7e0:	b7000115 	stw	fp,4(r22)
   2b7e4:	d8c01c15 	stw	r3,112(sp)
   2b7e8:	d8801b15 	stw	r2,108(sp)
   2b7ec:	11000208 	cmpgei	r4,r2,8
   2b7f0:	203ff426 	beq	r4,zero,2b7c4 <___vfprintf_internal_r+0xcd4>
   2b7f4:	d9801a04 	addi	r6,sp,104
   2b7f8:	900b883a 	mov	r5,r18
   2b7fc:	9809883a 	mov	r4,r19
   2b800:	00322340 	call	32234 <__sprint_r>
   2b804:	103dc91e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2b808:	d8c01c17 	ldw	r3,112(sp)
   2b80c:	d8801b17 	ldw	r2,108(sp)
   2b810:	dd802704 	addi	r22,sp,156
   2b814:	003fec06 	br	2b7c8 <___vfprintf_internal_r+0xcd8>
   2b818:	8519c83a 	sub	r12,r16,r20
   2b81c:	033da30e 	bge	zero,r12,2aeac <___vfprintf_internal_r+0x3bc>
   2b820:	01c00134 	movhi	r7,4
   2b824:	61000450 	cmplti	r4,r12,17
   2b828:	d8801b17 	ldw	r2,108(sp)
   2b82c:	39e2d904 	addi	r7,r7,-29852
   2b830:	2000281e 	bne	r4,zero,2b8d4 <___vfprintf_internal_r+0xde4>
   2b834:	dc400e15 	stw	r17,56(sp)
   2b838:	dc000f15 	stw	r16,60(sp)
   2b83c:	b009883a 	mov	r4,r22
   2b840:	03400404 	movi	r13,16
   2b844:	a02d883a 	mov	r22,r20
   2b848:	6021883a 	mov	r16,r12
   2b84c:	4029883a 	mov	r20,r8
   2b850:	3823883a 	mov	r17,r7
   2b854:	00000406 	br	2b868 <___vfprintf_internal_r+0xd78>
   2b858:	843ffc04 	addi	r16,r16,-16
   2b85c:	81400448 	cmpgei	r5,r16,17
   2b860:	21000204 	addi	r4,r4,8
   2b864:	28001426 	beq	r5,zero,2b8b8 <___vfprintf_internal_r+0xdc8>
   2b868:	10800044 	addi	r2,r2,1
   2b86c:	18c00404 	addi	r3,r3,16
   2b870:	24400015 	stw	r17,0(r4)
   2b874:	23400115 	stw	r13,4(r4)
   2b878:	d8c01c15 	stw	r3,112(sp)
   2b87c:	d8801b15 	stw	r2,108(sp)
   2b880:	11400208 	cmpgei	r5,r2,8
   2b884:	283ff426 	beq	r5,zero,2b858 <___vfprintf_internal_r+0xd68>
   2b888:	d9801a04 	addi	r6,sp,104
   2b88c:	900b883a 	mov	r5,r18
   2b890:	9809883a 	mov	r4,r19
   2b894:	00322340 	call	32234 <__sprint_r>
   2b898:	103da41e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2b89c:	843ffc04 	addi	r16,r16,-16
   2b8a0:	81400448 	cmpgei	r5,r16,17
   2b8a4:	d8c01c17 	ldw	r3,112(sp)
   2b8a8:	d8801b17 	ldw	r2,108(sp)
   2b8ac:	d9002704 	addi	r4,sp,156
   2b8b0:	03400404 	movi	r13,16
   2b8b4:	283fec1e 	bne	r5,zero,2b868 <___vfprintf_internal_r+0xd78>
   2b8b8:	8019883a 	mov	r12,r16
   2b8bc:	880f883a 	mov	r7,r17
   2b8c0:	dc000f17 	ldw	r16,60(sp)
   2b8c4:	dc400e17 	ldw	r17,56(sp)
   2b8c8:	a011883a 	mov	r8,r20
   2b8cc:	b029883a 	mov	r20,r22
   2b8d0:	202d883a 	mov	r22,r4
   2b8d4:	10800044 	addi	r2,r2,1
   2b8d8:	1b07883a 	add	r3,r3,r12
   2b8dc:	d8801b15 	stw	r2,108(sp)
   2b8e0:	b1c00015 	stw	r7,0(r22)
   2b8e4:	b3000115 	stw	r12,4(r22)
   2b8e8:	d8c01c15 	stw	r3,112(sp)
   2b8ec:	10800208 	cmpgei	r2,r2,8
   2b8f0:	1003031e 	bne	r2,zero,2c500 <___vfprintf_internal_r+0x1a10>
   2b8f4:	4551c83a 	sub	r8,r8,r21
   2b8f8:	b5800204 	addi	r22,r22,8
   2b8fc:	023d6d0e 	bge	zero,r8,2aeb4 <___vfprintf_internal_r+0x3c4>
   2b900:	01c00134 	movhi	r7,4
   2b904:	41000450 	cmplti	r4,r8,17
   2b908:	d8801b17 	ldw	r2,108(sp)
   2b90c:	39e2d904 	addi	r7,r7,-29852
   2b910:	2000221e 	bne	r4,zero,2b99c <___vfprintf_internal_r+0xeac>
   2b914:	dc400e15 	stw	r17,56(sp)
   2b918:	dc000f15 	stw	r16,60(sp)
   2b91c:	03000404 	movi	r12,16
   2b920:	4021883a 	mov	r16,r8
   2b924:	3823883a 	mov	r17,r7
   2b928:	00000406 	br	2b93c <___vfprintf_internal_r+0xe4c>
   2b92c:	843ffc04 	addi	r16,r16,-16
   2b930:	81000448 	cmpgei	r4,r16,17
   2b934:	b5800204 	addi	r22,r22,8
   2b938:	20001426 	beq	r4,zero,2b98c <___vfprintf_internal_r+0xe9c>
   2b93c:	10800044 	addi	r2,r2,1
   2b940:	18c00404 	addi	r3,r3,16
   2b944:	b4400015 	stw	r17,0(r22)
   2b948:	b3000115 	stw	r12,4(r22)
   2b94c:	d8c01c15 	stw	r3,112(sp)
   2b950:	d8801b15 	stw	r2,108(sp)
   2b954:	11000208 	cmpgei	r4,r2,8
   2b958:	203ff426 	beq	r4,zero,2b92c <___vfprintf_internal_r+0xe3c>
   2b95c:	d9801a04 	addi	r6,sp,104
   2b960:	900b883a 	mov	r5,r18
   2b964:	9809883a 	mov	r4,r19
   2b968:	00322340 	call	32234 <__sprint_r>
   2b96c:	103d6f1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2b970:	843ffc04 	addi	r16,r16,-16
   2b974:	81000448 	cmpgei	r4,r16,17
   2b978:	d8c01c17 	ldw	r3,112(sp)
   2b97c:	d8801b17 	ldw	r2,108(sp)
   2b980:	dd802704 	addi	r22,sp,156
   2b984:	03000404 	movi	r12,16
   2b988:	203fec1e 	bne	r4,zero,2b93c <___vfprintf_internal_r+0xe4c>
   2b98c:	8011883a 	mov	r8,r16
   2b990:	880f883a 	mov	r7,r17
   2b994:	dc000f17 	ldw	r16,60(sp)
   2b998:	dc400e17 	ldw	r17,56(sp)
   2b99c:	10800044 	addi	r2,r2,1
   2b9a0:	1a07883a 	add	r3,r3,r8
   2b9a4:	d8801b15 	stw	r2,108(sp)
   2b9a8:	b1c00015 	stw	r7,0(r22)
   2b9ac:	b2000115 	stw	r8,4(r22)
   2b9b0:	d8c01c15 	stw	r3,112(sp)
   2b9b4:	10800208 	cmpgei	r2,r2,8
   2b9b8:	10014a1e 	bne	r2,zero,2bee4 <___vfprintf_internal_r+0x13f4>
   2b9bc:	b5800204 	addi	r22,r22,8
   2b9c0:	003d3c06 	br	2aeb4 <___vfprintf_internal_r+0x3c4>
   2b9c4:	10c00060 	cmpeqi	r3,r2,1
   2b9c8:	1803bc1e 	bne	r3,zero,2c8bc <___vfprintf_internal_r+0x1dcc>
   2b9cc:	108000a0 	cmpeqi	r2,r2,2
   2b9d0:	db000417 	ldw	r12,16(sp)
   2b9d4:	103ea826 	beq	r2,zero,2b478 <___vfprintf_internal_r+0x988>
   2b9d8:	d9000c17 	ldw	r4,48(sp)
   2b9dc:	dc402704 	addi	r17,sp,156
   2b9e0:	a08003cc 	andi	r2,r20,15
   2b9e4:	a806973a 	slli	r3,r21,28
   2b9e8:	a028d13a 	srli	r20,r20,4
   2b9ec:	2085883a 	add	r2,r4,r2
   2b9f0:	10800003 	ldbu	r2,0(r2)
   2b9f4:	a82ad13a 	srli	r21,r21,4
   2b9f8:	1d28b03a 	or	r20,r3,r20
   2b9fc:	88bfffc5 	stb	r2,-1(r17)
   2ba00:	a544b03a 	or	r2,r20,r21
   2ba04:	8c7fffc4 	addi	r17,r17,-1
   2ba08:	103ff51e 	bne	r2,zero,2b9e0 <___vfprintf_internal_r+0xef0>
   2ba0c:	d8802704 	addi	r2,sp,156
   2ba10:	146bc83a 	sub	r21,r2,r17
   2ba14:	db000415 	stw	r12,16(sp)
   2ba18:	003e4c06 	br	2b34c <___vfprintf_internal_r+0x85c>
   2ba1c:	d9801a04 	addi	r6,sp,104
   2ba20:	900b883a 	mov	r5,r18
   2ba24:	9809883a 	mov	r4,r19
   2ba28:	00322340 	call	32234 <__sprint_r>
   2ba2c:	103d3926 	beq	r2,zero,2af14 <___vfprintf_internal_r+0x424>
   2ba30:	003d3e06 	br	2af2c <___vfprintf_internal_r+0x43c>
   2ba34:	d8800817 	ldw	r2,32(sp)
   2ba38:	da001b17 	ldw	r8,108(sp)
   2ba3c:	18c00044 	addi	r3,r3,1
   2ba40:	10800088 	cmpgei	r2,r2,2
   2ba44:	45400044 	addi	r21,r8,1
   2ba48:	b7000204 	addi	fp,r22,8
   2ba4c:	1000f826 	beq	r2,zero,2be30 <___vfprintf_internal_r+0x1340>
   2ba50:	00800044 	movi	r2,1
   2ba54:	b0800115 	stw	r2,4(r22)
   2ba58:	b4400015 	stw	r17,0(r22)
   2ba5c:	d8c01c15 	stw	r3,112(sp)
   2ba60:	dd401b15 	stw	r21,108(sp)
   2ba64:	a8800210 	cmplti	r2,r21,8
   2ba68:	1001cc26 	beq	r2,zero,2c19c <___vfprintf_internal_r+0x16ac>
   2ba6c:	d8800b17 	ldw	r2,44(sp)
   2ba70:	d9000d17 	ldw	r4,52(sp)
   2ba74:	ad400044 	addi	r21,r21,1
   2ba78:	1887883a 	add	r3,r3,r2
   2ba7c:	e0800115 	stw	r2,4(fp)
   2ba80:	e1000015 	stw	r4,0(fp)
   2ba84:	d8c01c15 	stw	r3,112(sp)
   2ba88:	dd401b15 	stw	r21,108(sp)
   2ba8c:	a8800208 	cmpgei	r2,r21,8
   2ba90:	1001cb1e 	bne	r2,zero,2c1c0 <___vfprintf_internal_r+0x16d0>
   2ba94:	e7000204 	addi	fp,fp,8
   2ba98:	d9000917 	ldw	r4,36(sp)
   2ba9c:	d9400a17 	ldw	r5,40(sp)
   2baa0:	aa000044 	addi	r8,r21,1
   2baa4:	000d883a 	mov	r6,zero
   2baa8:	000f883a 	mov	r7,zero
   2baac:	d8c00e15 	stw	r3,56(sp)
   2bab0:	da000715 	stw	r8,28(sp)
   2bab4:	00353b80 	call	353b8 <__eqdf2>
   2bab8:	d8c00817 	ldw	r3,32(sp)
   2babc:	da000717 	ldw	r8,28(sp)
   2bac0:	e5800204 	addi	r22,fp,8
   2bac4:	1affffc4 	addi	r11,r3,-1
   2bac8:	d8c00e17 	ldw	r3,56(sp)
   2bacc:	1000e526 	beq	r2,zero,2be64 <___vfprintf_internal_r+0x1374>
   2bad0:	8a400044 	addi	r9,r17,1
   2bad4:	1ac7883a 	add	r3,r3,r11
   2bad8:	da001b15 	stw	r8,108(sp)
   2badc:	e2400015 	stw	r9,0(fp)
   2bae0:	e2c00115 	stw	r11,4(fp)
   2bae4:	d8c01c15 	stw	r3,112(sp)
   2bae8:	42000208 	cmpgei	r8,r8,8
   2baec:	40013e1e 	bne	r8,zero,2bfe8 <___vfprintf_internal_r+0x14f8>
   2baf0:	e0800404 	addi	r2,fp,16
   2baf4:	aa000084 	addi	r8,r21,2
   2baf8:	b039883a 	mov	fp,r22
   2bafc:	102d883a 	mov	r22,r2
   2bb00:	d9001017 	ldw	r4,64(sp)
   2bb04:	d8801644 	addi	r2,sp,89
   2bb08:	da001b15 	stw	r8,108(sp)
   2bb0c:	20c7883a 	add	r3,r4,r3
   2bb10:	e0800015 	stw	r2,0(fp)
   2bb14:	e1000115 	stw	r4,4(fp)
   2bb18:	d8c01c15 	stw	r3,112(sp)
   2bb1c:	42000210 	cmplti	r8,r8,8
   2bb20:	403cf11e 	bne	r8,zero,2aee8 <___vfprintf_internal_r+0x3f8>
   2bb24:	d9801a04 	addi	r6,sp,104
   2bb28:	900b883a 	mov	r5,r18
   2bb2c:	9809883a 	mov	r4,r19
   2bb30:	00322340 	call	32234 <__sprint_r>
   2bb34:	103cfd1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2bb38:	d8c01c17 	ldw	r3,112(sp)
   2bb3c:	dd802704 	addi	r22,sp,156
   2bb40:	003ce906 	br	2aee8 <___vfprintf_internal_r+0x3f8>
   2bb44:	db000417 	ldw	r12,16(sp)
   2bb48:	003e4706 	br	2b468 <___vfprintf_internal_r+0x978>
   2bb4c:	03000134 	movhi	r12,4
   2bb50:	39000450 	cmplti	r4,r7,17
   2bb54:	d8801b17 	ldw	r2,108(sp)
   2bb58:	6322dd04 	addi	r12,r12,-29836
   2bb5c:	2000321e 	bne	r4,zero,2bc28 <___vfprintf_internal_r+0x1138>
   2bb60:	dc401115 	stw	r17,68(sp)
   2bb64:	b009883a 	mov	r4,r22
   2bb68:	9023883a 	mov	r17,r18
   2bb6c:	a82d883a 	mov	r22,r21
   2bb70:	ddc01215 	stw	r23,72(sp)
   2bb74:	03c00404 	movi	r15,16
   2bb78:	a02f883a 	mov	r23,r20
   2bb7c:	db800e15 	stw	r14,56(sp)
   2bb80:	8029883a 	mov	r20,r16
   2bb84:	db400f15 	stw	r13,60(sp)
   2bb88:	402b883a 	mov	r21,r8
   2bb8c:	3821883a 	mov	r16,r7
   2bb90:	6025883a 	mov	r18,r12
   2bb94:	00000406 	br	2bba8 <___vfprintf_internal_r+0x10b8>
   2bb98:	843ffc04 	addi	r16,r16,-16
   2bb9c:	81800448 	cmpgei	r6,r16,17
   2bba0:	21000204 	addi	r4,r4,8
   2bba4:	30001426 	beq	r6,zero,2bbf8 <___vfprintf_internal_r+0x1108>
   2bba8:	10800044 	addi	r2,r2,1
   2bbac:	18c00404 	addi	r3,r3,16
   2bbb0:	24800015 	stw	r18,0(r4)
   2bbb4:	23c00115 	stw	r15,4(r4)
   2bbb8:	d8c01c15 	stw	r3,112(sp)
   2bbbc:	d8801b15 	stw	r2,108(sp)
   2bbc0:	11800208 	cmpgei	r6,r2,8
   2bbc4:	303ff426 	beq	r6,zero,2bb98 <___vfprintf_internal_r+0x10a8>
   2bbc8:	d9801a04 	addi	r6,sp,104
   2bbcc:	880b883a 	mov	r5,r17
   2bbd0:	9809883a 	mov	r4,r19
   2bbd4:	00322340 	call	32234 <__sprint_r>
   2bbd8:	1001b91e 	bne	r2,zero,2c2c0 <___vfprintf_internal_r+0x17d0>
   2bbdc:	843ffc04 	addi	r16,r16,-16
   2bbe0:	81800448 	cmpgei	r6,r16,17
   2bbe4:	d8c01c17 	ldw	r3,112(sp)
   2bbe8:	d8801b17 	ldw	r2,108(sp)
   2bbec:	d9002704 	addi	r4,sp,156
   2bbf0:	03c00404 	movi	r15,16
   2bbf4:	303fec1e 	bne	r6,zero,2bba8 <___vfprintf_internal_r+0x10b8>
   2bbf8:	800f883a 	mov	r7,r16
   2bbfc:	9019883a 	mov	r12,r18
   2bc00:	a021883a 	mov	r16,r20
   2bc04:	8825883a 	mov	r18,r17
   2bc08:	b829883a 	mov	r20,r23
   2bc0c:	db800e17 	ldw	r14,56(sp)
   2bc10:	db400f17 	ldw	r13,60(sp)
   2bc14:	ddc01217 	ldw	r23,72(sp)
   2bc18:	dc401117 	ldw	r17,68(sp)
   2bc1c:	a811883a 	mov	r8,r21
   2bc20:	b02b883a 	mov	r21,r22
   2bc24:	202d883a 	mov	r22,r4
   2bc28:	10800044 	addi	r2,r2,1
   2bc2c:	19c7883a 	add	r3,r3,r7
   2bc30:	d8801b15 	stw	r2,108(sp)
   2bc34:	b3000015 	stw	r12,0(r22)
   2bc38:	b1c00115 	stw	r7,4(r22)
   2bc3c:	d8c01c15 	stw	r3,112(sp)
   2bc40:	10800208 	cmpgei	r2,r2,8
   2bc44:	1001671e 	bne	r2,zero,2c1e4 <___vfprintf_internal_r+0x16f4>
   2bc48:	b5800204 	addi	r22,r22,8
   2bc4c:	003c7a06 	br	2ae38 <___vfprintf_internal_r+0x348>
   2bc50:	d9801a04 	addi	r6,sp,104
   2bc54:	900b883a 	mov	r5,r18
   2bc58:	9809883a 	mov	r4,r19
   2bc5c:	da001115 	stw	r8,68(sp)
   2bc60:	db400f15 	stw	r13,60(sp)
   2bc64:	db800e15 	stw	r14,56(sp)
   2bc68:	00322340 	call	32234 <__sprint_r>
   2bc6c:	103caf1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2bc70:	d8c01c17 	ldw	r3,112(sp)
   2bc74:	da001117 	ldw	r8,68(sp)
   2bc78:	db400f17 	ldw	r13,60(sp)
   2bc7c:	db800e17 	ldw	r14,56(sp)
   2bc80:	dd802704 	addi	r22,sp,156
   2bc84:	003c7a06 	br	2ae70 <___vfprintf_internal_r+0x380>
   2bc88:	d9801a04 	addi	r6,sp,104
   2bc8c:	900b883a 	mov	r5,r18
   2bc90:	9809883a 	mov	r4,r19
   2bc94:	da000f15 	stw	r8,60(sp)
   2bc98:	db400e15 	stw	r13,56(sp)
   2bc9c:	00322340 	call	32234 <__sprint_r>
   2bca0:	103ca21e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2bca4:	d8c01c17 	ldw	r3,112(sp)
   2bca8:	da000f17 	ldw	r8,60(sp)
   2bcac:	db400e17 	ldw	r13,56(sp)
   2bcb0:	dd802704 	addi	r22,sp,156
   2bcb4:	003c7b06 	br	2aea4 <___vfprintf_internal_r+0x3b4>
   2bcb8:	d9401417 	ldw	r5,80(sp)
   2bcbc:	0141570e 	bge	zero,r5,2c21c <___vfprintf_internal_r+0x172c>
   2bcc0:	d8800717 	ldw	r2,28(sp)
   2bcc4:	d9000817 	ldw	r4,32(sp)
   2bcc8:	102b883a 	mov	r21,r2
   2bccc:	2080b916 	blt	r4,r2,2bfb4 <___vfprintf_internal_r+0x14c4>
   2bcd0:	05400a0e 	bge	zero,r21,2bcfc <___vfprintf_internal_r+0x120c>
   2bcd4:	d8801b17 	ldw	r2,108(sp)
   2bcd8:	1d47883a 	add	r3,r3,r21
   2bcdc:	b4400015 	stw	r17,0(r22)
   2bce0:	10800044 	addi	r2,r2,1
   2bce4:	d8801b15 	stw	r2,108(sp)
   2bce8:	b5400115 	stw	r21,4(r22)
   2bcec:	d8c01c15 	stw	r3,112(sp)
   2bcf0:	10800208 	cmpgei	r2,r2,8
   2bcf4:	10032d1e 	bne	r2,zero,2c9ac <___vfprintf_internal_r+0x1ebc>
   2bcf8:	b5800204 	addi	r22,r22,8
   2bcfc:	a800c516 	blt	r21,zero,2c014 <___vfprintf_internal_r+0x1524>
   2bd00:	d8800717 	ldw	r2,28(sp)
   2bd04:	156bc83a 	sub	r21,r2,r21
   2bd08:	0540db16 	blt	zero,r21,2c078 <___vfprintf_internal_r+0x1588>
   2bd0c:	dd401417 	ldw	r21,80(sp)
   2bd10:	d8800817 	ldw	r2,32(sp)
   2bd14:	a880aa0e 	bge	r21,r2,2bfc0 <___vfprintf_internal_r+0x14d0>
   2bd18:	d8800d17 	ldw	r2,52(sp)
   2bd1c:	d9000b17 	ldw	r4,44(sp)
   2bd20:	b0800015 	stw	r2,0(r22)
   2bd24:	d8801b17 	ldw	r2,108(sp)
   2bd28:	1907883a 	add	r3,r3,r4
   2bd2c:	b1000115 	stw	r4,4(r22)
   2bd30:	10800044 	addi	r2,r2,1
   2bd34:	d8801b15 	stw	r2,108(sp)
   2bd38:	d8c01c15 	stw	r3,112(sp)
   2bd3c:	10800208 	cmpgei	r2,r2,8
   2bd40:	1003111e 	bne	r2,zero,2c988 <___vfprintf_internal_r+0x1e98>
   2bd44:	b5800204 	addi	r22,r22,8
   2bd48:	d9000817 	ldw	r4,32(sp)
   2bd4c:	d9400717 	ldw	r5,28(sp)
   2bd50:	2545c83a 	sub	r2,r4,r21
   2bd54:	2149c83a 	sub	r4,r4,r5
   2bd58:	102b883a 	mov	r21,r2
   2bd5c:	2080010e 	bge	r4,r2,2bd64 <___vfprintf_internal_r+0x1274>
   2bd60:	202b883a 	mov	r21,r4
   2bd64:	05400c0e 	bge	zero,r21,2bd98 <___vfprintf_internal_r+0x12a8>
   2bd68:	d9000717 	ldw	r4,28(sp)
   2bd6c:	1d47883a 	add	r3,r3,r21
   2bd70:	b5400115 	stw	r21,4(r22)
   2bd74:	8913883a 	add	r9,r17,r4
   2bd78:	d9001b17 	ldw	r4,108(sp)
   2bd7c:	b2400015 	stw	r9,0(r22)
   2bd80:	d8c01c15 	stw	r3,112(sp)
   2bd84:	21000044 	addi	r4,r4,1
   2bd88:	d9001b15 	stw	r4,108(sp)
   2bd8c:	21000208 	cmpgei	r4,r4,8
   2bd90:	2003111e 	bne	r4,zero,2c9d8 <___vfprintf_internal_r+0x1ee8>
   2bd94:	b5800204 	addi	r22,r22,8
   2bd98:	a800010e 	bge	r21,zero,2bda0 <___vfprintf_internal_r+0x12b0>
   2bd9c:	002b883a 	mov	r21,zero
   2bda0:	156bc83a 	sub	r21,r2,r21
   2bda4:	057c500e 	bge	zero,r21,2aee8 <___vfprintf_internal_r+0x3f8>
   2bda8:	01c00134 	movhi	r7,4
   2bdac:	a9000450 	cmplti	r4,r21,17
   2bdb0:	d8801b17 	ldw	r2,108(sp)
   2bdb4:	39e2d904 	addi	r7,r7,-29852
   2bdb8:	2001c51e 	bne	r4,zero,2c4d0 <___vfprintf_internal_r+0x19e0>
   2bdbc:	07000404 	movi	fp,16
   2bdc0:	3823883a 	mov	r17,r7
   2bdc4:	00000406 	br	2bdd8 <___vfprintf_internal_r+0x12e8>
   2bdc8:	b5800204 	addi	r22,r22,8
   2bdcc:	ad7ffc04 	addi	r21,r21,-16
   2bdd0:	a9000448 	cmpgei	r4,r21,17
   2bdd4:	2001bd26 	beq	r4,zero,2c4cc <___vfprintf_internal_r+0x19dc>
   2bdd8:	10800044 	addi	r2,r2,1
   2bddc:	18c00404 	addi	r3,r3,16
   2bde0:	b4400015 	stw	r17,0(r22)
   2bde4:	b7000115 	stw	fp,4(r22)
   2bde8:	d8c01c15 	stw	r3,112(sp)
   2bdec:	d8801b15 	stw	r2,108(sp)
   2bdf0:	11000208 	cmpgei	r4,r2,8
   2bdf4:	203ff426 	beq	r4,zero,2bdc8 <___vfprintf_internal_r+0x12d8>
   2bdf8:	d9801a04 	addi	r6,sp,104
   2bdfc:	900b883a 	mov	r5,r18
   2be00:	9809883a 	mov	r4,r19
   2be04:	00322340 	call	32234 <__sprint_r>
   2be08:	103c481e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2be0c:	d8c01c17 	ldw	r3,112(sp)
   2be10:	d8801b17 	ldw	r2,108(sp)
   2be14:	dd802704 	addi	r22,sp,156
   2be18:	003fec06 	br	2bdcc <___vfprintf_internal_r+0x12dc>
   2be1c:	4002a71e 	bne	r8,zero,2c8bc <___vfprintf_internal_r+0x1dcc>
   2be20:	0011883a 	mov	r8,zero
   2be24:	002b883a 	mov	r21,zero
   2be28:	dc402704 	addi	r17,sp,156
   2be2c:	003d4706 	br	2b34c <___vfprintf_internal_r+0x85c>
   2be30:	d8800417 	ldw	r2,16(sp)
   2be34:	1080004c 	andi	r2,r2,1
   2be38:	103f051e 	bne	r2,zero,2ba50 <___vfprintf_internal_r+0xf60>
   2be3c:	00800044 	movi	r2,1
   2be40:	dd401b15 	stw	r21,108(sp)
   2be44:	b4400015 	stw	r17,0(r22)
   2be48:	b0800115 	stw	r2,4(r22)
   2be4c:	d8c01c15 	stw	r3,112(sp)
   2be50:	ad400208 	cmpgei	r21,r21,8
   2be54:	a800641e 	bne	r21,zero,2bfe8 <___vfprintf_internal_r+0x14f8>
   2be58:	42000084 	addi	r8,r8,2
   2be5c:	b5800404 	addi	r22,r22,16
   2be60:	003f2706 	br	2bb00 <___vfprintf_internal_r+0x1010>
   2be64:	02ff260e 	bge	zero,r11,2bb00 <___vfprintf_internal_r+0x1010>
   2be68:	58800450 	cmplti	r2,r11,17
   2be6c:	01c00134 	movhi	r7,4
   2be70:	10034c1e 	bne	r2,zero,2cba4 <___vfprintf_internal_r+0x20b4>
   2be74:	39e2d904 	addi	r7,r7,-29852
   2be78:	dc000715 	stw	r16,28(sp)
   2be7c:	05800404 	movi	r22,16
   2be80:	5823883a 	mov	r17,r11
   2be84:	402b883a 	mov	r21,r8
   2be88:	3821883a 	mov	r16,r7
   2be8c:	00000506 	br	2bea4 <___vfprintf_internal_r+0x13b4>
   2be90:	e7000204 	addi	fp,fp,8
   2be94:	8c7ffc04 	addi	r17,r17,-16
   2be98:	88800448 	cmpgei	r2,r17,17
   2be9c:	1001d626 	beq	r2,zero,2c5f8 <___vfprintf_internal_r+0x1b08>
   2bea0:	ad400044 	addi	r21,r21,1
   2bea4:	18c00404 	addi	r3,r3,16
   2bea8:	e4000015 	stw	r16,0(fp)
   2beac:	e5800115 	stw	r22,4(fp)
   2beb0:	d8c01c15 	stw	r3,112(sp)
   2beb4:	dd401b15 	stw	r21,108(sp)
   2beb8:	a8800208 	cmpgei	r2,r21,8
   2bebc:	103ff426 	beq	r2,zero,2be90 <___vfprintf_internal_r+0x13a0>
   2bec0:	d9801a04 	addi	r6,sp,104
   2bec4:	900b883a 	mov	r5,r18
   2bec8:	9809883a 	mov	r4,r19
   2becc:	00322340 	call	32234 <__sprint_r>
   2bed0:	103c161e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2bed4:	dd401b17 	ldw	r21,108(sp)
   2bed8:	d8c01c17 	ldw	r3,112(sp)
   2bedc:	df002704 	addi	fp,sp,156
   2bee0:	003fec06 	br	2be94 <___vfprintf_internal_r+0x13a4>
   2bee4:	d9801a04 	addi	r6,sp,104
   2bee8:	900b883a 	mov	r5,r18
   2beec:	9809883a 	mov	r4,r19
   2bef0:	00322340 	call	32234 <__sprint_r>
   2bef4:	103c0d1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2bef8:	d8c01c17 	ldw	r3,112(sp)
   2befc:	dd802704 	addi	r22,sp,156
   2bf00:	003bec06 	br	2aeb4 <___vfprintf_internal_r+0x3c4>
   2bf04:	d8800417 	ldw	r2,16(sp)
   2bf08:	1080004c 	andi	r2,r2,1
   2bf0c:	103bf626 	beq	r2,zero,2aee8 <___vfprintf_internal_r+0x3f8>
   2bf10:	003e1506 	br	2b768 <___vfprintf_internal_r+0xc78>
   2bf14:	dc402704 	addi	r17,sp,156
   2bf18:	003d0c06 	br	2b34c <___vfprintf_internal_r+0x85c>
   2bf1c:	00800c04 	movi	r2,48
   2bf20:	d8801385 	stb	r2,78(sp)
   2bf24:	df0013c5 	stb	fp,79(sp)
   2bf28:	63000094 	ori	r12,r12,2
   2bf2c:	00800084 	movi	r2,2
   2bf30:	003c3b06 	br	2b020 <___vfprintf_internal_r+0x530>
   2bf34:	25000017 	ldw	r20,0(r4)
   2bf38:	002b883a 	mov	r21,zero
   2bf3c:	d8c00615 	stw	r3,24(sp)
   2bf40:	00800044 	movi	r2,1
   2bf44:	003c3606 	br	2b020 <___vfprintf_internal_r+0x530>
   2bf48:	d9000517 	ldw	r4,20(sp)
   2bf4c:	2005d7fa 	srai	r2,r4,31
   2bf50:	19000015 	stw	r4,0(r3)
   2bf54:	18800115 	stw	r2,4(r3)
   2bf58:	003b1906 	br	2abc0 <___vfprintf_internal_r+0xd0>
   2bf5c:	25000017 	ldw	r20,0(r4)
   2bf60:	002b883a 	mov	r21,zero
   2bf64:	d8c00615 	stw	r3,24(sp)
   2bf68:	003d1b06 	br	2b3d8 <___vfprintf_internal_r+0x8e8>
   2bf6c:	25000017 	ldw	r20,0(r4)
   2bf70:	002b883a 	mov	r21,zero
   2bf74:	d8c00615 	stw	r3,24(sp)
   2bf78:	0005883a 	mov	r2,zero
   2bf7c:	003c2806 	br	2b020 <___vfprintf_internal_r+0x530>
   2bf80:	18800017 	ldw	r2,0(r3)
   2bf84:	d8800915 	stw	r2,36(sp)
   2bf88:	18800117 	ldw	r2,4(r3)
   2bf8c:	d8800a15 	stw	r2,40(sp)
   2bf90:	003c5906 	br	2b0f8 <___vfprintf_internal_r+0x608>
   2bf94:	25000017 	ldw	r20,0(r4)
   2bf98:	d8c00615 	stw	r3,24(sp)
   2bf9c:	a02bd7fa 	srai	r21,r20,31
   2bfa0:	a805883a 	mov	r2,r21
   2bfa4:	003cd706 	br	2b304 <___vfprintf_internal_r+0x814>
   2bfa8:	0421c83a 	sub	r16,zero,r16
   2bfac:	d8800615 	stw	r2,24(sp)
   2bfb0:	003d6306 	br	2b540 <___vfprintf_internal_r+0xa50>
   2bfb4:	202b883a 	mov	r21,r4
   2bfb8:	057f4616 	blt	zero,r21,2bcd4 <___vfprintf_internal_r+0x11e4>
   2bfbc:	003f4f06 	br	2bcfc <___vfprintf_internal_r+0x120c>
   2bfc0:	d8800417 	ldw	r2,16(sp)
   2bfc4:	1080004c 	andi	r2,r2,1
   2bfc8:	103f531e 	bne	r2,zero,2bd18 <___vfprintf_internal_r+0x1228>
   2bfcc:	d9000817 	ldw	r4,32(sp)
   2bfd0:	d9400717 	ldw	r5,28(sp)
   2bfd4:	2545c83a 	sub	r2,r4,r21
   2bfd8:	216bc83a 	sub	r21,r4,r5
   2bfdc:	157f6e0e 	bge	r2,r21,2bd98 <___vfprintf_internal_r+0x12a8>
   2bfe0:	102b883a 	mov	r21,r2
   2bfe4:	003f6c06 	br	2bd98 <___vfprintf_internal_r+0x12a8>
   2bfe8:	d9801a04 	addi	r6,sp,104
   2bfec:	900b883a 	mov	r5,r18
   2bff0:	9809883a 	mov	r4,r19
   2bff4:	00322340 	call	32234 <__sprint_r>
   2bff8:	103bcc1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2bffc:	da001b17 	ldw	r8,108(sp)
   2c000:	d8c01c17 	ldw	r3,112(sp)
   2c004:	dd802904 	addi	r22,sp,164
   2c008:	42000044 	addi	r8,r8,1
   2c00c:	df002704 	addi	fp,sp,156
   2c010:	003ebb06 	br	2bb00 <___vfprintf_internal_r+0x1010>
   2c014:	002b883a 	mov	r21,zero
   2c018:	003f3906 	br	2bd00 <___vfprintf_internal_r+0x1210>
   2c01c:	bf000043 	ldbu	fp,1(r23)
   2c020:	63000814 	ori	r12,r12,32
   2c024:	bdc00044 	addi	r23,r23,1
   2c028:	e2c03fcc 	andi	r11,fp,255
   2c02c:	5ac0201c 	xori	r11,r11,128
   2c030:	5affe004 	addi	r11,r11,-128
   2c034:	003afa06 	br	2ac20 <___vfprintf_internal_r+0x130>
   2c038:	d9801a04 	addi	r6,sp,104
   2c03c:	900b883a 	mov	r5,r18
   2c040:	9809883a 	mov	r4,r19
   2c044:	00322340 	call	32234 <__sprint_r>
   2c048:	103bb81e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c04c:	d8c01c17 	ldw	r3,112(sp)
   2c050:	dd802704 	addi	r22,sp,156
   2c054:	003dd006 	br	2b798 <___vfprintf_internal_r+0xca8>
   2c058:	408001f0 	cmpltui	r2,r8,7
   2c05c:	402b883a 	mov	r21,r8
   2c060:	1001e726 	beq	r2,zero,2c800 <___vfprintf_internal_r+0x1d10>
   2c064:	04400134 	movhi	r17,4
   2c068:	a829883a 	mov	r20,r21
   2c06c:	d8c00615 	stw	r3,24(sp)
   2c070:	8c62d604 	addi	r17,r17,-29864
   2c074:	003b6306 	br	2ae04 <___vfprintf_internal_r+0x314>
   2c078:	01c00134 	movhi	r7,4
   2c07c:	a9000450 	cmplti	r4,r21,17
   2c080:	d8801b17 	ldw	r2,108(sp)
   2c084:	39e2d904 	addi	r7,r7,-29852
   2c088:	2001c21e 	bne	r4,zero,2c794 <___vfprintf_internal_r+0x1ca4>
   2c08c:	dc000e15 	stw	r16,56(sp)
   2c090:	07000404 	movi	fp,16
   2c094:	3821883a 	mov	r16,r7
   2c098:	00000406 	br	2c0ac <___vfprintf_internal_r+0x15bc>
   2c09c:	b5800204 	addi	r22,r22,8
   2c0a0:	ad7ffc04 	addi	r21,r21,-16
   2c0a4:	a9000448 	cmpgei	r4,r21,17
   2c0a8:	2001b826 	beq	r4,zero,2c78c <___vfprintf_internal_r+0x1c9c>
   2c0ac:	10800044 	addi	r2,r2,1
   2c0b0:	18c00404 	addi	r3,r3,16
   2c0b4:	b4000015 	stw	r16,0(r22)
   2c0b8:	b7000115 	stw	fp,4(r22)
   2c0bc:	d8c01c15 	stw	r3,112(sp)
   2c0c0:	d8801b15 	stw	r2,108(sp)
   2c0c4:	11000208 	cmpgei	r4,r2,8
   2c0c8:	203ff426 	beq	r4,zero,2c09c <___vfprintf_internal_r+0x15ac>
   2c0cc:	d9801a04 	addi	r6,sp,104
   2c0d0:	900b883a 	mov	r5,r18
   2c0d4:	9809883a 	mov	r4,r19
   2c0d8:	00322340 	call	32234 <__sprint_r>
   2c0dc:	103b931e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c0e0:	d8c01c17 	ldw	r3,112(sp)
   2c0e4:	d8801b17 	ldw	r2,108(sp)
   2c0e8:	dd802704 	addi	r22,sp,156
   2c0ec:	003fec06 	br	2c0a0 <___vfprintf_internal_r+0x15b0>
   2c0f0:	dc402704 	addi	r17,sp,156
   2c0f4:	a805883a 	mov	r2,r21
   2c0f8:	dc000715 	stw	r16,28(sp)
   2c0fc:	902b883a 	mov	r21,r18
   2c100:	8821883a 	mov	r16,r17
   2c104:	db000415 	stw	r12,16(sp)
   2c108:	a023883a 	mov	r17,r20
   2c10c:	da000e15 	stw	r8,56(sp)
   2c110:	9829883a 	mov	r20,r19
   2c114:	1025883a 	mov	r18,r2
   2c118:	6827883a 	mov	r19,r13
   2c11c:	8809883a 	mov	r4,r17
   2c120:	900b883a 	mov	r5,r18
   2c124:	01800284 	movi	r6,10
   2c128:	000f883a 	mov	r7,zero
   2c12c:	0034df40 	call	34df4 <__umoddi3>
   2c130:	10800c04 	addi	r2,r2,48
   2c134:	8809883a 	mov	r4,r17
   2c138:	900b883a 	mov	r5,r18
   2c13c:	01800284 	movi	r6,10
   2c140:	000f883a 	mov	r7,zero
   2c144:	80bfffc5 	stb	r2,-1(r16)
   2c148:	00347d40 	call	347d4 <__udivdi3>
   2c14c:	900d883a 	mov	r6,r18
   2c150:	880f883a 	mov	r7,r17
   2c154:	843fffc4 	addi	r16,r16,-1
   2c158:	1023883a 	mov	r17,r2
   2c15c:	1825883a 	mov	r18,r3
   2c160:	303fee1e 	bne	r6,zero,2c11c <___vfprintf_internal_r+0x162c>
   2c164:	39c002a8 	cmpgeui	r7,r7,10
   2c168:	383fec1e 	bne	r7,zero,2c11c <___vfprintf_internal_r+0x162c>
   2c16c:	8023883a 	mov	r17,r16
   2c170:	d8802704 	addi	r2,sp,156
   2c174:	981b883a 	mov	r13,r19
   2c178:	a825883a 	mov	r18,r21
   2c17c:	dc000717 	ldw	r16,28(sp)
   2c180:	da000e17 	ldw	r8,56(sp)
   2c184:	a027883a 	mov	r19,r20
   2c188:	146bc83a 	sub	r21,r2,r17
   2c18c:	003c6f06 	br	2b34c <___vfprintf_internal_r+0x85c>
   2c190:	d8800517 	ldw	r2,20(sp)
   2c194:	18800015 	stw	r2,0(r3)
   2c198:	003a8906 	br	2abc0 <___vfprintf_internal_r+0xd0>
   2c19c:	d9801a04 	addi	r6,sp,104
   2c1a0:	900b883a 	mov	r5,r18
   2c1a4:	9809883a 	mov	r4,r19
   2c1a8:	00322340 	call	32234 <__sprint_r>
   2c1ac:	103b5f1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c1b0:	d8c01c17 	ldw	r3,112(sp)
   2c1b4:	dd401b17 	ldw	r21,108(sp)
   2c1b8:	df002704 	addi	fp,sp,156
   2c1bc:	003e2b06 	br	2ba6c <___vfprintf_internal_r+0xf7c>
   2c1c0:	d9801a04 	addi	r6,sp,104
   2c1c4:	900b883a 	mov	r5,r18
   2c1c8:	9809883a 	mov	r4,r19
   2c1cc:	00322340 	call	32234 <__sprint_r>
   2c1d0:	103b561e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c1d4:	d8c01c17 	ldw	r3,112(sp)
   2c1d8:	dd401b17 	ldw	r21,108(sp)
   2c1dc:	df002704 	addi	fp,sp,156
   2c1e0:	003e2d06 	br	2ba98 <___vfprintf_internal_r+0xfa8>
   2c1e4:	d9801a04 	addi	r6,sp,104
   2c1e8:	900b883a 	mov	r5,r18
   2c1ec:	9809883a 	mov	r4,r19
   2c1f0:	da001115 	stw	r8,68(sp)
   2c1f4:	db400f15 	stw	r13,60(sp)
   2c1f8:	db800e15 	stw	r14,56(sp)
   2c1fc:	00322340 	call	32234 <__sprint_r>
   2c200:	103b4a1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c204:	d8c01c17 	ldw	r3,112(sp)
   2c208:	da001117 	ldw	r8,68(sp)
   2c20c:	db400f17 	ldw	r13,60(sp)
   2c210:	db800e17 	ldw	r14,56(sp)
   2c214:	dd802704 	addi	r22,sp,156
   2c218:	003b0706 	br	2ae38 <___vfprintf_internal_r+0x348>
   2c21c:	d8801b17 	ldw	r2,108(sp)
   2c220:	01000134 	movhi	r4,4
   2c224:	2122d804 	addi	r4,r4,-29856
   2c228:	10800044 	addi	r2,r2,1
   2c22c:	18c00044 	addi	r3,r3,1
   2c230:	b1000015 	stw	r4,0(r22)
   2c234:	01000044 	movi	r4,1
   2c238:	d8801b15 	stw	r2,108(sp)
   2c23c:	b1000115 	stw	r4,4(r22)
   2c240:	d8c01c15 	stw	r3,112(sp)
   2c244:	10800208 	cmpgei	r2,r2,8
   2c248:	1001641e 	bne	r2,zero,2c7dc <___vfprintf_internal_r+0x1cec>
   2c24c:	b5800204 	addi	r22,r22,8
   2c250:	2800bd1e 	bne	r5,zero,2c548 <___vfprintf_internal_r+0x1a58>
   2c254:	d8800417 	ldw	r2,16(sp)
   2c258:	d9000817 	ldw	r4,32(sp)
   2c25c:	1080004c 	andi	r2,r2,1
   2c260:	1104b03a 	or	r2,r2,r4
   2c264:	103b2026 	beq	r2,zero,2aee8 <___vfprintf_internal_r+0x3f8>
   2c268:	d8800d17 	ldw	r2,52(sp)
   2c26c:	d9000b17 	ldw	r4,44(sp)
   2c270:	b0800015 	stw	r2,0(r22)
   2c274:	d8801b17 	ldw	r2,108(sp)
   2c278:	20c7883a 	add	r3,r4,r3
   2c27c:	b1000115 	stw	r4,4(r22)
   2c280:	10800044 	addi	r2,r2,1
   2c284:	d8c01c15 	stw	r3,112(sp)
   2c288:	d8801b15 	stw	r2,108(sp)
   2c28c:	11000208 	cmpgei	r4,r2,8
   2c290:	2001771e 	bne	r4,zero,2c870 <___vfprintf_internal_r+0x1d80>
   2c294:	b5800204 	addi	r22,r22,8
   2c298:	d9000817 	ldw	r4,32(sp)
   2c29c:	10800044 	addi	r2,r2,1
   2c2a0:	d8801b15 	stw	r2,108(sp)
   2c2a4:	20c7883a 	add	r3,r4,r3
   2c2a8:	b4400015 	stw	r17,0(r22)
   2c2ac:	b1000115 	stw	r4,4(r22)
   2c2b0:	d8c01c15 	stw	r3,112(sp)
   2c2b4:	10800208 	cmpgei	r2,r2,8
   2c2b8:	103b0a26 	beq	r2,zero,2aee4 <___vfprintf_internal_r+0x3f4>
   2c2bc:	003e1906 	br	2bb24 <___vfprintf_internal_r+0x1034>
   2c2c0:	8825883a 	mov	r18,r17
   2c2c4:	003b1906 	br	2af2c <___vfprintf_internal_r+0x43c>
   2c2c8:	d9000917 	ldw	r4,36(sp)
   2c2cc:	d9400a17 	ldw	r5,40(sp)
   2c2d0:	da000615 	stw	r8,24(sp)
   2c2d4:	200d883a 	mov	r6,r4
   2c2d8:	280f883a 	mov	r7,r5
   2c2dc:	db000415 	stw	r12,16(sp)
   2c2e0:	00354380 	call	35438 <__unorddf2>
   2c2e4:	db000417 	ldw	r12,16(sp)
   2c2e8:	da000617 	ldw	r8,24(sp)
   2c2ec:	1002061e 	bne	r2,zero,2cb08 <___vfprintf_internal_r+0x2018>
   2c2f0:	057ff7c4 	movi	r21,-33
   2c2f4:	40bfffe0 	cmpeqi	r2,r8,-1
   2c2f8:	e56a703a 	and	r21,fp,r21
   2c2fc:	1001b41e 	bne	r2,zero,2c9d0 <___vfprintf_internal_r+0x1ee0>
   2c300:	a88011d8 	cmpnei	r2,r21,71
   2c304:	10015726 	beq	r2,zero,2c864 <___vfprintf_internal_r+0x1d74>
   2c308:	60804014 	ori	r2,r12,256
   2c30c:	d8800415 	stw	r2,16(sp)
   2c310:	d8800a17 	ldw	r2,40(sp)
   2c314:	10012d16 	blt	r2,zero,2c7cc <___vfprintf_internal_r+0x1cdc>
   2c318:	dd000a17 	ldw	r20,40(sp)
   2c31c:	d8000605 	stb	zero,24(sp)
   2c320:	e08019a0 	cmpeqi	r2,fp,102
   2c324:	d8800f15 	stw	r2,60(sp)
   2c328:	1000d21e 	bne	r2,zero,2c674 <___vfprintf_internal_r+0x1b84>
   2c32c:	e08011a0 	cmpeqi	r2,fp,70
   2c330:	1000d01e 	bne	r2,zero,2c674 <___vfprintf_internal_r+0x1b84>
   2c334:	a8801158 	cmpnei	r2,r21,69
   2c338:	10016226 	beq	r2,zero,2c8c4 <___vfprintf_internal_r+0x1dd4>
   2c33c:	d8801804 	addi	r2,sp,96
   2c340:	d8800315 	stw	r2,12(sp)
   2c344:	d9400917 	ldw	r5,36(sp)
   2c348:	d8801504 	addi	r2,sp,84
   2c34c:	d8800215 	stw	r2,8(sp)
   2c350:	d8801404 	addi	r2,sp,80
   2c354:	da000015 	stw	r8,0(sp)
   2c358:	9809883a 	mov	r4,r19
   2c35c:	d8800115 	stw	r2,4(sp)
   2c360:	01c00084 	movi	r7,2
   2c364:	a00d883a 	mov	r6,r20
   2c368:	db000815 	stw	r12,32(sp)
   2c36c:	da000715 	stw	r8,28(sp)
   2c370:	002d0540 	call	2d054 <_dtoa_r>
   2c374:	da000717 	ldw	r8,28(sp)
   2c378:	e10019d8 	cmpnei	r4,fp,103
   2c37c:	db000817 	ldw	r12,32(sp)
   2c380:	1023883a 	mov	r17,r2
   2c384:	4007883a 	mov	r3,r8
   2c388:	2001621e 	bne	r4,zero,2c914 <___vfprintf_internal_r+0x1e24>
   2c38c:	6080004c 	andi	r2,r12,1
   2c390:	1001621e 	bne	r2,zero,2c91c <___vfprintf_internal_r+0x1e2c>
   2c394:	d8801417 	ldw	r2,80(sp)
   2c398:	ad4011e0 	cmpeqi	r21,r21,71
   2c39c:	d8800715 	stw	r2,28(sp)
   2c3a0:	d8801817 	ldw	r2,96(sp)
   2c3a4:	1445c83a 	sub	r2,r2,r17
   2c3a8:	d8800815 	stw	r2,32(sp)
   2c3ac:	a8000526 	beq	r21,zero,2c3c4 <___vfprintf_internal_r+0x18d4>
   2c3b0:	d8c00717 	ldw	r3,28(sp)
   2c3b4:	18bfff50 	cmplti	r2,r3,-3
   2c3b8:	1000011e 	bne	r2,zero,2c3c0 <___vfprintf_internal_r+0x18d0>
   2c3bc:	40c1670e 	bge	r8,r3,2c95c <___vfprintf_internal_r+0x1e6c>
   2c3c0:	e73fff84 	addi	fp,fp,-2
   2c3c4:	d8800717 	ldw	r2,28(sp)
   2c3c8:	df001645 	stb	fp,89(sp)
   2c3cc:	157fffc4 	addi	r21,r2,-1
   2c3d0:	dd401415 	stw	r21,80(sp)
   2c3d4:	a801d416 	blt	r21,zero,2cb28 <___vfprintf_internal_r+0x2038>
   2c3d8:	00800ac4 	movi	r2,43
   2c3dc:	d8801685 	stb	r2,90(sp)
   2c3e0:	a8800290 	cmplti	r2,r21,10
   2c3e4:	1001c11e 	bne	r2,zero,2caec <___vfprintf_internal_r+0x1ffc>
   2c3e8:	d98019c4 	addi	r6,sp,103
   2c3ec:	9029883a 	mov	r20,r18
   2c3f0:	dc400715 	stw	r17,28(sp)
   2c3f4:	8025883a 	mov	r18,r16
   2c3f8:	db000f15 	stw	r12,60(sp)
   2c3fc:	3021883a 	mov	r16,r6
   2c400:	a809883a 	mov	r4,r21
   2c404:	01400284 	movi	r5,10
   2c408:	0026a180 	call	26a18 <__modsi3>
   2c40c:	10800c04 	addi	r2,r2,48
   2c410:	a809883a 	mov	r4,r21
   2c414:	80bfffc5 	stb	r2,-1(r16)
   2c418:	01400284 	movi	r5,10
   2c41c:	00269980 	call	26998 <__divsi3>
   2c420:	a9001908 	cmpgei	r4,r21,100
   2c424:	8023883a 	mov	r17,r16
   2c428:	102b883a 	mov	r21,r2
   2c42c:	843fffc4 	addi	r16,r16,-1
   2c430:	203ff31e 	bne	r4,zero,2c400 <___vfprintf_internal_r+0x1910>
   2c434:	800d883a 	mov	r6,r16
   2c438:	11000c04 	addi	r4,r2,48
   2c43c:	9021883a 	mov	r16,r18
   2c440:	a025883a 	mov	r18,r20
   2c444:	8829883a 	mov	r20,r17
   2c448:	a0bfff84 	addi	r2,r20,-2
   2c44c:	313fffc5 	stb	r4,-1(r6)
   2c450:	d8c019c4 	addi	r3,sp,103
   2c454:	db000f17 	ldw	r12,60(sp)
   2c458:	dc400717 	ldw	r17,28(sp)
   2c45c:	10c1d62e 	bgeu	r2,r3,2cbb8 <___vfprintf_internal_r+0x20c8>
   2c460:	d8c016c4 	addi	r3,sp,91
   2c464:	00000106 	br	2c46c <___vfprintf_internal_r+0x197c>
   2c468:	11000003 	ldbu	r4,0(r2)
   2c46c:	19000005 	stb	r4,0(r3)
   2c470:	10800044 	addi	r2,r2,1
   2c474:	d90019c4 	addi	r4,sp,103
   2c478:	18c00044 	addi	r3,r3,1
   2c47c:	113ffa1e 	bne	r2,r4,2c468 <___vfprintf_internal_r+0x1978>
   2c480:	d8801a44 	addi	r2,sp,105
   2c484:	d8c016c4 	addi	r3,sp,91
   2c488:	1505c83a 	sub	r2,r2,r20
   2c48c:	1885883a 	add	r2,r3,r2
   2c490:	d8c01644 	addi	r3,sp,89
   2c494:	10c5c83a 	sub	r2,r2,r3
   2c498:	d8801015 	stw	r2,64(sp)
   2c49c:	d8c00817 	ldw	r3,32(sp)
   2c4a0:	d9001017 	ldw	r4,64(sp)
   2c4a4:	18800088 	cmpgei	r2,r3,2
   2c4a8:	192b883a 	add	r21,r3,r4
   2c4ac:	1001aa26 	beq	r2,zero,2cb58 <___vfprintf_internal_r+0x2068>
   2c4b0:	d8800b17 	ldw	r2,44(sp)
   2c4b4:	a8ab883a 	add	r21,r21,r2
   2c4b8:	a829883a 	mov	r20,r21
   2c4bc:	a800010e 	bge	r21,zero,2c4c4 <___vfprintf_internal_r+0x19d4>
   2c4c0:	0029883a 	mov	r20,zero
   2c4c4:	d8000715 	stw	zero,28(sp)
   2c4c8:	00009d06 	br	2c740 <___vfprintf_internal_r+0x1c50>
   2c4cc:	880f883a 	mov	r7,r17
   2c4d0:	10800044 	addi	r2,r2,1
   2c4d4:	1d47883a 	add	r3,r3,r21
   2c4d8:	b1c00015 	stw	r7,0(r22)
   2c4dc:	003a7c06 	br	2aed0 <___vfprintf_internal_r+0x3e0>
   2c4e0:	d9801a04 	addi	r6,sp,104
   2c4e4:	900b883a 	mov	r5,r18
   2c4e8:	9809883a 	mov	r4,r19
   2c4ec:	00322340 	call	32234 <__sprint_r>
   2c4f0:	103a8e1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c4f4:	d8c01c17 	ldw	r3,112(sp)
   2c4f8:	dd802704 	addi	r22,sp,156
   2c4fc:	003c9706 	br	2b75c <___vfprintf_internal_r+0xc6c>
   2c500:	d9801a04 	addi	r6,sp,104
   2c504:	900b883a 	mov	r5,r18
   2c508:	9809883a 	mov	r4,r19
   2c50c:	da000e15 	stw	r8,56(sp)
   2c510:	00322340 	call	32234 <__sprint_r>
   2c514:	103a851e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c518:	d8c01c17 	ldw	r3,112(sp)
   2c51c:	da000e17 	ldw	r8,56(sp)
   2c520:	dd802704 	addi	r22,sp,156
   2c524:	003a6106 	br	2aeac <___vfprintf_internal_r+0x3bc>
   2c528:	8809883a 	mov	r4,r17
   2c52c:	db000415 	stw	r12,16(sp)
   2c530:	d8c00615 	stw	r3,24(sp)
   2c534:	002aa580 	call	2aa58 <strlen>
   2c538:	db000417 	ldw	r12,16(sp)
   2c53c:	102b883a 	mov	r21,r2
   2c540:	1029883a 	mov	r20,r2
   2c544:	003a2f06 	br	2ae04 <___vfprintf_internal_r+0x314>
   2c548:	d8800d17 	ldw	r2,52(sp)
   2c54c:	d9000b17 	ldw	r4,44(sp)
   2c550:	b0800015 	stw	r2,0(r22)
   2c554:	d8801b17 	ldw	r2,108(sp)
   2c558:	20c7883a 	add	r3,r4,r3
   2c55c:	b1000115 	stw	r4,4(r22)
   2c560:	10800044 	addi	r2,r2,1
   2c564:	d8c01c15 	stw	r3,112(sp)
   2c568:	d8801b15 	stw	r2,108(sp)
   2c56c:	11000208 	cmpgei	r4,r2,8
   2c570:	2000bf1e 	bne	r4,zero,2c870 <___vfprintf_internal_r+0x1d80>
   2c574:	b5800204 	addi	r22,r22,8
   2c578:	283f470e 	bge	r5,zero,2c298 <___vfprintf_internal_r+0x17a8>
   2c57c:	01c00134 	movhi	r7,4
   2c580:	293ffc08 	cmpgei	r4,r5,-16
   2c584:	39e2d904 	addi	r7,r7,-29852
   2c588:	0179c83a 	sub	fp,zero,r5
   2c58c:	20013f1e 	bne	r4,zero,2ca8c <___vfprintf_internal_r+0x1f9c>
   2c590:	dc000715 	stw	r16,28(sp)
   2c594:	05400404 	movi	r21,16
   2c598:	9021883a 	mov	r16,r18
   2c59c:	3825883a 	mov	r18,r7
   2c5a0:	00000406 	br	2c5b4 <___vfprintf_internal_r+0x1ac4>
   2c5a4:	b5800204 	addi	r22,r22,8
   2c5a8:	e73ffc04 	addi	fp,fp,-16
   2c5ac:	e1800448 	cmpgei	r6,fp,17
   2c5b0:	30013326 	beq	r6,zero,2ca80 <___vfprintf_internal_r+0x1f90>
   2c5b4:	10800044 	addi	r2,r2,1
   2c5b8:	18c00404 	addi	r3,r3,16
   2c5bc:	b4800015 	stw	r18,0(r22)
   2c5c0:	b5400115 	stw	r21,4(r22)
   2c5c4:	d8c01c15 	stw	r3,112(sp)
   2c5c8:	d8801b15 	stw	r2,108(sp)
   2c5cc:	11800208 	cmpgei	r6,r2,8
   2c5d0:	303ff426 	beq	r6,zero,2c5a4 <___vfprintf_internal_r+0x1ab4>
   2c5d4:	d9801a04 	addi	r6,sp,104
   2c5d8:	800b883a 	mov	r5,r16
   2c5dc:	9809883a 	mov	r4,r19
   2c5e0:	00322340 	call	32234 <__sprint_r>
   2c5e4:	1001721e 	bne	r2,zero,2cbb0 <___vfprintf_internal_r+0x20c0>
   2c5e8:	d8c01c17 	ldw	r3,112(sp)
   2c5ec:	d8801b17 	ldw	r2,108(sp)
   2c5f0:	dd802704 	addi	r22,sp,156
   2c5f4:	003fec06 	br	2c5a8 <___vfprintf_internal_r+0x1ab8>
   2c5f8:	800f883a 	mov	r7,r16
   2c5fc:	dc000717 	ldw	r16,28(sp)
   2c600:	8817883a 	mov	r11,r17
   2c604:	aa000044 	addi	r8,r21,1
   2c608:	e0800204 	addi	r2,fp,8
   2c60c:	1ac7883a 	add	r3,r3,r11
   2c610:	e1c00015 	stw	r7,0(fp)
   2c614:	e2c00115 	stw	r11,4(fp)
   2c618:	d8c01c15 	stw	r3,112(sp)
   2c61c:	da001b15 	stw	r8,108(sp)
   2c620:	41000208 	cmpgei	r4,r8,8
   2c624:	203e701e 	bne	r4,zero,2bfe8 <___vfprintf_internal_r+0x14f8>
   2c628:	42000044 	addi	r8,r8,1
   2c62c:	15800204 	addi	r22,r2,8
   2c630:	1039883a 	mov	fp,r2
   2c634:	003d3206 	br	2bb00 <___vfprintf_internal_r+0x1010>
   2c638:	d8800617 	ldw	r2,24(sp)
   2c63c:	d8c00615 	stw	r3,24(sp)
   2c640:	15000017 	ldw	r20,0(r2)
   2c644:	a02bd7fa 	srai	r21,r20,31
   2c648:	a805883a 	mov	r2,r21
   2c64c:	003b2d06 	br	2b304 <___vfprintf_internal_r+0x814>
   2c650:	d8800617 	ldw	r2,24(sp)
   2c654:	002b883a 	mov	r21,zero
   2c658:	d8c00615 	stw	r3,24(sp)
   2c65c:	15000017 	ldw	r20,0(r2)
   2c660:	0005883a 	mov	r2,zero
   2c664:	003a6e06 	br	2b020 <___vfprintf_internal_r+0x530>
   2c668:	04400134 	movhi	r17,4
   2c66c:	8c62c804 	addi	r17,r17,-29920
   2c670:	003ac606 	br	2b18c <___vfprintf_internal_r+0x69c>
   2c674:	d8801804 	addi	r2,sp,96
   2c678:	d8800315 	stw	r2,12(sp)
   2c67c:	d9400917 	ldw	r5,36(sp)
   2c680:	d8801504 	addi	r2,sp,84
   2c684:	d8800215 	stw	r2,8(sp)
   2c688:	d8801404 	addi	r2,sp,80
   2c68c:	da000015 	stw	r8,0(sp)
   2c690:	d8800115 	stw	r2,4(sp)
   2c694:	01c000c4 	movi	r7,3
   2c698:	a00d883a 	mov	r6,r20
   2c69c:	9809883a 	mov	r4,r19
   2c6a0:	db000815 	stw	r12,32(sp)
   2c6a4:	da000715 	stw	r8,28(sp)
   2c6a8:	002d0540 	call	2d054 <_dtoa_r>
   2c6ac:	da000717 	ldw	r8,28(sp)
   2c6b0:	1023883a 	mov	r17,r2
   2c6b4:	db000817 	ldw	r12,32(sp)
   2c6b8:	1207883a 	add	r3,r2,r8
   2c6bc:	88800007 	ldb	r2,0(r17)
   2c6c0:	10800c20 	cmpeqi	r2,r2,48
   2c6c4:	1000571e 	bne	r2,zero,2c824 <___vfprintf_internal_r+0x1d34>
   2c6c8:	d8801417 	ldw	r2,80(sp)
   2c6cc:	1893883a 	add	r9,r3,r2
   2c6d0:	d9000917 	ldw	r4,36(sp)
   2c6d4:	000d883a 	mov	r6,zero
   2c6d8:	000f883a 	mov	r7,zero
   2c6dc:	a00b883a 	mov	r5,r20
   2c6e0:	da401115 	stw	r9,68(sp)
   2c6e4:	da000815 	stw	r8,32(sp)
   2c6e8:	db000715 	stw	r12,28(sp)
   2c6ec:	00353b80 	call	353b8 <__eqdf2>
   2c6f0:	db000717 	ldw	r12,28(sp)
   2c6f4:	da000817 	ldw	r8,32(sp)
   2c6f8:	da401117 	ldw	r9,68(sp)
   2c6fc:	1000891e 	bne	r2,zero,2c924 <___vfprintf_internal_r+0x1e34>
   2c700:	4805883a 	mov	r2,r9
   2c704:	d8c01417 	ldw	r3,80(sp)
   2c708:	1445c83a 	sub	r2,r2,r17
   2c70c:	ad4011d8 	cmpnei	r21,r21,71
   2c710:	d8c00715 	stw	r3,28(sp)
   2c714:	d8800815 	stw	r2,32(sp)
   2c718:	a83f2526 	beq	r21,zero,2c3b0 <___vfprintf_internal_r+0x18c0>
   2c71c:	d8800f17 	ldw	r2,60(sp)
   2c720:	103f2826 	beq	r2,zero,2c3c4 <___vfprintf_internal_r+0x18d4>
   2c724:	d8c00717 	ldw	r3,28(sp)
   2c728:	6080004c 	andi	r2,r12,1
   2c72c:	1204b03a 	or	r2,r2,r8
   2c730:	00c1140e 	bge	zero,r3,2cb84 <___vfprintf_internal_r+0x2094>
   2c734:	1001011e 	bne	r2,zero,2cb3c <___vfprintf_internal_r+0x204c>
   2c738:	dd400717 	ldw	r21,28(sp)
   2c73c:	a829883a 	mov	r20,r21
   2c740:	d8800607 	ldb	r2,24(sp)
   2c744:	10008026 	beq	r2,zero,2c948 <___vfprintf_internal_r+0x1e58>
   2c748:	00800b44 	movi	r2,45
   2c74c:	d8801345 	stb	r2,77(sp)
   2c750:	d8800e17 	ldw	r2,56(sp)
   2c754:	0011883a 	mov	r8,zero
   2c758:	d8800615 	stw	r2,24(sp)
   2c75c:	003b0306 	br	2b36c <___vfprintf_internal_r+0x87c>
   2c760:	d8800617 	ldw	r2,24(sp)
   2c764:	002b883a 	mov	r21,zero
   2c768:	d8c00615 	stw	r3,24(sp)
   2c76c:	15000017 	ldw	r20,0(r2)
   2c770:	00800044 	movi	r2,1
   2c774:	003a2a06 	br	2b020 <___vfprintf_internal_r+0x530>
   2c778:	d8800617 	ldw	r2,24(sp)
   2c77c:	002b883a 	mov	r21,zero
   2c780:	d8c00615 	stw	r3,24(sp)
   2c784:	15000017 	ldw	r20,0(r2)
   2c788:	003b1306 	br	2b3d8 <___vfprintf_internal_r+0x8e8>
   2c78c:	800f883a 	mov	r7,r16
   2c790:	dc000e17 	ldw	r16,56(sp)
   2c794:	10800044 	addi	r2,r2,1
   2c798:	1d47883a 	add	r3,r3,r21
   2c79c:	d8801b15 	stw	r2,108(sp)
   2c7a0:	b1c00015 	stw	r7,0(r22)
   2c7a4:	b5400115 	stw	r21,4(r22)
   2c7a8:	d8c01c15 	stw	r3,112(sp)
   2c7ac:	10800208 	cmpgei	r2,r2,8
   2c7b0:	10003a1e 	bne	r2,zero,2c89c <___vfprintf_internal_r+0x1dac>
   2c7b4:	b5800204 	addi	r22,r22,8
   2c7b8:	003d5406 	br	2bd0c <___vfprintf_internal_r+0x121c>
   2c7bc:	00800b44 	movi	r2,45
   2c7c0:	d8801345 	stb	r2,77(sp)
   2c7c4:	03400b44 	movi	r13,45
   2c7c8:	003a6c06 	br	2b17c <___vfprintf_internal_r+0x68c>
   2c7cc:	1520003c 	xorhi	r20,r2,32768
   2c7d0:	00800b44 	movi	r2,45
   2c7d4:	d8800605 	stb	r2,24(sp)
   2c7d8:	003ed106 	br	2c320 <___vfprintf_internal_r+0x1830>
   2c7dc:	d9801a04 	addi	r6,sp,104
   2c7e0:	900b883a 	mov	r5,r18
   2c7e4:	9809883a 	mov	r4,r19
   2c7e8:	00322340 	call	32234 <__sprint_r>
   2c7ec:	1039cf1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c7f0:	d9401417 	ldw	r5,80(sp)
   2c7f4:	d8c01c17 	ldw	r3,112(sp)
   2c7f8:	dd802704 	addi	r22,sp,156
   2c7fc:	003e9406 	br	2c250 <___vfprintf_internal_r+0x1760>
   2c800:	05400184 	movi	r21,6
   2c804:	003e1706 	br	2c064 <___vfprintf_internal_r+0x1574>
   2c808:	d9401345 	stb	r5,77(sp)
   2c80c:	00397706 	br	2adec <___vfprintf_internal_r+0x2fc>
   2c810:	d9801a04 	addi	r6,sp,104
   2c814:	900b883a 	mov	r5,r18
   2c818:	9809883a 	mov	r4,r19
   2c81c:	00322340 	call	32234 <__sprint_r>
   2c820:	0039c206 	br	2af2c <___vfprintf_internal_r+0x43c>
   2c824:	d9000917 	ldw	r4,36(sp)
   2c828:	000d883a 	mov	r6,zero
   2c82c:	000f883a 	mov	r7,zero
   2c830:	a00b883a 	mov	r5,r20
   2c834:	d8c01115 	stw	r3,68(sp)
   2c838:	da000815 	stw	r8,32(sp)
   2c83c:	db000715 	stw	r12,28(sp)
   2c840:	00353b80 	call	353b8 <__eqdf2>
   2c844:	db000717 	ldw	r12,28(sp)
   2c848:	da000817 	ldw	r8,32(sp)
   2c84c:	d8c01117 	ldw	r3,68(sp)
   2c850:	103f9d26 	beq	r2,zero,2c6c8 <___vfprintf_internal_r+0x1bd8>
   2c854:	00800044 	movi	r2,1
   2c858:	1205c83a 	sub	r2,r2,r8
   2c85c:	d8801415 	stw	r2,80(sp)
   2c860:	003f9a06 	br	2c6cc <___vfprintf_internal_r+0x1bdc>
   2c864:	403ea81e 	bne	r8,zero,2c308 <___vfprintf_internal_r+0x1818>
   2c868:	02000044 	movi	r8,1
   2c86c:	003ea606 	br	2c308 <___vfprintf_internal_r+0x1818>
   2c870:	d9801a04 	addi	r6,sp,104
   2c874:	900b883a 	mov	r5,r18
   2c878:	9809883a 	mov	r4,r19
   2c87c:	00322340 	call	32234 <__sprint_r>
   2c880:	1039aa1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c884:	d9401417 	ldw	r5,80(sp)
   2c888:	d8c01c17 	ldw	r3,112(sp)
   2c88c:	d8801b17 	ldw	r2,108(sp)
   2c890:	dd802704 	addi	r22,sp,156
   2c894:	283e800e 	bge	r5,zero,2c298 <___vfprintf_internal_r+0x17a8>
   2c898:	003f3806 	br	2c57c <___vfprintf_internal_r+0x1a8c>
   2c89c:	d9801a04 	addi	r6,sp,104
   2c8a0:	900b883a 	mov	r5,r18
   2c8a4:	9809883a 	mov	r4,r19
   2c8a8:	00322340 	call	32234 <__sprint_r>
   2c8ac:	10399f1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c8b0:	d8c01c17 	ldw	r3,112(sp)
   2c8b4:	dd802704 	addi	r22,sp,156
   2c8b8:	003d1406 	br	2bd0c <___vfprintf_internal_r+0x121c>
   2c8bc:	db000417 	ldw	r12,16(sp)
   2c8c0:	003a9d06 	br	2b338 <___vfprintf_internal_r+0x848>
   2c8c4:	d8801804 	addi	r2,sp,96
   2c8c8:	d8800315 	stw	r2,12(sp)
   2c8cc:	d9400917 	ldw	r5,36(sp)
   2c8d0:	d8801504 	addi	r2,sp,84
   2c8d4:	40c00044 	addi	r3,r8,1
   2c8d8:	d8800215 	stw	r2,8(sp)
   2c8dc:	d8801404 	addi	r2,sp,80
   2c8e0:	d8c00015 	stw	r3,0(sp)
   2c8e4:	d8800115 	stw	r2,4(sp)
   2c8e8:	01c00084 	movi	r7,2
   2c8ec:	a00d883a 	mov	r6,r20
   2c8f0:	9809883a 	mov	r4,r19
   2c8f4:	db001115 	stw	r12,68(sp)
   2c8f8:	da000815 	stw	r8,32(sp)
   2c8fc:	d8c00715 	stw	r3,28(sp)
   2c900:	002d0540 	call	2d054 <_dtoa_r>
   2c904:	d8c00717 	ldw	r3,28(sp)
   2c908:	da000817 	ldw	r8,32(sp)
   2c90c:	db001117 	ldw	r12,68(sp)
   2c910:	1023883a 	mov	r17,r2
   2c914:	e08011d8 	cmpnei	r2,fp,71
   2c918:	103e9c26 	beq	r2,zero,2c38c <___vfprintf_internal_r+0x189c>
   2c91c:	88d3883a 	add	r9,r17,r3
   2c920:	003f6b06 	br	2c6d0 <___vfprintf_internal_r+0x1be0>
   2c924:	d8801817 	ldw	r2,96(sp)
   2c928:	127f762e 	bgeu	r2,r9,2c704 <___vfprintf_internal_r+0x1c14>
   2c92c:	01000c04 	movi	r4,48
   2c930:	10c00044 	addi	r3,r2,1
   2c934:	d8c01815 	stw	r3,96(sp)
   2c938:	11000005 	stb	r4,0(r2)
   2c93c:	d8801817 	ldw	r2,96(sp)
   2c940:	127ffb36 	bltu	r2,r9,2c930 <___vfprintf_internal_r+0x1e40>
   2c944:	003f6f06 	br	2c704 <___vfprintf_internal_r+0x1c14>
   2c948:	d8800e17 	ldw	r2,56(sp)
   2c94c:	db401343 	ldbu	r13,77(sp)
   2c950:	0011883a 	mov	r8,zero
   2c954:	d8800615 	stw	r2,24(sp)
   2c958:	003a8006 	br	2b35c <___vfprintf_internal_r+0x86c>
   2c95c:	d8800717 	ldw	r2,28(sp)
   2c960:	d8c00817 	ldw	r3,32(sp)
   2c964:	10c02b16 	blt	r2,r3,2ca14 <___vfprintf_internal_r+0x1f24>
   2c968:	6300004c 	andi	r12,r12,1
   2c96c:	6000581e 	bne	r12,zero,2cad0 <___vfprintf_internal_r+0x1fe0>
   2c970:	1029883a 	mov	r20,r2
   2c974:	1000010e 	bge	r2,zero,2c97c <___vfprintf_internal_r+0x1e8c>
   2c978:	0029883a 	mov	r20,zero
   2c97c:	dd400717 	ldw	r21,28(sp)
   2c980:	070019c4 	movi	fp,103
   2c984:	003f6e06 	br	2c740 <___vfprintf_internal_r+0x1c50>
   2c988:	d9801a04 	addi	r6,sp,104
   2c98c:	900b883a 	mov	r5,r18
   2c990:	9809883a 	mov	r4,r19
   2c994:	00322340 	call	32234 <__sprint_r>
   2c998:	1039641e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c99c:	dd401417 	ldw	r21,80(sp)
   2c9a0:	d8c01c17 	ldw	r3,112(sp)
   2c9a4:	dd802704 	addi	r22,sp,156
   2c9a8:	003ce706 	br	2bd48 <___vfprintf_internal_r+0x1258>
   2c9ac:	d9801a04 	addi	r6,sp,104
   2c9b0:	900b883a 	mov	r5,r18
   2c9b4:	9809883a 	mov	r4,r19
   2c9b8:	00322340 	call	32234 <__sprint_r>
   2c9bc:	10395b1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c9c0:	d8c01c17 	ldw	r3,112(sp)
   2c9c4:	dd802704 	addi	r22,sp,156
   2c9c8:	a83ccd0e 	bge	r21,zero,2bd00 <___vfprintf_internal_r+0x1210>
   2c9cc:	003d9106 	br	2c014 <___vfprintf_internal_r+0x1524>
   2c9d0:	02000184 	movi	r8,6
   2c9d4:	003e4c06 	br	2c308 <___vfprintf_internal_r+0x1818>
   2c9d8:	d9801a04 	addi	r6,sp,104
   2c9dc:	900b883a 	mov	r5,r18
   2c9e0:	9809883a 	mov	r4,r19
   2c9e4:	00322340 	call	32234 <__sprint_r>
   2c9e8:	1039501e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2c9ec:	d8801417 	ldw	r2,80(sp)
   2c9f0:	d9000817 	ldw	r4,32(sp)
   2c9f4:	d8c01c17 	ldw	r3,112(sp)
   2c9f8:	dd802704 	addi	r22,sp,156
   2c9fc:	2085c83a 	sub	r2,r4,r2
   2ca00:	003ce506 	br	2bd98 <___vfprintf_internal_r+0x12a8>
   2ca04:	4029883a 	mov	r20,r8
   2ca08:	d8c00615 	stw	r3,24(sp)
   2ca0c:	402b883a 	mov	r21,r8
   2ca10:	0038fc06 	br	2ae04 <___vfprintf_internal_r+0x314>
   2ca14:	d8800817 	ldw	r2,32(sp)
   2ca18:	d8c00b17 	ldw	r3,44(sp)
   2ca1c:	10eb883a 	add	r21,r2,r3
   2ca20:	d8800717 	ldw	r2,28(sp)
   2ca24:	00800316 	blt	zero,r2,2ca34 <___vfprintf_internal_r+0x1f44>
   2ca28:	d8800717 	ldw	r2,28(sp)
   2ca2c:	a8abc83a 	sub	r21,r21,r2
   2ca30:	ad400044 	addi	r21,r21,1
   2ca34:	a829883a 	mov	r20,r21
   2ca38:	a8002a16 	blt	r21,zero,2cae4 <___vfprintf_internal_r+0x1ff4>
   2ca3c:	070019c4 	movi	fp,103
   2ca40:	003f3f06 	br	2c740 <___vfprintf_internal_r+0x1c50>
   2ca44:	d9401345 	stb	r5,77(sp)
   2ca48:	003ae006 	br	2b5cc <___vfprintf_internal_r+0xadc>
   2ca4c:	d9401345 	stb	r5,77(sp)
   2ca50:	003a5706 	br	2b3b0 <___vfprintf_internal_r+0x8c0>
   2ca54:	d9401345 	stb	r5,77(sp)
   2ca58:	003b1706 	br	2b6b8 <___vfprintf_internal_r+0xbc8>
   2ca5c:	d9401345 	stb	r5,77(sp)
   2ca60:	003a2006 	br	2b2e4 <___vfprintf_internal_r+0x7f4>
   2ca64:	d9401345 	stb	r5,77(sp)
   2ca68:	003a6606 	br	2b404 <___vfprintf_internal_r+0x914>
   2ca6c:	d9401345 	stb	r5,77(sp)
   2ca70:	00399706 	br	2b0d0 <___vfprintf_internal_r+0x5e0>
   2ca74:	00bfffc4 	movi	r2,-1
   2ca78:	d8800515 	stw	r2,20(sp)
   2ca7c:	00392e06 	br	2af38 <___vfprintf_internal_r+0x448>
   2ca80:	900f883a 	mov	r7,r18
   2ca84:	8025883a 	mov	r18,r16
   2ca88:	dc000717 	ldw	r16,28(sp)
   2ca8c:	10800044 	addi	r2,r2,1
   2ca90:	1f07883a 	add	r3,r3,fp
   2ca94:	b1c00015 	stw	r7,0(r22)
   2ca98:	b7000115 	stw	fp,4(r22)
   2ca9c:	d8c01c15 	stw	r3,112(sp)
   2caa0:	d8801b15 	stw	r2,108(sp)
   2caa4:	11000208 	cmpgei	r4,r2,8
   2caa8:	203dfa26 	beq	r4,zero,2c294 <___vfprintf_internal_r+0x17a4>
   2caac:	d9801a04 	addi	r6,sp,104
   2cab0:	900b883a 	mov	r5,r18
   2cab4:	9809883a 	mov	r4,r19
   2cab8:	00322340 	call	32234 <__sprint_r>
   2cabc:	10391b1e 	bne	r2,zero,2af2c <___vfprintf_internal_r+0x43c>
   2cac0:	d8c01c17 	ldw	r3,112(sp)
   2cac4:	d8801b17 	ldw	r2,108(sp)
   2cac8:	dd802704 	addi	r22,sp,156
   2cacc:	003df206 	br	2c298 <___vfprintf_internal_r+0x17a8>
   2cad0:	d8800717 	ldw	r2,28(sp)
   2cad4:	d8c00b17 	ldw	r3,44(sp)
   2cad8:	10eb883a 	add	r21,r2,r3
   2cadc:	a829883a 	mov	r20,r21
   2cae0:	a83fd60e 	bge	r21,zero,2ca3c <___vfprintf_internal_r+0x1f4c>
   2cae4:	0029883a 	mov	r20,zero
   2cae8:	003fd406 	br	2ca3c <___vfprintf_internal_r+0x1f4c>
   2caec:	00800c04 	movi	r2,48
   2caf0:	ad400c04 	addi	r21,r21,48
   2caf4:	d88016c5 	stb	r2,91(sp)
   2caf8:	00800104 	movi	r2,4
   2cafc:	dd401705 	stb	r21,92(sp)
   2cb00:	d8801015 	stw	r2,64(sp)
   2cb04:	003e6506 	br	2c49c <___vfprintf_internal_r+0x19ac>
   2cb08:	d8800a17 	ldw	r2,40(sp)
   2cb0c:	10001916 	blt	r2,zero,2cb74 <___vfprintf_internal_r+0x2084>
   2cb10:	db401343 	ldbu	r13,77(sp)
   2cb14:	e0801210 	cmplti	r2,fp,72
   2cb18:	1000131e 	bne	r2,zero,2cb68 <___vfprintf_internal_r+0x2078>
   2cb1c:	04400134 	movhi	r17,4
   2cb20:	8c62cb04 	addi	r17,r17,-29908
   2cb24:	00399906 	br	2b18c <___vfprintf_internal_r+0x69c>
   2cb28:	05400044 	movi	r21,1
   2cb2c:	a8abc83a 	sub	r21,r21,r2
   2cb30:	00800b44 	movi	r2,45
   2cb34:	d8801685 	stb	r2,90(sp)
   2cb38:	003e2906 	br	2c3e0 <___vfprintf_internal_r+0x18f0>
   2cb3c:	d8800b17 	ldw	r2,44(sp)
   2cb40:	18ab883a 	add	r21,r3,r2
   2cb44:	aa2b883a 	add	r21,r21,r8
   2cb48:	a829883a 	mov	r20,r21
   2cb4c:	a83efc0e 	bge	r21,zero,2c740 <___vfprintf_internal_r+0x1c50>
   2cb50:	0029883a 	mov	r20,zero
   2cb54:	003efa06 	br	2c740 <___vfprintf_internal_r+0x1c50>
   2cb58:	6080004c 	andi	r2,r12,1
   2cb5c:	d8800715 	stw	r2,28(sp)
   2cb60:	103e531e 	bne	r2,zero,2c4b0 <___vfprintf_internal_r+0x19c0>
   2cb64:	003ff806 	br	2cb48 <___vfprintf_internal_r+0x2058>
   2cb68:	04400134 	movhi	r17,4
   2cb6c:	8c62ca04 	addi	r17,r17,-29912
   2cb70:	00398606 	br	2b18c <___vfprintf_internal_r+0x69c>
   2cb74:	00800b44 	movi	r2,45
   2cb78:	d8801345 	stb	r2,77(sp)
   2cb7c:	03400b44 	movi	r13,45
   2cb80:	003fe406 	br	2cb14 <___vfprintf_internal_r+0x2024>
   2cb84:	1000031e 	bne	r2,zero,2cb94 <___vfprintf_internal_r+0x20a4>
   2cb88:	05000044 	movi	r20,1
   2cb8c:	05400044 	movi	r21,1
   2cb90:	003eeb06 	br	2c740 <___vfprintf_internal_r+0x1c50>
   2cb94:	d8800b17 	ldw	r2,44(sp)
   2cb98:	15400044 	addi	r21,r2,1
   2cb9c:	aa2b883a 	add	r21,r21,r8
   2cba0:	003fe906 	br	2cb48 <___vfprintf_internal_r+0x2058>
   2cba4:	b005883a 	mov	r2,r22
   2cba8:	39e2d904 	addi	r7,r7,-29852
   2cbac:	003e9706 	br	2c60c <___vfprintf_internal_r+0x1b1c>
   2cbb0:	8025883a 	mov	r18,r16
   2cbb4:	0038dd06 	br	2af2c <___vfprintf_internal_r+0x43c>
   2cbb8:	00800084 	movi	r2,2
   2cbbc:	d8801015 	stw	r2,64(sp)
   2cbc0:	003e3606 	br	2c49c <___vfprintf_internal_r+0x19ac>
   2cbc4:	d8c00617 	ldw	r3,24(sp)
   2cbc8:	1a000017 	ldw	r8,0(r3)
   2cbcc:	18c00104 	addi	r3,r3,4
   2cbd0:	4000010e 	bge	r8,zero,2cbd8 <___vfprintf_internal_r+0x20e8>
   2cbd4:	023fffc4 	movi	r8,-1
   2cbd8:	bf000043 	ldbu	fp,1(r23)
   2cbdc:	d8c00615 	stw	r3,24(sp)
   2cbe0:	102f883a 	mov	r23,r2
   2cbe4:	e2c03fcc 	andi	r11,fp,255
   2cbe8:	5ac0201c 	xori	r11,r11,128
   2cbec:	5affe004 	addi	r11,r11,-128
   2cbf0:	00380b06 	br	2ac20 <___vfprintf_internal_r+0x130>

0002cbf4 <__vfprintf_internal>:
   2cbf4:	00c00134 	movhi	r3,4
   2cbf8:	2005883a 	mov	r2,r4
   2cbfc:	192b2417 	ldw	r4,-21360(r3)
   2cc00:	300f883a 	mov	r7,r6
   2cc04:	280d883a 	mov	r6,r5
   2cc08:	100b883a 	mov	r5,r2
   2cc0c:	002aaf01 	jmpi	2aaf0 <___vfprintf_internal_r>

0002cc10 <__sbprintf>:
   2cc10:	2880030b 	ldhu	r2,12(r5)
   2cc14:	2b001917 	ldw	r12,100(r5)
   2cc18:	2ac0038b 	ldhu	r11,14(r5)
   2cc1c:	2a800717 	ldw	r10,28(r5)
   2cc20:	2a400917 	ldw	r9,36(r5)
   2cc24:	defee204 	addi	sp,sp,-1144
   2cc28:	da001a04 	addi	r8,sp,104
   2cc2c:	00c10004 	movi	r3,1024
   2cc30:	dc011a15 	stw	r16,1128(sp)
   2cc34:	10bfff4c 	andi	r2,r2,65533
   2cc38:	2821883a 	mov	r16,r5
   2cc3c:	d80b883a 	mov	r5,sp
   2cc40:	dc811c15 	stw	r18,1136(sp)
   2cc44:	dc411b15 	stw	r17,1132(sp)
   2cc48:	dfc11d15 	stw	ra,1140(sp)
   2cc4c:	2025883a 	mov	r18,r4
   2cc50:	d880030d 	sth	r2,12(sp)
   2cc54:	db001915 	stw	r12,100(sp)
   2cc58:	dac0038d 	sth	r11,14(sp)
   2cc5c:	da800715 	stw	r10,28(sp)
   2cc60:	da400915 	stw	r9,36(sp)
   2cc64:	da000015 	stw	r8,0(sp)
   2cc68:	da000415 	stw	r8,16(sp)
   2cc6c:	d8c00215 	stw	r3,8(sp)
   2cc70:	d8c00515 	stw	r3,20(sp)
   2cc74:	d8000615 	stw	zero,24(sp)
   2cc78:	002aaf00 	call	2aaf0 <___vfprintf_internal_r>
   2cc7c:	1023883a 	mov	r17,r2
   2cc80:	10000d0e 	bge	r2,zero,2ccb8 <__sbprintf+0xa8>
   2cc84:	d880030b 	ldhu	r2,12(sp)
   2cc88:	1080100c 	andi	r2,r2,64
   2cc8c:	10000326 	beq	r2,zero,2cc9c <__sbprintf+0x8c>
   2cc90:	8080030b 	ldhu	r2,12(r16)
   2cc94:	10801014 	ori	r2,r2,64
   2cc98:	8080030d 	sth	r2,12(r16)
   2cc9c:	8805883a 	mov	r2,r17
   2cca0:	dfc11d17 	ldw	ra,1140(sp)
   2cca4:	dc811c17 	ldw	r18,1136(sp)
   2cca8:	dc411b17 	ldw	r17,1132(sp)
   2ccac:	dc011a17 	ldw	r16,1128(sp)
   2ccb0:	dec11e04 	addi	sp,sp,1144
   2ccb4:	f800283a 	ret
   2ccb8:	d80b883a 	mov	r5,sp
   2ccbc:	9009883a 	mov	r4,r18
   2ccc0:	002e9c40 	call	2e9c4 <_fflush_r>
   2ccc4:	103fef26 	beq	r2,zero,2cc84 <__sbprintf+0x74>
   2ccc8:	047fffc4 	movi	r17,-1
   2cccc:	003fed06 	br	2cc84 <__sbprintf+0x74>

0002ccd0 <__swsetup_r>:
   2ccd0:	00800134 	movhi	r2,4
   2ccd4:	10ab2417 	ldw	r2,-21360(r2)
   2ccd8:	defffd04 	addi	sp,sp,-12
   2ccdc:	dc400115 	stw	r17,4(sp)
   2cce0:	dc000015 	stw	r16,0(sp)
   2cce4:	dfc00215 	stw	ra,8(sp)
   2cce8:	2023883a 	mov	r17,r4
   2ccec:	2821883a 	mov	r16,r5
   2ccf0:	10000226 	beq	r2,zero,2ccfc <__swsetup_r+0x2c>
   2ccf4:	10c00e17 	ldw	r3,56(r2)
   2ccf8:	18001f26 	beq	r3,zero,2cd78 <__swsetup_r+0xa8>
   2ccfc:	8180030b 	ldhu	r6,12(r16)
   2cd00:	30c0020c 	andi	r3,r6,8
   2cd04:	3005883a 	mov	r2,r6
   2cd08:	18002126 	beq	r3,zero,2cd90 <__swsetup_r+0xc0>
   2cd0c:	80c00417 	ldw	r3,16(r16)
   2cd10:	18002826 	beq	r3,zero,2cdb4 <__swsetup_r+0xe4>
   2cd14:	1100004c 	andi	r4,r2,1
   2cd18:	20000b1e 	bne	r4,zero,2cd48 <__swsetup_r+0x78>
   2cd1c:	1100008c 	andi	r4,r2,2
   2cd20:	20002e1e 	bne	r4,zero,2cddc <__swsetup_r+0x10c>
   2cd24:	81000517 	ldw	r4,20(r16)
   2cd28:	81000215 	stw	r4,8(r16)
   2cd2c:	18000b26 	beq	r3,zero,2cd5c <__swsetup_r+0x8c>
   2cd30:	0005883a 	mov	r2,zero
   2cd34:	dfc00217 	ldw	ra,8(sp)
   2cd38:	dc400117 	ldw	r17,4(sp)
   2cd3c:	dc000017 	ldw	r16,0(sp)
   2cd40:	dec00304 	addi	sp,sp,12
   2cd44:	f800283a 	ret
   2cd48:	81000517 	ldw	r4,20(r16)
   2cd4c:	80000215 	stw	zero,8(r16)
   2cd50:	0109c83a 	sub	r4,zero,r4
   2cd54:	81000615 	stw	r4,24(r16)
   2cd58:	183ff51e 	bne	r3,zero,2cd30 <__swsetup_r+0x60>
   2cd5c:	10c0200c 	andi	r3,r2,128
   2cd60:	0005883a 	mov	r2,zero
   2cd64:	183ff326 	beq	r3,zero,2cd34 <__swsetup_r+0x64>
   2cd68:	31801014 	ori	r6,r6,64
   2cd6c:	8180030d 	sth	r6,12(r16)
   2cd70:	00bfffc4 	movi	r2,-1
   2cd74:	003fef06 	br	2cd34 <__swsetup_r+0x64>
   2cd78:	1009883a 	mov	r4,r2
   2cd7c:	002ee0c0 	call	2ee0c <__sinit>
   2cd80:	8180030b 	ldhu	r6,12(r16)
   2cd84:	30c0020c 	andi	r3,r6,8
   2cd88:	3005883a 	mov	r2,r6
   2cd8c:	183fdf1e 	bne	r3,zero,2cd0c <__swsetup_r+0x3c>
   2cd90:	3080040c 	andi	r2,r6,16
   2cd94:	10002126 	beq	r2,zero,2ce1c <__swsetup_r+0x14c>
   2cd98:	3080010c 	andi	r2,r6,4
   2cd9c:	1000111e 	bne	r2,zero,2cde4 <__swsetup_r+0x114>
   2cda0:	80c00417 	ldw	r3,16(r16)
   2cda4:	30800214 	ori	r2,r6,8
   2cda8:	8080030d 	sth	r2,12(r16)
   2cdac:	100d883a 	mov	r6,r2
   2cdb0:	183fd81e 	bne	r3,zero,2cd14 <__swsetup_r+0x44>
   2cdb4:	1100a00c 	andi	r4,r2,640
   2cdb8:	21008020 	cmpeqi	r4,r4,512
   2cdbc:	203fd51e 	bne	r4,zero,2cd14 <__swsetup_r+0x44>
   2cdc0:	800b883a 	mov	r5,r16
   2cdc4:	8809883a 	mov	r4,r17
   2cdc8:	002f8940 	call	2f894 <__smakebuf_r>
   2cdcc:	8180030b 	ldhu	r6,12(r16)
   2cdd0:	80c00417 	ldw	r3,16(r16)
   2cdd4:	3005883a 	mov	r2,r6
   2cdd8:	003fce06 	br	2cd14 <__swsetup_r+0x44>
   2cddc:	0009883a 	mov	r4,zero
   2cde0:	003fd106 	br	2cd28 <__swsetup_r+0x58>
   2cde4:	81400c17 	ldw	r5,48(r16)
   2cde8:	28000626 	beq	r5,zero,2ce04 <__swsetup_r+0x134>
   2cdec:	80801004 	addi	r2,r16,64
   2cdf0:	28800326 	beq	r5,r2,2ce00 <__swsetup_r+0x130>
   2cdf4:	8809883a 	mov	r4,r17
   2cdf8:	002ef700 	call	2ef70 <_free_r>
   2cdfc:	8180030b 	ldhu	r6,12(r16)
   2ce00:	80000c15 	stw	zero,48(r16)
   2ce04:	80c00417 	ldw	r3,16(r16)
   2ce08:	00bff6c4 	movi	r2,-37
   2ce0c:	118c703a 	and	r6,r2,r6
   2ce10:	80000115 	stw	zero,4(r16)
   2ce14:	80c00015 	stw	r3,0(r16)
   2ce18:	003fe206 	br	2cda4 <__swsetup_r+0xd4>
   2ce1c:	00800244 	movi	r2,9
   2ce20:	88800015 	stw	r2,0(r17)
   2ce24:	31801014 	ori	r6,r6,64
   2ce28:	8180030d 	sth	r6,12(r16)
   2ce2c:	00bfffc4 	movi	r2,-1
   2ce30:	003fc006 	br	2cd34 <__swsetup_r+0x64>

0002ce34 <quorem>:
   2ce34:	defff204 	addi	sp,sp,-56
   2ce38:	dc400515 	stw	r17,20(sp)
   2ce3c:	20800417 	ldw	r2,16(r4)
   2ce40:	2c400417 	ldw	r17,16(r5)
   2ce44:	dfc00d15 	stw	ra,52(sp)
   2ce48:	df000c15 	stw	fp,48(sp)
   2ce4c:	ddc00b15 	stw	r23,44(sp)
   2ce50:	dd800a15 	stw	r22,40(sp)
   2ce54:	dd400915 	stw	r21,36(sp)
   2ce58:	dd000815 	stw	r20,32(sp)
   2ce5c:	dcc00715 	stw	r19,28(sp)
   2ce60:	dc800615 	stw	r18,24(sp)
   2ce64:	dc000415 	stw	r16,16(sp)
   2ce68:	d9000115 	stw	r4,4(sp)
   2ce6c:	d9400215 	stw	r5,8(sp)
   2ce70:	14407616 	blt	r2,r17,2d04c <quorem+0x218>
   2ce74:	8c7fffc4 	addi	r17,r17,-1
   2ce78:	882a90ba 	slli	r21,r17,2
   2ce7c:	2f000504 	addi	fp,r5,20
   2ce80:	25800504 	addi	r22,r4,20
   2ce84:	e565883a 	add	r18,fp,r21
   2ce88:	b545883a 	add	r2,r22,r21
   2ce8c:	95c00017 	ldw	r23,0(r18)
   2ce90:	15000017 	ldw	r20,0(r2)
   2ce94:	dd800015 	stw	r22,0(sp)
   2ce98:	bdc00044 	addi	r23,r23,1
   2ce9c:	b80b883a 	mov	r5,r23
   2cea0:	a009883a 	mov	r4,r20
   2cea4:	d8800315 	stw	r2,12(sp)
   2cea8:	0026a8c0 	call	26a8c <__udivsi3>
   2ceac:	1021883a 	mov	r16,r2
   2ceb0:	a5c02f36 	bltu	r20,r23,2cf70 <quorem+0x13c>
   2ceb4:	e029883a 	mov	r20,fp
   2ceb8:	002b883a 	mov	r21,zero
   2cebc:	002f883a 	mov	r23,zero
   2cec0:	a4c00017 	ldw	r19,0(r20)
   2cec4:	800b883a 	mov	r5,r16
   2cec8:	b5800104 	addi	r22,r22,4
   2cecc:	993fffcc 	andi	r4,r19,65535
   2ced0:	0026b4c0 	call	26b4c <__mulsi3>
   2ced4:	9808d43a 	srli	r4,r19,16
   2ced8:	800b883a 	mov	r5,r16
   2cedc:	156b883a 	add	r21,r2,r21
   2cee0:	0026b4c0 	call	26b4c <__mulsi3>
   2cee4:	b0ffff17 	ldw	r3,-4(r22)
   2cee8:	a80ad43a 	srli	r5,r21,16
   2ceec:	a93fffcc 	andi	r4,r21,65535
   2cef0:	19bfffcc 	andi	r6,r3,65535
   2cef4:	b909c83a 	sub	r4,r23,r4
   2cef8:	2189883a 	add	r4,r4,r6
   2cefc:	1806d43a 	srli	r3,r3,16
   2cf00:	1145883a 	add	r2,r2,r5
   2cf04:	200bd43a 	srai	r5,r4,16
   2cf08:	11bfffcc 	andi	r6,r2,65535
   2cf0c:	1987c83a 	sub	r3,r3,r6
   2cf10:	1947883a 	add	r3,r3,r5
   2cf14:	180a943a 	slli	r5,r3,16
   2cf18:	213fffcc 	andi	r4,r4,65535
   2cf1c:	a5000104 	addi	r20,r20,4
   2cf20:	2908b03a 	or	r4,r5,r4
   2cf24:	b13fff15 	stw	r4,-4(r22)
   2cf28:	102ad43a 	srli	r21,r2,16
   2cf2c:	182fd43a 	srai	r23,r3,16
   2cf30:	953fe32e 	bgeu	r18,r20,2cec0 <quorem+0x8c>
   2cf34:	d8c00317 	ldw	r3,12(sp)
   2cf38:	18800017 	ldw	r2,0(r3)
   2cf3c:	10000c1e 	bne	r2,zero,2cf70 <quorem+0x13c>
   2cf40:	d8800017 	ldw	r2,0(sp)
   2cf44:	1d7fff04 	addi	r21,r3,-4
   2cf48:	15400436 	bltu	r2,r21,2cf5c <quorem+0x128>
   2cf4c:	00000606 	br	2cf68 <quorem+0x134>
   2cf50:	d8800017 	ldw	r2,0(sp)
   2cf54:	8c7fffc4 	addi	r17,r17,-1
   2cf58:	1540032e 	bgeu	r2,r21,2cf68 <quorem+0x134>
   2cf5c:	a8800017 	ldw	r2,0(r21)
   2cf60:	ad7fff04 	addi	r21,r21,-4
   2cf64:	103ffa26 	beq	r2,zero,2cf50 <quorem+0x11c>
   2cf68:	d8800117 	ldw	r2,4(sp)
   2cf6c:	14400415 	stw	r17,16(r2)
   2cf70:	d9400217 	ldw	r5,8(sp)
   2cf74:	d9000117 	ldw	r4,4(sp)
   2cf78:	003115c0 	call	3115c <__mcmp>
   2cf7c:	10002616 	blt	r2,zero,2d018 <quorem+0x1e4>
   2cf80:	d9400017 	ldw	r5,0(sp)
   2cf84:	84000044 	addi	r16,r16,1
   2cf88:	0007883a 	mov	r3,zero
   2cf8c:	e1000017 	ldw	r4,0(fp)
   2cf90:	29800017 	ldw	r6,0(r5)
   2cf94:	29400104 	addi	r5,r5,4
   2cf98:	20bfffcc 	andi	r2,r4,65535
   2cf9c:	1887c83a 	sub	r3,r3,r2
   2cfa0:	30bfffcc 	andi	r2,r6,65535
   2cfa4:	1885883a 	add	r2,r3,r2
   2cfa8:	2008d43a 	srli	r4,r4,16
   2cfac:	3006d43a 	srli	r3,r6,16
   2cfb0:	100fd43a 	srai	r7,r2,16
   2cfb4:	11bfffcc 	andi	r6,r2,65535
   2cfb8:	1907c83a 	sub	r3,r3,r4
   2cfbc:	19c7883a 	add	r3,r3,r7
   2cfc0:	1804943a 	slli	r2,r3,16
   2cfc4:	e7000104 	addi	fp,fp,4
   2cfc8:	1807d43a 	srai	r3,r3,16
   2cfcc:	1184b03a 	or	r2,r2,r6
   2cfd0:	28bfff15 	stw	r2,-4(r5)
   2cfd4:	973fed2e 	bgeu	r18,fp,2cf8c <quorem+0x158>
   2cfd8:	880490ba 	slli	r2,r17,2
   2cfdc:	d9000017 	ldw	r4,0(sp)
   2cfe0:	2085883a 	add	r2,r4,r2
   2cfe4:	10c00017 	ldw	r3,0(r2)
   2cfe8:	18000b1e 	bne	r3,zero,2d018 <quorem+0x1e4>
   2cfec:	10bfff04 	addi	r2,r2,-4
   2cff0:	20800436 	bltu	r4,r2,2d004 <quorem+0x1d0>
   2cff4:	00000606 	br	2d010 <quorem+0x1dc>
   2cff8:	d8c00017 	ldw	r3,0(sp)
   2cffc:	8c7fffc4 	addi	r17,r17,-1
   2d000:	1880032e 	bgeu	r3,r2,2d010 <quorem+0x1dc>
   2d004:	10c00017 	ldw	r3,0(r2)
   2d008:	10bfff04 	addi	r2,r2,-4
   2d00c:	183ffa26 	beq	r3,zero,2cff8 <quorem+0x1c4>
   2d010:	d8800117 	ldw	r2,4(sp)
   2d014:	14400415 	stw	r17,16(r2)
   2d018:	8005883a 	mov	r2,r16
   2d01c:	dfc00d17 	ldw	ra,52(sp)
   2d020:	df000c17 	ldw	fp,48(sp)
   2d024:	ddc00b17 	ldw	r23,44(sp)
   2d028:	dd800a17 	ldw	r22,40(sp)
   2d02c:	dd400917 	ldw	r21,36(sp)
   2d030:	dd000817 	ldw	r20,32(sp)
   2d034:	dcc00717 	ldw	r19,28(sp)
   2d038:	dc800617 	ldw	r18,24(sp)
   2d03c:	dc400517 	ldw	r17,20(sp)
   2d040:	dc000417 	ldw	r16,16(sp)
   2d044:	dec00e04 	addi	sp,sp,56
   2d048:	f800283a 	ret
   2d04c:	0005883a 	mov	r2,zero
   2d050:	003ff206 	br	2d01c <quorem+0x1e8>

0002d054 <_dtoa_r>:
   2d054:	20801017 	ldw	r2,64(r4)
   2d058:	deffe204 	addi	sp,sp,-120
   2d05c:	ddc01b15 	stw	r23,108(sp)
   2d060:	dcc01715 	stw	r19,92(sp)
   2d064:	dc801615 	stw	r18,88(sp)
   2d068:	dc401515 	stw	r17,84(sp)
   2d06c:	dc001415 	stw	r16,80(sp)
   2d070:	dfc01d15 	stw	ra,116(sp)
   2d074:	df001c15 	stw	fp,112(sp)
   2d078:	dd801a15 	stw	r22,104(sp)
   2d07c:	dd401915 	stw	r21,100(sp)
   2d080:	dd001815 	stw	r20,96(sp)
   2d084:	d9c00215 	stw	r7,8(sp)
   2d088:	dc002017 	ldw	r16,128(sp)
   2d08c:	202f883a 	mov	r23,r4
   2d090:	3025883a 	mov	r18,r6
   2d094:	2827883a 	mov	r19,r5
   2d098:	3023883a 	mov	r17,r6
   2d09c:	10000826 	beq	r2,zero,2d0c0 <_dtoa_r+0x6c>
   2d0a0:	21801117 	ldw	r6,68(r4)
   2d0a4:	00c00044 	movi	r3,1
   2d0a8:	100b883a 	mov	r5,r2
   2d0ac:	1986983a 	sll	r3,r3,r6
   2d0b0:	11800115 	stw	r6,4(r2)
   2d0b4:	10c00215 	stw	r3,8(r2)
   2d0b8:	003074c0 	call	3074c <_Bfree>
   2d0bc:	b8001015 	stw	zero,64(r23)
   2d0c0:	90018816 	blt	r18,zero,2d6e4 <_dtoa_r+0x690>
   2d0c4:	80000015 	stw	zero,0(r16)
   2d0c8:	909ffc2c 	andhi	r2,r18,32752
   2d0cc:	00dffc34 	movhi	r3,32752
   2d0d0:	10c18d26 	beq	r2,r3,2d708 <_dtoa_r+0x6b4>
   2d0d4:	000d883a 	mov	r6,zero
   2d0d8:	000f883a 	mov	r7,zero
   2d0dc:	9809883a 	mov	r4,r19
   2d0e0:	880b883a 	mov	r5,r17
   2d0e4:	00353b80 	call	353b8 <__eqdf2>
   2d0e8:	1000191e 	bne	r2,zero,2d150 <_dtoa_r+0xfc>
   2d0ec:	d8c01f17 	ldw	r3,124(sp)
   2d0f0:	00800044 	movi	r2,1
   2d0f4:	18800015 	stw	r2,0(r3)
   2d0f8:	d8802117 	ldw	r2,132(sp)
   2d0fc:	1002f926 	beq	r2,zero,2dce4 <_dtoa_r+0xc90>
   2d100:	d9002117 	ldw	r4,132(sp)
   2d104:	00800134 	movhi	r2,4
   2d108:	10a2d844 	addi	r2,r2,-29855
   2d10c:	00c00134 	movhi	r3,4
   2d110:	20800015 	stw	r2,0(r4)
   2d114:	18a2d804 	addi	r2,r3,-29856
   2d118:	d8800115 	stw	r2,4(sp)
   2d11c:	d8800117 	ldw	r2,4(sp)
   2d120:	dfc01d17 	ldw	ra,116(sp)
   2d124:	df001c17 	ldw	fp,112(sp)
   2d128:	ddc01b17 	ldw	r23,108(sp)
   2d12c:	dd801a17 	ldw	r22,104(sp)
   2d130:	dd401917 	ldw	r21,100(sp)
   2d134:	dd001817 	ldw	r20,96(sp)
   2d138:	dcc01717 	ldw	r19,92(sp)
   2d13c:	dc801617 	ldw	r18,88(sp)
   2d140:	dc401517 	ldw	r17,84(sp)
   2d144:	dc001417 	ldw	r16,80(sp)
   2d148:	dec01e04 	addi	sp,sp,120
   2d14c:	f800283a 	ret
   2d150:	d8801204 	addi	r2,sp,72
   2d154:	9020d53a 	srli	r16,r18,20
   2d158:	d8800015 	stw	r2,0(sp)
   2d15c:	d9c01304 	addi	r7,sp,76
   2d160:	980b883a 	mov	r5,r19
   2d164:	880d883a 	mov	r6,r17
   2d168:	b809883a 	mov	r4,r23
   2d16c:	00315440 	call	31544 <__d2b>
   2d170:	1039883a 	mov	fp,r2
   2d174:	8001771e 	bne	r16,zero,2d754 <_dtoa_r+0x700>
   2d178:	dd001217 	ldw	r20,72(sp)
   2d17c:	dc001317 	ldw	r16,76(sp)
   2d180:	a421883a 	add	r16,r20,r16
   2d184:	80810c84 	addi	r2,r16,1074
   2d188:	10c00850 	cmplti	r3,r2,33
   2d18c:	1802e51e 	bne	r3,zero,2dd24 <_dtoa_r+0xcd0>
   2d190:	01001004 	movi	r4,64
   2d194:	2085c83a 	sub	r2,r4,r2
   2d198:	81010484 	addi	r4,r16,1042
   2d19c:	90a4983a 	sll	r18,r18,r2
   2d1a0:	9908d83a 	srl	r4,r19,r4
   2d1a4:	9108b03a 	or	r4,r18,r4
   2d1a8:	003550c0 	call	3550c <__floatunsidf>
   2d1ac:	1009883a 	mov	r4,r2
   2d1b0:	017f8434 	movhi	r5,65040
   2d1b4:	00800044 	movi	r2,1
   2d1b8:	194b883a 	add	r5,r3,r5
   2d1bc:	843fffc4 	addi	r16,r16,-1
   2d1c0:	d8800a15 	stw	r2,40(sp)
   2d1c4:	000d883a 	mov	r6,zero
   2d1c8:	01cffe34 	movhi	r7,16376
   2d1cc:	0029cbc0 	call	29cbc <__subdf3>
   2d1d0:	0198dbf4 	movhi	r6,25455
   2d1d4:	01cff4f4 	movhi	r7,16339
   2d1d8:	3190d844 	addi	r6,r6,17249
   2d1dc:	39e1e9c4 	addi	r7,r7,-30809
   2d1e0:	1009883a 	mov	r4,r2
   2d1e4:	180b883a 	mov	r5,r3
   2d1e8:	00295100 	call	29510 <__muldf3>
   2d1ec:	01a2d874 	movhi	r6,35681
   2d1f0:	01cff1f4 	movhi	r7,16327
   2d1f4:	31b22cc4 	addi	r6,r6,-14157
   2d1f8:	39e28a04 	addi	r7,r7,-30168
   2d1fc:	180b883a 	mov	r5,r3
   2d200:	1009883a 	mov	r4,r2
   2d204:	00281200 	call	28120 <__adddf3>
   2d208:	8009883a 	mov	r4,r16
   2d20c:	102b883a 	mov	r21,r2
   2d210:	1825883a 	mov	r18,r3
   2d214:	002a5700 	call	2a570 <__floatsidf>
   2d218:	019427f4 	movhi	r6,20639
   2d21c:	01cff4f4 	movhi	r7,16339
   2d220:	319e7ec4 	addi	r6,r6,31227
   2d224:	39d104c4 	addi	r7,r7,17427
   2d228:	1009883a 	mov	r4,r2
   2d22c:	180b883a 	mov	r5,r3
   2d230:	00295100 	call	29510 <__muldf3>
   2d234:	100d883a 	mov	r6,r2
   2d238:	180f883a 	mov	r7,r3
   2d23c:	a809883a 	mov	r4,r21
   2d240:	900b883a 	mov	r5,r18
   2d244:	00281200 	call	28120 <__adddf3>
   2d248:	1009883a 	mov	r4,r2
   2d24c:	180b883a 	mov	r5,r3
   2d250:	1025883a 	mov	r18,r2
   2d254:	182d883a 	mov	r22,r3
   2d258:	003548c0 	call	3548c <__fixdfsi>
   2d25c:	000d883a 	mov	r6,zero
   2d260:	000f883a 	mov	r7,zero
   2d264:	9009883a 	mov	r4,r18
   2d268:	b00b883a 	mov	r5,r22
   2d26c:	102b883a 	mov	r21,r2
   2d270:	d8800315 	stw	r2,12(sp)
   2d274:	00294280 	call	29428 <__ledf2>
   2d278:	10028f16 	blt	r2,zero,2dcb8 <_dtoa_r+0xc64>
   2d27c:	dc800317 	ldw	r18,12(sp)
   2d280:	a421c83a 	sub	r16,r20,r16
   2d284:	85bfffc4 	addi	r22,r16,-1
   2d288:	908005e8 	cmpgeui	r2,r18,23
   2d28c:	1002821e 	bne	r2,zero,2dc98 <_dtoa_r+0xc44>
   2d290:	900690fa 	slli	r3,r18,3
   2d294:	00800134 	movhi	r2,4
   2d298:	10a32104 	addi	r2,r2,-29564
   2d29c:	10c5883a 	add	r2,r2,r3
   2d2a0:	11800017 	ldw	r6,0(r2)
   2d2a4:	11c00117 	ldw	r7,4(r2)
   2d2a8:	9809883a 	mov	r4,r19
   2d2ac:	880b883a 	mov	r5,r17
   2d2b0:	00294280 	call	29428 <__ledf2>
   2d2b4:	1002550e 	bge	r2,zero,2dc0c <_dtoa_r+0xbb8>
   2d2b8:	90bfffc4 	addi	r2,r18,-1
   2d2bc:	d8800315 	stw	r2,12(sp)
   2d2c0:	d8000915 	stw	zero,36(sp)
   2d2c4:	b0027716 	blt	r22,zero,2dca4 <_dtoa_r+0xc50>
   2d2c8:	d8000615 	stw	zero,24(sp)
   2d2cc:	d8800317 	ldw	r2,12(sp)
   2d2d0:	1002510e 	bge	r2,zero,2dc18 <_dtoa_r+0xbc4>
   2d2d4:	d8800317 	ldw	r2,12(sp)
   2d2d8:	d8c00617 	ldw	r3,24(sp)
   2d2dc:	d8000315 	stw	zero,12(sp)
   2d2e0:	d8800415 	stw	r2,16(sp)
   2d2e4:	1887c83a 	sub	r3,r3,r2
   2d2e8:	d8c00615 	stw	r3,24(sp)
   2d2ec:	0087c83a 	sub	r3,zero,r2
   2d2f0:	d8c00815 	stw	r3,32(sp)
   2d2f4:	d8c00217 	ldw	r3,8(sp)
   2d2f8:	188002a8 	cmpgeui	r2,r3,10
   2d2fc:	10024d1e 	bne	r2,zero,2dc34 <_dtoa_r+0xbe0>
   2d300:	18800190 	cmplti	r2,r3,6
   2d304:	10028b1e 	bne	r2,zero,2dd34 <_dtoa_r+0xce0>
   2d308:	18bfff04 	addi	r2,r3,-4
   2d30c:	d8800215 	stw	r2,8(sp)
   2d310:	0021883a 	mov	r16,zero
   2d314:	d8c00217 	ldw	r3,8(sp)
   2d318:	18800120 	cmpeqi	r2,r3,4
   2d31c:	10035d1e 	bne	r2,zero,2e094 <_dtoa_r+0x1040>
   2d320:	18800160 	cmpeqi	r2,r3,5
   2d324:	10031b1e 	bne	r2,zero,2df94 <_dtoa_r+0xf40>
   2d328:	188000a0 	cmpeqi	r2,r3,2
   2d32c:	10024d26 	beq	r2,zero,2dc64 <_dtoa_r+0xc10>
   2d330:	d8000715 	stw	zero,28(sp)
   2d334:	d8801e17 	ldw	r2,120(sp)
   2d338:	0083260e 	bge	zero,r2,2dfd4 <_dtoa_r+0xf80>
   2d33c:	d8800b15 	stw	r2,44(sp)
   2d340:	d8800515 	stw	r2,20(sp)
   2d344:	100d883a 	mov	r6,r2
   2d348:	b8001115 	stw	zero,68(r23)
   2d34c:	30800610 	cmplti	r2,r6,24
   2d350:	1004f11e 	bne	r2,zero,2e718 <_dtoa_r+0x16c4>
   2d354:	00c00044 	movi	r3,1
   2d358:	00800104 	movi	r2,4
   2d35c:	1085883a 	add	r2,r2,r2
   2d360:	11000504 	addi	r4,r2,20
   2d364:	180b883a 	mov	r5,r3
   2d368:	18c00044 	addi	r3,r3,1
   2d36c:	313ffb2e 	bgeu	r6,r4,2d35c <_dtoa_r+0x308>
   2d370:	b9401115 	stw	r5,68(r23)
   2d374:	b809883a 	mov	r4,r23
   2d378:	00306a80 	call	306a8 <_Balloc>
   2d37c:	d8800115 	stw	r2,4(sp)
   2d380:	1004de26 	beq	r2,zero,2e6fc <_dtoa_r+0x16a8>
   2d384:	d8800117 	ldw	r2,4(sp)
   2d388:	b8801015 	stw	r2,64(r23)
   2d38c:	d8800517 	ldw	r2,20(sp)
   2d390:	108003e8 	cmpgeui	r2,r2,15
   2d394:	1001021e 	bne	r2,zero,2d7a0 <_dtoa_r+0x74c>
   2d398:	80010126 	beq	r16,zero,2d7a0 <_dtoa_r+0x74c>
   2d39c:	d9000417 	ldw	r4,16(sp)
   2d3a0:	01038b0e 	bge	zero,r4,2e1d0 <_dtoa_r+0x117c>
   2d3a4:	208003cc 	andi	r2,r4,15
   2d3a8:	100690fa 	slli	r3,r2,3
   2d3ac:	2029d13a 	srai	r20,r4,4
   2d3b0:	00800134 	movhi	r2,4
   2d3b4:	10a32104 	addi	r2,r2,-29564
   2d3b8:	10c5883a 	add	r2,r2,r3
   2d3bc:	a0c0040c 	andi	r3,r20,16
   2d3c0:	12800017 	ldw	r10,0(r2)
   2d3c4:	12400117 	ldw	r9,4(r2)
   2d3c8:	18032c26 	beq	r3,zero,2e07c <_dtoa_r+0x1028>
   2d3cc:	00800134 	movhi	r2,4
   2d3d0:	10a31704 	addi	r2,r2,-29604
   2d3d4:	11800817 	ldw	r6,32(r2)
   2d3d8:	11c00917 	ldw	r7,36(r2)
   2d3dc:	9809883a 	mov	r4,r19
   2d3e0:	880b883a 	mov	r5,r17
   2d3e4:	da400e15 	stw	r9,56(sp)
   2d3e8:	da800d15 	stw	r10,52(sp)
   2d3ec:	0028a100 	call	28a10 <__divdf3>
   2d3f0:	da800d17 	ldw	r10,52(sp)
   2d3f4:	da400e17 	ldw	r9,56(sp)
   2d3f8:	a50003cc 	andi	r20,r20,15
   2d3fc:	d8800c15 	stw	r2,48(sp)
   2d400:	1825883a 	mov	r18,r3
   2d404:	054000c4 	movi	r21,3
   2d408:	a0001126 	beq	r20,zero,2d450 <_dtoa_r+0x3fc>
   2d40c:	04000134 	movhi	r16,4
   2d410:	84231704 	addi	r16,r16,-29604
   2d414:	5009883a 	mov	r4,r10
   2d418:	480b883a 	mov	r5,r9
   2d41c:	a180004c 	andi	r6,r20,1
   2d420:	30000626 	beq	r6,zero,2d43c <_dtoa_r+0x3e8>
   2d424:	81800017 	ldw	r6,0(r16)
   2d428:	81c00117 	ldw	r7,4(r16)
   2d42c:	ad400044 	addi	r21,r21,1
   2d430:	00295100 	call	29510 <__muldf3>
   2d434:	1009883a 	mov	r4,r2
   2d438:	180b883a 	mov	r5,r3
   2d43c:	a029d07a 	srai	r20,r20,1
   2d440:	84000204 	addi	r16,r16,8
   2d444:	a03ff51e 	bne	r20,zero,2d41c <_dtoa_r+0x3c8>
   2d448:	2015883a 	mov	r10,r4
   2d44c:	2813883a 	mov	r9,r5
   2d450:	d9000c17 	ldw	r4,48(sp)
   2d454:	900b883a 	mov	r5,r18
   2d458:	500d883a 	mov	r6,r10
   2d45c:	480f883a 	mov	r7,r9
   2d460:	0028a100 	call	28a10 <__divdf3>
   2d464:	1021883a 	mov	r16,r2
   2d468:	1825883a 	mov	r18,r3
   2d46c:	d8800917 	ldw	r2,36(sp)
   2d470:	10000626 	beq	r2,zero,2d48c <_dtoa_r+0x438>
   2d474:	000d883a 	mov	r6,zero
   2d478:	01cffc34 	movhi	r7,16368
   2d47c:	8009883a 	mov	r4,r16
   2d480:	900b883a 	mov	r5,r18
   2d484:	00294280 	call	29428 <__ledf2>
   2d488:	10044416 	blt	r2,zero,2e59c <_dtoa_r+0x1548>
   2d48c:	a809883a 	mov	r4,r21
   2d490:	002a5700 	call	2a570 <__floatsidf>
   2d494:	800d883a 	mov	r6,r16
   2d498:	900f883a 	mov	r7,r18
   2d49c:	1009883a 	mov	r4,r2
   2d4a0:	180b883a 	mov	r5,r3
   2d4a4:	00295100 	call	29510 <__muldf3>
   2d4a8:	000d883a 	mov	r6,zero
   2d4ac:	01d00734 	movhi	r7,16412
   2d4b0:	1009883a 	mov	r4,r2
   2d4b4:	180b883a 	mov	r5,r3
   2d4b8:	00281200 	call	28120 <__adddf3>
   2d4bc:	1029883a 	mov	r20,r2
   2d4c0:	00bf3034 	movhi	r2,64704
   2d4c4:	1885883a 	add	r2,r3,r2
   2d4c8:	d8800c15 	stw	r2,48(sp)
   2d4cc:	d8800517 	ldw	r2,20(sp)
   2d4d0:	10032226 	beq	r2,zero,2e15c <_dtoa_r+0x1108>
   2d4d4:	d8800417 	ldw	r2,16(sp)
   2d4d8:	d8801115 	stw	r2,68(sp)
   2d4dc:	d8800517 	ldw	r2,20(sp)
   2d4e0:	d8800d15 	stw	r2,52(sp)
   2d4e4:	d8800d17 	ldw	r2,52(sp)
   2d4e8:	900b883a 	mov	r5,r18
   2d4ec:	8009883a 	mov	r4,r16
   2d4f0:	10bfffc4 	addi	r2,r2,-1
   2d4f4:	100690fa 	slli	r3,r2,3
   2d4f8:	00800134 	movhi	r2,4
   2d4fc:	10a32104 	addi	r2,r2,-29564
   2d500:	10c5883a 	add	r2,r2,r3
   2d504:	12800017 	ldw	r10,0(r2)
   2d508:	12c00117 	ldw	r11,4(r2)
   2d50c:	da800f15 	stw	r10,60(sp)
   2d510:	dac00e15 	stw	r11,56(sp)
   2d514:	003548c0 	call	3548c <__fixdfsi>
   2d518:	1009883a 	mov	r4,r2
   2d51c:	10800c04 	addi	r2,r2,48
   2d520:	d8801015 	stw	r2,64(sp)
   2d524:	002a5700 	call	2a570 <__floatsidf>
   2d528:	8009883a 	mov	r4,r16
   2d52c:	100d883a 	mov	r6,r2
   2d530:	180f883a 	mov	r7,r3
   2d534:	900b883a 	mov	r5,r18
   2d538:	0029cbc0 	call	29cbc <__subdf3>
   2d53c:	d9000117 	ldw	r4,4(sp)
   2d540:	dac00e17 	ldw	r11,56(sp)
   2d544:	da800f17 	ldw	r10,60(sp)
   2d548:	1825883a 	mov	r18,r3
   2d54c:	d8c00717 	ldw	r3,28(sp)
   2d550:	25400044 	addi	r21,r4,1
   2d554:	1021883a 	mov	r16,r2
   2d558:	500d883a 	mov	r6,r10
   2d55c:	580f883a 	mov	r7,r11
   2d560:	1803b626 	beq	r3,zero,2e43c <_dtoa_r+0x13e8>
   2d564:	0009883a 	mov	r4,zero
   2d568:	014ff834 	movhi	r5,16352
   2d56c:	0028a100 	call	28a10 <__divdf3>
   2d570:	d9c00c17 	ldw	r7,48(sp)
   2d574:	a00d883a 	mov	r6,r20
   2d578:	1009883a 	mov	r4,r2
   2d57c:	180b883a 	mov	r5,r3
   2d580:	0029cbc0 	call	29cbc <__subdf3>
   2d584:	d9000117 	ldw	r4,4(sp)
   2d588:	1029883a 	mov	r20,r2
   2d58c:	d8801017 	ldw	r2,64(sp)
   2d590:	800d883a 	mov	r6,r16
   2d594:	900f883a 	mov	r7,r18
   2d598:	20800005 	stb	r2,0(r4)
   2d59c:	180b883a 	mov	r5,r3
   2d5a0:	a009883a 	mov	r4,r20
   2d5a4:	d8c00c15 	stw	r3,48(sp)
   2d5a8:	00293400 	call	29340 <__gedf2>
   2d5ac:	0083e716 	blt	zero,r2,2e54c <_dtoa_r+0x14f8>
   2d5b0:	0005883a 	mov	r2,zero
   2d5b4:	dd800e15 	stw	r22,56(sp)
   2d5b8:	dc400f15 	stw	r17,60(sp)
   2d5bc:	dd800d17 	ldw	r22,52(sp)
   2d5c0:	dc400c17 	ldw	r17,48(sp)
   2d5c4:	ddc00d15 	stw	r23,52(sp)
   2d5c8:	dcc00c15 	stw	r19,48(sp)
   2d5cc:	1027883a 	mov	r19,r2
   2d5d0:	00002606 	br	2d66c <_dtoa_r+0x618>
   2d5d4:	9cc00044 	addi	r19,r19,1
   2d5d8:	9d806d0e 	bge	r19,r22,2d790 <_dtoa_r+0x73c>
   2d5dc:	a009883a 	mov	r4,r20
   2d5e0:	880b883a 	mov	r5,r17
   2d5e4:	000d883a 	mov	r6,zero
   2d5e8:	01d00934 	movhi	r7,16420
   2d5ec:	00295100 	call	29510 <__muldf3>
   2d5f0:	000d883a 	mov	r6,zero
   2d5f4:	01d00934 	movhi	r7,16420
   2d5f8:	8009883a 	mov	r4,r16
   2d5fc:	900b883a 	mov	r5,r18
   2d600:	1029883a 	mov	r20,r2
   2d604:	1823883a 	mov	r17,r3
   2d608:	00295100 	call	29510 <__muldf3>
   2d60c:	180b883a 	mov	r5,r3
   2d610:	1009883a 	mov	r4,r2
   2d614:	1821883a 	mov	r16,r3
   2d618:	1025883a 	mov	r18,r2
   2d61c:	003548c0 	call	3548c <__fixdfsi>
   2d620:	1009883a 	mov	r4,r2
   2d624:	102f883a 	mov	r23,r2
   2d628:	002a5700 	call	2a570 <__floatsidf>
   2d62c:	9009883a 	mov	r4,r18
   2d630:	800b883a 	mov	r5,r16
   2d634:	100d883a 	mov	r6,r2
   2d638:	180f883a 	mov	r7,r3
   2d63c:	0029cbc0 	call	29cbc <__subdf3>
   2d640:	ad400044 	addi	r21,r21,1
   2d644:	ba000c04 	addi	r8,r23,48
   2d648:	aa3fffc5 	stb	r8,-1(r21)
   2d64c:	a00d883a 	mov	r6,r20
   2d650:	880f883a 	mov	r7,r17
   2d654:	1009883a 	mov	r4,r2
   2d658:	180b883a 	mov	r5,r3
   2d65c:	1021883a 	mov	r16,r2
   2d660:	1825883a 	mov	r18,r3
   2d664:	00294280 	call	29428 <__ledf2>
   2d668:	10040516 	blt	r2,zero,2e680 <_dtoa_r+0x162c>
   2d66c:	800d883a 	mov	r6,r16
   2d670:	900f883a 	mov	r7,r18
   2d674:	0009883a 	mov	r4,zero
   2d678:	014ffc34 	movhi	r5,16368
   2d67c:	0029cbc0 	call	29cbc <__subdf3>
   2d680:	a00d883a 	mov	r6,r20
   2d684:	880f883a 	mov	r7,r17
   2d688:	1009883a 	mov	r4,r2
   2d68c:	180b883a 	mov	r5,r3
   2d690:	00294280 	call	29428 <__ledf2>
   2d694:	103fcf0e 	bge	r2,zero,2d5d4 <_dtoa_r+0x580>
   2d698:	d8801117 	ldw	r2,68(sp)
   2d69c:	ddc00d17 	ldw	r23,52(sp)
   2d6a0:	d9000117 	ldw	r4,4(sp)
   2d6a4:	10800044 	addi	r2,r2,1
   2d6a8:	d8800415 	stw	r2,16(sp)
   2d6ac:	a829883a 	mov	r20,r21
   2d6b0:	00000106 	br	2d6b8 <_dtoa_r+0x664>
   2d6b4:	a103da26 	beq	r20,r4,2e620 <_dtoa_r+0x15cc>
   2d6b8:	a0ffffc3 	ldbu	r3,-1(r20)
   2d6bc:	a02b883a 	mov	r21,r20
   2d6c0:	a53fffc4 	addi	r20,r20,-1
   2d6c4:	18803fcc 	andi	r2,r3,255
   2d6c8:	1080201c 	xori	r2,r2,128
   2d6cc:	10bfe004 	addi	r2,r2,-128
   2d6d0:	10800e60 	cmpeqi	r2,r2,57
   2d6d4:	103ff71e 	bne	r2,zero,2d6b4 <_dtoa_r+0x660>
   2d6d8:	18c00044 	addi	r3,r3,1
   2d6dc:	a0c00005 	stb	r3,0(r20)
   2d6e0:	00013f06 	br	2dbe0 <_dtoa_r+0xb8c>
   2d6e4:	04600034 	movhi	r17,32768
   2d6e8:	8c7fffc4 	addi	r17,r17,-1
   2d6ec:	9462703a 	and	r17,r18,r17
   2d6f0:	00800044 	movi	r2,1
   2d6f4:	8825883a 	mov	r18,r17
   2d6f8:	80800015 	stw	r2,0(r16)
   2d6fc:	00dffc34 	movhi	r3,32752
   2d700:	909ffc2c 	andhi	r2,r18,32752
   2d704:	10fe731e 	bne	r2,r3,2d0d4 <_dtoa_r+0x80>
   2d708:	d9001f17 	ldw	r4,124(sp)
   2d70c:	00800434 	movhi	r2,16
   2d710:	10bfffc4 	addi	r2,r2,-1
   2d714:	9084703a 	and	r2,r18,r2
   2d718:	00c9c3c4 	movi	r3,9999
   2d71c:	20c00015 	stw	r3,0(r4)
   2d720:	14e6b03a 	or	r19,r2,r19
   2d724:	9800141e 	bne	r19,zero,2d778 <_dtoa_r+0x724>
   2d728:	d8802117 	ldw	r2,132(sp)
   2d72c:	10041226 	beq	r2,zero,2e778 <_dtoa_r+0x1724>
   2d730:	00800134 	movhi	r2,4
   2d734:	1007883a 	mov	r3,r2
   2d738:	18e2e204 	addi	r3,r3,-29816
   2d73c:	00800134 	movhi	r2,4
   2d740:	d8c00115 	stw	r3,4(sp)
   2d744:	10a2e404 	addi	r2,r2,-29808
   2d748:	d8c02117 	ldw	r3,132(sp)
   2d74c:	18800015 	stw	r2,0(r3)
   2d750:	003e7206 	br	2d11c <_dtoa_r+0xc8>
   2d754:	01400434 	movhi	r5,16
   2d758:	297fffc4 	addi	r5,r5,-1
   2d75c:	894a703a 	and	r5,r17,r5
   2d760:	dd001217 	ldw	r20,72(sp)
   2d764:	9809883a 	mov	r4,r19
   2d768:	294ffc34 	orhi	r5,r5,16368
   2d76c:	843f0044 	addi	r16,r16,-1023
   2d770:	d8000a15 	stw	zero,40(sp)
   2d774:	003e9306 	br	2d1c4 <_dtoa_r+0x170>
   2d778:	d8802117 	ldw	r2,132(sp)
   2d77c:	1001fe1e 	bne	r2,zero,2df78 <_dtoa_r+0xf24>
   2d780:	00800134 	movhi	r2,4
   2d784:	10a2e104 	addi	r2,r2,-29820
   2d788:	d8800115 	stw	r2,4(sp)
   2d78c:	003e6306 	br	2d11c <_dtoa_r+0xc8>
   2d790:	dd800e17 	ldw	r22,56(sp)
   2d794:	ddc00d17 	ldw	r23,52(sp)
   2d798:	dc400f17 	ldw	r17,60(sp)
   2d79c:	dcc00c17 	ldw	r19,48(sp)
   2d7a0:	d8801317 	ldw	r2,76(sp)
   2d7a4:	10006e16 	blt	r2,zero,2d960 <_dtoa_r+0x90c>
   2d7a8:	d9000417 	ldw	r4,16(sp)
   2d7ac:	20c003c8 	cmpgei	r3,r4,15
   2d7b0:	18006b1e 	bne	r3,zero,2d960 <_dtoa_r+0x90c>
   2d7b4:	200690fa 	slli	r3,r4,3
   2d7b8:	00800134 	movhi	r2,4
   2d7bc:	10a32104 	addi	r2,r2,-29564
   2d7c0:	10c5883a 	add	r2,r2,r3
   2d7c4:	14000017 	ldw	r16,0(r2)
   2d7c8:	14800117 	ldw	r18,4(r2)
   2d7cc:	d8801e17 	ldw	r2,120(sp)
   2d7d0:	1000150e 	bge	r2,zero,2d828 <_dtoa_r+0x7d4>
   2d7d4:	d8800517 	ldw	r2,20(sp)
   2d7d8:	00801316 	blt	zero,r2,2d828 <_dtoa_r+0x7d4>
   2d7dc:	d8800517 	ldw	r2,20(sp)
   2d7e0:	1002721e 	bne	r2,zero,2e1ac <_dtoa_r+0x1158>
   2d7e4:	8009883a 	mov	r4,r16
   2d7e8:	000d883a 	mov	r6,zero
   2d7ec:	01d00534 	movhi	r7,16404
   2d7f0:	900b883a 	mov	r5,r18
   2d7f4:	00295100 	call	29510 <__muldf3>
   2d7f8:	100d883a 	mov	r6,r2
   2d7fc:	180f883a 	mov	r7,r3
   2d800:	9809883a 	mov	r4,r19
   2d804:	880b883a 	mov	r5,r17
   2d808:	00294280 	call	29428 <__ledf2>
   2d80c:	0029883a 	mov	r20,zero
   2d810:	0021883a 	mov	r16,zero
   2d814:	00820216 	blt	zero,r2,2e020 <_dtoa_r+0xfcc>
   2d818:	d8801e17 	ldw	r2,120(sp)
   2d81c:	dd400117 	ldw	r21,4(sp)
   2d820:	00a2303a 	nor	r17,zero,r2
   2d824:	00020406 	br	2e038 <_dtoa_r+0xfe4>
   2d828:	800d883a 	mov	r6,r16
   2d82c:	900f883a 	mov	r7,r18
   2d830:	9809883a 	mov	r4,r19
   2d834:	880b883a 	mov	r5,r17
   2d838:	0028a100 	call	28a10 <__divdf3>
   2d83c:	180b883a 	mov	r5,r3
   2d840:	1009883a 	mov	r4,r2
   2d844:	003548c0 	call	3548c <__fixdfsi>
   2d848:	1009883a 	mov	r4,r2
   2d84c:	102b883a 	mov	r21,r2
   2d850:	002a5700 	call	2a570 <__floatsidf>
   2d854:	800d883a 	mov	r6,r16
   2d858:	900f883a 	mov	r7,r18
   2d85c:	1009883a 	mov	r4,r2
   2d860:	180b883a 	mov	r5,r3
   2d864:	00295100 	call	29510 <__muldf3>
   2d868:	100d883a 	mov	r6,r2
   2d86c:	9809883a 	mov	r4,r19
   2d870:	880b883a 	mov	r5,r17
   2d874:	180f883a 	mov	r7,r3
   2d878:	0029cbc0 	call	29cbc <__subdf3>
   2d87c:	d9800117 	ldw	r6,4(sp)
   2d880:	dd800517 	ldw	r22,20(sp)
   2d884:	1009883a 	mov	r4,r2
   2d888:	a8800c04 	addi	r2,r21,48
   2d88c:	30800005 	stb	r2,0(r6)
   2d890:	b0800060 	cmpeqi	r2,r22,1
   2d894:	180b883a 	mov	r5,r3
   2d898:	35000044 	addi	r20,r6,1
   2d89c:	10029f1e 	bne	r2,zero,2e31c <_dtoa_r+0x12c8>
   2d8a0:	04400044 	movi	r17,1
   2d8a4:	ddc00215 	stw	r23,8(sp)
   2d8a8:	00001c06 	br	2d91c <_dtoa_r+0x8c8>
   2d8ac:	800d883a 	mov	r6,r16
   2d8b0:	900f883a 	mov	r7,r18
   2d8b4:	a809883a 	mov	r4,r21
   2d8b8:	980b883a 	mov	r5,r19
   2d8bc:	0028a100 	call	28a10 <__divdf3>
   2d8c0:	180b883a 	mov	r5,r3
   2d8c4:	1009883a 	mov	r4,r2
   2d8c8:	003548c0 	call	3548c <__fixdfsi>
   2d8cc:	1009883a 	mov	r4,r2
   2d8d0:	102f883a 	mov	r23,r2
   2d8d4:	002a5700 	call	2a570 <__floatsidf>
   2d8d8:	800d883a 	mov	r6,r16
   2d8dc:	900f883a 	mov	r7,r18
   2d8e0:	1009883a 	mov	r4,r2
   2d8e4:	180b883a 	mov	r5,r3
   2d8e8:	00295100 	call	29510 <__muldf3>
   2d8ec:	a809883a 	mov	r4,r21
   2d8f0:	980b883a 	mov	r5,r19
   2d8f4:	100d883a 	mov	r6,r2
   2d8f8:	180f883a 	mov	r7,r3
   2d8fc:	0029cbc0 	call	29cbc <__subdf3>
   2d900:	b9000c04 	addi	r4,r23,48
   2d904:	a1000005 	stb	r4,0(r20)
   2d908:	8c400044 	addi	r17,r17,1
   2d90c:	a5000044 	addi	r20,r20,1
   2d910:	1009883a 	mov	r4,r2
   2d914:	180b883a 	mov	r5,r3
   2d918:	8d827e26 	beq	r17,r22,2e314 <_dtoa_r+0x12c0>
   2d91c:	000d883a 	mov	r6,zero
   2d920:	01d00934 	movhi	r7,16420
   2d924:	00295100 	call	29510 <__muldf3>
   2d928:	000d883a 	mov	r6,zero
   2d92c:	000f883a 	mov	r7,zero
   2d930:	1009883a 	mov	r4,r2
   2d934:	180b883a 	mov	r5,r3
   2d938:	102b883a 	mov	r21,r2
   2d93c:	1827883a 	mov	r19,r3
   2d940:	00353b80 	call	353b8 <__eqdf2>
   2d944:	103fd91e 	bne	r2,zero,2d8ac <_dtoa_r+0x858>
   2d948:	d8800417 	ldw	r2,16(sp)
   2d94c:	ddc00217 	ldw	r23,8(sp)
   2d950:	a02b883a 	mov	r21,r20
   2d954:	10800044 	addi	r2,r2,1
   2d958:	d8800415 	stw	r2,16(sp)
   2d95c:	0000a006 	br	2dbe0 <_dtoa_r+0xb8c>
   2d960:	d8c00717 	ldw	r3,28(sp)
   2d964:	1800e326 	beq	r3,zero,2dcf4 <_dtoa_r+0xca0>
   2d968:	d8c00217 	ldw	r3,8(sp)
   2d96c:	18c00088 	cmpgei	r3,r3,2
   2d970:	1801e026 	beq	r3,zero,2e0f4 <_dtoa_r+0x10a0>
   2d974:	d8800517 	ldw	r2,20(sp)
   2d978:	153fffc4 	addi	r20,r2,-1
   2d97c:	d8800817 	ldw	r2,32(sp)
   2d980:	1501bc0e 	bge	r2,r20,2e074 <_dtoa_r+0x1020>
   2d984:	d8800817 	ldw	r2,32(sp)
   2d988:	d8c00317 	ldw	r3,12(sp)
   2d98c:	dd000815 	stw	r20,32(sp)
   2d990:	a085c83a 	sub	r2,r20,r2
   2d994:	1885883a 	add	r2,r3,r2
   2d998:	d8800315 	stw	r2,12(sp)
   2d99c:	0029883a 	mov	r20,zero
   2d9a0:	d8800517 	ldw	r2,20(sp)
   2d9a4:	10028b16 	blt	r2,zero,2e3d4 <_dtoa_r+0x1380>
   2d9a8:	d8c00617 	ldw	r3,24(sp)
   2d9ac:	b0ad883a 	add	r22,r22,r2
   2d9b0:	1885883a 	add	r2,r3,r2
   2d9b4:	1825883a 	mov	r18,r3
   2d9b8:	d8800615 	stw	r2,24(sp)
   2d9bc:	01400044 	movi	r5,1
   2d9c0:	b809883a 	mov	r4,r23
   2d9c4:	0030b180 	call	30b18 <__i2b>
   2d9c8:	1021883a 	mov	r16,r2
   2d9cc:	0480080e 	bge	zero,r18,2d9f0 <_dtoa_r+0x99c>
   2d9d0:	0580070e 	bge	zero,r22,2d9f0 <_dtoa_r+0x99c>
   2d9d4:	9005883a 	mov	r2,r18
   2d9d8:	b4819e16 	blt	r22,r18,2e054 <_dtoa_r+0x1000>
   2d9dc:	d8c00617 	ldw	r3,24(sp)
   2d9e0:	90a5c83a 	sub	r18,r18,r2
   2d9e4:	b0adc83a 	sub	r22,r22,r2
   2d9e8:	1887c83a 	sub	r3,r3,r2
   2d9ec:	d8c00615 	stw	r3,24(sp)
   2d9f0:	d8800817 	ldw	r2,32(sp)
   2d9f4:	10001426 	beq	r2,zero,2da48 <_dtoa_r+0x9f4>
   2d9f8:	d8800717 	ldw	r2,28(sp)
   2d9fc:	1001ee26 	beq	r2,zero,2e1b8 <_dtoa_r+0x1164>
   2da00:	05000e0e 	bge	zero,r20,2da3c <_dtoa_r+0x9e8>
   2da04:	800b883a 	mov	r5,r16
   2da08:	a00d883a 	mov	r6,r20
   2da0c:	b809883a 	mov	r4,r23
   2da10:	0030e8c0 	call	30e8c <__pow5mult>
   2da14:	e00d883a 	mov	r6,fp
   2da18:	100b883a 	mov	r5,r2
   2da1c:	b809883a 	mov	r4,r23
   2da20:	1021883a 	mov	r16,r2
   2da24:	0030bc80 	call	30bc8 <__multiply>
   2da28:	102b883a 	mov	r21,r2
   2da2c:	e00b883a 	mov	r5,fp
   2da30:	b809883a 	mov	r4,r23
   2da34:	003074c0 	call	3074c <_Bfree>
   2da38:	a839883a 	mov	fp,r21
   2da3c:	d8800817 	ldw	r2,32(sp)
   2da40:	150dc83a 	sub	r6,r2,r20
   2da44:	15025e1e 	bne	r2,r20,2e3c0 <_dtoa_r+0x136c>
   2da48:	01400044 	movi	r5,1
   2da4c:	b809883a 	mov	r4,r23
   2da50:	0030b180 	call	30b18 <__i2b>
   2da54:	d9800317 	ldw	r6,12(sp)
   2da58:	1029883a 	mov	r20,r2
   2da5c:	0180b716 	blt	zero,r6,2dd3c <_dtoa_r+0xce8>
   2da60:	d8800217 	ldw	r2,8(sp)
   2da64:	10800088 	cmpgei	r2,r2,2
   2da68:	10014d26 	beq	r2,zero,2dfa0 <_dtoa_r+0xf4c>
   2da6c:	0023883a 	mov	r17,zero
   2da70:	d8c00317 	ldw	r3,12(sp)
   2da74:	00800044 	movi	r2,1
   2da78:	1800b81e 	bne	r3,zero,2dd5c <_dtoa_r+0xd08>
   2da7c:	1585883a 	add	r2,r2,r22
   2da80:	108007cc 	andi	r2,r2,31
   2da84:	1000a526 	beq	r2,zero,2dd1c <_dtoa_r+0xcc8>
   2da88:	00c00804 	movi	r3,32
   2da8c:	1887c83a 	sub	r3,r3,r2
   2da90:	19000150 	cmplti	r4,r3,5
   2da94:	20033c1e 	bne	r4,zero,2e788 <_dtoa_r+0x1734>
   2da98:	00c00704 	movi	r3,28
   2da9c:	1885c83a 	sub	r2,r3,r2
   2daa0:	d8c00617 	ldw	r3,24(sp)
   2daa4:	90a5883a 	add	r18,r18,r2
   2daa8:	b0ad883a 	add	r22,r22,r2
   2daac:	1887883a 	add	r3,r3,r2
   2dab0:	d8c00615 	stw	r3,24(sp)
   2dab4:	d8800617 	ldw	r2,24(sp)
   2dab8:	00809216 	blt	zero,r2,2dd04 <_dtoa_r+0xcb0>
   2dabc:	0580050e 	bge	zero,r22,2dad4 <_dtoa_r+0xa80>
   2dac0:	a00b883a 	mov	r5,r20
   2dac4:	b00d883a 	mov	r6,r22
   2dac8:	b809883a 	mov	r4,r23
   2dacc:	0030fd40 	call	30fd4 <__lshift>
   2dad0:	1029883a 	mov	r20,r2
   2dad4:	d8800917 	ldw	r2,36(sp)
   2dad8:	1001151e 	bne	r2,zero,2df30 <_dtoa_r+0xedc>
   2dadc:	d8800517 	ldw	r2,20(sp)
   2dae0:	0081020e 	bge	zero,r2,2deec <_dtoa_r+0xe98>
   2dae4:	d8800717 	ldw	r2,28(sp)
   2dae8:	1000af1e 	bne	r2,zero,2dda8 <_dtoa_r+0xd54>
   2daec:	d8800417 	ldw	r2,16(sp)
   2daf0:	10800044 	addi	r2,r2,1
   2daf4:	d8800415 	stw	r2,16(sp)
   2daf8:	dc800517 	ldw	r18,20(sp)
   2dafc:	dd400117 	ldw	r21,4(sp)
   2db00:	04400044 	movi	r17,1
   2db04:	00000706 	br	2db24 <_dtoa_r+0xad0>
   2db08:	e00b883a 	mov	r5,fp
   2db0c:	000f883a 	mov	r7,zero
   2db10:	01800284 	movi	r6,10
   2db14:	b809883a 	mov	r4,r23
   2db18:	00307700 	call	30770 <__multadd>
   2db1c:	1039883a 	mov	fp,r2
   2db20:	8c400044 	addi	r17,r17,1
   2db24:	a00b883a 	mov	r5,r20
   2db28:	e009883a 	mov	r4,fp
   2db2c:	002ce340 	call	2ce34 <quorem>
   2db30:	14c00c04 	addi	r19,r2,48
   2db34:	ac45883a 	add	r2,r21,r17
   2db38:	14ffffc5 	stb	r19,-1(r2)
   2db3c:	8cbff216 	blt	r17,r18,2db08 <_dtoa_r+0xab4>
   2db40:	d8800517 	ldw	r2,20(sp)
   2db44:	0081510e 	bge	zero,r2,2e08c <_dtoa_r+0x1038>
   2db48:	d8c00117 	ldw	r3,4(sp)
   2db4c:	0023883a 	mov	r17,zero
   2db50:	18ab883a 	add	r21,r3,r2
   2db54:	e00b883a 	mov	r5,fp
   2db58:	01800044 	movi	r6,1
   2db5c:	b809883a 	mov	r4,r23
   2db60:	0030fd40 	call	30fd4 <__lshift>
   2db64:	1009883a 	mov	r4,r2
   2db68:	a00b883a 	mov	r5,r20
   2db6c:	1039883a 	mov	fp,r2
   2db70:	003115c0 	call	3115c <__mcmp>
   2db74:	a93fffc3 	ldbu	r4,-1(r21)
   2db78:	0081490e 	bge	zero,r2,2e0a0 <_dtoa_r+0x104c>
   2db7c:	d9400117 	ldw	r5,4(sp)
   2db80:	00000306 	br	2db90 <_dtoa_r+0xb3c>
   2db84:	19415426 	beq	r3,r5,2e0d8 <_dtoa_r+0x1084>
   2db88:	193fffc3 	ldbu	r4,-1(r3)
   2db8c:	182b883a 	mov	r21,r3
   2db90:	20803fcc 	andi	r2,r4,255
   2db94:	1080201c 	xori	r2,r2,128
   2db98:	10bfe004 	addi	r2,r2,-128
   2db9c:	10800e60 	cmpeqi	r2,r2,57
   2dba0:	a8ffffc4 	addi	r3,r21,-1
   2dba4:	103ff71e 	bne	r2,zero,2db84 <_dtoa_r+0xb30>
   2dba8:	21000044 	addi	r4,r4,1
   2dbac:	19000005 	stb	r4,0(r3)
   2dbb0:	a00b883a 	mov	r5,r20
   2dbb4:	b809883a 	mov	r4,r23
   2dbb8:	003074c0 	call	3074c <_Bfree>
   2dbbc:	80000826 	beq	r16,zero,2dbe0 <_dtoa_r+0xb8c>
   2dbc0:	88000426 	beq	r17,zero,2dbd4 <_dtoa_r+0xb80>
   2dbc4:	8c000326 	beq	r17,r16,2dbd4 <_dtoa_r+0xb80>
   2dbc8:	880b883a 	mov	r5,r17
   2dbcc:	b809883a 	mov	r4,r23
   2dbd0:	003074c0 	call	3074c <_Bfree>
   2dbd4:	800b883a 	mov	r5,r16
   2dbd8:	b809883a 	mov	r4,r23
   2dbdc:	003074c0 	call	3074c <_Bfree>
   2dbe0:	e00b883a 	mov	r5,fp
   2dbe4:	b809883a 	mov	r4,r23
   2dbe8:	003074c0 	call	3074c <_Bfree>
   2dbec:	d8801f17 	ldw	r2,124(sp)
   2dbf0:	d8c00417 	ldw	r3,16(sp)
   2dbf4:	a8000005 	stb	zero,0(r21)
   2dbf8:	10c00015 	stw	r3,0(r2)
   2dbfc:	d8802117 	ldw	r2,132(sp)
   2dc00:	103d4626 	beq	r2,zero,2d11c <_dtoa_r+0xc8>
   2dc04:	15400015 	stw	r21,0(r2)
   2dc08:	003d4406 	br	2d11c <_dtoa_r+0xc8>
   2dc0c:	d8000915 	stw	zero,36(sp)
   2dc10:	b0002416 	blt	r22,zero,2dca4 <_dtoa_r+0xc50>
   2dc14:	d8000615 	stw	zero,24(sp)
   2dc18:	d8800317 	ldw	r2,12(sp)
   2dc1c:	d8c00217 	ldw	r3,8(sp)
   2dc20:	d8000815 	stw	zero,32(sp)
   2dc24:	b0ad883a 	add	r22,r22,r2
   2dc28:	d8800415 	stw	r2,16(sp)
   2dc2c:	188002a8 	cmpgeui	r2,r3,10
   2dc30:	103db326 	beq	r2,zero,2d300 <_dtoa_r+0x2ac>
   2dc34:	00800044 	movi	r2,1
   2dc38:	d8800715 	stw	r2,28(sp)
   2dc3c:	00bfffc4 	movi	r2,-1
   2dc40:	04000044 	movi	r16,1
   2dc44:	d8000215 	stw	zero,8(sp)
   2dc48:	d8800515 	stw	r2,20(sp)
   2dc4c:	d8001e15 	stw	zero,120(sp)
   2dc50:	d8800517 	ldw	r2,20(sp)
   2dc54:	b8001115 	stw	zero,68(r23)
   2dc58:	000b883a 	mov	r5,zero
   2dc5c:	d8800b15 	stw	r2,44(sp)
   2dc60:	003dc406 	br	2d374 <_dtoa_r+0x320>
   2dc64:	188000e0 	cmpeqi	r2,r3,3
   2dc68:	d8000715 	stw	zero,28(sp)
   2dc6c:	1002ac26 	beq	r2,zero,2e720 <_dtoa_r+0x16cc>
   2dc70:	d8801e17 	ldw	r2,120(sp)
   2dc74:	d8c00417 	ldw	r3,16(sp)
   2dc78:	10c5883a 	add	r2,r2,r3
   2dc7c:	d8800b15 	stw	r2,44(sp)
   2dc80:	10800044 	addi	r2,r2,1
   2dc84:	d8800515 	stw	r2,20(sp)
   2dc88:	100d883a 	mov	r6,r2
   2dc8c:	00bdae16 	blt	zero,r2,2d348 <_dtoa_r+0x2f4>
   2dc90:	01800044 	movi	r6,1
   2dc94:	003dac06 	br	2d348 <_dtoa_r+0x2f4>
   2dc98:	00800044 	movi	r2,1
   2dc9c:	d8800915 	stw	r2,36(sp)
   2dca0:	b03d890e 	bge	r22,zero,2d2c8 <_dtoa_r+0x274>
   2dca4:	00800044 	movi	r2,1
   2dca8:	1405c83a 	sub	r2,r2,r16
   2dcac:	d8800615 	stw	r2,24(sp)
   2dcb0:	002d883a 	mov	r22,zero
   2dcb4:	003d8506 	br	2d2cc <_dtoa_r+0x278>
   2dcb8:	a809883a 	mov	r4,r21
   2dcbc:	002a5700 	call	2a570 <__floatsidf>
   2dcc0:	900d883a 	mov	r6,r18
   2dcc4:	b00f883a 	mov	r7,r22
   2dcc8:	1009883a 	mov	r4,r2
   2dccc:	180b883a 	mov	r5,r3
   2dcd0:	00353b80 	call	353b8 <__eqdf2>
   2dcd4:	103d6926 	beq	r2,zero,2d27c <_dtoa_r+0x228>
   2dcd8:	a8bfffc4 	addi	r2,r21,-1
   2dcdc:	d8800315 	stw	r2,12(sp)
   2dce0:	003d6606 	br	2d27c <_dtoa_r+0x228>
   2dce4:	00800134 	movhi	r2,4
   2dce8:	10a2d804 	addi	r2,r2,-29856
   2dcec:	d8800115 	stw	r2,4(sp)
   2dcf0:	003d0a06 	br	2d11c <_dtoa_r+0xc8>
   2dcf4:	dd000817 	ldw	r20,32(sp)
   2dcf8:	dc800617 	ldw	r18,24(sp)
   2dcfc:	0021883a 	mov	r16,zero
   2dd00:	003f3206 	br	2d9cc <_dtoa_r+0x978>
   2dd04:	e00b883a 	mov	r5,fp
   2dd08:	100d883a 	mov	r6,r2
   2dd0c:	b809883a 	mov	r4,r23
   2dd10:	0030fd40 	call	30fd4 <__lshift>
   2dd14:	1039883a 	mov	fp,r2
   2dd18:	003f6806 	br	2dabc <_dtoa_r+0xa68>
   2dd1c:	00800704 	movi	r2,28
   2dd20:	003f5f06 	br	2daa0 <_dtoa_r+0xa4c>
   2dd24:	01000804 	movi	r4,32
   2dd28:	2089c83a 	sub	r4,r4,r2
   2dd2c:	9908983a 	sll	r4,r19,r4
   2dd30:	003d1d06 	br	2d1a8 <_dtoa_r+0x154>
   2dd34:	04000044 	movi	r16,1
   2dd38:	003d7606 	br	2d314 <_dtoa_r+0x2c0>
   2dd3c:	100b883a 	mov	r5,r2
   2dd40:	b809883a 	mov	r4,r23
   2dd44:	0030e8c0 	call	30e8c <__pow5mult>
   2dd48:	d8c00217 	ldw	r3,8(sp)
   2dd4c:	1029883a 	mov	r20,r2
   2dd50:	18c00090 	cmplti	r3,r3,2
   2dd54:	1801511e 	bne	r3,zero,2e29c <_dtoa_r+0x1248>
   2dd58:	0023883a 	mov	r17,zero
   2dd5c:	a0800417 	ldw	r2,16(r20)
   2dd60:	10800104 	addi	r2,r2,4
   2dd64:	100490ba 	slli	r2,r2,2
   2dd68:	a085883a 	add	r2,r20,r2
   2dd6c:	11000017 	ldw	r4,0(r2)
   2dd70:	0030a040 	call	30a04 <__hi0bits>
   2dd74:	00c00804 	movi	r3,32
   2dd78:	1885c83a 	sub	r2,r3,r2
   2dd7c:	003f3f06 	br	2da7c <_dtoa_r+0xa28>
   2dd80:	800b883a 	mov	r5,r16
   2dd84:	000f883a 	mov	r7,zero
   2dd88:	01800284 	movi	r6,10
   2dd8c:	b809883a 	mov	r4,r23
   2dd90:	00307700 	call	30770 <__multadd>
   2dd94:	1021883a 	mov	r16,r2
   2dd98:	d8800b17 	ldw	r2,44(sp)
   2dd9c:	00824b0e 	bge	zero,r2,2e6cc <_dtoa_r+0x1678>
   2dda0:	dd400415 	stw	r21,16(sp)
   2dda4:	d8800515 	stw	r2,20(sp)
   2dda8:	0480ac16 	blt	zero,r18,2e05c <_dtoa_r+0x1008>
   2ddac:	8801731e 	bne	r17,zero,2e37c <_dtoa_r+0x1328>
   2ddb0:	8025883a 	mov	r18,r16
   2ddb4:	dd800117 	ldw	r22,4(sp)
   2ddb8:	d9000517 	ldw	r4,20(sp)
   2ddbc:	98c0004c 	andi	r3,r19,1
   2ddc0:	b0bfffc4 	addi	r2,r22,-1
   2ddc4:	1105883a 	add	r2,r2,r4
   2ddc8:	d8800515 	stw	r2,20(sp)
   2ddcc:	d8800217 	ldw	r2,8(sp)
   2ddd0:	d8c00815 	stw	r3,32(sp)
   2ddd4:	1884b03a 	or	r2,r3,r2
   2ddd8:	d8800715 	stw	r2,28(sp)
   2dddc:	00002906 	br	2de84 <_dtoa_r+0xe30>
   2dde0:	e009883a 	mov	r4,fp
   2dde4:	003115c0 	call	3115c <__mcmp>
   2dde8:	980b883a 	mov	r5,r19
   2ddec:	b809883a 	mov	r4,r23
   2ddf0:	d8800315 	stw	r2,12(sp)
   2ddf4:	003074c0 	call	3074c <_Bfree>
   2ddf8:	d8800317 	ldw	r2,12(sp)
   2ddfc:	1000021e 	bne	r2,zero,2de08 <_dtoa_r+0xdb4>
   2de00:	d8c00717 	ldw	r3,28(sp)
   2de04:	18022326 	beq	r3,zero,2e694 <_dtoa_r+0x1640>
   2de08:	b4c00044 	addi	r19,r22,1
   2de0c:	88012916 	blt	r17,zero,2e2b4 <_dtoa_r+0x1260>
   2de10:	d8c00217 	ldw	r3,8(sp)
   2de14:	88e2b03a 	or	r17,r17,r3
   2de18:	d8c00817 	ldw	r3,32(sp)
   2de1c:	1c62b03a 	or	r17,r3,r17
   2de20:	88012426 	beq	r17,zero,2e2b4 <_dtoa_r+0x1260>
   2de24:	00816f16 	blt	zero,r2,2e3e4 <_dtoa_r+0x1390>
   2de28:	d8800517 	ldw	r2,20(sp)
   2de2c:	b5400005 	stb	r21,0(r22)
   2de30:	15817926 	beq	r2,r22,2e418 <_dtoa_r+0x13c4>
   2de34:	e00b883a 	mov	r5,fp
   2de38:	000f883a 	mov	r7,zero
   2de3c:	01800284 	movi	r6,10
   2de40:	b809883a 	mov	r4,r23
   2de44:	00307700 	call	30770 <__multadd>
   2de48:	1039883a 	mov	fp,r2
   2de4c:	800b883a 	mov	r5,r16
   2de50:	000f883a 	mov	r7,zero
   2de54:	01800284 	movi	r6,10
   2de58:	b809883a 	mov	r4,r23
   2de5c:	84801f26 	beq	r16,r18,2dedc <_dtoa_r+0xe88>
   2de60:	00307700 	call	30770 <__multadd>
   2de64:	900b883a 	mov	r5,r18
   2de68:	000f883a 	mov	r7,zero
   2de6c:	01800284 	movi	r6,10
   2de70:	b809883a 	mov	r4,r23
   2de74:	1021883a 	mov	r16,r2
   2de78:	00307700 	call	30770 <__multadd>
   2de7c:	1025883a 	mov	r18,r2
   2de80:	982d883a 	mov	r22,r19
   2de84:	a00b883a 	mov	r5,r20
   2de88:	e009883a 	mov	r4,fp
   2de8c:	002ce340 	call	2ce34 <quorem>
   2de90:	800b883a 	mov	r5,r16
   2de94:	e009883a 	mov	r4,fp
   2de98:	102b883a 	mov	r21,r2
   2de9c:	d8800615 	stw	r2,24(sp)
   2dea0:	003115c0 	call	3115c <__mcmp>
   2dea4:	a00b883a 	mov	r5,r20
   2dea8:	900d883a 	mov	r6,r18
   2deac:	b809883a 	mov	r4,r23
   2deb0:	1023883a 	mov	r17,r2
   2deb4:	00311b40 	call	311b4 <__mdiff>
   2deb8:	1027883a 	mov	r19,r2
   2debc:	10800317 	ldw	r2,12(r2)
   2dec0:	ad400c04 	addi	r21,r21,48
   2dec4:	980b883a 	mov	r5,r19
   2dec8:	103fc526 	beq	r2,zero,2dde0 <_dtoa_r+0xd8c>
   2decc:	b809883a 	mov	r4,r23
   2ded0:	003074c0 	call	3074c <_Bfree>
   2ded4:	00800044 	movi	r2,1
   2ded8:	003fcb06 	br	2de08 <_dtoa_r+0xdb4>
   2dedc:	00307700 	call	30770 <__multadd>
   2dee0:	1021883a 	mov	r16,r2
   2dee4:	1025883a 	mov	r18,r2
   2dee8:	003fe506 	br	2de80 <_dtoa_r+0xe2c>
   2deec:	d8800217 	ldw	r2,8(sp)
   2def0:	108000d0 	cmplti	r2,r2,3
   2def4:	10003e26 	beq	r2,zero,2dff0 <_dtoa_r+0xf9c>
   2def8:	d8800717 	ldw	r2,28(sp)
   2defc:	103faa1e 	bne	r2,zero,2dda8 <_dtoa_r+0xd54>
   2df00:	a00b883a 	mov	r5,r20
   2df04:	e009883a 	mov	r4,fp
   2df08:	002ce340 	call	2ce34 <quorem>
   2df0c:	14c00c04 	addi	r19,r2,48
   2df10:	d8800117 	ldw	r2,4(sp)
   2df14:	0023883a 	mov	r17,zero
   2df18:	15400044 	addi	r21,r2,1
   2df1c:	14c00005 	stb	r19,0(r2)
   2df20:	d8800417 	ldw	r2,16(sp)
   2df24:	10800044 	addi	r2,r2,1
   2df28:	d8800415 	stw	r2,16(sp)
   2df2c:	003f0906 	br	2db54 <_dtoa_r+0xb00>
   2df30:	a00b883a 	mov	r5,r20
   2df34:	e009883a 	mov	r4,fp
   2df38:	003115c0 	call	3115c <__mcmp>
   2df3c:	103ee70e 	bge	r2,zero,2dadc <_dtoa_r+0xa88>
   2df40:	e00b883a 	mov	r5,fp
   2df44:	000f883a 	mov	r7,zero
   2df48:	01800284 	movi	r6,10
   2df4c:	b809883a 	mov	r4,r23
   2df50:	00307700 	call	30770 <__multadd>
   2df54:	d8c00417 	ldw	r3,16(sp)
   2df58:	1039883a 	mov	fp,r2
   2df5c:	d8800717 	ldw	r2,28(sp)
   2df60:	1d7fffc4 	addi	r21,r3,-1
   2df64:	103f861e 	bne	r2,zero,2dd80 <_dtoa_r+0xd2c>
   2df68:	d8800b17 	ldw	r2,44(sp)
   2df6c:	0081d20e 	bge	zero,r2,2e6b8 <_dtoa_r+0x1664>
   2df70:	d8800515 	stw	r2,20(sp)
   2df74:	003ee006 	br	2daf8 <_dtoa_r+0xaa4>
   2df78:	00800134 	movhi	r2,4
   2df7c:	1007883a 	mov	r3,r2
   2df80:	18e2e104 	addi	r3,r3,-29820
   2df84:	00800134 	movhi	r2,4
   2df88:	d8c00115 	stw	r3,4(sp)
   2df8c:	10a2e1c4 	addi	r2,r2,-29817
   2df90:	003ded06 	br	2d748 <_dtoa_r+0x6f4>
   2df94:	00800044 	movi	r2,1
   2df98:	d8800715 	stw	r2,28(sp)
   2df9c:	003f3406 	br	2dc70 <_dtoa_r+0xc1c>
   2dfa0:	983eb21e 	bne	r19,zero,2da6c <_dtoa_r+0xa18>
   2dfa4:	00800434 	movhi	r2,16
   2dfa8:	10bfffc4 	addi	r2,r2,-1
   2dfac:	8884703a 	and	r2,r17,r2
   2dfb0:	103eae1e 	bne	r2,zero,2da6c <_dtoa_r+0xa18>
   2dfb4:	8c5ffc2c 	andhi	r17,r17,32752
   2dfb8:	883eac26 	beq	r17,zero,2da6c <_dtoa_r+0xa18>
   2dfbc:	d8800617 	ldw	r2,24(sp)
   2dfc0:	b5800044 	addi	r22,r22,1
   2dfc4:	04400044 	movi	r17,1
   2dfc8:	10800044 	addi	r2,r2,1
   2dfcc:	d8800615 	stw	r2,24(sp)
   2dfd0:	003ea706 	br	2da70 <_dtoa_r+0xa1c>
   2dfd4:	00800044 	movi	r2,1
   2dfd8:	d8800515 	stw	r2,20(sp)
   2dfdc:	d8801e15 	stw	r2,120(sp)
   2dfe0:	003f1b06 	br	2dc50 <_dtoa_r+0xbfc>
   2dfe4:	d8800b17 	ldw	r2,44(sp)
   2dfe8:	dd400415 	stw	r21,16(sp)
   2dfec:	d8800515 	stw	r2,20(sp)
   2dff0:	d8800517 	ldw	r2,20(sp)
   2dff4:	103e081e 	bne	r2,zero,2d818 <_dtoa_r+0x7c4>
   2dff8:	a00b883a 	mov	r5,r20
   2dffc:	b809883a 	mov	r4,r23
   2e000:	000f883a 	mov	r7,zero
   2e004:	01800144 	movi	r6,5
   2e008:	00307700 	call	30770 <__multadd>
   2e00c:	100b883a 	mov	r5,r2
   2e010:	e009883a 	mov	r4,fp
   2e014:	1029883a 	mov	r20,r2
   2e018:	003115c0 	call	3115c <__mcmp>
   2e01c:	00bdfe0e 	bge	zero,r2,2d818 <_dtoa_r+0x7c4>
   2e020:	d8c00117 	ldw	r3,4(sp)
   2e024:	00800c44 	movi	r2,49
   2e028:	18800005 	stb	r2,0(r3)
   2e02c:	d8800417 	ldw	r2,16(sp)
   2e030:	1d400044 	addi	r21,r3,1
   2e034:	14400044 	addi	r17,r2,1
   2e038:	a00b883a 	mov	r5,r20
   2e03c:	b809883a 	mov	r4,r23
   2e040:	003074c0 	call	3074c <_Bfree>
   2e044:	88800044 	addi	r2,r17,1
   2e048:	d8800415 	stw	r2,16(sp)
   2e04c:	803ee11e 	bne	r16,zero,2dbd4 <_dtoa_r+0xb80>
   2e050:	003ee306 	br	2dbe0 <_dtoa_r+0xb8c>
   2e054:	b005883a 	mov	r2,r22
   2e058:	003e6006 	br	2d9dc <_dtoa_r+0x988>
   2e05c:	800b883a 	mov	r5,r16
   2e060:	900d883a 	mov	r6,r18
   2e064:	b809883a 	mov	r4,r23
   2e068:	0030fd40 	call	30fd4 <__lshift>
   2e06c:	1021883a 	mov	r16,r2
   2e070:	003f4e06 	br	2ddac <_dtoa_r+0xd58>
   2e074:	1529c83a 	sub	r20,r2,r20
   2e078:	003e4906 	br	2d9a0 <_dtoa_r+0x94c>
   2e07c:	dcc00c15 	stw	r19,48(sp)
   2e080:	8825883a 	mov	r18,r17
   2e084:	05400084 	movi	r21,2
   2e088:	003cdf06 	br	2d408 <_dtoa_r+0x3b4>
   2e08c:	00800044 	movi	r2,1
   2e090:	003ead06 	br	2db48 <_dtoa_r+0xaf4>
   2e094:	00800044 	movi	r2,1
   2e098:	d8800715 	stw	r2,28(sp)
   2e09c:	003ca506 	br	2d334 <_dtoa_r+0x2e0>
   2e0a0:	1000021e 	bne	r2,zero,2e0ac <_dtoa_r+0x1058>
   2e0a4:	98c0004c 	andi	r3,r19,1
   2e0a8:	183eb41e 	bne	r3,zero,2db7c <_dtoa_r+0xb28>
   2e0ac:	2005883a 	mov	r2,r4
   2e0b0:	00000206 	br	2e0bc <_dtoa_r+0x1068>
   2e0b4:	a8bfff83 	ldbu	r2,-2(r21)
   2e0b8:	182b883a 	mov	r21,r3
   2e0bc:	10803fcc 	andi	r2,r2,255
   2e0c0:	1080201c 	xori	r2,r2,128
   2e0c4:	10bfe004 	addi	r2,r2,-128
   2e0c8:	10800c18 	cmpnei	r2,r2,48
   2e0cc:	a8ffffc4 	addi	r3,r21,-1
   2e0d0:	103ff826 	beq	r2,zero,2e0b4 <_dtoa_r+0x1060>
   2e0d4:	003eb606 	br	2dbb0 <_dtoa_r+0xb5c>
   2e0d8:	d8c00117 	ldw	r3,4(sp)
   2e0dc:	00800c44 	movi	r2,49
   2e0e0:	18800005 	stb	r2,0(r3)
   2e0e4:	d8800417 	ldw	r2,16(sp)
   2e0e8:	10800044 	addi	r2,r2,1
   2e0ec:	d8800415 	stw	r2,16(sp)
   2e0f0:	003eaf06 	br	2dbb0 <_dtoa_r+0xb5c>
   2e0f4:	d8c00a17 	ldw	r3,40(sp)
   2e0f8:	18011826 	beq	r3,zero,2e55c <_dtoa_r+0x1508>
   2e0fc:	d8c00617 	ldw	r3,24(sp)
   2e100:	10810cc4 	addi	r2,r2,1075
   2e104:	b0ad883a 	add	r22,r22,r2
   2e108:	1885883a 	add	r2,r3,r2
   2e10c:	dd000817 	ldw	r20,32(sp)
   2e110:	1825883a 	mov	r18,r3
   2e114:	d8800615 	stw	r2,24(sp)
   2e118:	003e2806 	br	2d9bc <_dtoa_r+0x968>
   2e11c:	a809883a 	mov	r4,r21
   2e120:	002a5700 	call	2a570 <__floatsidf>
   2e124:	800d883a 	mov	r6,r16
   2e128:	900f883a 	mov	r7,r18
   2e12c:	1009883a 	mov	r4,r2
   2e130:	180b883a 	mov	r5,r3
   2e134:	00295100 	call	29510 <__muldf3>
   2e138:	000d883a 	mov	r6,zero
   2e13c:	01d00734 	movhi	r7,16412
   2e140:	1009883a 	mov	r4,r2
   2e144:	180b883a 	mov	r5,r3
   2e148:	00281200 	call	28120 <__adddf3>
   2e14c:	1029883a 	mov	r20,r2
   2e150:	00bf3034 	movhi	r2,64704
   2e154:	1885883a 	add	r2,r3,r2
   2e158:	d8800c15 	stw	r2,48(sp)
   2e15c:	8009883a 	mov	r4,r16
   2e160:	900b883a 	mov	r5,r18
   2e164:	000d883a 	mov	r6,zero
   2e168:	01d00534 	movhi	r7,16404
   2e16c:	0029cbc0 	call	29cbc <__subdf3>
   2e170:	dd400c17 	ldw	r21,48(sp)
   2e174:	a00d883a 	mov	r6,r20
   2e178:	1009883a 	mov	r4,r2
   2e17c:	a80f883a 	mov	r7,r21
   2e180:	180b883a 	mov	r5,r3
   2e184:	1025883a 	mov	r18,r2
   2e188:	1821883a 	mov	r16,r3
   2e18c:	00293400 	call	29340 <__gedf2>
   2e190:	00812f16 	blt	zero,r2,2e650 <_dtoa_r+0x15fc>
   2e194:	a9e0003c 	xorhi	r7,r21,32768
   2e198:	a00d883a 	mov	r6,r20
   2e19c:	9009883a 	mov	r4,r18
   2e1a0:	800b883a 	mov	r5,r16
   2e1a4:	00294280 	call	29428 <__ledf2>
   2e1a8:	103d7d0e 	bge	r2,zero,2d7a0 <_dtoa_r+0x74c>
   2e1ac:	0029883a 	mov	r20,zero
   2e1b0:	0021883a 	mov	r16,zero
   2e1b4:	003d9806 	br	2d818 <_dtoa_r+0x7c4>
   2e1b8:	d9800817 	ldw	r6,32(sp)
   2e1bc:	e00b883a 	mov	r5,fp
   2e1c0:	b809883a 	mov	r4,r23
   2e1c4:	0030e8c0 	call	30e8c <__pow5mult>
   2e1c8:	1039883a 	mov	fp,r2
   2e1cc:	003e1e06 	br	2da48 <_dtoa_r+0x9f4>
   2e1d0:	d8800417 	ldw	r2,16(sp)
   2e1d4:	1000ed26 	beq	r2,zero,2e58c <_dtoa_r+0x1538>
   2e1d8:	00a9c83a 	sub	r20,zero,r2
   2e1dc:	a08003cc 	andi	r2,r20,15
   2e1e0:	100690fa 	slli	r3,r2,3
   2e1e4:	00800134 	movhi	r2,4
   2e1e8:	10a32104 	addi	r2,r2,-29564
   2e1ec:	10c5883a 	add	r2,r2,r3
   2e1f0:	11800017 	ldw	r6,0(r2)
   2e1f4:	11c00117 	ldw	r7,4(r2)
   2e1f8:	a029d13a 	srai	r20,r20,4
   2e1fc:	9809883a 	mov	r4,r19
   2e200:	880b883a 	mov	r5,r17
   2e204:	00295100 	call	29510 <__muldf3>
   2e208:	1021883a 	mov	r16,r2
   2e20c:	1825883a 	mov	r18,r3
   2e210:	a0013826 	beq	r20,zero,2e6f4 <_dtoa_r+0x16a0>
   2e214:	02000134 	movhi	r8,4
   2e218:	05400084 	movi	r21,2
   2e21c:	42231704 	addi	r8,r8,-29604
   2e220:	1009883a 	mov	r4,r2
   2e224:	9805883a 	mov	r2,r19
   2e228:	180b883a 	mov	r5,r3
   2e22c:	dc000c15 	stw	r16,48(sp)
   2e230:	8827883a 	mov	r19,r17
   2e234:	0007883a 	mov	r3,zero
   2e238:	a823883a 	mov	r17,r21
   2e23c:	4021883a 	mov	r16,r8
   2e240:	102b883a 	mov	r21,r2
   2e244:	a180004c 	andi	r6,r20,1
   2e248:	30000726 	beq	r6,zero,2e268 <_dtoa_r+0x1214>
   2e24c:	81800017 	ldw	r6,0(r16)
   2e250:	81c00117 	ldw	r7,4(r16)
   2e254:	8c400044 	addi	r17,r17,1
   2e258:	00295100 	call	29510 <__muldf3>
   2e25c:	180b883a 	mov	r5,r3
   2e260:	1009883a 	mov	r4,r2
   2e264:	00c00044 	movi	r3,1
   2e268:	a029d07a 	srai	r20,r20,1
   2e26c:	84000204 	addi	r16,r16,8
   2e270:	a03ff41e 	bne	r20,zero,2e244 <_dtoa_r+0x11f0>
   2e274:	a805883a 	mov	r2,r21
   2e278:	18c03fcc 	andi	r3,r3,255
   2e27c:	882b883a 	mov	r21,r17
   2e280:	dc000c17 	ldw	r16,48(sp)
   2e284:	9823883a 	mov	r17,r19
   2e288:	1027883a 	mov	r19,r2
   2e28c:	183c7726 	beq	r3,zero,2d46c <_dtoa_r+0x418>
   2e290:	2021883a 	mov	r16,r4
   2e294:	2825883a 	mov	r18,r5
   2e298:	003c7406 	br	2d46c <_dtoa_r+0x418>
   2e29c:	983eae1e 	bne	r19,zero,2dd58 <_dtoa_r+0xd04>
   2e2a0:	00800434 	movhi	r2,16
   2e2a4:	10bfffc4 	addi	r2,r2,-1
   2e2a8:	8884703a 	and	r2,r17,r2
   2e2ac:	103f4126 	beq	r2,zero,2dfb4 <_dtoa_r+0xf60>
   2e2b0:	003ea906 	br	2dd58 <_dtoa_r+0xd04>
   2e2b4:	9807883a 	mov	r3,r19
   2e2b8:	a827883a 	mov	r19,r21
   2e2bc:	182b883a 	mov	r21,r3
   2e2c0:	d8c00417 	ldw	r3,16(sp)
   2e2c4:	18c00044 	addi	r3,r3,1
   2e2c8:	d8c00415 	stw	r3,16(sp)
   2e2cc:	00800d0e 	bge	zero,r2,2e304 <_dtoa_r+0x12b0>
   2e2d0:	e00b883a 	mov	r5,fp
   2e2d4:	b809883a 	mov	r4,r23
   2e2d8:	01800044 	movi	r6,1
   2e2dc:	0030fd40 	call	30fd4 <__lshift>
   2e2e0:	a00b883a 	mov	r5,r20
   2e2e4:	1009883a 	mov	r4,r2
   2e2e8:	1039883a 	mov	fp,r2
   2e2ec:	003115c0 	call	3115c <__mcmp>
   2e2f0:	0080df0e 	bge	zero,r2,2e670 <_dtoa_r+0x161c>
   2e2f4:	98c00e60 	cmpeqi	r3,r19,57
   2e2f8:	1800ce1e 	bne	r3,zero,2e634 <_dtoa_r+0x15e0>
   2e2fc:	d8800617 	ldw	r2,24(sp)
   2e300:	14c00c44 	addi	r19,r2,49
   2e304:	8023883a 	mov	r17,r16
   2e308:	b4c00005 	stb	r19,0(r22)
   2e30c:	9021883a 	mov	r16,r18
   2e310:	003e2706 	br	2dbb0 <_dtoa_r+0xb5c>
   2e314:	b82b883a 	mov	r21,r23
   2e318:	ddc00217 	ldw	r23,8(sp)
   2e31c:	200d883a 	mov	r6,r4
   2e320:	280f883a 	mov	r7,r5
   2e324:	00281200 	call	28120 <__adddf3>
   2e328:	180b883a 	mov	r5,r3
   2e32c:	800d883a 	mov	r6,r16
   2e330:	900f883a 	mov	r7,r18
   2e334:	1009883a 	mov	r4,r2
   2e338:	1823883a 	mov	r17,r3
   2e33c:	1027883a 	mov	r19,r2
   2e340:	00293400 	call	29340 <__gedf2>
   2e344:	d8c00417 	ldw	r3,16(sp)
   2e348:	18c00044 	addi	r3,r3,1
   2e34c:	d8c00415 	stw	r3,16(sp)
   2e350:	00808c16 	blt	zero,r2,2e584 <_dtoa_r+0x1530>
   2e354:	800d883a 	mov	r6,r16
   2e358:	900f883a 	mov	r7,r18
   2e35c:	9809883a 	mov	r4,r19
   2e360:	880b883a 	mov	r5,r17
   2e364:	00353b80 	call	353b8 <__eqdf2>
   2e368:	1000021e 	bne	r2,zero,2e374 <_dtoa_r+0x1320>
   2e36c:	ad40004c 	andi	r21,r21,1
   2e370:	a800841e 	bne	r21,zero,2e584 <_dtoa_r+0x1530>
   2e374:	a02b883a 	mov	r21,r20
   2e378:	003e1906 	br	2dbe0 <_dtoa_r+0xb8c>
   2e37c:	81400117 	ldw	r5,4(r16)
   2e380:	b809883a 	mov	r4,r23
   2e384:	00306a80 	call	306a8 <_Balloc>
   2e388:	1023883a 	mov	r17,r2
   2e38c:	1000f326 	beq	r2,zero,2e75c <_dtoa_r+0x1708>
   2e390:	81800417 	ldw	r6,16(r16)
   2e394:	81400304 	addi	r5,r16,12
   2e398:	11000304 	addi	r4,r2,12
   2e39c:	31800084 	addi	r6,r6,2
   2e3a0:	300c90ba 	slli	r6,r6,2
   2e3a4:	003038c0 	call	3038c <memcpy>
   2e3a8:	01800044 	movi	r6,1
   2e3ac:	880b883a 	mov	r5,r17
   2e3b0:	b809883a 	mov	r4,r23
   2e3b4:	0030fd40 	call	30fd4 <__lshift>
   2e3b8:	1025883a 	mov	r18,r2
   2e3bc:	003e7d06 	br	2ddb4 <_dtoa_r+0xd60>
   2e3c0:	e00b883a 	mov	r5,fp
   2e3c4:	b809883a 	mov	r4,r23
   2e3c8:	0030e8c0 	call	30e8c <__pow5mult>
   2e3cc:	1039883a 	mov	fp,r2
   2e3d0:	003d9d06 	br	2da48 <_dtoa_r+0x9f4>
   2e3d4:	d8800617 	ldw	r2,24(sp)
   2e3d8:	d8c00517 	ldw	r3,20(sp)
   2e3dc:	10e5c83a 	sub	r18,r2,r3
   2e3e0:	003d7606 	br	2d9bc <_dtoa_r+0x968>
   2e3e4:	d8c00417 	ldw	r3,16(sp)
   2e3e8:	9805883a 	mov	r2,r19
   2e3ec:	a827883a 	mov	r19,r21
   2e3f0:	18c00044 	addi	r3,r3,1
   2e3f4:	102b883a 	mov	r21,r2
   2e3f8:	d8c00415 	stw	r3,16(sp)
   2e3fc:	98800e58 	cmpnei	r2,r19,57
   2e400:	10008c26 	beq	r2,zero,2e634 <_dtoa_r+0x15e0>
   2e404:	98c00044 	addi	r3,r19,1
   2e408:	8023883a 	mov	r17,r16
   2e40c:	b0c00005 	stb	r3,0(r22)
   2e410:	9021883a 	mov	r16,r18
   2e414:	003de606 	br	2dbb0 <_dtoa_r+0xb5c>
   2e418:	9805883a 	mov	r2,r19
   2e41c:	a827883a 	mov	r19,r21
   2e420:	102b883a 	mov	r21,r2
   2e424:	d8800417 	ldw	r2,16(sp)
   2e428:	8023883a 	mov	r17,r16
   2e42c:	9021883a 	mov	r16,r18
   2e430:	10800044 	addi	r2,r2,1
   2e434:	d8800415 	stw	r2,16(sp)
   2e438:	003dc606 	br	2db54 <_dtoa_r+0xb00>
   2e43c:	d9400c17 	ldw	r5,48(sp)
   2e440:	a009883a 	mov	r4,r20
   2e444:	00295100 	call	29510 <__muldf3>
   2e448:	d9800d17 	ldw	r6,52(sp)
   2e44c:	d9400117 	ldw	r5,4(sp)
   2e450:	d9001017 	ldw	r4,64(sp)
   2e454:	d8800c15 	stw	r2,48(sp)
   2e458:	d8c00d15 	stw	r3,52(sp)
   2e45c:	29000005 	stb	r4,0(r5)
   2e460:	31000058 	cmpnei	r4,r6,1
   2e464:	29a9883a 	add	r20,r5,r6
   2e468:	2000a026 	beq	r4,zero,2e6ec <_dtoa_r+0x1698>
   2e46c:	dc400e15 	stw	r17,56(sp)
   2e470:	8009883a 	mov	r4,r16
   2e474:	900b883a 	mov	r5,r18
   2e478:	a823883a 	mov	r17,r21
   2e47c:	000d883a 	mov	r6,zero
   2e480:	01d00934 	movhi	r7,16420
   2e484:	00295100 	call	29510 <__muldf3>
   2e488:	180b883a 	mov	r5,r3
   2e48c:	1009883a 	mov	r4,r2
   2e490:	1825883a 	mov	r18,r3
   2e494:	102b883a 	mov	r21,r2
   2e498:	003548c0 	call	3548c <__fixdfsi>
   2e49c:	1009883a 	mov	r4,r2
   2e4a0:	1021883a 	mov	r16,r2
   2e4a4:	002a5700 	call	2a570 <__floatsidf>
   2e4a8:	a809883a 	mov	r4,r21
   2e4ac:	900b883a 	mov	r5,r18
   2e4b0:	100d883a 	mov	r6,r2
   2e4b4:	180f883a 	mov	r7,r3
   2e4b8:	8c400044 	addi	r17,r17,1
   2e4bc:	84000c04 	addi	r16,r16,48
   2e4c0:	0029cbc0 	call	29cbc <__subdf3>
   2e4c4:	8c3fffc5 	stb	r16,-1(r17)
   2e4c8:	1009883a 	mov	r4,r2
   2e4cc:	180b883a 	mov	r5,r3
   2e4d0:	a47fea1e 	bne	r20,r17,2e47c <_dtoa_r+0x1428>
   2e4d4:	dc400e17 	ldw	r17,56(sp)
   2e4d8:	1021883a 	mov	r16,r2
   2e4dc:	1825883a 	mov	r18,r3
   2e4e0:	d9000c17 	ldw	r4,48(sp)
   2e4e4:	d9400d17 	ldw	r5,52(sp)
   2e4e8:	000d883a 	mov	r6,zero
   2e4ec:	01cff834 	movhi	r7,16352
   2e4f0:	00281200 	call	28120 <__adddf3>
   2e4f4:	800d883a 	mov	r6,r16
   2e4f8:	900f883a 	mov	r7,r18
   2e4fc:	1009883a 	mov	r4,r2
   2e500:	180b883a 	mov	r5,r3
   2e504:	00294280 	call	29428 <__ledf2>
   2e508:	10005416 	blt	r2,zero,2e65c <_dtoa_r+0x1608>
   2e50c:	d9800c17 	ldw	r6,48(sp)
   2e510:	d9c00d17 	ldw	r7,52(sp)
   2e514:	0009883a 	mov	r4,zero
   2e518:	014ff834 	movhi	r5,16352
   2e51c:	0029cbc0 	call	29cbc <__subdf3>
   2e520:	800d883a 	mov	r6,r16
   2e524:	900f883a 	mov	r7,r18
   2e528:	1009883a 	mov	r4,r2
   2e52c:	180b883a 	mov	r5,r3
   2e530:	00293400 	call	29340 <__gedf2>
   2e534:	00bc9a0e 	bge	zero,r2,2d7a0 <_dtoa_r+0x74c>
   2e538:	a0bfffc7 	ldb	r2,-1(r20)
   2e53c:	a02b883a 	mov	r21,r20
   2e540:	a53fffc4 	addi	r20,r20,-1
   2e544:	10800c20 	cmpeqi	r2,r2,48
   2e548:	103ffb1e 	bne	r2,zero,2e538 <_dtoa_r+0x14e4>
   2e54c:	d8801117 	ldw	r2,68(sp)
   2e550:	10800044 	addi	r2,r2,1
   2e554:	d8800415 	stw	r2,16(sp)
   2e558:	003da106 	br	2dbe0 <_dtoa_r+0xb8c>
   2e55c:	d8c01217 	ldw	r3,72(sp)
   2e560:	d9000617 	ldw	r4,24(sp)
   2e564:	00800d84 	movi	r2,54
   2e568:	10c5c83a 	sub	r2,r2,r3
   2e56c:	b0ad883a 	add	r22,r22,r2
   2e570:	2085883a 	add	r2,r4,r2
   2e574:	dd000817 	ldw	r20,32(sp)
   2e578:	2025883a 	mov	r18,r4
   2e57c:	d8800615 	stw	r2,24(sp)
   2e580:	003d0e06 	br	2d9bc <_dtoa_r+0x968>
   2e584:	d9000117 	ldw	r4,4(sp)
   2e588:	003c4b06 	br	2d6b8 <_dtoa_r+0x664>
   2e58c:	9821883a 	mov	r16,r19
   2e590:	8825883a 	mov	r18,r17
   2e594:	05400084 	movi	r21,2
   2e598:	003bb406 	br	2d46c <_dtoa_r+0x418>
   2e59c:	d8800517 	ldw	r2,20(sp)
   2e5a0:	103ede26 	beq	r2,zero,2e11c <_dtoa_r+0x10c8>
   2e5a4:	d8800b17 	ldw	r2,44(sp)
   2e5a8:	00bc7d0e 	bge	zero,r2,2d7a0 <_dtoa_r+0x74c>
   2e5ac:	900b883a 	mov	r5,r18
   2e5b0:	8009883a 	mov	r4,r16
   2e5b4:	000d883a 	mov	r6,zero
   2e5b8:	01d00934 	movhi	r7,16420
   2e5bc:	00295100 	call	29510 <__muldf3>
   2e5c0:	a9000044 	addi	r4,r21,1
   2e5c4:	1021883a 	mov	r16,r2
   2e5c8:	1825883a 	mov	r18,r3
   2e5cc:	002a5700 	call	2a570 <__floatsidf>
   2e5d0:	800d883a 	mov	r6,r16
   2e5d4:	900f883a 	mov	r7,r18
   2e5d8:	1009883a 	mov	r4,r2
   2e5dc:	180b883a 	mov	r5,r3
   2e5e0:	00295100 	call	29510 <__muldf3>
   2e5e4:	1009883a 	mov	r4,r2
   2e5e8:	000d883a 	mov	r6,zero
   2e5ec:	01d00734 	movhi	r7,16412
   2e5f0:	180b883a 	mov	r5,r3
   2e5f4:	00281200 	call	28120 <__adddf3>
   2e5f8:	d9000417 	ldw	r4,16(sp)
   2e5fc:	1029883a 	mov	r20,r2
   2e600:	00bf3034 	movhi	r2,64704
   2e604:	1887883a 	add	r3,r3,r2
   2e608:	d8800b17 	ldw	r2,44(sp)
   2e60c:	213fffc4 	addi	r4,r4,-1
   2e610:	d9001115 	stw	r4,68(sp)
   2e614:	d8c00c15 	stw	r3,48(sp)
   2e618:	d8800d15 	stw	r2,52(sp)
   2e61c:	003bb106 	br	2d4e4 <_dtoa_r+0x490>
   2e620:	d8800417 	ldw	r2,16(sp)
   2e624:	00c00c44 	movi	r3,49
   2e628:	10800044 	addi	r2,r2,1
   2e62c:	d8800415 	stw	r2,16(sp)
   2e630:	003c2a06 	br	2d6dc <_dtoa_r+0x688>
   2e634:	00800e44 	movi	r2,57
   2e638:	8023883a 	mov	r17,r16
   2e63c:	d9400117 	ldw	r5,4(sp)
   2e640:	b0800005 	stb	r2,0(r22)
   2e644:	9021883a 	mov	r16,r18
   2e648:	01000e44 	movi	r4,57
   2e64c:	003d5006 	br	2db90 <_dtoa_r+0xb3c>
   2e650:	0029883a 	mov	r20,zero
   2e654:	0021883a 	mov	r16,zero
   2e658:	003e7106 	br	2e020 <_dtoa_r+0xfcc>
   2e65c:	d8801117 	ldw	r2,68(sp)
   2e660:	d9000117 	ldw	r4,4(sp)
   2e664:	10800044 	addi	r2,r2,1
   2e668:	d8800415 	stw	r2,16(sp)
   2e66c:	003c1206 	br	2d6b8 <_dtoa_r+0x664>
   2e670:	103f241e 	bne	r2,zero,2e304 <_dtoa_r+0x12b0>
   2e674:	9880004c 	andi	r2,r19,1
   2e678:	103f1e1e 	bne	r2,zero,2e2f4 <_dtoa_r+0x12a0>
   2e67c:	003f2106 	br	2e304 <_dtoa_r+0x12b0>
   2e680:	d8801117 	ldw	r2,68(sp)
   2e684:	ddc00d17 	ldw	r23,52(sp)
   2e688:	10800044 	addi	r2,r2,1
   2e68c:	d8800415 	stw	r2,16(sp)
   2e690:	003d5306 	br	2dbe0 <_dtoa_r+0xb8c>
   2e694:	d8c00417 	ldw	r3,16(sp)
   2e698:	a8800e60 	cmpeqi	r2,r21,57
   2e69c:	a827883a 	mov	r19,r21
   2e6a0:	18c00044 	addi	r3,r3,1
   2e6a4:	d8c00415 	stw	r3,16(sp)
   2e6a8:	b5400044 	addi	r21,r22,1
   2e6ac:	103fe11e 	bne	r2,zero,2e634 <_dtoa_r+0x15e0>
   2e6b0:	047f1216 	blt	zero,r17,2e2fc <_dtoa_r+0x12a8>
   2e6b4:	003f1306 	br	2e304 <_dtoa_r+0x12b0>
   2e6b8:	d8800217 	ldw	r2,8(sp)
   2e6bc:	108000c8 	cmpgei	r2,r2,3
   2e6c0:	103e481e 	bne	r2,zero,2dfe4 <_dtoa_r+0xf90>
   2e6c4:	dd400415 	stw	r21,16(sp)
   2e6c8:	003e0d06 	br	2df00 <_dtoa_r+0xeac>
   2e6cc:	d8800217 	ldw	r2,8(sp)
   2e6d0:	108000c8 	cmpgei	r2,r2,3
   2e6d4:	103e431e 	bne	r2,zero,2dfe4 <_dtoa_r+0xf90>
   2e6d8:	d8800b17 	ldw	r2,44(sp)
   2e6dc:	dd400415 	stw	r21,16(sp)
   2e6e0:	d8800515 	stw	r2,20(sp)
   2e6e4:	04bdb10e 	bge	zero,r18,2ddac <_dtoa_r+0xd58>
   2e6e8:	003e5c06 	br	2e05c <_dtoa_r+0x1008>
   2e6ec:	a829883a 	mov	r20,r21
   2e6f0:	003f7b06 	br	2e4e0 <_dtoa_r+0x148c>
   2e6f4:	05400084 	movi	r21,2
   2e6f8:	003b5c06 	br	2d46c <_dtoa_r+0x418>
   2e6fc:	01c00134 	movhi	r7,4
   2e700:	01000134 	movhi	r4,4
   2e704:	39e2e504 	addi	r7,r7,-29804
   2e708:	000d883a 	mov	r6,zero
   2e70c:	01406a84 	movi	r5,426
   2e710:	2122ea04 	addi	r4,r4,-29784
   2e714:	00338880 	call	33888 <__assert_func>
   2e718:	000b883a 	mov	r5,zero
   2e71c:	003b1506 	br	2d374 <_dtoa_r+0x320>
   2e720:	b8001115 	stw	zero,68(r23)
   2e724:	000b883a 	mov	r5,zero
   2e728:	b809883a 	mov	r4,r23
   2e72c:	00306a80 	call	306a8 <_Balloc>
   2e730:	d8800115 	stw	r2,4(sp)
   2e734:	103ff126 	beq	r2,zero,2e6fc <_dtoa_r+0x16a8>
   2e738:	d8800117 	ldw	r2,4(sp)
   2e73c:	d8001e15 	stw	zero,120(sp)
   2e740:	b8801015 	stw	r2,64(r23)
   2e744:	00bfffc4 	movi	r2,-1
   2e748:	d8800515 	stw	r2,20(sp)
   2e74c:	d8800b15 	stw	r2,44(sp)
   2e750:	00800044 	movi	r2,1
   2e754:	d8800715 	stw	r2,28(sp)
   2e758:	003c1106 	br	2d7a0 <_dtoa_r+0x74c>
   2e75c:	01c00134 	movhi	r7,4
   2e760:	01000134 	movhi	r4,4
   2e764:	39e2e504 	addi	r7,r7,-29804
   2e768:	000d883a 	mov	r6,zero
   2e76c:	0140ba84 	movi	r5,746
   2e770:	2122ea04 	addi	r4,r4,-29784
   2e774:	00338880 	call	33888 <__assert_func>
   2e778:	00800134 	movhi	r2,4
   2e77c:	10a2e204 	addi	r2,r2,-29816
   2e780:	d8800115 	stw	r2,4(sp)
   2e784:	003a6506 	br	2d11c <_dtoa_r+0xc8>
   2e788:	18c00120 	cmpeqi	r3,r3,4
   2e78c:	183cc91e 	bne	r3,zero,2dab4 <_dtoa_r+0xa60>
   2e790:	00c00f04 	movi	r3,60
   2e794:	1885c83a 	sub	r2,r3,r2
   2e798:	003cc106 	br	2daa0 <_dtoa_r+0xa4c>

0002e79c <__sflush_r>:
   2e79c:	2880030b 	ldhu	r2,12(r5)
   2e7a0:	defffb04 	addi	sp,sp,-20
   2e7a4:	dcc00315 	stw	r19,12(sp)
   2e7a8:	dc000015 	stw	r16,0(sp)
   2e7ac:	dfc00415 	stw	ra,16(sp)
   2e7b0:	dc800215 	stw	r18,8(sp)
   2e7b4:	dc400115 	stw	r17,4(sp)
   2e7b8:	10c0020c 	andi	r3,r2,8
   2e7bc:	2821883a 	mov	r16,r5
   2e7c0:	2027883a 	mov	r19,r4
   2e7c4:	18003f1e 	bne	r3,zero,2e8c4 <__sflush_r+0x128>
   2e7c8:	28c00117 	ldw	r3,4(r5)
   2e7cc:	10820014 	ori	r2,r2,2048
   2e7d0:	2880030d 	sth	r2,12(r5)
   2e7d4:	00c0550e 	bge	zero,r3,2e92c <__sflush_r+0x190>
   2e7d8:	82000a17 	ldw	r8,40(r16)
   2e7dc:	40003126 	beq	r8,zero,2e8a4 <__sflush_r+0x108>
   2e7e0:	9c400017 	ldw	r17,0(r19)
   2e7e4:	1104000c 	andi	r4,r2,4096
   2e7e8:	98000015 	stw	zero,0(r19)
   2e7ec:	81400717 	ldw	r5,28(r16)
   2e7f0:	1007883a 	mov	r3,r2
   2e7f4:	2000521e 	bne	r4,zero,2e940 <__sflush_r+0x1a4>
   2e7f8:	01c00044 	movi	r7,1
   2e7fc:	000d883a 	mov	r6,zero
   2e800:	9809883a 	mov	r4,r19
   2e804:	403ee83a 	callr	r8
   2e808:	10ffffd8 	cmpnei	r3,r2,-1
   2e80c:	18005826 	beq	r3,zero,2e970 <__sflush_r+0x1d4>
   2e810:	80c0030b 	ldhu	r3,12(r16)
   2e814:	82000a17 	ldw	r8,40(r16)
   2e818:	81400717 	ldw	r5,28(r16)
   2e81c:	18c0010c 	andi	r3,r3,4
   2e820:	18000626 	beq	r3,zero,2e83c <__sflush_r+0xa0>
   2e824:	81000117 	ldw	r4,4(r16)
   2e828:	80c00c17 	ldw	r3,48(r16)
   2e82c:	1105c83a 	sub	r2,r2,r4
   2e830:	18000226 	beq	r3,zero,2e83c <__sflush_r+0xa0>
   2e834:	80c00f17 	ldw	r3,60(r16)
   2e838:	10c5c83a 	sub	r2,r2,r3
   2e83c:	100d883a 	mov	r6,r2
   2e840:	000f883a 	mov	r7,zero
   2e844:	9809883a 	mov	r4,r19
   2e848:	403ee83a 	callr	r8
   2e84c:	10ffffd8 	cmpnei	r3,r2,-1
   2e850:	18003d1e 	bne	r3,zero,2e948 <__sflush_r+0x1ac>
   2e854:	99000017 	ldw	r4,0(r19)
   2e858:	80c0030b 	ldhu	r3,12(r16)
   2e85c:	20004e26 	beq	r4,zero,2e998 <__sflush_r+0x1fc>
   2e860:	21400760 	cmpeqi	r5,r4,29
   2e864:	2800021e 	bne	r5,zero,2e870 <__sflush_r+0xd4>
   2e868:	210005a0 	cmpeqi	r4,r4,22
   2e86c:	20002c26 	beq	r4,zero,2e920 <__sflush_r+0x184>
   2e870:	80800417 	ldw	r2,16(r16)
   2e874:	18fdffcc 	andi	r3,r3,63487
   2e878:	80c0030d 	sth	r3,12(r16)
   2e87c:	80000115 	stw	zero,4(r16)
   2e880:	80800015 	stw	r2,0(r16)
   2e884:	81400c17 	ldw	r5,48(r16)
   2e888:	9c400015 	stw	r17,0(r19)
   2e88c:	28000526 	beq	r5,zero,2e8a4 <__sflush_r+0x108>
   2e890:	80801004 	addi	r2,r16,64
   2e894:	28800226 	beq	r5,r2,2e8a0 <__sflush_r+0x104>
   2e898:	9809883a 	mov	r4,r19
   2e89c:	002ef700 	call	2ef70 <_free_r>
   2e8a0:	80000c15 	stw	zero,48(r16)
   2e8a4:	0005883a 	mov	r2,zero
   2e8a8:	dfc00417 	ldw	ra,16(sp)
   2e8ac:	dcc00317 	ldw	r19,12(sp)
   2e8b0:	dc800217 	ldw	r18,8(sp)
   2e8b4:	dc400117 	ldw	r17,4(sp)
   2e8b8:	dc000017 	ldw	r16,0(sp)
   2e8bc:	dec00504 	addi	sp,sp,20
   2e8c0:	f800283a 	ret
   2e8c4:	2c800417 	ldw	r18,16(r5)
   2e8c8:	903ff626 	beq	r18,zero,2e8a4 <__sflush_r+0x108>
   2e8cc:	2c400017 	ldw	r17,0(r5)
   2e8d0:	108000cc 	andi	r2,r2,3
   2e8d4:	2c800015 	stw	r18,0(r5)
   2e8d8:	8ca3c83a 	sub	r17,r17,r18
   2e8dc:	1000161e 	bne	r2,zero,2e938 <__sflush_r+0x19c>
   2e8e0:	28800517 	ldw	r2,20(r5)
   2e8e4:	80800215 	stw	r2,8(r16)
   2e8e8:	04400316 	blt	zero,r17,2e8f8 <__sflush_r+0x15c>
   2e8ec:	003fed06 	br	2e8a4 <__sflush_r+0x108>
   2e8f0:	90a5883a 	add	r18,r18,r2
   2e8f4:	047feb0e 	bge	zero,r17,2e8a4 <__sflush_r+0x108>
   2e8f8:	80800917 	ldw	r2,36(r16)
   2e8fc:	81400717 	ldw	r5,28(r16)
   2e900:	880f883a 	mov	r7,r17
   2e904:	900d883a 	mov	r6,r18
   2e908:	9809883a 	mov	r4,r19
   2e90c:	103ee83a 	callr	r2
   2e910:	88a3c83a 	sub	r17,r17,r2
   2e914:	00bff616 	blt	zero,r2,2e8f0 <__sflush_r+0x154>
   2e918:	80c0030b 	ldhu	r3,12(r16)
   2e91c:	00bfffc4 	movi	r2,-1
   2e920:	18c01014 	ori	r3,r3,64
   2e924:	80c0030d 	sth	r3,12(r16)
   2e928:	003fdf06 	br	2e8a8 <__sflush_r+0x10c>
   2e92c:	28c00f17 	ldw	r3,60(r5)
   2e930:	00ffa916 	blt	zero,r3,2e7d8 <__sflush_r+0x3c>
   2e934:	003fdb06 	br	2e8a4 <__sflush_r+0x108>
   2e938:	0005883a 	mov	r2,zero
   2e93c:	003fe906 	br	2e8e4 <__sflush_r+0x148>
   2e940:	80801417 	ldw	r2,80(r16)
   2e944:	003fb506 	br	2e81c <__sflush_r+0x80>
   2e948:	80c0030b 	ldhu	r3,12(r16)
   2e94c:	81000417 	ldw	r4,16(r16)
   2e950:	80000115 	stw	zero,4(r16)
   2e954:	197dffcc 	andi	r5,r3,63487
   2e958:	8140030d 	sth	r5,12(r16)
   2e95c:	81000015 	stw	r4,0(r16)
   2e960:	18c4000c 	andi	r3,r3,4096
   2e964:	183fc726 	beq	r3,zero,2e884 <__sflush_r+0xe8>
   2e968:	80801415 	stw	r2,80(r16)
   2e96c:	003fc506 	br	2e884 <__sflush_r+0xe8>
   2e970:	98c00017 	ldw	r3,0(r19)
   2e974:	183fa626 	beq	r3,zero,2e810 <__sflush_r+0x74>
   2e978:	19000760 	cmpeqi	r4,r3,29
   2e97c:	20000e1e 	bne	r4,zero,2e9b8 <__sflush_r+0x21c>
   2e980:	18c00598 	cmpnei	r3,r3,22
   2e984:	18000c26 	beq	r3,zero,2e9b8 <__sflush_r+0x21c>
   2e988:	80c0030b 	ldhu	r3,12(r16)
   2e98c:	18c01014 	ori	r3,r3,64
   2e990:	80c0030d 	sth	r3,12(r16)
   2e994:	003fc406 	br	2e8a8 <__sflush_r+0x10c>
   2e998:	81000417 	ldw	r4,16(r16)
   2e99c:	197dffcc 	andi	r5,r3,63487
   2e9a0:	8140030d 	sth	r5,12(r16)
   2e9a4:	80000115 	stw	zero,4(r16)
   2e9a8:	81000015 	stw	r4,0(r16)
   2e9ac:	18c4000c 	andi	r3,r3,4096
   2e9b0:	183fb426 	beq	r3,zero,2e884 <__sflush_r+0xe8>
   2e9b4:	003fec06 	br	2e968 <__sflush_r+0x1cc>
   2e9b8:	9c400015 	stw	r17,0(r19)
   2e9bc:	0005883a 	mov	r2,zero
   2e9c0:	003fb906 	br	2e8a8 <__sflush_r+0x10c>

0002e9c4 <_fflush_r>:
   2e9c4:	defffd04 	addi	sp,sp,-12
   2e9c8:	dc000115 	stw	r16,4(sp)
   2e9cc:	dfc00215 	stw	ra,8(sp)
   2e9d0:	2021883a 	mov	r16,r4
   2e9d4:	20000226 	beq	r4,zero,2e9e0 <_fflush_r+0x1c>
   2e9d8:	20800e17 	ldw	r2,56(r4)
   2e9dc:	10000726 	beq	r2,zero,2e9fc <_fflush_r+0x38>
   2e9e0:	2880030f 	ldh	r2,12(r5)
   2e9e4:	10000a1e 	bne	r2,zero,2ea10 <_fflush_r+0x4c>
   2e9e8:	0005883a 	mov	r2,zero
   2e9ec:	dfc00217 	ldw	ra,8(sp)
   2e9f0:	dc000117 	ldw	r16,4(sp)
   2e9f4:	dec00304 	addi	sp,sp,12
   2e9f8:	f800283a 	ret
   2e9fc:	d9400015 	stw	r5,0(sp)
   2ea00:	002ee0c0 	call	2ee0c <__sinit>
   2ea04:	d9400017 	ldw	r5,0(sp)
   2ea08:	2880030f 	ldh	r2,12(r5)
   2ea0c:	103ff626 	beq	r2,zero,2e9e8 <_fflush_r+0x24>
   2ea10:	8009883a 	mov	r4,r16
   2ea14:	dfc00217 	ldw	ra,8(sp)
   2ea18:	dc000117 	ldw	r16,4(sp)
   2ea1c:	dec00304 	addi	sp,sp,12
   2ea20:	002e79c1 	jmpi	2e79c <__sflush_r>

0002ea24 <fflush>:
   2ea24:	20001726 	beq	r4,zero,2ea84 <fflush+0x60>
   2ea28:	00800134 	movhi	r2,4
   2ea2c:	200b883a 	mov	r5,r4
   2ea30:	112b2417 	ldw	r4,-21360(r2)
   2ea34:	20000226 	beq	r4,zero,2ea40 <fflush+0x1c>
   2ea38:	20800e17 	ldw	r2,56(r4)
   2ea3c:	10000526 	beq	r2,zero,2ea54 <fflush+0x30>
   2ea40:	2880030f 	ldh	r2,12(r5)
   2ea44:	1000021e 	bne	r2,zero,2ea50 <fflush+0x2c>
   2ea48:	0005883a 	mov	r2,zero
   2ea4c:	f800283a 	ret
   2ea50:	002e79c1 	jmpi	2e79c <__sflush_r>
   2ea54:	defffd04 	addi	sp,sp,-12
   2ea58:	d9400115 	stw	r5,4(sp)
   2ea5c:	d9000015 	stw	r4,0(sp)
   2ea60:	dfc00215 	stw	ra,8(sp)
   2ea64:	002ee0c0 	call	2ee0c <__sinit>
   2ea68:	d9400117 	ldw	r5,4(sp)
   2ea6c:	d9000017 	ldw	r4,0(sp)
   2ea70:	2880030f 	ldh	r2,12(r5)
   2ea74:	10000826 	beq	r2,zero,2ea98 <fflush+0x74>
   2ea78:	dfc00217 	ldw	ra,8(sp)
   2ea7c:	dec00304 	addi	sp,sp,12
   2ea80:	002e79c1 	jmpi	2e79c <__sflush_r>
   2ea84:	00800134 	movhi	r2,4
   2ea88:	112b2317 	ldw	r4,-21364(r2)
   2ea8c:	014000f4 	movhi	r5,3
   2ea90:	297a7104 	addi	r5,r5,-5692
   2ea94:	002f7cc1 	jmpi	2f7cc <_fwalk_reent>
   2ea98:	0005883a 	mov	r2,zero
   2ea9c:	dfc00217 	ldw	ra,8(sp)
   2eaa0:	dec00304 	addi	sp,sp,12
   2eaa4:	f800283a 	ret

0002eaa8 <__fp_lock>:
   2eaa8:	0005883a 	mov	r2,zero
   2eaac:	f800283a 	ret

0002eab0 <_cleanup_r>:
   2eab0:	014000f4 	movhi	r5,3
   2eab4:	294ea104 	addi	r5,r5,14980
   2eab8:	002f7cc1 	jmpi	2f7cc <_fwalk_reent>

0002eabc <__fp_unlock>:
   2eabc:	0005883a 	mov	r2,zero
   2eac0:	f800283a 	ret

0002eac4 <__sinit.part.0>:
   2eac4:	00c000f4 	movhi	r3,3
   2eac8:	20800117 	ldw	r2,4(r4)
   2eacc:	18faac04 	addi	r3,r3,-5456
   2ead0:	20c00f15 	stw	r3,60(r4)
   2ead4:	2140bb04 	addi	r5,r4,748
   2ead8:	00c000c4 	movi	r3,3
   2eadc:	20c0b915 	stw	r3,740(r4)
   2eae0:	2140ba15 	stw	r5,744(r4)
   2eae4:	2000b815 	stw	zero,736(r4)
   2eae8:	10001705 	stb	zero,92(r2)
   2eaec:	10001745 	stb	zero,93(r2)
   2eaf0:	10001785 	stb	zero,94(r2)
   2eaf4:	100017c5 	stb	zero,95(r2)
   2eaf8:	10001805 	stb	zero,96(r2)
   2eafc:	10001845 	stb	zero,97(r2)
   2eb00:	10001885 	stb	zero,98(r2)
   2eb04:	100018c5 	stb	zero,99(r2)
   2eb08:	00c00104 	movi	r3,4
   2eb0c:	10c00315 	stw	r3,12(r2)
   2eb10:	020000f4 	movhi	r8,3
   2eb14:	20c00217 	ldw	r3,8(r4)
   2eb18:	01c000f4 	movhi	r7,3
   2eb1c:	018000f4 	movhi	r6,3
   2eb20:	014000f4 	movhi	r5,3
   2eb24:	42080004 	addi	r8,r8,8192
   2eb28:	39c81704 	addi	r7,r7,8284
   2eb2c:	31883704 	addi	r6,r6,8412
   2eb30:	29484e04 	addi	r5,r5,8504
   2eb34:	02400074 	movhi	r9,1
   2eb38:	10001915 	stw	zero,100(r2)
   2eb3c:	10000015 	stw	zero,0(r2)
   2eb40:	10000115 	stw	zero,4(r2)
   2eb44:	10000215 	stw	zero,8(r2)
   2eb48:	10000415 	stw	zero,16(r2)
   2eb4c:	10000515 	stw	zero,20(r2)
   2eb50:	10000615 	stw	zero,24(r2)
   2eb54:	10800715 	stw	r2,28(r2)
   2eb58:	12000815 	stw	r8,32(r2)
   2eb5c:	11c00915 	stw	r7,36(r2)
   2eb60:	11800a15 	stw	r6,40(r2)
   2eb64:	11400b15 	stw	r5,44(r2)
   2eb68:	4a400284 	addi	r9,r9,10
   2eb6c:	1a400315 	stw	r9,12(r3)
   2eb70:	18001915 	stw	zero,100(r3)
   2eb74:	18000015 	stw	zero,0(r3)
   2eb78:	18000115 	stw	zero,4(r3)
   2eb7c:	18000215 	stw	zero,8(r3)
   2eb80:	18000415 	stw	zero,16(r3)
   2eb84:	18001705 	stb	zero,92(r3)
   2eb88:	18001745 	stb	zero,93(r3)
   2eb8c:	18001785 	stb	zero,94(r3)
   2eb90:	180017c5 	stb	zero,95(r3)
   2eb94:	18001805 	stb	zero,96(r3)
   2eb98:	18001845 	stb	zero,97(r3)
   2eb9c:	18001885 	stb	zero,98(r3)
   2eba0:	180018c5 	stb	zero,99(r3)
   2eba4:	20800317 	ldw	r2,12(r4)
   2eba8:	024000b4 	movhi	r9,2
   2ebac:	18000515 	stw	zero,20(r3)
   2ebb0:	18000615 	stw	zero,24(r3)
   2ebb4:	18c00715 	stw	r3,28(r3)
   2ebb8:	1a000815 	stw	r8,32(r3)
   2ebbc:	19c00915 	stw	r7,36(r3)
   2ebc0:	19800a15 	stw	r6,40(r3)
   2ebc4:	19400b15 	stw	r5,44(r3)
   2ebc8:	4a400484 	addi	r9,r9,18
   2ebcc:	10001915 	stw	zero,100(r2)
   2ebd0:	10000015 	stw	zero,0(r2)
   2ebd4:	10000115 	stw	zero,4(r2)
   2ebd8:	10000215 	stw	zero,8(r2)
   2ebdc:	12400315 	stw	r9,12(r2)
   2ebe0:	10000415 	stw	zero,16(r2)
   2ebe4:	10000515 	stw	zero,20(r2)
   2ebe8:	10000615 	stw	zero,24(r2)
   2ebec:	10001705 	stb	zero,92(r2)
   2ebf0:	10001745 	stb	zero,93(r2)
   2ebf4:	10001785 	stb	zero,94(r2)
   2ebf8:	100017c5 	stb	zero,95(r2)
   2ebfc:	10001805 	stb	zero,96(r2)
   2ec00:	10001845 	stb	zero,97(r2)
   2ec04:	10001885 	stb	zero,98(r2)
   2ec08:	100018c5 	stb	zero,99(r2)
   2ec0c:	10800715 	stw	r2,28(r2)
   2ec10:	12000815 	stw	r8,32(r2)
   2ec14:	11c00915 	stw	r7,36(r2)
   2ec18:	11800a15 	stw	r6,40(r2)
   2ec1c:	11400b15 	stw	r5,44(r2)
   2ec20:	00800044 	movi	r2,1
   2ec24:	20800e15 	stw	r2,56(r4)
   2ec28:	f800283a 	ret

0002ec2c <__sfmoreglue>:
   2ec2c:	defffc04 	addi	sp,sp,-16
   2ec30:	dc800215 	stw	r18,8(sp)
   2ec34:	2825883a 	mov	r18,r5
   2ec38:	dc000015 	stw	r16,0(sp)
   2ec3c:	01401a04 	movi	r5,104
   2ec40:	2021883a 	mov	r16,r4
   2ec44:	913fffc4 	addi	r4,r18,-1
   2ec48:	dfc00315 	stw	ra,12(sp)
   2ec4c:	dc400115 	stw	r17,4(sp)
   2ec50:	0026b4c0 	call	26b4c <__mulsi3>
   2ec54:	8009883a 	mov	r4,r16
   2ec58:	11401d04 	addi	r5,r2,116
   2ec5c:	1023883a 	mov	r17,r2
   2ec60:	002fadc0 	call	2fadc <_malloc_r>
   2ec64:	1021883a 	mov	r16,r2
   2ec68:	10000726 	beq	r2,zero,2ec88 <__sfmoreglue+0x5c>
   2ec6c:	11000304 	addi	r4,r2,12
   2ec70:	10000015 	stw	zero,0(r2)
   2ec74:	14800115 	stw	r18,4(r2)
   2ec78:	11000215 	stw	r4,8(r2)
   2ec7c:	89801a04 	addi	r6,r17,104
   2ec80:	000b883a 	mov	r5,zero
   2ec84:	00305b80 	call	305b8 <memset>
   2ec88:	8005883a 	mov	r2,r16
   2ec8c:	dfc00317 	ldw	ra,12(sp)
   2ec90:	dc800217 	ldw	r18,8(sp)
   2ec94:	dc400117 	ldw	r17,4(sp)
   2ec98:	dc000017 	ldw	r16,0(sp)
   2ec9c:	dec00404 	addi	sp,sp,16
   2eca0:	f800283a 	ret

0002eca4 <__sfp>:
   2eca4:	defffb04 	addi	sp,sp,-20
   2eca8:	00800134 	movhi	r2,4
   2ecac:	dc000015 	stw	r16,0(sp)
   2ecb0:	142b2317 	ldw	r16,-21364(r2)
   2ecb4:	dc400115 	stw	r17,4(sp)
   2ecb8:	dfc00415 	stw	ra,16(sp)
   2ecbc:	80800e17 	ldw	r2,56(r16)
   2ecc0:	dcc00315 	stw	r19,12(sp)
   2ecc4:	dc800215 	stw	r18,8(sp)
   2ecc8:	2023883a 	mov	r17,r4
   2eccc:	10003126 	beq	r2,zero,2ed94 <__sfp+0xf0>
   2ecd0:	8100ba17 	ldw	r4,744(r16)
   2ecd4:	8140b917 	ldw	r5,740(r16)
   2ecd8:	04c00104 	movi	r19,4
   2ecdc:	8400b804 	addi	r16,r16,736
   2ece0:	297fffc4 	addi	r5,r5,-1
   2ece4:	2800050e 	bge	r5,zero,2ecfc <__sfp+0x58>
   2ece8:	00002406 	br	2ed7c <__sfp+0xd8>
   2ecec:	297fffc4 	addi	r5,r5,-1
   2ecf0:	28bfffd8 	cmpnei	r2,r5,-1
   2ecf4:	21001a04 	addi	r4,r4,104
   2ecf8:	10002026 	beq	r2,zero,2ed7c <__sfp+0xd8>
   2ecfc:	2080030f 	ldh	r2,12(r4)
   2ed00:	103ffa1e 	bne	r2,zero,2ecec <__sfp+0x48>
   2ed04:	00bffff4 	movhi	r2,65535
   2ed08:	10800044 	addi	r2,r2,1
   2ed0c:	20001915 	stw	zero,100(r4)
   2ed10:	20000015 	stw	zero,0(r4)
   2ed14:	20000115 	stw	zero,4(r4)
   2ed18:	20000215 	stw	zero,8(r4)
   2ed1c:	20800315 	stw	r2,12(r4)
   2ed20:	20000415 	stw	zero,16(r4)
   2ed24:	20000515 	stw	zero,20(r4)
   2ed28:	20000615 	stw	zero,24(r4)
   2ed2c:	20001705 	stb	zero,92(r4)
   2ed30:	20001745 	stb	zero,93(r4)
   2ed34:	20001785 	stb	zero,94(r4)
   2ed38:	200017c5 	stb	zero,95(r4)
   2ed3c:	20001805 	stb	zero,96(r4)
   2ed40:	20001845 	stb	zero,97(r4)
   2ed44:	20001885 	stb	zero,98(r4)
   2ed48:	200018c5 	stb	zero,99(r4)
   2ed4c:	20000c15 	stw	zero,48(r4)
   2ed50:	20000d15 	stw	zero,52(r4)
   2ed54:	20001115 	stw	zero,68(r4)
   2ed58:	20001215 	stw	zero,72(r4)
   2ed5c:	2005883a 	mov	r2,r4
   2ed60:	dfc00417 	ldw	ra,16(sp)
   2ed64:	dcc00317 	ldw	r19,12(sp)
   2ed68:	dc800217 	ldw	r18,8(sp)
   2ed6c:	dc400117 	ldw	r17,4(sp)
   2ed70:	dc000017 	ldw	r16,0(sp)
   2ed74:	dec00504 	addi	sp,sp,20
   2ed78:	f800283a 	ret
   2ed7c:	80800017 	ldw	r2,0(r16)
   2ed80:	10000726 	beq	r2,zero,2eda0 <__sfp+0xfc>
   2ed84:	11000217 	ldw	r4,8(r2)
   2ed88:	11400117 	ldw	r5,4(r2)
   2ed8c:	1021883a 	mov	r16,r2
   2ed90:	003fd306 	br	2ece0 <__sfp+0x3c>
   2ed94:	8009883a 	mov	r4,r16
   2ed98:	002eac40 	call	2eac4 <__sinit.part.0>
   2ed9c:	003fcc06 	br	2ecd0 <__sfp+0x2c>
   2eda0:	01406b04 	movi	r5,428
   2eda4:	8809883a 	mov	r4,r17
   2eda8:	002fadc0 	call	2fadc <_malloc_r>
   2edac:	1025883a 	mov	r18,r2
   2edb0:	10000c26 	beq	r2,zero,2ede4 <__sfp+0x140>
   2edb4:	11000304 	addi	r4,r2,12
   2edb8:	11000215 	stw	r4,8(r2)
   2edbc:	000b883a 	mov	r5,zero
   2edc0:	10000015 	stw	zero,0(r2)
   2edc4:	14c00115 	stw	r19,4(r2)
   2edc8:	01806804 	movi	r6,416
   2edcc:	00305b80 	call	305b8 <memset>
   2edd0:	1009883a 	mov	r4,r2
   2edd4:	84800015 	stw	r18,0(r16)
   2edd8:	014000c4 	movi	r5,3
   2eddc:	9021883a 	mov	r16,r18
   2ede0:	003fc606 	br	2ecfc <__sfp+0x58>
   2ede4:	80000015 	stw	zero,0(r16)
   2ede8:	00800304 	movi	r2,12
   2edec:	88800015 	stw	r2,0(r17)
   2edf0:	0009883a 	mov	r4,zero
   2edf4:	003fd906 	br	2ed5c <__sfp+0xb8>

0002edf8 <_cleanup>:
   2edf8:	00800134 	movhi	r2,4
   2edfc:	112b2317 	ldw	r4,-21364(r2)
   2ee00:	014000f4 	movhi	r5,3
   2ee04:	294ea104 	addi	r5,r5,14980
   2ee08:	002f7cc1 	jmpi	2f7cc <_fwalk_reent>

0002ee0c <__sinit>:
   2ee0c:	20800e17 	ldw	r2,56(r4)
   2ee10:	10000126 	beq	r2,zero,2ee18 <__sinit+0xc>
   2ee14:	f800283a 	ret
   2ee18:	002eac41 	jmpi	2eac4 <__sinit.part.0>

0002ee1c <__sfp_lock_acquire>:
   2ee1c:	f800283a 	ret

0002ee20 <__sfp_lock_release>:
   2ee20:	f800283a 	ret

0002ee24 <__sinit_lock_acquire>:
   2ee24:	f800283a 	ret

0002ee28 <__sinit_lock_release>:
   2ee28:	f800283a 	ret

0002ee2c <__fp_lock_all>:
   2ee2c:	00800134 	movhi	r2,4
   2ee30:	112b2417 	ldw	r4,-21360(r2)
   2ee34:	014000f4 	movhi	r5,3
   2ee38:	297aaa04 	addi	r5,r5,-5464
   2ee3c:	002f7341 	jmpi	2f734 <_fwalk>

0002ee40 <__fp_unlock_all>:
   2ee40:	00800134 	movhi	r2,4
   2ee44:	112b2417 	ldw	r4,-21360(r2)
   2ee48:	014000f4 	movhi	r5,3
   2ee4c:	297aaf04 	addi	r5,r5,-5444
   2ee50:	002f7341 	jmpi	2f734 <_fwalk>

0002ee54 <_malloc_trim_r>:
   2ee54:	defffb04 	addi	sp,sp,-20
   2ee58:	dcc00315 	stw	r19,12(sp)
   2ee5c:	04c00134 	movhi	r19,4
   2ee60:	dc800215 	stw	r18,8(sp)
   2ee64:	dc400115 	stw	r17,4(sp)
   2ee68:	dc000015 	stw	r16,0(sp)
   2ee6c:	dfc00415 	stw	ra,16(sp)
   2ee70:	2821883a 	mov	r16,r5
   2ee74:	9ce53004 	addi	r19,r19,-27456
   2ee78:	2025883a 	mov	r18,r4
   2ee7c:	0035d080 	call	35d08 <__malloc_lock>
   2ee80:	98800217 	ldw	r2,8(r19)
   2ee84:	14400117 	ldw	r17,4(r2)
   2ee88:	00bfff04 	movi	r2,-4
   2ee8c:	88a2703a 	and	r17,r17,r2
   2ee90:	8c21c83a 	sub	r16,r17,r16
   2ee94:	8403fbc4 	addi	r16,r16,4079
   2ee98:	8020d33a 	srli	r16,r16,12
   2ee9c:	843fffc4 	addi	r16,r16,-1
   2eea0:	8020933a 	slli	r16,r16,12
   2eea4:	80840008 	cmpgei	r2,r16,4096
   2eea8:	10000626 	beq	r2,zero,2eec4 <_malloc_trim_r+0x70>
   2eeac:	000b883a 	mov	r5,zero
   2eeb0:	9009883a 	mov	r4,r18
   2eeb4:	0031fa80 	call	31fa8 <_sbrk_r>
   2eeb8:	98c00217 	ldw	r3,8(r19)
   2eebc:	1c47883a 	add	r3,r3,r17
   2eec0:	10c00a26 	beq	r2,r3,2eeec <_malloc_trim_r+0x98>
   2eec4:	9009883a 	mov	r4,r18
   2eec8:	0035d2c0 	call	35d2c <__malloc_unlock>
   2eecc:	0005883a 	mov	r2,zero
   2eed0:	dfc00417 	ldw	ra,16(sp)
   2eed4:	dcc00317 	ldw	r19,12(sp)
   2eed8:	dc800217 	ldw	r18,8(sp)
   2eedc:	dc400117 	ldw	r17,4(sp)
   2eee0:	dc000017 	ldw	r16,0(sp)
   2eee4:	dec00504 	addi	sp,sp,20
   2eee8:	f800283a 	ret
   2eeec:	040bc83a 	sub	r5,zero,r16
   2eef0:	9009883a 	mov	r4,r18
   2eef4:	0031fa80 	call	31fa8 <_sbrk_r>
   2eef8:	10bfffd8 	cmpnei	r2,r2,-1
   2eefc:	10000d26 	beq	r2,zero,2ef34 <_malloc_trim_r+0xe0>
   2ef00:	00800134 	movhi	r2,4
   2ef04:	10b28217 	ldw	r2,-13816(r2)
   2ef08:	98c00217 	ldw	r3,8(r19)
   2ef0c:	8c23c83a 	sub	r17,r17,r16
   2ef10:	8c400054 	ori	r17,r17,1
   2ef14:	1421c83a 	sub	r16,r2,r16
   2ef18:	1c400115 	stw	r17,4(r3)
   2ef1c:	00800134 	movhi	r2,4
   2ef20:	9009883a 	mov	r4,r18
   2ef24:	14328215 	stw	r16,-13816(r2)
   2ef28:	0035d2c0 	call	35d2c <__malloc_unlock>
   2ef2c:	00800044 	movi	r2,1
   2ef30:	003fe706 	br	2eed0 <_malloc_trim_r+0x7c>
   2ef34:	000b883a 	mov	r5,zero
   2ef38:	9009883a 	mov	r4,r18
   2ef3c:	0031fa80 	call	31fa8 <_sbrk_r>
   2ef40:	99000217 	ldw	r4,8(r19)
   2ef44:	1107c83a 	sub	r3,r2,r4
   2ef48:	19400410 	cmplti	r5,r3,16
   2ef4c:	283fdd1e 	bne	r5,zero,2eec4 <_malloc_trim_r+0x70>
   2ef50:	01400134 	movhi	r5,4
   2ef54:	296b2517 	ldw	r5,-21356(r5)
   2ef58:	18c00054 	ori	r3,r3,1
   2ef5c:	20c00115 	stw	r3,4(r4)
   2ef60:	1145c83a 	sub	r2,r2,r5
   2ef64:	01400134 	movhi	r5,4
   2ef68:	28b28215 	stw	r2,-13816(r5)
   2ef6c:	003fd506 	br	2eec4 <_malloc_trim_r+0x70>

0002ef70 <_free_r>:
   2ef70:	28004f26 	beq	r5,zero,2f0b0 <_free_r+0x140>
   2ef74:	defffd04 	addi	sp,sp,-12
   2ef78:	dc400115 	stw	r17,4(sp)
   2ef7c:	dc000015 	stw	r16,0(sp)
   2ef80:	2023883a 	mov	r17,r4
   2ef84:	2821883a 	mov	r16,r5
   2ef88:	dfc00215 	stw	ra,8(sp)
   2ef8c:	0035d080 	call	35d08 <__malloc_lock>
   2ef90:	81ffff17 	ldw	r7,-4(r16)
   2ef94:	00bfff84 	movi	r2,-2
   2ef98:	80fffe04 	addi	r3,r16,-8
   2ef9c:	3884703a 	and	r2,r7,r2
   2efa0:	01000134 	movhi	r4,4
   2efa4:	188d883a 	add	r6,r3,r2
   2efa8:	21253004 	addi	r4,r4,-27456
   2efac:	31400117 	ldw	r5,4(r6)
   2efb0:	22000217 	ldw	r8,8(r4)
   2efb4:	027fff04 	movi	r9,-4
   2efb8:	2a4a703a 	and	r5,r5,r9
   2efbc:	41806426 	beq	r8,r6,2f150 <_free_r+0x1e0>
   2efc0:	31400115 	stw	r5,4(r6)
   2efc4:	39c0004c 	andi	r7,r7,1
   2efc8:	3151883a 	add	r8,r6,r5
   2efcc:	3800281e 	bne	r7,zero,2f070 <_free_r+0x100>
   2efd0:	82bffe17 	ldw	r10,-8(r16)
   2efd4:	42000117 	ldw	r8,4(r8)
   2efd8:	01c00134 	movhi	r7,4
   2efdc:	1a87c83a 	sub	r3,r3,r10
   2efe0:	1a400217 	ldw	r9,8(r3)
   2efe4:	39e53204 	addi	r7,r7,-27448
   2efe8:	1285883a 	add	r2,r2,r10
   2efec:	4200004c 	andi	r8,r8,1
   2eff0:	49c04c26 	beq	r9,r7,2f124 <_free_r+0x1b4>
   2eff4:	1a800317 	ldw	r10,12(r3)
   2eff8:	4a800315 	stw	r10,12(r9)
   2effc:	52400215 	stw	r9,8(r10)
   2f000:	40007126 	beq	r8,zero,2f1c8 <_free_r+0x258>
   2f004:	11400054 	ori	r5,r2,1
   2f008:	19400115 	stw	r5,4(r3)
   2f00c:	30800015 	stw	r2,0(r6)
   2f010:	11408028 	cmpgeui	r5,r2,512
   2f014:	28002c1e 	bne	r5,zero,2f0c8 <_free_r+0x158>
   2f018:	100ad0fa 	srli	r5,r2,3
   2f01c:	100cd17a 	srli	r6,r2,5
   2f020:	00800044 	movi	r2,1
   2f024:	29400044 	addi	r5,r5,1
   2f028:	280a90fa 	slli	r5,r5,3
   2f02c:	21c00117 	ldw	r7,4(r4)
   2f030:	1184983a 	sll	r2,r2,r6
   2f034:	214b883a 	add	r5,r4,r5
   2f038:	29800017 	ldw	r6,0(r5)
   2f03c:	11c4b03a 	or	r2,r2,r7
   2f040:	29fffe04 	addi	r7,r5,-8
   2f044:	19c00315 	stw	r7,12(r3)
   2f048:	19800215 	stw	r6,8(r3)
   2f04c:	20800115 	stw	r2,4(r4)
   2f050:	28c00015 	stw	r3,0(r5)
   2f054:	30c00315 	stw	r3,12(r6)
   2f058:	8809883a 	mov	r4,r17
   2f05c:	dfc00217 	ldw	ra,8(sp)
   2f060:	dc400117 	ldw	r17,4(sp)
   2f064:	dc000017 	ldw	r16,0(sp)
   2f068:	dec00304 	addi	sp,sp,12
   2f06c:	0035d2c1 	jmpi	35d2c <__malloc_unlock>
   2f070:	41c00117 	ldw	r7,4(r8)
   2f074:	39c0004c 	andi	r7,r7,1
   2f078:	38000e1e 	bne	r7,zero,2f0b4 <_free_r+0x144>
   2f07c:	01c00134 	movhi	r7,4
   2f080:	1145883a 	add	r2,r2,r5
   2f084:	39e53204 	addi	r7,r7,-27448
   2f088:	31400217 	ldw	r5,8(r6)
   2f08c:	12400054 	ori	r9,r2,1
   2f090:	1891883a 	add	r8,r3,r2
   2f094:	29c05226 	beq	r5,r7,2f1e0 <_free_r+0x270>
   2f098:	31800317 	ldw	r6,12(r6)
   2f09c:	29800315 	stw	r6,12(r5)
   2f0a0:	31400215 	stw	r5,8(r6)
   2f0a4:	1a400115 	stw	r9,4(r3)
   2f0a8:	40800015 	stw	r2,0(r8)
   2f0ac:	003fd806 	br	2f010 <_free_r+0xa0>
   2f0b0:	f800283a 	ret
   2f0b4:	11400054 	ori	r5,r2,1
   2f0b8:	817fff15 	stw	r5,-4(r16)
   2f0bc:	30800015 	stw	r2,0(r6)
   2f0c0:	11408028 	cmpgeui	r5,r2,512
   2f0c4:	283fd426 	beq	r5,zero,2f018 <_free_r+0xa8>
   2f0c8:	100ad27a 	srli	r5,r2,9
   2f0cc:	29800168 	cmpgeui	r6,r5,5
   2f0d0:	3000341e 	bne	r6,zero,2f1a4 <_free_r+0x234>
   2f0d4:	100ad1ba 	srli	r5,r2,6
   2f0d8:	29800e44 	addi	r6,r5,57
   2f0dc:	300c90fa 	slli	r6,r6,3
   2f0e0:	29c00e04 	addi	r7,r5,56
   2f0e4:	218d883a 	add	r6,r4,r6
   2f0e8:	31400017 	ldw	r5,0(r6)
   2f0ec:	31bffe04 	addi	r6,r6,-8
   2f0f0:	31404226 	beq	r6,r5,2f1fc <_free_r+0x28c>
   2f0f4:	01ffff04 	movi	r7,-4
   2f0f8:	29000117 	ldw	r4,4(r5)
   2f0fc:	21c8703a 	and	r4,r4,r7
   2f100:	1100022e 	bgeu	r2,r4,2f10c <_free_r+0x19c>
   2f104:	29400217 	ldw	r5,8(r5)
   2f108:	317ffb1e 	bne	r6,r5,2f0f8 <_free_r+0x188>
   2f10c:	29800317 	ldw	r6,12(r5)
   2f110:	19800315 	stw	r6,12(r3)
   2f114:	19400215 	stw	r5,8(r3)
   2f118:	30c00215 	stw	r3,8(r6)
   2f11c:	28c00315 	stw	r3,12(r5)
   2f120:	003fcd06 	br	2f058 <_free_r+0xe8>
   2f124:	40004d1e 	bne	r8,zero,2f25c <_free_r+0x2ec>
   2f128:	31000317 	ldw	r4,12(r6)
   2f12c:	31800217 	ldw	r6,8(r6)
   2f130:	2885883a 	add	r2,r5,r2
   2f134:	11400054 	ori	r5,r2,1
   2f138:	31000315 	stw	r4,12(r6)
   2f13c:	21800215 	stw	r6,8(r4)
   2f140:	19400115 	stw	r5,4(r3)
   2f144:	1887883a 	add	r3,r3,r2
   2f148:	18800015 	stw	r2,0(r3)
   2f14c:	003fc206 	br	2f058 <_free_r+0xe8>
   2f150:	39c0004c 	andi	r7,r7,1
   2f154:	1145883a 	add	r2,r2,r5
   2f158:	3800071e 	bne	r7,zero,2f178 <_free_r+0x208>
   2f15c:	81fffe17 	ldw	r7,-8(r16)
   2f160:	19c7c83a 	sub	r3,r3,r7
   2f164:	19400317 	ldw	r5,12(r3)
   2f168:	19800217 	ldw	r6,8(r3)
   2f16c:	11c5883a 	add	r2,r2,r7
   2f170:	31400315 	stw	r5,12(r6)
   2f174:	29800215 	stw	r6,8(r5)
   2f178:	01400134 	movhi	r5,4
   2f17c:	11800054 	ori	r6,r2,1
   2f180:	296b2617 	ldw	r5,-21352(r5)
   2f184:	19800115 	stw	r6,4(r3)
   2f188:	20c00215 	stw	r3,8(r4)
   2f18c:	117fb236 	bltu	r2,r5,2f058 <_free_r+0xe8>
   2f190:	00800134 	movhi	r2,4
   2f194:	11724517 	ldw	r5,-14060(r2)
   2f198:	8809883a 	mov	r4,r17
   2f19c:	002ee540 	call	2ee54 <_malloc_trim_r>
   2f1a0:	003fad06 	br	2f058 <_free_r+0xe8>
   2f1a4:	29800568 	cmpgeui	r6,r5,21
   2f1a8:	30000926 	beq	r6,zero,2f1d0 <_free_r+0x260>
   2f1ac:	29801568 	cmpgeui	r6,r5,85
   2f1b0:	3000191e 	bne	r6,zero,2f218 <_free_r+0x2a8>
   2f1b4:	100ad33a 	srli	r5,r2,12
   2f1b8:	29801bc4 	addi	r6,r5,111
   2f1bc:	300c90fa 	slli	r6,r6,3
   2f1c0:	29c01b84 	addi	r7,r5,110
   2f1c4:	003fc706 	br	2f0e4 <_free_r+0x174>
   2f1c8:	1145883a 	add	r2,r2,r5
   2f1cc:	003fae06 	br	2f088 <_free_r+0x118>
   2f1d0:	29801704 	addi	r6,r5,92
   2f1d4:	300c90fa 	slli	r6,r6,3
   2f1d8:	29c016c4 	addi	r7,r5,91
   2f1dc:	003fc106 	br	2f0e4 <_free_r+0x174>
   2f1e0:	20c00515 	stw	r3,20(r4)
   2f1e4:	20c00415 	stw	r3,16(r4)
   2f1e8:	19c00315 	stw	r7,12(r3)
   2f1ec:	19c00215 	stw	r7,8(r3)
   2f1f0:	1a400115 	stw	r9,4(r3)
   2f1f4:	40800015 	stw	r2,0(r8)
   2f1f8:	003f9706 	br	2f058 <_free_r+0xe8>
   2f1fc:	380fd0ba 	srai	r7,r7,2
   2f200:	00800044 	movi	r2,1
   2f204:	22000117 	ldw	r8,4(r4)
   2f208:	11ce983a 	sll	r7,r2,r7
   2f20c:	3a0eb03a 	or	r7,r7,r8
   2f210:	21c00115 	stw	r7,4(r4)
   2f214:	003fbe06 	br	2f110 <_free_r+0x1a0>
   2f218:	29805568 	cmpgeui	r6,r5,341
   2f21c:	3000051e 	bne	r6,zero,2f234 <_free_r+0x2c4>
   2f220:	100ad3fa 	srli	r5,r2,15
   2f224:	29801e04 	addi	r6,r5,120
   2f228:	300c90fa 	slli	r6,r6,3
   2f22c:	29c01dc4 	addi	r7,r5,119
   2f230:	003fac06 	br	2f0e4 <_free_r+0x174>
   2f234:	29415568 	cmpgeui	r5,r5,1365
   2f238:	2800051e 	bne	r5,zero,2f250 <_free_r+0x2e0>
   2f23c:	100ad4ba 	srli	r5,r2,18
   2f240:	29801f44 	addi	r6,r5,125
   2f244:	300c90fa 	slli	r6,r6,3
   2f248:	29c01f04 	addi	r7,r5,124
   2f24c:	003fa506 	br	2f0e4 <_free_r+0x174>
   2f250:	0180fe04 	movi	r6,1016
   2f254:	01c01f84 	movi	r7,126
   2f258:	003fa206 	br	2f0e4 <_free_r+0x174>
   2f25c:	11000054 	ori	r4,r2,1
   2f260:	19000115 	stw	r4,4(r3)
   2f264:	30800015 	stw	r2,0(r6)
   2f268:	003f7b06 	br	2f058 <_free_r+0xe8>

0002f26c <__sfvwrite_r>:
   2f26c:	30800217 	ldw	r2,8(r6)
   2f270:	1000a326 	beq	r2,zero,2f500 <__sfvwrite_r+0x294>
   2f274:	29c0030b 	ldhu	r7,12(r5)
   2f278:	defff404 	addi	sp,sp,-48
   2f27c:	ddc00915 	stw	r23,36(sp)
   2f280:	dd400715 	stw	r21,28(sp)
   2f284:	dc000215 	stw	r16,8(sp)
   2f288:	dfc00b15 	stw	ra,44(sp)
   2f28c:	df000a15 	stw	fp,40(sp)
   2f290:	dd800815 	stw	r22,32(sp)
   2f294:	dd000615 	stw	r20,24(sp)
   2f298:	dcc00515 	stw	r19,20(sp)
   2f29c:	dc800415 	stw	r18,16(sp)
   2f2a0:	dc400315 	stw	r17,12(sp)
   2f2a4:	3880020c 	andi	r2,r7,8
   2f2a8:	302f883a 	mov	r23,r6
   2f2ac:	202b883a 	mov	r21,r4
   2f2b0:	2821883a 	mov	r16,r5
   2f2b4:	10002226 	beq	r2,zero,2f340 <__sfvwrite_r+0xd4>
   2f2b8:	28800417 	ldw	r2,16(r5)
   2f2bc:	10002026 	beq	r2,zero,2f340 <__sfvwrite_r+0xd4>
   2f2c0:	3880008c 	andi	r2,r7,2
   2f2c4:	bc400017 	ldw	r17,0(r23)
   2f2c8:	10002526 	beq	r2,zero,2f360 <__sfvwrite_r+0xf4>
   2f2cc:	80800917 	ldw	r2,36(r16)
   2f2d0:	81400717 	ldw	r5,28(r16)
   2f2d4:	05200034 	movhi	r20,32768
   2f2d8:	0027883a 	mov	r19,zero
   2f2dc:	0025883a 	mov	r18,zero
   2f2e0:	a53f0004 	addi	r20,r20,-1024
   2f2e4:	980d883a 	mov	r6,r19
   2f2e8:	a809883a 	mov	r4,r21
   2f2ec:	90001026 	beq	r18,zero,2f330 <__sfvwrite_r+0xc4>
   2f2f0:	900f883a 	mov	r7,r18
   2f2f4:	a480012e 	bgeu	r20,r18,2f2fc <__sfvwrite_r+0x90>
   2f2f8:	a00f883a 	mov	r7,r20
   2f2fc:	103ee83a 	callr	r2
   2f300:	00807a0e 	bge	zero,r2,2f4ec <__sfvwrite_r+0x280>
   2f304:	b9000217 	ldw	r4,8(r23)
   2f308:	98a7883a 	add	r19,r19,r2
   2f30c:	90a5c83a 	sub	r18,r18,r2
   2f310:	2085c83a 	sub	r2,r4,r2
   2f314:	b8800215 	stw	r2,8(r23)
   2f318:	10006326 	beq	r2,zero,2f4a8 <__sfvwrite_r+0x23c>
   2f31c:	80800917 	ldw	r2,36(r16)
   2f320:	81400717 	ldw	r5,28(r16)
   2f324:	980d883a 	mov	r6,r19
   2f328:	a809883a 	mov	r4,r21
   2f32c:	903ff01e 	bne	r18,zero,2f2f0 <__sfvwrite_r+0x84>
   2f330:	8cc00017 	ldw	r19,0(r17)
   2f334:	8c800117 	ldw	r18,4(r17)
   2f338:	8c400204 	addi	r17,r17,8
   2f33c:	003fe906 	br	2f2e4 <__sfvwrite_r+0x78>
   2f340:	800b883a 	mov	r5,r16
   2f344:	a809883a 	mov	r4,r21
   2f348:	002ccd00 	call	2ccd0 <__swsetup_r>
   2f34c:	1000f71e 	bne	r2,zero,2f72c <__sfvwrite_r+0x4c0>
   2f350:	81c0030b 	ldhu	r7,12(r16)
   2f354:	bc400017 	ldw	r17,0(r23)
   2f358:	3880008c 	andi	r2,r7,2
   2f35c:	103fdb1e 	bne	r2,zero,2f2cc <__sfvwrite_r+0x60>
   2f360:	3880004c 	andi	r2,r7,1
   2f364:	84800217 	ldw	r18,8(r16)
   2f368:	82000017 	ldw	r8,0(r16)
   2f36c:	1000661e 	bne	r2,zero,2f508 <__sfvwrite_r+0x29c>
   2f370:	00a00034 	movhi	r2,32768
   2f374:	10bfff84 	addi	r2,r2,-2
   2f378:	00e00034 	movhi	r3,32768
   2f37c:	d8800015 	stw	r2,0(sp)
   2f380:	18bfffc4 	addi	r2,r3,-1
   2f384:	0039883a 	mov	fp,zero
   2f388:	0027883a 	mov	r19,zero
   2f38c:	d8800115 	stw	r2,4(sp)
   2f390:	98004126 	beq	r19,zero,2f498 <__sfvwrite_r+0x22c>
   2f394:	3880800c 	andi	r2,r7,512
   2f398:	10009726 	beq	r2,zero,2f5f8 <__sfvwrite_r+0x38c>
   2f39c:	902d883a 	mov	r22,r18
   2f3a0:	9c80be36 	bltu	r19,r18,2f69c <__sfvwrite_r+0x430>
   2f3a4:	3881200c 	andi	r2,r7,1152
   2f3a8:	10002626 	beq	r2,zero,2f444 <__sfvwrite_r+0x1d8>
   2f3ac:	81800517 	ldw	r6,20(r16)
   2f3b0:	81400417 	ldw	r5,16(r16)
   2f3b4:	98800044 	addi	r2,r19,1
   2f3b8:	3189883a 	add	r4,r6,r6
   2f3bc:	2189883a 	add	r4,r4,r6
   2f3c0:	2028d7fa 	srli	r20,r4,31
   2f3c4:	4165c83a 	sub	r18,r8,r5
   2f3c8:	1485883a 	add	r2,r2,r18
   2f3cc:	a109883a 	add	r4,r20,r4
   2f3d0:	2029d07a 	srai	r20,r4,1
   2f3d4:	a00d883a 	mov	r6,r20
   2f3d8:	a080022e 	bgeu	r20,r2,2f3e4 <__sfvwrite_r+0x178>
   2f3dc:	1029883a 	mov	r20,r2
   2f3e0:	100d883a 	mov	r6,r2
   2f3e4:	39c1000c 	andi	r7,r7,1024
   2f3e8:	3800c026 	beq	r7,zero,2f6ec <__sfvwrite_r+0x480>
   2f3ec:	a809883a 	mov	r4,r21
   2f3f0:	300b883a 	mov	r5,r6
   2f3f4:	002fadc0 	call	2fadc <_malloc_r>
   2f3f8:	1009883a 	mov	r4,r2
   2f3fc:	1000c726 	beq	r2,zero,2f71c <__sfvwrite_r+0x4b0>
   2f400:	81400417 	ldw	r5,16(r16)
   2f404:	900d883a 	mov	r6,r18
   2f408:	003038c0 	call	3038c <memcpy>
   2f40c:	1009883a 	mov	r4,r2
   2f410:	8080030b 	ldhu	r2,12(r16)
   2f414:	00fedfc4 	movi	r3,-1153
   2f418:	10c4703a 	and	r2,r2,r3
   2f41c:	10802014 	ori	r2,r2,128
   2f420:	8080030d 	sth	r2,12(r16)
   2f424:	2491883a 	add	r8,r4,r18
   2f428:	a485c83a 	sub	r2,r20,r18
   2f42c:	81000415 	stw	r4,16(r16)
   2f430:	82000015 	stw	r8,0(r16)
   2f434:	85000515 	stw	r20,20(r16)
   2f438:	9825883a 	mov	r18,r19
   2f43c:	80800215 	stw	r2,8(r16)
   2f440:	982d883a 	mov	r22,r19
   2f444:	4009883a 	mov	r4,r8
   2f448:	b00d883a 	mov	r6,r22
   2f44c:	e00b883a 	mov	r5,fp
   2f450:	003048c0 	call	3048c <memmove>
   2f454:	81000217 	ldw	r4,8(r16)
   2f458:	80800017 	ldw	r2,0(r16)
   2f45c:	9829883a 	mov	r20,r19
   2f460:	24a5c83a 	sub	r18,r4,r18
   2f464:	1585883a 	add	r2,r2,r22
   2f468:	84800215 	stw	r18,8(r16)
   2f46c:	80800015 	stw	r2,0(r16)
   2f470:	0027883a 	mov	r19,zero
   2f474:	b8800217 	ldw	r2,8(r23)
   2f478:	e539883a 	add	fp,fp,r20
   2f47c:	1529c83a 	sub	r20,r2,r20
   2f480:	bd000215 	stw	r20,8(r23)
   2f484:	a0000826 	beq	r20,zero,2f4a8 <__sfvwrite_r+0x23c>
   2f488:	81c0030b 	ldhu	r7,12(r16)
   2f48c:	84800217 	ldw	r18,8(r16)
   2f490:	82000017 	ldw	r8,0(r16)
   2f494:	983fbf1e 	bne	r19,zero,2f394 <__sfvwrite_r+0x128>
   2f498:	8f000017 	ldw	fp,0(r17)
   2f49c:	8cc00117 	ldw	r19,4(r17)
   2f4a0:	8c400204 	addi	r17,r17,8
   2f4a4:	003fba06 	br	2f390 <__sfvwrite_r+0x124>
   2f4a8:	0005883a 	mov	r2,zero
   2f4ac:	dfc00b17 	ldw	ra,44(sp)
   2f4b0:	df000a17 	ldw	fp,40(sp)
   2f4b4:	ddc00917 	ldw	r23,36(sp)
   2f4b8:	dd800817 	ldw	r22,32(sp)
   2f4bc:	dd400717 	ldw	r21,28(sp)
   2f4c0:	dd000617 	ldw	r20,24(sp)
   2f4c4:	dcc00517 	ldw	r19,20(sp)
   2f4c8:	dc800417 	ldw	r18,16(sp)
   2f4cc:	dc400317 	ldw	r17,12(sp)
   2f4d0:	dc000217 	ldw	r16,8(sp)
   2f4d4:	dec00c04 	addi	sp,sp,48
   2f4d8:	f800283a 	ret
   2f4dc:	800b883a 	mov	r5,r16
   2f4e0:	a809883a 	mov	r4,r21
   2f4e4:	002e9c40 	call	2e9c4 <_fflush_r>
   2f4e8:	10002026 	beq	r2,zero,2f56c <__sfvwrite_r+0x300>
   2f4ec:	8080030b 	ldhu	r2,12(r16)
   2f4f0:	10801014 	ori	r2,r2,64
   2f4f4:	8080030d 	sth	r2,12(r16)
   2f4f8:	00bfffc4 	movi	r2,-1
   2f4fc:	003feb06 	br	2f4ac <__sfvwrite_r+0x240>
   2f500:	0005883a 	mov	r2,zero
   2f504:	f800283a 	ret
   2f508:	002d883a 	mov	r22,zero
   2f50c:	0027883a 	mov	r19,zero
   2f510:	0005883a 	mov	r2,zero
   2f514:	0039883a 	mov	fp,zero
   2f518:	b0001d26 	beq	r22,zero,2f590 <__sfvwrite_r+0x324>
   2f51c:	10002026 	beq	r2,zero,2f5a0 <__sfvwrite_r+0x334>
   2f520:	9829883a 	mov	r20,r19
   2f524:	b500012e 	bgeu	r22,r20,2f52c <__sfvwrite_r+0x2c0>
   2f528:	b029883a 	mov	r20,r22
   2f52c:	80800417 	ldw	r2,16(r16)
   2f530:	81c00517 	ldw	r7,20(r16)
   2f534:	1200022e 	bgeu	r2,r8,2f540 <__sfvwrite_r+0x2d4>
   2f538:	3ca5883a 	add	r18,r7,r18
   2f53c:	95002216 	blt	r18,r20,2f5c8 <__sfvwrite_r+0x35c>
   2f540:	a1c05916 	blt	r20,r7,2f6a8 <__sfvwrite_r+0x43c>
   2f544:	80800917 	ldw	r2,36(r16)
   2f548:	81400717 	ldw	r5,28(r16)
   2f54c:	e00d883a 	mov	r6,fp
   2f550:	a809883a 	mov	r4,r21
   2f554:	103ee83a 	callr	r2
   2f558:	1025883a 	mov	r18,r2
   2f55c:	00bfe30e 	bge	zero,r2,2f4ec <__sfvwrite_r+0x280>
   2f560:	9ca7c83a 	sub	r19,r19,r18
   2f564:	983fdd26 	beq	r19,zero,2f4dc <__sfvwrite_r+0x270>
   2f568:	00800044 	movi	r2,1
   2f56c:	b9800217 	ldw	r6,8(r23)
   2f570:	e4b9883a 	add	fp,fp,r18
   2f574:	b4adc83a 	sub	r22,r22,r18
   2f578:	34a5c83a 	sub	r18,r6,r18
   2f57c:	bc800215 	stw	r18,8(r23)
   2f580:	903fc926 	beq	r18,zero,2f4a8 <__sfvwrite_r+0x23c>
   2f584:	84800217 	ldw	r18,8(r16)
   2f588:	82000017 	ldw	r8,0(r16)
   2f58c:	b03fe31e 	bne	r22,zero,2f51c <__sfvwrite_r+0x2b0>
   2f590:	8d800117 	ldw	r22,4(r17)
   2f594:	8f000017 	ldw	fp,0(r17)
   2f598:	8c400204 	addi	r17,r17,8
   2f59c:	b03ffc26 	beq	r22,zero,2f590 <__sfvwrite_r+0x324>
   2f5a0:	b00d883a 	mov	r6,r22
   2f5a4:	01400284 	movi	r5,10
   2f5a8:	e009883a 	mov	r4,fp
   2f5ac:	da000015 	stw	r8,0(sp)
   2f5b0:	00302bc0 	call	302bc <memchr>
   2f5b4:	da000017 	ldw	r8,0(sp)
   2f5b8:	10004926 	beq	r2,zero,2f6e0 <__sfvwrite_r+0x474>
   2f5bc:	10800044 	addi	r2,r2,1
   2f5c0:	1727c83a 	sub	r19,r2,fp
   2f5c4:	003fd606 	br	2f520 <__sfvwrite_r+0x2b4>
   2f5c8:	e00b883a 	mov	r5,fp
   2f5cc:	4009883a 	mov	r4,r8
   2f5d0:	900d883a 	mov	r6,r18
   2f5d4:	003048c0 	call	3048c <memmove>
   2f5d8:	80800017 	ldw	r2,0(r16)
   2f5dc:	800b883a 	mov	r5,r16
   2f5e0:	a809883a 	mov	r4,r21
   2f5e4:	1485883a 	add	r2,r2,r18
   2f5e8:	80800015 	stw	r2,0(r16)
   2f5ec:	002e9c40 	call	2e9c4 <_fflush_r>
   2f5f0:	103fdb26 	beq	r2,zero,2f560 <__sfvwrite_r+0x2f4>
   2f5f4:	003fbd06 	br	2f4ec <__sfvwrite_r+0x280>
   2f5f8:	80800417 	ldw	r2,16(r16)
   2f5fc:	12001436 	bltu	r2,r8,2f650 <__sfvwrite_r+0x3e4>
   2f600:	85000517 	ldw	r20,20(r16)
   2f604:	9d001236 	bltu	r19,r20,2f650 <__sfvwrite_r+0x3e4>
   2f608:	d8800017 	ldw	r2,0(sp)
   2f60c:	14c0322e 	bgeu	r2,r19,2f6d8 <__sfvwrite_r+0x46c>
   2f610:	d9000117 	ldw	r4,4(sp)
   2f614:	a00b883a 	mov	r5,r20
   2f618:	00269980 	call	26998 <__divsi3>
   2f61c:	a00b883a 	mov	r5,r20
   2f620:	1009883a 	mov	r4,r2
   2f624:	0026b4c0 	call	26b4c <__mulsi3>
   2f628:	82000917 	ldw	r8,36(r16)
   2f62c:	81400717 	ldw	r5,28(r16)
   2f630:	100f883a 	mov	r7,r2
   2f634:	e00d883a 	mov	r6,fp
   2f638:	a809883a 	mov	r4,r21
   2f63c:	403ee83a 	callr	r8
   2f640:	1029883a 	mov	r20,r2
   2f644:	00bfa90e 	bge	zero,r2,2f4ec <__sfvwrite_r+0x280>
   2f648:	9d27c83a 	sub	r19,r19,r20
   2f64c:	003f8906 	br	2f474 <__sfvwrite_r+0x208>
   2f650:	9029883a 	mov	r20,r18
   2f654:	9c80012e 	bgeu	r19,r18,2f65c <__sfvwrite_r+0x3f0>
   2f658:	9829883a 	mov	r20,r19
   2f65c:	4009883a 	mov	r4,r8
   2f660:	a00d883a 	mov	r6,r20
   2f664:	e00b883a 	mov	r5,fp
   2f668:	003048c0 	call	3048c <memmove>
   2f66c:	80800217 	ldw	r2,8(r16)
   2f670:	81000017 	ldw	r4,0(r16)
   2f674:	1505c83a 	sub	r2,r2,r20
   2f678:	2509883a 	add	r4,r4,r20
   2f67c:	80800215 	stw	r2,8(r16)
   2f680:	81000015 	stw	r4,0(r16)
   2f684:	103ff01e 	bne	r2,zero,2f648 <__sfvwrite_r+0x3dc>
   2f688:	800b883a 	mov	r5,r16
   2f68c:	a809883a 	mov	r4,r21
   2f690:	002e9c40 	call	2e9c4 <_fflush_r>
   2f694:	103fec26 	beq	r2,zero,2f648 <__sfvwrite_r+0x3dc>
   2f698:	003f9406 	br	2f4ec <__sfvwrite_r+0x280>
   2f69c:	9825883a 	mov	r18,r19
   2f6a0:	982d883a 	mov	r22,r19
   2f6a4:	003f6706 	br	2f444 <__sfvwrite_r+0x1d8>
   2f6a8:	4009883a 	mov	r4,r8
   2f6ac:	a00d883a 	mov	r6,r20
   2f6b0:	e00b883a 	mov	r5,fp
   2f6b4:	003048c0 	call	3048c <memmove>
   2f6b8:	81000217 	ldw	r4,8(r16)
   2f6bc:	80800017 	ldw	r2,0(r16)
   2f6c0:	a025883a 	mov	r18,r20
   2f6c4:	2509c83a 	sub	r4,r4,r20
   2f6c8:	1505883a 	add	r2,r2,r20
   2f6cc:	81000215 	stw	r4,8(r16)
   2f6d0:	80800015 	stw	r2,0(r16)
   2f6d4:	003fa206 	br	2f560 <__sfvwrite_r+0x2f4>
   2f6d8:	9809883a 	mov	r4,r19
   2f6dc:	003fcd06 	br	2f614 <__sfvwrite_r+0x3a8>
   2f6e0:	b5000044 	addi	r20,r22,1
   2f6e4:	a027883a 	mov	r19,r20
   2f6e8:	003f8e06 	br	2f524 <__sfvwrite_r+0x2b8>
   2f6ec:	a809883a 	mov	r4,r21
   2f6f0:	0031a440 	call	31a44 <_realloc_r>
   2f6f4:	1009883a 	mov	r4,r2
   2f6f8:	103f4a1e 	bne	r2,zero,2f424 <__sfvwrite_r+0x1b8>
   2f6fc:	81400417 	ldw	r5,16(r16)
   2f700:	a809883a 	mov	r4,r21
   2f704:	002ef700 	call	2ef70 <_free_r>
   2f708:	8080030b 	ldhu	r2,12(r16)
   2f70c:	00c00304 	movi	r3,12
   2f710:	a8c00015 	stw	r3,0(r21)
   2f714:	10bfdfcc 	andi	r2,r2,65407
   2f718:	003f7506 	br	2f4f0 <__sfvwrite_r+0x284>
   2f71c:	00c00304 	movi	r3,12
   2f720:	8080030b 	ldhu	r2,12(r16)
   2f724:	a8c00015 	stw	r3,0(r21)
   2f728:	003f7106 	br	2f4f0 <__sfvwrite_r+0x284>
   2f72c:	00bfffc4 	movi	r2,-1
   2f730:	003f5e06 	br	2f4ac <__sfvwrite_r+0x240>

0002f734 <_fwalk>:
   2f734:	defffa04 	addi	sp,sp,-24
   2f738:	dd000415 	stw	r20,16(sp)
   2f73c:	dcc00315 	stw	r19,12(sp)
   2f740:	dc800215 	stw	r18,8(sp)
   2f744:	dfc00515 	stw	ra,20(sp)
   2f748:	dc400115 	stw	r17,4(sp)
   2f74c:	dc000015 	stw	r16,0(sp)
   2f750:	2827883a 	mov	r19,r5
   2f754:	2480b804 	addi	r18,r4,736
   2f758:	0029883a 	mov	r20,zero
   2f75c:	94400117 	ldw	r17,4(r18)
   2f760:	94000217 	ldw	r16,8(r18)
   2f764:	8c7fffc4 	addi	r17,r17,-1
   2f768:	88000d16 	blt	r17,zero,2f7a0 <_fwalk+0x6c>
   2f76c:	8080030b 	ldhu	r2,12(r16)
   2f770:	8c7fffc4 	addi	r17,r17,-1
   2f774:	108000b0 	cmpltui	r2,r2,2
   2f778:	1000061e 	bne	r2,zero,2f794 <_fwalk+0x60>
   2f77c:	8080038f 	ldh	r2,14(r16)
   2f780:	8009883a 	mov	r4,r16
   2f784:	10bfffe0 	cmpeqi	r2,r2,-1
   2f788:	1000021e 	bne	r2,zero,2f794 <_fwalk+0x60>
   2f78c:	983ee83a 	callr	r19
   2f790:	a0a8b03a 	or	r20,r20,r2
   2f794:	88bfffd8 	cmpnei	r2,r17,-1
   2f798:	84001a04 	addi	r16,r16,104
   2f79c:	103ff31e 	bne	r2,zero,2f76c <_fwalk+0x38>
   2f7a0:	94800017 	ldw	r18,0(r18)
   2f7a4:	903fed1e 	bne	r18,zero,2f75c <_fwalk+0x28>
   2f7a8:	a005883a 	mov	r2,r20
   2f7ac:	dfc00517 	ldw	ra,20(sp)
   2f7b0:	dd000417 	ldw	r20,16(sp)
   2f7b4:	dcc00317 	ldw	r19,12(sp)
   2f7b8:	dc800217 	ldw	r18,8(sp)
   2f7bc:	dc400117 	ldw	r17,4(sp)
   2f7c0:	dc000017 	ldw	r16,0(sp)
   2f7c4:	dec00604 	addi	sp,sp,24
   2f7c8:	f800283a 	ret

0002f7cc <_fwalk_reent>:
   2f7cc:	defff904 	addi	sp,sp,-28
   2f7d0:	dd400515 	stw	r21,20(sp)
   2f7d4:	dd000415 	stw	r20,16(sp)
   2f7d8:	dcc00315 	stw	r19,12(sp)
   2f7dc:	dc800215 	stw	r18,8(sp)
   2f7e0:	dfc00615 	stw	ra,24(sp)
   2f7e4:	dc400115 	stw	r17,4(sp)
   2f7e8:	dc000015 	stw	r16,0(sp)
   2f7ec:	202b883a 	mov	r21,r4
   2f7f0:	2827883a 	mov	r19,r5
   2f7f4:	2480b804 	addi	r18,r4,736
   2f7f8:	0029883a 	mov	r20,zero
   2f7fc:	94400117 	ldw	r17,4(r18)
   2f800:	94000217 	ldw	r16,8(r18)
   2f804:	8c7fffc4 	addi	r17,r17,-1
   2f808:	88000e16 	blt	r17,zero,2f844 <_fwalk_reent+0x78>
   2f80c:	8080030b 	ldhu	r2,12(r16)
   2f810:	8c7fffc4 	addi	r17,r17,-1
   2f814:	108000b0 	cmpltui	r2,r2,2
   2f818:	1000071e 	bne	r2,zero,2f838 <_fwalk_reent+0x6c>
   2f81c:	8080038f 	ldh	r2,14(r16)
   2f820:	800b883a 	mov	r5,r16
   2f824:	a809883a 	mov	r4,r21
   2f828:	10bfffe0 	cmpeqi	r2,r2,-1
   2f82c:	1000021e 	bne	r2,zero,2f838 <_fwalk_reent+0x6c>
   2f830:	983ee83a 	callr	r19
   2f834:	a0a8b03a 	or	r20,r20,r2
   2f838:	88bfffd8 	cmpnei	r2,r17,-1
   2f83c:	84001a04 	addi	r16,r16,104
   2f840:	103ff21e 	bne	r2,zero,2f80c <_fwalk_reent+0x40>
   2f844:	94800017 	ldw	r18,0(r18)
   2f848:	903fec1e 	bne	r18,zero,2f7fc <_fwalk_reent+0x30>
   2f84c:	a005883a 	mov	r2,r20
   2f850:	dfc00617 	ldw	ra,24(sp)
   2f854:	dd400517 	ldw	r21,20(sp)
   2f858:	dd000417 	ldw	r20,16(sp)
   2f85c:	dcc00317 	ldw	r19,12(sp)
   2f860:	dc800217 	ldw	r18,8(sp)
   2f864:	dc400117 	ldw	r17,4(sp)
   2f868:	dc000017 	ldw	r16,0(sp)
   2f86c:	dec00704 	addi	sp,sp,28
   2f870:	f800283a 	ret

0002f874 <__localeconv_l>:
   2f874:	20803c04 	addi	r2,r4,240
   2f878:	f800283a 	ret

0002f87c <_localeconv_r>:
   2f87c:	00800134 	movhi	r2,4
   2f880:	10a66e04 	addi	r2,r2,-26184
   2f884:	f800283a 	ret

0002f888 <localeconv>:
   2f888:	00800134 	movhi	r2,4
   2f88c:	10a66e04 	addi	r2,r2,-26184
   2f890:	f800283a 	ret

0002f894 <__smakebuf_r>:
   2f894:	2880030b 	ldhu	r2,12(r5)
   2f898:	deffe804 	addi	sp,sp,-96
   2f89c:	dc001215 	stw	r16,72(sp)
   2f8a0:	dfc01715 	stw	ra,92(sp)
   2f8a4:	dd001615 	stw	r20,88(sp)
   2f8a8:	dcc01515 	stw	r19,84(sp)
   2f8ac:	dc801415 	stw	r18,80(sp)
   2f8b0:	dc401315 	stw	r17,76(sp)
   2f8b4:	10c0008c 	andi	r3,r2,2
   2f8b8:	2821883a 	mov	r16,r5
   2f8bc:	18000d26 	beq	r3,zero,2f8f4 <__smakebuf_r+0x60>
   2f8c0:	288010c4 	addi	r2,r5,67
   2f8c4:	28800015 	stw	r2,0(r5)
   2f8c8:	28800415 	stw	r2,16(r5)
   2f8cc:	00800044 	movi	r2,1
   2f8d0:	28800515 	stw	r2,20(r5)
   2f8d4:	dfc01717 	ldw	ra,92(sp)
   2f8d8:	dd001617 	ldw	r20,88(sp)
   2f8dc:	dcc01517 	ldw	r19,84(sp)
   2f8e0:	dc801417 	ldw	r18,80(sp)
   2f8e4:	dc401317 	ldw	r17,76(sp)
   2f8e8:	dc001217 	ldw	r16,72(sp)
   2f8ec:	dec01804 	addi	sp,sp,96
   2f8f0:	f800283a 	ret
   2f8f4:	2940038f 	ldh	r5,14(r5)
   2f8f8:	2023883a 	mov	r17,r4
   2f8fc:	28002816 	blt	r5,zero,2f9a0 <__smakebuf_r+0x10c>
   2f900:	d80d883a 	mov	r6,sp
   2f904:	0033dbc0 	call	33dbc <_fstat_r>
   2f908:	10002416 	blt	r2,zero,2f99c <__smakebuf_r+0x108>
   2f90c:	d8800117 	ldw	r2,4(sp)
   2f910:	10bc000c 	andi	r2,r2,61440
   2f914:	10880018 	cmpnei	r2,r2,8192
   2f918:	1000461e 	bne	r2,zero,2fa34 <__smakebuf_r+0x1a0>
   2f91c:	8140038f 	ldh	r5,14(r16)
   2f920:	8809883a 	mov	r4,r17
   2f924:	0033e1c0 	call	33e1c <_isatty_r>
   2f928:	10003e26 	beq	r2,zero,2fa24 <__smakebuf_r+0x190>
   2f92c:	8080030b 	ldhu	r2,12(r16)
   2f930:	80c010c4 	addi	r3,r16,67
   2f934:	80c00015 	stw	r3,0(r16)
   2f938:	10800054 	ori	r2,r2,1
   2f93c:	8080030d 	sth	r2,12(r16)
   2f940:	00800044 	movi	r2,1
   2f944:	80c00415 	stw	r3,16(r16)
   2f948:	80800515 	stw	r2,20(r16)
   2f94c:	04c00044 	movi	r19,1
   2f950:	05010004 	movi	r20,1024
   2f954:	04820004 	movi	r18,2048
   2f958:	a00b883a 	mov	r5,r20
   2f95c:	8809883a 	mov	r4,r17
   2f960:	002fadc0 	call	2fadc <_malloc_r>
   2f964:	10001726 	beq	r2,zero,2f9c4 <__smakebuf_r+0x130>
   2f968:	80c0030b 	ldhu	r3,12(r16)
   2f96c:	010000f4 	movhi	r4,3
   2f970:	213aac04 	addi	r4,r4,-5456
   2f974:	89000f15 	stw	r4,60(r17)
   2f978:	18c02014 	ori	r3,r3,128
   2f97c:	80c0030d 	sth	r3,12(r16)
   2f980:	80800015 	stw	r2,0(r16)
   2f984:	80800415 	stw	r2,16(r16)
   2f988:	85000515 	stw	r20,20(r16)
   2f98c:	98001d1e 	bne	r19,zero,2fa04 <__smakebuf_r+0x170>
   2f990:	90c6b03a 	or	r3,r18,r3
   2f994:	80c0030d 	sth	r3,12(r16)
   2f998:	003fce06 	br	2f8d4 <__smakebuf_r+0x40>
   2f99c:	8080030b 	ldhu	r2,12(r16)
   2f9a0:	1080200c 	andi	r2,r2,128
   2f9a4:	0027883a 	mov	r19,zero
   2f9a8:	10001326 	beq	r2,zero,2f9f8 <__smakebuf_r+0x164>
   2f9ac:	05001004 	movi	r20,64
   2f9b0:	a00b883a 	mov	r5,r20
   2f9b4:	8809883a 	mov	r4,r17
   2f9b8:	0025883a 	mov	r18,zero
   2f9bc:	002fadc0 	call	2fadc <_malloc_r>
   2f9c0:	103fe91e 	bne	r2,zero,2f968 <__smakebuf_r+0xd4>
   2f9c4:	8080030b 	ldhu	r2,12(r16)
   2f9c8:	10c0800c 	andi	r3,r2,512
   2f9cc:	183fc11e 	bne	r3,zero,2f8d4 <__smakebuf_r+0x40>
   2f9d0:	00ffff04 	movi	r3,-4
   2f9d4:	10c4703a 	and	r2,r2,r3
   2f9d8:	10800094 	ori	r2,r2,2
   2f9dc:	80c010c4 	addi	r3,r16,67
   2f9e0:	8080030d 	sth	r2,12(r16)
   2f9e4:	00800044 	movi	r2,1
   2f9e8:	80c00015 	stw	r3,0(r16)
   2f9ec:	80c00415 	stw	r3,16(r16)
   2f9f0:	80800515 	stw	r2,20(r16)
   2f9f4:	003fb706 	br	2f8d4 <__smakebuf_r+0x40>
   2f9f8:	05010004 	movi	r20,1024
   2f9fc:	0025883a 	mov	r18,zero
   2fa00:	003fd506 	br	2f958 <__smakebuf_r+0xc4>
   2fa04:	8140038f 	ldh	r5,14(r16)
   2fa08:	8809883a 	mov	r4,r17
   2fa0c:	0033e1c0 	call	33e1c <_isatty_r>
   2fa10:	80c0030b 	ldhu	r3,12(r16)
   2fa14:	103fde26 	beq	r2,zero,2f990 <__smakebuf_r+0xfc>
   2fa18:	18ffff0c 	andi	r3,r3,65532
   2fa1c:	18c00054 	ori	r3,r3,1
   2fa20:	003fdb06 	br	2f990 <__smakebuf_r+0xfc>
   2fa24:	04c00044 	movi	r19,1
   2fa28:	05010004 	movi	r20,1024
   2fa2c:	04820004 	movi	r18,2048
   2fa30:	003fc906 	br	2f958 <__smakebuf_r+0xc4>
   2fa34:	0027883a 	mov	r19,zero
   2fa38:	05010004 	movi	r20,1024
   2fa3c:	04820004 	movi	r18,2048
   2fa40:	003fc506 	br	2f958 <__smakebuf_r+0xc4>

0002fa44 <__swhatbuf_r>:
   2fa44:	deffea04 	addi	sp,sp,-88
   2fa48:	dc001215 	stw	r16,72(sp)
   2fa4c:	2821883a 	mov	r16,r5
   2fa50:	2940038f 	ldh	r5,14(r5)
   2fa54:	dc801415 	stw	r18,80(sp)
   2fa58:	dc401315 	stw	r17,76(sp)
   2fa5c:	dfc01515 	stw	ra,84(sp)
   2fa60:	3023883a 	mov	r17,r6
   2fa64:	3825883a 	mov	r18,r7
   2fa68:	28001016 	blt	r5,zero,2faac <__swhatbuf_r+0x68>
   2fa6c:	d80d883a 	mov	r6,sp
   2fa70:	0033dbc0 	call	33dbc <_fstat_r>
   2fa74:	10000d16 	blt	r2,zero,2faac <__swhatbuf_r+0x68>
   2fa78:	d8c00117 	ldw	r3,4(sp)
   2fa7c:	00820004 	movi	r2,2048
   2fa80:	18fc000c 	andi	r3,r3,61440
   2fa84:	18c80020 	cmpeqi	r3,r3,8192
   2fa88:	90c00015 	stw	r3,0(r18)
   2fa8c:	00c10004 	movi	r3,1024
   2fa90:	88c00015 	stw	r3,0(r17)
   2fa94:	dfc01517 	ldw	ra,84(sp)
   2fa98:	dc801417 	ldw	r18,80(sp)
   2fa9c:	dc401317 	ldw	r17,76(sp)
   2faa0:	dc001217 	ldw	r16,72(sp)
   2faa4:	dec01604 	addi	sp,sp,88
   2faa8:	f800283a 	ret
   2faac:	8080030b 	ldhu	r2,12(r16)
   2fab0:	90000015 	stw	zero,0(r18)
   2fab4:	1080200c 	andi	r2,r2,128
   2fab8:	10000426 	beq	r2,zero,2facc <__swhatbuf_r+0x88>
   2fabc:	00801004 	movi	r2,64
   2fac0:	88800015 	stw	r2,0(r17)
   2fac4:	0005883a 	mov	r2,zero
   2fac8:	003ff206 	br	2fa94 <__swhatbuf_r+0x50>
   2facc:	00810004 	movi	r2,1024
   2fad0:	88800015 	stw	r2,0(r17)
   2fad4:	0005883a 	mov	r2,zero
   2fad8:	003fee06 	br	2fa94 <__swhatbuf_r+0x50>

0002fadc <_malloc_r>:
   2fadc:	defff604 	addi	sp,sp,-40
   2fae0:	dc400115 	stw	r17,4(sp)
   2fae4:	2c4002c4 	addi	r17,r5,11
   2fae8:	dc800215 	stw	r18,8(sp)
   2faec:	dfc00915 	stw	ra,36(sp)
   2faf0:	df000815 	stw	fp,32(sp)
   2faf4:	ddc00715 	stw	r23,28(sp)
   2faf8:	dd800615 	stw	r22,24(sp)
   2fafc:	dd400515 	stw	r21,20(sp)
   2fb00:	dd000415 	stw	r20,16(sp)
   2fb04:	dcc00315 	stw	r19,12(sp)
   2fb08:	dc000015 	stw	r16,0(sp)
   2fb0c:	888005e8 	cmpgeui	r2,r17,23
   2fb10:	2025883a 	mov	r18,r4
   2fb14:	10001b1e 	bne	r2,zero,2fb84 <_malloc_r+0xa8>
   2fb18:	29400468 	cmpgeui	r5,r5,17
   2fb1c:	2800821e 	bne	r5,zero,2fd28 <_malloc_r+0x24c>
   2fb20:	0035d080 	call	35d08 <__malloc_lock>
   2fb24:	04400404 	movi	r17,16
   2fb28:	00800604 	movi	r2,24
   2fb2c:	01c00084 	movi	r7,2
   2fb30:	04c00134 	movhi	r19,4
   2fb34:	9ce53004 	addi	r19,r19,-27456
   2fb38:	9885883a 	add	r2,r19,r2
   2fb3c:	14000117 	ldw	r16,4(r2)
   2fb40:	10fffe04 	addi	r3,r2,-8
   2fb44:	80c08b26 	beq	r16,r3,2fd74 <_malloc_r+0x298>
   2fb48:	80800117 	ldw	r2,4(r16)
   2fb4c:	81000317 	ldw	r4,12(r16)
   2fb50:	00ffff04 	movi	r3,-4
   2fb54:	10c4703a 	and	r2,r2,r3
   2fb58:	81400217 	ldw	r5,8(r16)
   2fb5c:	8085883a 	add	r2,r16,r2
   2fb60:	10c00117 	ldw	r3,4(r2)
   2fb64:	29000315 	stw	r4,12(r5)
   2fb68:	21400215 	stw	r5,8(r4)
   2fb6c:	18c00054 	ori	r3,r3,1
   2fb70:	10c00115 	stw	r3,4(r2)
   2fb74:	9009883a 	mov	r4,r18
   2fb78:	0035d2c0 	call	35d2c <__malloc_unlock>
   2fb7c:	80800204 	addi	r2,r16,8
   2fb80:	00006c06 	br	2fd34 <_malloc_r+0x258>
   2fb84:	00bffe04 	movi	r2,-8
   2fb88:	88a2703a 	and	r17,r17,r2
   2fb8c:	88006616 	blt	r17,zero,2fd28 <_malloc_r+0x24c>
   2fb90:	89406536 	bltu	r17,r5,2fd28 <_malloc_r+0x24c>
   2fb94:	0035d080 	call	35d08 <__malloc_lock>
   2fb98:	88807e28 	cmpgeui	r2,r17,504
   2fb9c:	10012226 	beq	r2,zero,30028 <_malloc_r+0x54c>
   2fba0:	8804d27a 	srli	r2,r17,9
   2fba4:	10006f26 	beq	r2,zero,2fd64 <_malloc_r+0x288>
   2fba8:	10c00168 	cmpgeui	r3,r2,5
   2fbac:	1800fe1e 	bne	r3,zero,2ffa8 <_malloc_r+0x4cc>
   2fbb0:	8804d1ba 	srli	r2,r17,6
   2fbb4:	11c00e44 	addi	r7,r2,57
   2fbb8:	380890fa 	slli	r4,r7,3
   2fbbc:	12000e04 	addi	r8,r2,56
   2fbc0:	04c00134 	movhi	r19,4
   2fbc4:	9ce53004 	addi	r19,r19,-27456
   2fbc8:	9909883a 	add	r4,r19,r4
   2fbcc:	24000117 	ldw	r16,4(r4)
   2fbd0:	213ffe04 	addi	r4,r4,-8
   2fbd4:	24000b26 	beq	r4,r16,2fc04 <_malloc_r+0x128>
   2fbd8:	01bfff04 	movi	r6,-4
   2fbdc:	00000306 	br	2fbec <_malloc_r+0x110>
   2fbe0:	1800d60e 	bge	r3,zero,2ff3c <_malloc_r+0x460>
   2fbe4:	84000317 	ldw	r16,12(r16)
   2fbe8:	24000626 	beq	r4,r16,2fc04 <_malloc_r+0x128>
   2fbec:	80800117 	ldw	r2,4(r16)
   2fbf0:	1184703a 	and	r2,r2,r6
   2fbf4:	1447c83a 	sub	r3,r2,r17
   2fbf8:	19400408 	cmpgei	r5,r3,16
   2fbfc:	283ff826 	beq	r5,zero,2fbe0 <_malloc_r+0x104>
   2fc00:	400f883a 	mov	r7,r8
   2fc04:	9c000417 	ldw	r16,16(r19)
   2fc08:	02400134 	movhi	r9,4
   2fc0c:	4a653204 	addi	r9,r9,-27448
   2fc10:	82405f26 	beq	r16,r9,2fd90 <_malloc_r+0x2b4>
   2fc14:	80c00117 	ldw	r3,4(r16)
   2fc18:	00bfff04 	movi	r2,-4
   2fc1c:	1884703a 	and	r2,r3,r2
   2fc20:	1447c83a 	sub	r3,r2,r17
   2fc24:	19000410 	cmplti	r4,r3,16
   2fc28:	20010a26 	beq	r4,zero,30054 <_malloc_r+0x578>
   2fc2c:	9a400515 	stw	r9,20(r19)
   2fc30:	9a400415 	stw	r9,16(r19)
   2fc34:	1800ff0e 	bge	r3,zero,30034 <_malloc_r+0x558>
   2fc38:	10c08028 	cmpgeui	r3,r2,512
   2fc3c:	1800c11e 	bne	r3,zero,2ff44 <_malloc_r+0x468>
   2fc40:	1006d0fa 	srli	r3,r2,3
   2fc44:	1008d17a 	srli	r4,r2,5
   2fc48:	00800044 	movi	r2,1
   2fc4c:	18c00044 	addi	r3,r3,1
   2fc50:	180690fa 	slli	r3,r3,3
   2fc54:	99400117 	ldw	r5,4(r19)
   2fc58:	1104983a 	sll	r2,r2,r4
   2fc5c:	98c7883a 	add	r3,r19,r3
   2fc60:	19000017 	ldw	r4,0(r3)
   2fc64:	1144b03a 	or	r2,r2,r5
   2fc68:	197ffe04 	addi	r5,r3,-8
   2fc6c:	81400315 	stw	r5,12(r16)
   2fc70:	81000215 	stw	r4,8(r16)
   2fc74:	98800115 	stw	r2,4(r19)
   2fc78:	1c000015 	stw	r16,0(r3)
   2fc7c:	24000315 	stw	r16,12(r4)
   2fc80:	3807d0ba 	srai	r3,r7,2
   2fc84:	01000044 	movi	r4,1
   2fc88:	20c8983a 	sll	r4,r4,r3
   2fc8c:	11004536 	bltu	r2,r4,2fda4 <_malloc_r+0x2c8>
   2fc90:	2086703a 	and	r3,r4,r2
   2fc94:	18000a1e 	bne	r3,zero,2fcc0 <_malloc_r+0x1e4>
   2fc98:	00ffff04 	movi	r3,-4
   2fc9c:	2109883a 	add	r4,r4,r4
   2fca0:	38ce703a 	and	r7,r7,r3
   2fca4:	2086703a 	and	r3,r4,r2
   2fca8:	39c00104 	addi	r7,r7,4
   2fcac:	1800041e 	bne	r3,zero,2fcc0 <_malloc_r+0x1e4>
   2fcb0:	2109883a 	add	r4,r4,r4
   2fcb4:	2086703a 	and	r3,r4,r2
   2fcb8:	39c00104 	addi	r7,r7,4
   2fcbc:	183ffc26 	beq	r3,zero,2fcb0 <_malloc_r+0x1d4>
   2fcc0:	02bfff04 	movi	r10,-4
   2fcc4:	381690fa 	slli	r11,r7,3
   2fcc8:	3819883a 	mov	r12,r7
   2fccc:	9ad7883a 	add	r11,r19,r11
   2fcd0:	5811883a 	mov	r8,r11
   2fcd4:	40800317 	ldw	r2,12(r8)
   2fcd8:	4080bc26 	beq	r8,r2,2ffcc <_malloc_r+0x4f0>
   2fcdc:	10c00117 	ldw	r3,4(r2)
   2fce0:	1021883a 	mov	r16,r2
   2fce4:	10800317 	ldw	r2,12(r2)
   2fce8:	1a86703a 	and	r3,r3,r10
   2fcec:	1c4bc83a 	sub	r5,r3,r17
   2fcf0:	29800410 	cmplti	r6,r5,16
   2fcf4:	3000ba26 	beq	r6,zero,2ffe0 <_malloc_r+0x504>
   2fcf8:	283ff716 	blt	r5,zero,2fcd8 <_malloc_r+0x1fc>
   2fcfc:	80c7883a 	add	r3,r16,r3
   2fd00:	19400117 	ldw	r5,4(r3)
   2fd04:	81800217 	ldw	r6,8(r16)
   2fd08:	9009883a 	mov	r4,r18
   2fd0c:	29400054 	ori	r5,r5,1
   2fd10:	19400115 	stw	r5,4(r3)
   2fd14:	30800315 	stw	r2,12(r6)
   2fd18:	11800215 	stw	r6,8(r2)
   2fd1c:	0035d2c0 	call	35d2c <__malloc_unlock>
   2fd20:	80800204 	addi	r2,r16,8
   2fd24:	00000306 	br	2fd34 <_malloc_r+0x258>
   2fd28:	00800304 	movi	r2,12
   2fd2c:	90800015 	stw	r2,0(r18)
   2fd30:	0005883a 	mov	r2,zero
   2fd34:	dfc00917 	ldw	ra,36(sp)
   2fd38:	df000817 	ldw	fp,32(sp)
   2fd3c:	ddc00717 	ldw	r23,28(sp)
   2fd40:	dd800617 	ldw	r22,24(sp)
   2fd44:	dd400517 	ldw	r21,20(sp)
   2fd48:	dd000417 	ldw	r20,16(sp)
   2fd4c:	dcc00317 	ldw	r19,12(sp)
   2fd50:	dc800217 	ldw	r18,8(sp)
   2fd54:	dc400117 	ldw	r17,4(sp)
   2fd58:	dc000017 	ldw	r16,0(sp)
   2fd5c:	dec00a04 	addi	sp,sp,40
   2fd60:	f800283a 	ret
   2fd64:	01008004 	movi	r4,512
   2fd68:	01c01004 	movi	r7,64
   2fd6c:	02000fc4 	movi	r8,63
   2fd70:	003f9306 	br	2fbc0 <_malloc_r+0xe4>
   2fd74:	14000317 	ldw	r16,12(r2)
   2fd78:	39c00084 	addi	r7,r7,2
   2fd7c:	143f721e 	bne	r2,r16,2fb48 <_malloc_r+0x6c>
   2fd80:	9c000417 	ldw	r16,16(r19)
   2fd84:	02400134 	movhi	r9,4
   2fd88:	4a653204 	addi	r9,r9,-27448
   2fd8c:	827fa11e 	bne	r16,r9,2fc14 <_malloc_r+0x138>
   2fd90:	3807d0ba 	srai	r3,r7,2
   2fd94:	01000044 	movi	r4,1
   2fd98:	98800117 	ldw	r2,4(r19)
   2fd9c:	20c8983a 	sll	r4,r4,r3
   2fda0:	113fbb2e 	bgeu	r2,r4,2fc90 <_malloc_r+0x1b4>
   2fda4:	9c000217 	ldw	r16,8(r19)
   2fda8:	00bfff04 	movi	r2,-4
   2fdac:	85400117 	ldw	r21,4(r16)
   2fdb0:	a8ac703a 	and	r22,r21,r2
   2fdb4:	b4400336 	bltu	r22,r17,2fdc4 <_malloc_r+0x2e8>
   2fdb8:	b445c83a 	sub	r2,r22,r17
   2fdbc:	10c00408 	cmpgei	r3,r2,16
   2fdc0:	1800541e 	bne	r3,zero,2ff14 <_malloc_r+0x438>
   2fdc4:	00800134 	movhi	r2,4
   2fdc8:	10ab2517 	ldw	r2,-21356(r2)
   2fdcc:	00c00134 	movhi	r3,4
   2fdd0:	1d724517 	ldw	r21,-14060(r3)
   2fdd4:	10bfffd8 	cmpnei	r2,r2,-1
   2fdd8:	85b9883a 	add	fp,r16,r22
   2fddc:	8d6b883a 	add	r21,r17,r21
   2fde0:	1000d626 	beq	r2,zero,3013c <_malloc_r+0x660>
   2fde4:	ad4403c4 	addi	r21,r21,4111
   2fde8:	00bc0004 	movi	r2,-4096
   2fdec:	a8aa703a 	and	r21,r21,r2
   2fdf0:	a80b883a 	mov	r5,r21
   2fdf4:	9009883a 	mov	r4,r18
   2fdf8:	0031fa80 	call	31fa8 <_sbrk_r>
   2fdfc:	102f883a 	mov	r23,r2
   2fe00:	10bfffd8 	cmpnei	r2,r2,-1
   2fe04:	1000a826 	beq	r2,zero,300a8 <_malloc_r+0x5cc>
   2fe08:	bf00a636 	bltu	r23,fp,300a4 <_malloc_r+0x5c8>
   2fe0c:	00800134 	movhi	r2,4
   2fe10:	15328217 	ldw	r20,-13816(r2)
   2fe14:	ad29883a 	add	r20,r21,r20
   2fe18:	15328215 	stw	r20,-13816(r2)
   2fe1c:	a007883a 	mov	r3,r20
   2fe20:	e5c0ec26 	beq	fp,r23,301d4 <_malloc_r+0x6f8>
   2fe24:	00800134 	movhi	r2,4
   2fe28:	10ab2517 	ldw	r2,-21356(r2)
   2fe2c:	10bfffd8 	cmpnei	r2,r2,-1
   2fe30:	1000ef26 	beq	r2,zero,301f0 <_malloc_r+0x714>
   2fe34:	bf39c83a 	sub	fp,r23,fp
   2fe38:	e0c7883a 	add	r3,fp,r3
   2fe3c:	00800134 	movhi	r2,4
   2fe40:	10f28215 	stw	r3,-13816(r2)
   2fe44:	bf0001cc 	andi	fp,r23,7
   2fe48:	e000c526 	beq	fp,zero,30160 <_malloc_r+0x684>
   2fe4c:	bf2fc83a 	sub	r23,r23,fp
   2fe50:	bdc00204 	addi	r23,r23,8
   2fe54:	05040204 	movi	r20,4104
   2fe58:	a729c83a 	sub	r20,r20,fp
   2fe5c:	bd6b883a 	add	r21,r23,r21
   2fe60:	a569c83a 	sub	r20,r20,r21
   2fe64:	a503ffcc 	andi	r20,r20,4095
   2fe68:	a00b883a 	mov	r5,r20
   2fe6c:	9009883a 	mov	r4,r18
   2fe70:	0031fa80 	call	31fa8 <_sbrk_r>
   2fe74:	10ffffe0 	cmpeqi	r3,r2,-1
   2fe78:	1800f31e 	bne	r3,zero,30248 <_malloc_r+0x76c>
   2fe7c:	15c5c83a 	sub	r2,r2,r23
   2fe80:	152b883a 	add	r21,r2,r20
   2fe84:	00800134 	movhi	r2,4
   2fe88:	11728217 	ldw	r5,-13816(r2)
   2fe8c:	9dc00215 	stw	r23,8(r19)
   2fe90:	ad400054 	ori	r21,r21,1
   2fe94:	a169883a 	add	r20,r20,r5
   2fe98:	15328215 	stw	r20,-13816(r2)
   2fe9c:	bd400115 	stw	r21,4(r23)
   2fea0:	84c0d626 	beq	r16,r19,301fc <_malloc_r+0x720>
   2fea4:	b0800428 	cmpgeui	r2,r22,16
   2fea8:	1000d626 	beq	r2,zero,30204 <_malloc_r+0x728>
   2feac:	80c00117 	ldw	r3,4(r16)
   2feb0:	013ffe04 	movi	r4,-8
   2feb4:	b0bffd04 	addi	r2,r22,-12
   2feb8:	1104703a 	and	r2,r2,r4
   2febc:	18c0004c 	andi	r3,r3,1
   2fec0:	1886b03a 	or	r3,r3,r2
   2fec4:	80c00115 	stw	r3,4(r16)
   2fec8:	01000144 	movi	r4,5
   2fecc:	8087883a 	add	r3,r16,r2
   2fed0:	19000115 	stw	r4,4(r3)
   2fed4:	19000215 	stw	r4,8(r3)
   2fed8:	10800428 	cmpgeui	r2,r2,16
   2fedc:	1000df1e 	bne	r2,zero,3025c <_malloc_r+0x780>
   2fee0:	bd400117 	ldw	r21,4(r23)
   2fee4:	b821883a 	mov	r16,r23
   2fee8:	00800134 	movhi	r2,4
   2feec:	10b24417 	ldw	r2,-14064(r2)
   2fef0:	1500022e 	bgeu	r2,r20,2fefc <_malloc_r+0x420>
   2fef4:	00800134 	movhi	r2,4
   2fef8:	15324415 	stw	r20,-14064(r2)
   2fefc:	00800134 	movhi	r2,4
   2ff00:	10b24317 	ldw	r2,-14068(r2)
   2ff04:	15006a2e 	bgeu	r2,r20,300b0 <_malloc_r+0x5d4>
   2ff08:	00800134 	movhi	r2,4
   2ff0c:	15324315 	stw	r20,-14068(r2)
   2ff10:	00006706 	br	300b0 <_malloc_r+0x5d4>
   2ff14:	88c00054 	ori	r3,r17,1
   2ff18:	80c00115 	stw	r3,4(r16)
   2ff1c:	8463883a 	add	r17,r16,r17
   2ff20:	10800054 	ori	r2,r2,1
   2ff24:	9c400215 	stw	r17,8(r19)
   2ff28:	88800115 	stw	r2,4(r17)
   2ff2c:	9009883a 	mov	r4,r18
   2ff30:	0035d2c0 	call	35d2c <__malloc_unlock>
   2ff34:	80800204 	addi	r2,r16,8
   2ff38:	003f7e06 	br	2fd34 <_malloc_r+0x258>
   2ff3c:	81000317 	ldw	r4,12(r16)
   2ff40:	003f0506 	br	2fb58 <_malloc_r+0x7c>
   2ff44:	1006d27a 	srli	r3,r2,9
   2ff48:	19000168 	cmpgeui	r4,r3,5
   2ff4c:	20005026 	beq	r4,zero,30090 <_malloc_r+0x5b4>
   2ff50:	19000568 	cmpgeui	r4,r3,21
   2ff54:	20008c1e 	bne	r4,zero,30188 <_malloc_r+0x6ac>
   2ff58:	19401704 	addi	r5,r3,92
   2ff5c:	280a90fa 	slli	r5,r5,3
   2ff60:	190016c4 	addi	r4,r3,91
   2ff64:	994b883a 	add	r5,r19,r5
   2ff68:	28c00017 	ldw	r3,0(r5)
   2ff6c:	297ffe04 	addi	r5,r5,-8
   2ff70:	28c07426 	beq	r5,r3,30144 <_malloc_r+0x668>
   2ff74:	01bfff04 	movi	r6,-4
   2ff78:	19000117 	ldw	r4,4(r3)
   2ff7c:	2188703a 	and	r4,r4,r6
   2ff80:	1100022e 	bgeu	r2,r4,2ff8c <_malloc_r+0x4b0>
   2ff84:	18c00217 	ldw	r3,8(r3)
   2ff88:	28fffb1e 	bne	r5,r3,2ff78 <_malloc_r+0x49c>
   2ff8c:	19400317 	ldw	r5,12(r3)
   2ff90:	98800117 	ldw	r2,4(r19)
   2ff94:	81400315 	stw	r5,12(r16)
   2ff98:	80c00215 	stw	r3,8(r16)
   2ff9c:	2c000215 	stw	r16,8(r5)
   2ffa0:	1c000315 	stw	r16,12(r3)
   2ffa4:	003f3606 	br	2fc80 <_malloc_r+0x1a4>
   2ffa8:	10c00568 	cmpgeui	r3,r2,21
   2ffac:	18004a26 	beq	r3,zero,300d8 <_malloc_r+0x5fc>
   2ffb0:	10c01568 	cmpgeui	r3,r2,85
   2ffb4:	18007b1e 	bne	r3,zero,301a4 <_malloc_r+0x6c8>
   2ffb8:	8804d33a 	srli	r2,r17,12
   2ffbc:	11c01bc4 	addi	r7,r2,111
   2ffc0:	380890fa 	slli	r4,r7,3
   2ffc4:	12001b84 	addi	r8,r2,110
   2ffc8:	003efd06 	br	2fbc0 <_malloc_r+0xe4>
   2ffcc:	63000044 	addi	r12,r12,1
   2ffd0:	608000cc 	andi	r2,r12,3
   2ffd4:	42000204 	addi	r8,r8,8
   2ffd8:	103f3e1e 	bne	r2,zero,2fcd4 <_malloc_r+0x1f8>
   2ffdc:	00004506 	br	300f4 <_malloc_r+0x618>
   2ffe0:	81000217 	ldw	r4,8(r16)
   2ffe4:	89800054 	ori	r6,r17,1
   2ffe8:	81800115 	stw	r6,4(r16)
   2ffec:	20800315 	stw	r2,12(r4)
   2fff0:	11000215 	stw	r4,8(r2)
   2fff4:	8463883a 	add	r17,r16,r17
   2fff8:	9c400515 	stw	r17,20(r19)
   2fffc:	9c400415 	stw	r17,16(r19)
   30000:	28800054 	ori	r2,r5,1
   30004:	88800115 	stw	r2,4(r17)
   30008:	8a400315 	stw	r9,12(r17)
   3000c:	8a400215 	stw	r9,8(r17)
   30010:	80c7883a 	add	r3,r16,r3
   30014:	19400015 	stw	r5,0(r3)
   30018:	9009883a 	mov	r4,r18
   3001c:	0035d2c0 	call	35d2c <__malloc_unlock>
   30020:	80800204 	addi	r2,r16,8
   30024:	003f4306 	br	2fd34 <_malloc_r+0x258>
   30028:	880ed0fa 	srli	r7,r17,3
   3002c:	88800204 	addi	r2,r17,8
   30030:	003ebf06 	br	2fb30 <_malloc_r+0x54>
   30034:	8085883a 	add	r2,r16,r2
   30038:	10c00117 	ldw	r3,4(r2)
   3003c:	9009883a 	mov	r4,r18
   30040:	18c00054 	ori	r3,r3,1
   30044:	10c00115 	stw	r3,4(r2)
   30048:	0035d2c0 	call	35d2c <__malloc_unlock>
   3004c:	80800204 	addi	r2,r16,8
   30050:	003f3806 	br	2fd34 <_malloc_r+0x258>
   30054:	89000054 	ori	r4,r17,1
   30058:	81000115 	stw	r4,4(r16)
   3005c:	8463883a 	add	r17,r16,r17
   30060:	9c400515 	stw	r17,20(r19)
   30064:	9c400415 	stw	r17,16(r19)
   30068:	19000054 	ori	r4,r3,1
   3006c:	89000115 	stw	r4,4(r17)
   30070:	8085883a 	add	r2,r16,r2
   30074:	8a400315 	stw	r9,12(r17)
   30078:	8a400215 	stw	r9,8(r17)
   3007c:	10c00015 	stw	r3,0(r2)
   30080:	9009883a 	mov	r4,r18
   30084:	0035d2c0 	call	35d2c <__malloc_unlock>
   30088:	80800204 	addi	r2,r16,8
   3008c:	003f2906 	br	2fd34 <_malloc_r+0x258>
   30090:	1006d1ba 	srli	r3,r2,6
   30094:	19400e44 	addi	r5,r3,57
   30098:	280a90fa 	slli	r5,r5,3
   3009c:	19000e04 	addi	r4,r3,56
   300a0:	003fb006 	br	2ff64 <_malloc_r+0x488>
   300a4:	84c04626 	beq	r16,r19,301c0 <_malloc_r+0x6e4>
   300a8:	9c000217 	ldw	r16,8(r19)
   300ac:	85400117 	ldw	r21,4(r16)
   300b0:	00bfff04 	movi	r2,-4
   300b4:	a8aa703a 	and	r21,r21,r2
   300b8:	ac45c83a 	sub	r2,r21,r17
   300bc:	ac400236 	bltu	r21,r17,300c8 <_malloc_r+0x5ec>
   300c0:	10c00408 	cmpgei	r3,r2,16
   300c4:	183f931e 	bne	r3,zero,2ff14 <_malloc_r+0x438>
   300c8:	9009883a 	mov	r4,r18
   300cc:	0035d2c0 	call	35d2c <__malloc_unlock>
   300d0:	0005883a 	mov	r2,zero
   300d4:	003f1706 	br	2fd34 <_malloc_r+0x258>
   300d8:	11c01704 	addi	r7,r2,92
   300dc:	380890fa 	slli	r4,r7,3
   300e0:	120016c4 	addi	r8,r2,91
   300e4:	003eb606 	br	2fbc0 <_malloc_r+0xe4>
   300e8:	58800217 	ldw	r2,8(r11)
   300ec:	39ffffc4 	addi	r7,r7,-1
   300f0:	12c0701e 	bne	r2,r11,302b4 <_malloc_r+0x7d8>
   300f4:	388000cc 	andi	r2,r7,3
   300f8:	5afffe04 	addi	r11,r11,-8
   300fc:	103ffa1e 	bne	r2,zero,300e8 <_malloc_r+0x60c>
   30100:	98c00117 	ldw	r3,4(r19)
   30104:	0104303a 	nor	r2,zero,r4
   30108:	10c4703a 	and	r2,r2,r3
   3010c:	98800115 	stw	r2,4(r19)
   30110:	2109883a 	add	r4,r4,r4
   30114:	113f2336 	bltu	r2,r4,2fda4 <_malloc_r+0x2c8>
   30118:	203f2226 	beq	r4,zero,2fda4 <_malloc_r+0x2c8>
   3011c:	2086703a 	and	r3,r4,r2
   30120:	1800041e 	bne	r3,zero,30134 <_malloc_r+0x658>
   30124:	2109883a 	add	r4,r4,r4
   30128:	2086703a 	and	r3,r4,r2
   3012c:	63000104 	addi	r12,r12,4
   30130:	183ffc26 	beq	r3,zero,30124 <_malloc_r+0x648>
   30134:	600f883a 	mov	r7,r12
   30138:	003ee206 	br	2fcc4 <_malloc_r+0x1e8>
   3013c:	ad400404 	addi	r21,r21,16
   30140:	003f2b06 	br	2fdf0 <_malloc_r+0x314>
   30144:	2009d0ba 	srai	r4,r4,2
   30148:	00800044 	movi	r2,1
   3014c:	99800117 	ldw	r6,4(r19)
   30150:	1104983a 	sll	r2,r2,r4
   30154:	1184b03a 	or	r2,r2,r6
   30158:	98800115 	stw	r2,4(r19)
   3015c:	003f8d06 	br	2ff94 <_malloc_r+0x4b8>
   30160:	bd69883a 	add	r20,r23,r21
   30164:	0529c83a 	sub	r20,zero,r20
   30168:	a503ffcc 	andi	r20,r20,4095
   3016c:	a00b883a 	mov	r5,r20
   30170:	9009883a 	mov	r4,r18
   30174:	0031fa80 	call	31fa8 <_sbrk_r>
   30178:	10ffffe0 	cmpeqi	r3,r2,-1
   3017c:	183f3f26 	beq	r3,zero,2fe7c <_malloc_r+0x3a0>
   30180:	0029883a 	mov	r20,zero
   30184:	003f3f06 	br	2fe84 <_malloc_r+0x3a8>
   30188:	19001568 	cmpgeui	r4,r3,85
   3018c:	2000201e 	bne	r4,zero,30210 <_malloc_r+0x734>
   30190:	1006d33a 	srli	r3,r2,12
   30194:	19401bc4 	addi	r5,r3,111
   30198:	280a90fa 	slli	r5,r5,3
   3019c:	19001b84 	addi	r4,r3,110
   301a0:	003f7006 	br	2ff64 <_malloc_r+0x488>
   301a4:	10c05568 	cmpgeui	r3,r2,341
   301a8:	1800201e 	bne	r3,zero,3022c <_malloc_r+0x750>
   301ac:	8804d3fa 	srli	r2,r17,15
   301b0:	11c01e04 	addi	r7,r2,120
   301b4:	380890fa 	slli	r4,r7,3
   301b8:	12001dc4 	addi	r8,r2,119
   301bc:	003e8006 	br	2fbc0 <_malloc_r+0xe4>
   301c0:	00800134 	movhi	r2,4
   301c4:	10f28217 	ldw	r3,-13816(r2)
   301c8:	a8c7883a 	add	r3,r21,r3
   301cc:	10f28215 	stw	r3,-13816(r2)
   301d0:	003f1406 	br	2fe24 <_malloc_r+0x348>
   301d4:	e083ffcc 	andi	r2,fp,4095
   301d8:	103f121e 	bne	r2,zero,2fe24 <_malloc_r+0x348>
   301dc:	9c000217 	ldw	r16,8(r19)
   301e0:	b56b883a 	add	r21,r22,r21
   301e4:	ad400054 	ori	r21,r21,1
   301e8:	85400115 	stw	r21,4(r16)
   301ec:	003f3e06 	br	2fee8 <_malloc_r+0x40c>
   301f0:	00800134 	movhi	r2,4
   301f4:	15eb2515 	stw	r23,-21356(r2)
   301f8:	003f1206 	br	2fe44 <_malloc_r+0x368>
   301fc:	b821883a 	mov	r16,r23
   30200:	003f3906 	br	2fee8 <_malloc_r+0x40c>
   30204:	00800044 	movi	r2,1
   30208:	b8800115 	stw	r2,4(r23)
   3020c:	003fae06 	br	300c8 <_malloc_r+0x5ec>
   30210:	19005568 	cmpgeui	r4,r3,341
   30214:	2000191e 	bne	r4,zero,3027c <_malloc_r+0x7a0>
   30218:	1006d3fa 	srli	r3,r2,15
   3021c:	19401e04 	addi	r5,r3,120
   30220:	280a90fa 	slli	r5,r5,3
   30224:	19001dc4 	addi	r4,r3,119
   30228:	003f4e06 	br	2ff64 <_malloc_r+0x488>
   3022c:	10815568 	cmpgeui	r2,r2,1365
   30230:	1000191e 	bne	r2,zero,30298 <_malloc_r+0x7bc>
   30234:	8804d4ba 	srli	r2,r17,18
   30238:	11c01f44 	addi	r7,r2,125
   3023c:	380890fa 	slli	r4,r7,3
   30240:	12001f04 	addi	r8,r2,124
   30244:	003e5e06 	br	2fbc0 <_malloc_r+0xe4>
   30248:	e73ffe04 	addi	fp,fp,-8
   3024c:	af2b883a 	add	r21,r21,fp
   30250:	adebc83a 	sub	r21,r21,r23
   30254:	0029883a 	mov	r20,zero
   30258:	003f0a06 	br	2fe84 <_malloc_r+0x3a8>
   3025c:	81400204 	addi	r5,r16,8
   30260:	9009883a 	mov	r4,r18
   30264:	002ef700 	call	2ef70 <_free_r>
   30268:	9c000217 	ldw	r16,8(r19)
   3026c:	00800134 	movhi	r2,4
   30270:	15328217 	ldw	r20,-13816(r2)
   30274:	85400117 	ldw	r21,4(r16)
   30278:	003f1b06 	br	2fee8 <_malloc_r+0x40c>
   3027c:	18c15568 	cmpgeui	r3,r3,1365
   30280:	1800091e 	bne	r3,zero,302a8 <_malloc_r+0x7cc>
   30284:	1006d4ba 	srli	r3,r2,18
   30288:	19401f44 	addi	r5,r3,125
   3028c:	280a90fa 	slli	r5,r5,3
   30290:	19001f04 	addi	r4,r3,124
   30294:	003f3306 	br	2ff64 <_malloc_r+0x488>
   30298:	0100fe04 	movi	r4,1016
   3029c:	01c01fc4 	movi	r7,127
   302a0:	02001f84 	movi	r8,126
   302a4:	003e4606 	br	2fbc0 <_malloc_r+0xe4>
   302a8:	0140fe04 	movi	r5,1016
   302ac:	01001f84 	movi	r4,126
   302b0:	003f2c06 	br	2ff64 <_malloc_r+0x488>
   302b4:	98800117 	ldw	r2,4(r19)
   302b8:	003f9506 	br	30110 <_malloc_r+0x634>

000302bc <memchr>:
   302bc:	208000cc 	andi	r2,r4,3
   302c0:	280f883a 	mov	r7,r5
   302c4:	10000e26 	beq	r2,zero,30300 <memchr+0x44>
   302c8:	30bfffc4 	addi	r2,r6,-1
   302cc:	30001726 	beq	r6,zero,3032c <memchr+0x70>
   302d0:	29803fcc 	andi	r6,r5,255
   302d4:	00000606 	br	302f0 <memchr+0x34>
   302d8:	21000044 	addi	r4,r4,1
   302dc:	20c000cc 	andi	r3,r4,3
   302e0:	18000826 	beq	r3,zero,30304 <memchr+0x48>
   302e4:	10bfffc4 	addi	r2,r2,-1
   302e8:	10ffffe0 	cmpeqi	r3,r2,-1
   302ec:	18000f1e 	bne	r3,zero,3032c <memchr+0x70>
   302f0:	20c00003 	ldbu	r3,0(r4)
   302f4:	19bff81e 	bne	r3,r6,302d8 <memchr+0x1c>
   302f8:	2005883a 	mov	r2,r4
   302fc:	f800283a 	ret
   30300:	3005883a 	mov	r2,r6
   30304:	10c00128 	cmpgeui	r3,r2,4
   30308:	18000a1e 	bne	r3,zero,30334 <memchr+0x78>
   3030c:	10001e26 	beq	r2,zero,30388 <memchr+0xcc>
   30310:	2087883a 	add	r3,r4,r2
   30314:	39803fcc 	andi	r6,r7,255
   30318:	2005883a 	mov	r2,r4
   3031c:	11000003 	ldbu	r4,0(r2)
   30320:	21bff626 	beq	r4,r6,302fc <memchr+0x40>
   30324:	10800044 	addi	r2,r2,1
   30328:	18bffc1e 	bne	r3,r2,3031c <memchr+0x60>
   3032c:	0005883a 	mov	r2,zero
   30330:	f800283a 	ret
   30334:	29403fcc 	andi	r5,r5,255
   30338:	280c923a 	slli	r6,r5,8
   3033c:	027fbff4 	movhi	r9,65279
   30340:	02202074 	movhi	r8,32897
   30344:	314ab03a 	or	r5,r6,r5
   30348:	280c943a 	slli	r6,r5,16
   3034c:	4a7fbfc4 	addi	r9,r9,-257
   30350:	42202004 	addi	r8,r8,-32640
   30354:	314cb03a 	or	r6,r6,r5
   30358:	20c00017 	ldw	r3,0(r4)
   3035c:	30c6f03a 	xor	r3,r6,r3
   30360:	1a4b883a 	add	r5,r3,r9
   30364:	00c6303a 	nor	r3,zero,r3
   30368:	28c6703a 	and	r3,r5,r3
   3036c:	1a06703a 	and	r3,r3,r8
   30370:	183fe71e 	bne	r3,zero,30310 <memchr+0x54>
   30374:	10bfff04 	addi	r2,r2,-4
   30378:	10c00128 	cmpgeui	r3,r2,4
   3037c:	21000104 	addi	r4,r4,4
   30380:	183ff51e 	bne	r3,zero,30358 <memchr+0x9c>
   30384:	003fe106 	br	3030c <memchr+0x50>
   30388:	f800283a 	ret

0003038c <memcpy>:
   3038c:	30c00430 	cmpltui	r3,r6,16
   30390:	2005883a 	mov	r2,r4
   30394:	18002d1e 	bne	r3,zero,3044c <memcpy+0xc0>
   30398:	2906b03a 	or	r3,r5,r4
   3039c:	18c000cc 	andi	r3,r3,3
   303a0:	1800351e 	bne	r3,zero,30478 <memcpy+0xec>
   303a4:	32fffc04 	addi	r11,r6,-16
   303a8:	5816d13a 	srli	r11,r11,4
   303ac:	280f883a 	mov	r7,r5
   303b0:	2007883a 	mov	r3,r4
   303b4:	5ac00044 	addi	r11,r11,1
   303b8:	5816913a 	slli	r11,r11,4
   303bc:	22d5883a 	add	r10,r4,r11
   303c0:	39000117 	ldw	r4,4(r7)
   303c4:	3a400017 	ldw	r9,0(r7)
   303c8:	3a000217 	ldw	r8,8(r7)
   303cc:	19000115 	stw	r4,4(r3)
   303d0:	39000317 	ldw	r4,12(r7)
   303d4:	1a400015 	stw	r9,0(r3)
   303d8:	1a000215 	stw	r8,8(r3)
   303dc:	19000315 	stw	r4,12(r3)
   303e0:	18c00404 	addi	r3,r3,16
   303e4:	39c00404 	addi	r7,r7,16
   303e8:	50fff51e 	bne	r10,r3,303c0 <memcpy+0x34>
   303ec:	3100030c 	andi	r4,r6,12
   303f0:	2acb883a 	add	r5,r5,r11
   303f4:	320003cc 	andi	r8,r6,15
   303f8:	20002226 	beq	r4,zero,30484 <memcpy+0xf8>
   303fc:	280f883a 	mov	r7,r5
   30400:	1813883a 	mov	r9,r3
   30404:	39c00104 	addi	r7,r7,4
   30408:	3abfff17 	ldw	r10,-4(r7)
   3040c:	41c9c83a 	sub	r4,r8,r7
   30410:	2909883a 	add	r4,r5,r4
   30414:	4a800015 	stw	r10,0(r9)
   30418:	21000128 	cmpgeui	r4,r4,4
   3041c:	4a400104 	addi	r9,r9,4
   30420:	203ff81e 	bne	r4,zero,30404 <memcpy+0x78>
   30424:	413fff04 	addi	r4,r8,-4
   30428:	2008d0ba 	srli	r4,r4,2
   3042c:	318000cc 	andi	r6,r6,3
   30430:	31ffffc4 	addi	r7,r6,-1
   30434:	21000044 	addi	r4,r4,1
   30438:	200890ba 	slli	r4,r4,2
   3043c:	1907883a 	add	r3,r3,r4
   30440:	290b883a 	add	r5,r5,r4
   30444:	3000041e 	bne	r6,zero,30458 <memcpy+0xcc>
   30448:	f800283a 	ret
   3044c:	2007883a 	mov	r3,r4
   30450:	31ffffc4 	addi	r7,r6,-1
   30454:	303ffc26 	beq	r6,zero,30448 <memcpy+0xbc>
   30458:	39c00044 	addi	r7,r7,1
   3045c:	19cf883a 	add	r7,r3,r7
   30460:	29800003 	ldbu	r6,0(r5)
   30464:	18c00044 	addi	r3,r3,1
   30468:	29400044 	addi	r5,r5,1
   3046c:	19bfffc5 	stb	r6,-1(r3)
   30470:	38fffb1e 	bne	r7,r3,30460 <memcpy+0xd4>
   30474:	f800283a 	ret
   30478:	31ffffc4 	addi	r7,r6,-1
   3047c:	2007883a 	mov	r3,r4
   30480:	003ff506 	br	30458 <memcpy+0xcc>
   30484:	400d883a 	mov	r6,r8
   30488:	003ff106 	br	30450 <memcpy+0xc4>

0003048c <memmove>:
   3048c:	2005883a 	mov	r2,r4
   30490:	29000a2e 	bgeu	r5,r4,304bc <memmove+0x30>
   30494:	2989883a 	add	r4,r5,r6
   30498:	1100082e 	bgeu	r2,r4,304bc <memmove+0x30>
   3049c:	1187883a 	add	r3,r2,r6
   304a0:	30003e26 	beq	r6,zero,3059c <memmove+0x110>
   304a4:	217fffc3 	ldbu	r5,-1(r4)
   304a8:	18ffffc4 	addi	r3,r3,-1
   304ac:	213fffc4 	addi	r4,r4,-1
   304b0:	19400005 	stb	r5,0(r3)
   304b4:	10fffb1e 	bne	r2,r3,304a4 <memmove+0x18>
   304b8:	f800283a 	ret
   304bc:	30c00430 	cmpltui	r3,r6,16
   304c0:	18000b26 	beq	r3,zero,304f0 <memmove+0x64>
   304c4:	1007883a 	mov	r3,r2
   304c8:	31ffffc4 	addi	r7,r6,-1
   304cc:	30003726 	beq	r6,zero,305ac <memmove+0x120>
   304d0:	39c00044 	addi	r7,r7,1
   304d4:	29cf883a 	add	r7,r5,r7
   304d8:	29800003 	ldbu	r6,0(r5)
   304dc:	29400044 	addi	r5,r5,1
   304e0:	18c00044 	addi	r3,r3,1
   304e4:	19bfffc5 	stb	r6,-1(r3)
   304e8:	29fffb1e 	bne	r5,r7,304d8 <memmove+0x4c>
   304ec:	f800283a 	ret
   304f0:	2886b03a 	or	r3,r5,r2
   304f4:	18c000cc 	andi	r3,r3,3
   304f8:	1800291e 	bne	r3,zero,305a0 <memmove+0x114>
   304fc:	327ffc04 	addi	r9,r6,-16
   30500:	4812d13a 	srli	r9,r9,4
   30504:	280f883a 	mov	r7,r5
   30508:	1007883a 	mov	r3,r2
   3050c:	4a400044 	addi	r9,r9,1
   30510:	4812913a 	slli	r9,r9,4
   30514:	1251883a 	add	r8,r2,r9
   30518:	39000017 	ldw	r4,0(r7)
   3051c:	39c00404 	addi	r7,r7,16
   30520:	18c00404 	addi	r3,r3,16
   30524:	193ffc15 	stw	r4,-16(r3)
   30528:	393ffd17 	ldw	r4,-12(r7)
   3052c:	193ffd15 	stw	r4,-12(r3)
   30530:	393ffe17 	ldw	r4,-8(r7)
   30534:	193ffe15 	stw	r4,-8(r3)
   30538:	393fff17 	ldw	r4,-4(r7)
   3053c:	193fff15 	stw	r4,-4(r3)
   30540:	40fff51e 	bne	r8,r3,30518 <memmove+0x8c>
   30544:	3100030c 	andi	r4,r6,12
   30548:	2a4b883a 	add	r5,r5,r9
   3054c:	320003cc 	andi	r8,r6,15
   30550:	20001726 	beq	r4,zero,305b0 <memmove+0x124>
   30554:	2813883a 	mov	r9,r5
   30558:	180f883a 	mov	r7,r3
   3055c:	4a800017 	ldw	r10,0(r9)
   30560:	39c00104 	addi	r7,r7,4
   30564:	41c9c83a 	sub	r4,r8,r7
   30568:	1909883a 	add	r4,r3,r4
   3056c:	21000128 	cmpgeui	r4,r4,4
   30570:	3abfff15 	stw	r10,-4(r7)
   30574:	4a400104 	addi	r9,r9,4
   30578:	203ff81e 	bne	r4,zero,3055c <memmove+0xd0>
   3057c:	413fff04 	addi	r4,r8,-4
   30580:	2008d0ba 	srli	r4,r4,2
   30584:	318000cc 	andi	r6,r6,3
   30588:	21000044 	addi	r4,r4,1
   3058c:	200890ba 	slli	r4,r4,2
   30590:	1907883a 	add	r3,r3,r4
   30594:	290b883a 	add	r5,r5,r4
   30598:	003fcb06 	br	304c8 <memmove+0x3c>
   3059c:	f800283a 	ret
   305a0:	31ffffc4 	addi	r7,r6,-1
   305a4:	1007883a 	mov	r3,r2
   305a8:	003fc906 	br	304d0 <memmove+0x44>
   305ac:	f800283a 	ret
   305b0:	400d883a 	mov	r6,r8
   305b4:	003fc406 	br	304c8 <memmove+0x3c>

000305b8 <memset>:
   305b8:	20c000cc 	andi	r3,r4,3
   305bc:	2005883a 	mov	r2,r4
   305c0:	18003626 	beq	r3,zero,3069c <memset+0xe4>
   305c4:	31ffffc4 	addi	r7,r6,-1
   305c8:	30003326 	beq	r6,zero,30698 <memset+0xe0>
   305cc:	2811883a 	mov	r8,r5
   305d0:	2007883a 	mov	r3,r4
   305d4:	00000306 	br	305e4 <memset+0x2c>
   305d8:	39ffffc4 	addi	r7,r7,-1
   305dc:	39bfffe0 	cmpeqi	r6,r7,-1
   305e0:	30002d1e 	bne	r6,zero,30698 <memset+0xe0>
   305e4:	18c00044 	addi	r3,r3,1
   305e8:	198000cc 	andi	r6,r3,3
   305ec:	1a3fffc5 	stb	r8,-1(r3)
   305f0:	303ff91e 	bne	r6,zero,305d8 <memset+0x20>
   305f4:	39000130 	cmpltui	r4,r7,4
   305f8:	2000221e 	bne	r4,zero,30684 <memset+0xcc>
   305fc:	29003fcc 	andi	r4,r5,255
   30600:	200c923a 	slli	r6,r4,8
   30604:	3a000430 	cmpltui	r8,r7,16
   30608:	3108b03a 	or	r4,r6,r4
   3060c:	200c943a 	slli	r6,r4,16
   30610:	310cb03a 	or	r6,r6,r4
   30614:	40000e1e 	bne	r8,zero,30650 <memset+0x98>
   30618:	393ffc04 	addi	r4,r7,-16
   3061c:	2008d13a 	srli	r4,r4,4
   30620:	21000044 	addi	r4,r4,1
   30624:	2008913a 	slli	r4,r4,4
   30628:	1909883a 	add	r4,r3,r4
   3062c:	19800015 	stw	r6,0(r3)
   30630:	19800115 	stw	r6,4(r3)
   30634:	19800215 	stw	r6,8(r3)
   30638:	19800315 	stw	r6,12(r3)
   3063c:	18c00404 	addi	r3,r3,16
   30640:	20fffa1e 	bne	r4,r3,3062c <memset+0x74>
   30644:	3900030c 	andi	r4,r7,12
   30648:	39c003cc 	andi	r7,r7,15
   3064c:	20000d26 	beq	r4,zero,30684 <memset+0xcc>
   30650:	1811883a 	mov	r8,r3
   30654:	42000104 	addi	r8,r8,4
   30658:	3a09c83a 	sub	r4,r7,r8
   3065c:	1909883a 	add	r4,r3,r4
   30660:	21000128 	cmpgeui	r4,r4,4
   30664:	41bfff15 	stw	r6,-4(r8)
   30668:	203ffa1e 	bne	r4,zero,30654 <memset+0x9c>
   3066c:	393fff04 	addi	r4,r7,-4
   30670:	2008d0ba 	srli	r4,r4,2
   30674:	39c000cc 	andi	r7,r7,3
   30678:	21000044 	addi	r4,r4,1
   3067c:	200890ba 	slli	r4,r4,2
   30680:	1907883a 	add	r3,r3,r4
   30684:	38000426 	beq	r7,zero,30698 <memset+0xe0>
   30688:	19cf883a 	add	r7,r3,r7
   3068c:	18c00044 	addi	r3,r3,1
   30690:	197fffc5 	stb	r5,-1(r3)
   30694:	38fffd1e 	bne	r7,r3,3068c <memset+0xd4>
   30698:	f800283a 	ret
   3069c:	2007883a 	mov	r3,r4
   306a0:	300f883a 	mov	r7,r6
   306a4:	003fd306 	br	305f4 <memset+0x3c>

000306a8 <_Balloc>:
   306a8:	20801317 	ldw	r2,76(r4)
   306ac:	defffc04 	addi	sp,sp,-16
   306b0:	dc400115 	stw	r17,4(sp)
   306b4:	dc000015 	stw	r16,0(sp)
   306b8:	dfc00315 	stw	ra,12(sp)
   306bc:	dc800215 	stw	r18,8(sp)
   306c0:	2021883a 	mov	r16,r4
   306c4:	2823883a 	mov	r17,r5
   306c8:	10000e26 	beq	r2,zero,30704 <_Balloc+0x5c>
   306cc:	880690ba 	slli	r3,r17,2
   306d0:	10c7883a 	add	r3,r2,r3
   306d4:	18800017 	ldw	r2,0(r3)
   306d8:	10001126 	beq	r2,zero,30720 <_Balloc+0x78>
   306dc:	11000017 	ldw	r4,0(r2)
   306e0:	19000015 	stw	r4,0(r3)
   306e4:	10000415 	stw	zero,16(r2)
   306e8:	10000315 	stw	zero,12(r2)
   306ec:	dfc00317 	ldw	ra,12(sp)
   306f0:	dc800217 	ldw	r18,8(sp)
   306f4:	dc400117 	ldw	r17,4(sp)
   306f8:	dc000017 	ldw	r16,0(sp)
   306fc:	dec00404 	addi	sp,sp,16
   30700:	f800283a 	ret
   30704:	01800844 	movi	r6,33
   30708:	01400104 	movi	r5,4
   3070c:	00339000 	call	33900 <_calloc_r>
   30710:	80801315 	stw	r2,76(r16)
   30714:	103fed1e 	bne	r2,zero,306cc <_Balloc+0x24>
   30718:	0005883a 	mov	r2,zero
   3071c:	003ff306 	br	306ec <_Balloc+0x44>
   30720:	04800044 	movi	r18,1
   30724:	9464983a 	sll	r18,r18,r17
   30728:	01400044 	movi	r5,1
   3072c:	8009883a 	mov	r4,r16
   30730:	91800144 	addi	r6,r18,5
   30734:	300c90ba 	slli	r6,r6,2
   30738:	00339000 	call	33900 <_calloc_r>
   3073c:	103ff626 	beq	r2,zero,30718 <_Balloc+0x70>
   30740:	14400115 	stw	r17,4(r2)
   30744:	14800215 	stw	r18,8(r2)
   30748:	003fe606 	br	306e4 <_Balloc+0x3c>

0003074c <_Bfree>:
   3074c:	28000726 	beq	r5,zero,3076c <_Bfree+0x20>
   30750:	28c00117 	ldw	r3,4(r5)
   30754:	20801317 	ldw	r2,76(r4)
   30758:	180690ba 	slli	r3,r3,2
   3075c:	10c5883a 	add	r2,r2,r3
   30760:	10c00017 	ldw	r3,0(r2)
   30764:	28c00015 	stw	r3,0(r5)
   30768:	11400015 	stw	r5,0(r2)
   3076c:	f800283a 	ret

00030770 <__multadd>:
   30770:	defff704 	addi	sp,sp,-36
   30774:	dc800215 	stw	r18,8(sp)
   30778:	2c800417 	ldw	r18,16(r5)
   3077c:	ddc00715 	stw	r23,28(sp)
   30780:	dd800615 	stw	r22,24(sp)
   30784:	dd400515 	stw	r21,20(sp)
   30788:	dd000415 	stw	r20,16(sp)
   3078c:	dcc00315 	stw	r19,12(sp)
   30790:	dc400115 	stw	r17,4(sp)
   30794:	dfc00815 	stw	ra,32(sp)
   30798:	dc000015 	stw	r16,0(sp)
   3079c:	2827883a 	mov	r19,r5
   307a0:	2029883a 	mov	r20,r4
   307a4:	302b883a 	mov	r21,r6
   307a8:	3823883a 	mov	r17,r7
   307ac:	2d800504 	addi	r22,r5,20
   307b0:	002f883a 	mov	r23,zero
   307b4:	b4000017 	ldw	r16,0(r22)
   307b8:	a80b883a 	mov	r5,r21
   307bc:	b5800104 	addi	r22,r22,4
   307c0:	813fffcc 	andi	r4,r16,65535
   307c4:	0026b4c0 	call	26b4c <__mulsi3>
   307c8:	8008d43a 	srli	r4,r16,16
   307cc:	a80b883a 	mov	r5,r21
   307d0:	1461883a 	add	r16,r2,r17
   307d4:	0026b4c0 	call	26b4c <__mulsi3>
   307d8:	800ed43a 	srli	r7,r16,16
   307dc:	843fffcc 	andi	r16,r16,65535
   307e0:	bdc00044 	addi	r23,r23,1
   307e4:	11c5883a 	add	r2,r2,r7
   307e8:	1006943a 	slli	r3,r2,16
   307ec:	1022d43a 	srli	r17,r2,16
   307f0:	1c21883a 	add	r16,r3,r16
   307f4:	b43fff15 	stw	r16,-4(r22)
   307f8:	bcbfee16 	blt	r23,r18,307b4 <__multadd+0x44>
   307fc:	88000826 	beq	r17,zero,30820 <__multadd+0xb0>
   30800:	98800217 	ldw	r2,8(r19)
   30804:	9080120e 	bge	r18,r2,30850 <__multadd+0xe0>
   30808:	90800144 	addi	r2,r18,5
   3080c:	100490ba 	slli	r2,r2,2
   30810:	94800044 	addi	r18,r18,1
   30814:	9885883a 	add	r2,r19,r2
   30818:	14400015 	stw	r17,0(r2)
   3081c:	9c800415 	stw	r18,16(r19)
   30820:	9805883a 	mov	r2,r19
   30824:	dfc00817 	ldw	ra,32(sp)
   30828:	ddc00717 	ldw	r23,28(sp)
   3082c:	dd800617 	ldw	r22,24(sp)
   30830:	dd400517 	ldw	r21,20(sp)
   30834:	dd000417 	ldw	r20,16(sp)
   30838:	dcc00317 	ldw	r19,12(sp)
   3083c:	dc800217 	ldw	r18,8(sp)
   30840:	dc400117 	ldw	r17,4(sp)
   30844:	dc000017 	ldw	r16,0(sp)
   30848:	dec00904 	addi	sp,sp,36
   3084c:	f800283a 	ret
   30850:	99400117 	ldw	r5,4(r19)
   30854:	a009883a 	mov	r4,r20
   30858:	29400044 	addi	r5,r5,1
   3085c:	00306a80 	call	306a8 <_Balloc>
   30860:	1021883a 	mov	r16,r2
   30864:	10001226 	beq	r2,zero,308b0 <__multadd+0x140>
   30868:	99800417 	ldw	r6,16(r19)
   3086c:	99400304 	addi	r5,r19,12
   30870:	11000304 	addi	r4,r2,12
   30874:	31800084 	addi	r6,r6,2
   30878:	300c90ba 	slli	r6,r6,2
   3087c:	003038c0 	call	3038c <memcpy>
   30880:	98000926 	beq	r19,zero,308a8 <__multadd+0x138>
   30884:	98c00117 	ldw	r3,4(r19)
   30888:	a0801317 	ldw	r2,76(r20)
   3088c:	180690ba 	slli	r3,r3,2
   30890:	10c5883a 	add	r2,r2,r3
   30894:	10c00017 	ldw	r3,0(r2)
   30898:	98c00015 	stw	r3,0(r19)
   3089c:	14c00015 	stw	r19,0(r2)
   308a0:	8027883a 	mov	r19,r16
   308a4:	003fd806 	br	30808 <__multadd+0x98>
   308a8:	8027883a 	mov	r19,r16
   308ac:	003fd606 	br	30808 <__multadd+0x98>
   308b0:	01c00134 	movhi	r7,4
   308b4:	01000134 	movhi	r4,4
   308b8:	39e2e504 	addi	r7,r7,-29804
   308bc:	000d883a 	mov	r6,zero
   308c0:	01402d44 	movi	r5,181
   308c4:	2122fa04 	addi	r4,r4,-29720
   308c8:	00338880 	call	33888 <__assert_func>

000308cc <__s2b>:
   308cc:	defff904 	addi	sp,sp,-28
   308d0:	dc800215 	stw	r18,8(sp)
   308d4:	dc000015 	stw	r16,0(sp)
   308d8:	2025883a 	mov	r18,r4
   308dc:	2821883a 	mov	r16,r5
   308e0:	39000204 	addi	r4,r7,8
   308e4:	01400244 	movi	r5,9
   308e8:	dcc00315 	stw	r19,12(sp)
   308ec:	dc400115 	stw	r17,4(sp)
   308f0:	dfc00615 	stw	ra,24(sp)
   308f4:	3823883a 	mov	r17,r7
   308f8:	dd400515 	stw	r21,20(sp)
   308fc:	dd000415 	stw	r20,16(sp)
   30900:	3027883a 	mov	r19,r6
   30904:	00269980 	call	26998 <__divsi3>
   30908:	88c00290 	cmplti	r3,r17,10
   3090c:	1800341e 	bne	r3,zero,309e0 <__s2b+0x114>
   30910:	00c00044 	movi	r3,1
   30914:	000b883a 	mov	r5,zero
   30918:	18c7883a 	add	r3,r3,r3
   3091c:	29400044 	addi	r5,r5,1
   30920:	18bffd16 	blt	r3,r2,30918 <__s2b+0x4c>
   30924:	9009883a 	mov	r4,r18
   30928:	00306a80 	call	306a8 <_Balloc>
   3092c:	100b883a 	mov	r5,r2
   30930:	10002d26 	beq	r2,zero,309e8 <__s2b+0x11c>
   30934:	d8800717 	ldw	r2,28(sp)
   30938:	28800515 	stw	r2,20(r5)
   3093c:	00800044 	movi	r2,1
   30940:	28800415 	stw	r2,16(r5)
   30944:	98800290 	cmplti	r2,r19,10
   30948:	1000221e 	bne	r2,zero,309d4 <__s2b+0x108>
   3094c:	85400244 	addi	r21,r16,9
   30950:	a829883a 	mov	r20,r21
   30954:	84e1883a 	add	r16,r16,r19
   30958:	a1c00007 	ldb	r7,0(r20)
   3095c:	01800284 	movi	r6,10
   30960:	9009883a 	mov	r4,r18
   30964:	39fff404 	addi	r7,r7,-48
   30968:	00307700 	call	30770 <__multadd>
   3096c:	a5000044 	addi	r20,r20,1
   30970:	100b883a 	mov	r5,r2
   30974:	a43ff81e 	bne	r20,r16,30958 <__s2b+0x8c>
   30978:	9c3ffe04 	addi	r16,r19,-8
   3097c:	ac21883a 	add	r16,r21,r16
   30980:	9c400a0e 	bge	r19,r17,309ac <__s2b+0xe0>
   30984:	8ce3c83a 	sub	r17,r17,r19
   30988:	8463883a 	add	r17,r16,r17
   3098c:	81c00007 	ldb	r7,0(r16)
   30990:	01800284 	movi	r6,10
   30994:	9009883a 	mov	r4,r18
   30998:	39fff404 	addi	r7,r7,-48
   3099c:	00307700 	call	30770 <__multadd>
   309a0:	84000044 	addi	r16,r16,1
   309a4:	100b883a 	mov	r5,r2
   309a8:	8c3ff81e 	bne	r17,r16,3098c <__s2b+0xc0>
   309ac:	2805883a 	mov	r2,r5
   309b0:	dfc00617 	ldw	ra,24(sp)
   309b4:	dd400517 	ldw	r21,20(sp)
   309b8:	dd000417 	ldw	r20,16(sp)
   309bc:	dcc00317 	ldw	r19,12(sp)
   309c0:	dc800217 	ldw	r18,8(sp)
   309c4:	dc400117 	ldw	r17,4(sp)
   309c8:	dc000017 	ldw	r16,0(sp)
   309cc:	dec00704 	addi	sp,sp,28
   309d0:	f800283a 	ret
   309d4:	84000284 	addi	r16,r16,10
   309d8:	04c00244 	movi	r19,9
   309dc:	003fe806 	br	30980 <__s2b+0xb4>
   309e0:	000b883a 	mov	r5,zero
   309e4:	003fcf06 	br	30924 <__s2b+0x58>
   309e8:	01c00134 	movhi	r7,4
   309ec:	01000134 	movhi	r4,4
   309f0:	39e2e504 	addi	r7,r7,-29804
   309f4:	000d883a 	mov	r6,zero
   309f8:	01403384 	movi	r5,206
   309fc:	2122fa04 	addi	r4,r4,-29720
   30a00:	00338880 	call	33888 <__assert_func>

00030a04 <__hi0bits>:
   30a04:	20bfffec 	andhi	r2,r4,65535
   30a08:	1000131e 	bne	r2,zero,30a58 <__hi0bits+0x54>
   30a0c:	2008943a 	slli	r4,r4,16
   30a10:	00800404 	movi	r2,16
   30a14:	20ffc02c 	andhi	r3,r4,65280
   30a18:	1800021e 	bne	r3,zero,30a24 <__hi0bits+0x20>
   30a1c:	2008923a 	slli	r4,r4,8
   30a20:	10800204 	addi	r2,r2,8
   30a24:	20fc002c 	andhi	r3,r4,61440
   30a28:	1800021e 	bne	r3,zero,30a34 <__hi0bits+0x30>
   30a2c:	2008913a 	slli	r4,r4,4
   30a30:	10800104 	addi	r2,r2,4
   30a34:	20f0002c 	andhi	r3,r4,49152
   30a38:	1800021e 	bne	r3,zero,30a44 <__hi0bits+0x40>
   30a3c:	200890ba 	slli	r4,r4,2
   30a40:	10800084 	addi	r2,r2,2
   30a44:	20000316 	blt	r4,zero,30a54 <__hi0bits+0x50>
   30a48:	2110002c 	andhi	r4,r4,16384
   30a4c:	10800044 	addi	r2,r2,1
   30a50:	20000326 	beq	r4,zero,30a60 <__hi0bits+0x5c>
   30a54:	f800283a 	ret
   30a58:	0005883a 	mov	r2,zero
   30a5c:	003fed06 	br	30a14 <__hi0bits+0x10>
   30a60:	00800804 	movi	r2,32
   30a64:	f800283a 	ret

00030a68 <__lo0bits>:
   30a68:	20c00017 	ldw	r3,0(r4)
   30a6c:	188001cc 	andi	r2,r3,7
   30a70:	10000826 	beq	r2,zero,30a94 <__lo0bits+0x2c>
   30a74:	1880004c 	andi	r2,r3,1
   30a78:	10001f1e 	bne	r2,zero,30af8 <__lo0bits+0x90>
   30a7c:	1880008c 	andi	r2,r3,2
   30a80:	10002126 	beq	r2,zero,30b08 <__lo0bits+0xa0>
   30a84:	1806d07a 	srli	r3,r3,1
   30a88:	00800044 	movi	r2,1
   30a8c:	20c00015 	stw	r3,0(r4)
   30a90:	f800283a 	ret
   30a94:	18bfffcc 	andi	r2,r3,65535
   30a98:	10001426 	beq	r2,zero,30aec <__lo0bits+0x84>
   30a9c:	0005883a 	mov	r2,zero
   30aa0:	19403fcc 	andi	r5,r3,255
   30aa4:	2800021e 	bne	r5,zero,30ab0 <__lo0bits+0x48>
   30aa8:	1806d23a 	srli	r3,r3,8
   30aac:	10800204 	addi	r2,r2,8
   30ab0:	194003cc 	andi	r5,r3,15
   30ab4:	2800021e 	bne	r5,zero,30ac0 <__lo0bits+0x58>
   30ab8:	1806d13a 	srli	r3,r3,4
   30abc:	10800104 	addi	r2,r2,4
   30ac0:	194000cc 	andi	r5,r3,3
   30ac4:	2800021e 	bne	r5,zero,30ad0 <__lo0bits+0x68>
   30ac8:	1806d0ba 	srli	r3,r3,2
   30acc:	10800084 	addi	r2,r2,2
   30ad0:	1940004c 	andi	r5,r3,1
   30ad4:	2800031e 	bne	r5,zero,30ae4 <__lo0bits+0x7c>
   30ad8:	1806d07a 	srli	r3,r3,1
   30adc:	10800044 	addi	r2,r2,1
   30ae0:	18000726 	beq	r3,zero,30b00 <__lo0bits+0x98>
   30ae4:	20c00015 	stw	r3,0(r4)
   30ae8:	f800283a 	ret
   30aec:	1806d43a 	srli	r3,r3,16
   30af0:	00800404 	movi	r2,16
   30af4:	003fea06 	br	30aa0 <__lo0bits+0x38>
   30af8:	0005883a 	mov	r2,zero
   30afc:	f800283a 	ret
   30b00:	00800804 	movi	r2,32
   30b04:	f800283a 	ret
   30b08:	1806d0ba 	srli	r3,r3,2
   30b0c:	00800084 	movi	r2,2
   30b10:	20c00015 	stw	r3,0(r4)
   30b14:	f800283a 	ret

00030b18 <__i2b>:
   30b18:	20c01317 	ldw	r3,76(r4)
   30b1c:	defffd04 	addi	sp,sp,-12
   30b20:	dc400115 	stw	r17,4(sp)
   30b24:	dc000015 	stw	r16,0(sp)
   30b28:	dfc00215 	stw	ra,8(sp)
   30b2c:	2021883a 	mov	r16,r4
   30b30:	2823883a 	mov	r17,r5
   30b34:	18000d26 	beq	r3,zero,30b6c <__i2b+0x54>
   30b38:	18800117 	ldw	r2,4(r3)
   30b3c:	10001826 	beq	r2,zero,30ba0 <__i2b+0x88>
   30b40:	11000017 	ldw	r4,0(r2)
   30b44:	19000115 	stw	r4,4(r3)
   30b48:	00c00044 	movi	r3,1
   30b4c:	10000315 	stw	zero,12(r2)
   30b50:	14400515 	stw	r17,20(r2)
   30b54:	10c00415 	stw	r3,16(r2)
   30b58:	dfc00217 	ldw	ra,8(sp)
   30b5c:	dc400117 	ldw	r17,4(sp)
   30b60:	dc000017 	ldw	r16,0(sp)
   30b64:	dec00304 	addi	sp,sp,12
   30b68:	f800283a 	ret
   30b6c:	01800844 	movi	r6,33
   30b70:	01400104 	movi	r5,4
   30b74:	00339000 	call	33900 <_calloc_r>
   30b78:	80801315 	stw	r2,76(r16)
   30b7c:	1007883a 	mov	r3,r2
   30b80:	103fed1e 	bne	r2,zero,30b38 <__i2b+0x20>
   30b84:	01c00134 	movhi	r7,4
   30b88:	01000134 	movhi	r4,4
   30b8c:	39e2e504 	addi	r7,r7,-29804
   30b90:	000d883a 	mov	r6,zero
   30b94:	01405004 	movi	r5,320
   30b98:	2122fa04 	addi	r4,r4,-29720
   30b9c:	00338880 	call	33888 <__assert_func>
   30ba0:	01800704 	movi	r6,28
   30ba4:	01400044 	movi	r5,1
   30ba8:	8009883a 	mov	r4,r16
   30bac:	00339000 	call	33900 <_calloc_r>
   30bb0:	103ff426 	beq	r2,zero,30b84 <__i2b+0x6c>
   30bb4:	00c00044 	movi	r3,1
   30bb8:	10c00115 	stw	r3,4(r2)
   30bbc:	00c00084 	movi	r3,2
   30bc0:	10c00215 	stw	r3,8(r2)
   30bc4:	003fe006 	br	30b48 <__i2b+0x30>

00030bc8 <__multiply>:
   30bc8:	defff004 	addi	sp,sp,-64
   30bcc:	dd800c15 	stw	r22,48(sp)
   30bd0:	dc400715 	stw	r17,28(sp)
   30bd4:	2d800417 	ldw	r22,16(r5)
   30bd8:	34400417 	ldw	r17,16(r6)
   30bdc:	dc800815 	stw	r18,32(sp)
   30be0:	dc000615 	stw	r16,24(sp)
   30be4:	dfc00f15 	stw	ra,60(sp)
   30be8:	df000e15 	stw	fp,56(sp)
   30bec:	ddc00d15 	stw	r23,52(sp)
   30bf0:	dd400b15 	stw	r21,44(sp)
   30bf4:	dd000a15 	stw	r20,40(sp)
   30bf8:	dcc00915 	stw	r19,36(sp)
   30bfc:	2825883a 	mov	r18,r5
   30c00:	3021883a 	mov	r16,r6
   30c04:	b4400516 	blt	r22,r17,30c1c <__multiply+0x54>
   30c08:	8807883a 	mov	r3,r17
   30c0c:	2821883a 	mov	r16,r5
   30c10:	b023883a 	mov	r17,r22
   30c14:	3025883a 	mov	r18,r6
   30c18:	182d883a 	mov	r22,r3
   30c1c:	80800217 	ldw	r2,8(r16)
   30c20:	8d87883a 	add	r3,r17,r22
   30c24:	d8c00015 	stw	r3,0(sp)
   30c28:	81400117 	ldw	r5,4(r16)
   30c2c:	10c0010e 	bge	r2,r3,30c34 <__multiply+0x6c>
   30c30:	29400044 	addi	r5,r5,1
   30c34:	00306a80 	call	306a8 <_Balloc>
   30c38:	d8800515 	stw	r2,20(sp)
   30c3c:	10008c26 	beq	r2,zero,30e70 <__multiply+0x2a8>
   30c40:	d8800017 	ldw	r2,0(sp)
   30c44:	102690ba 	slli	r19,r2,2
   30c48:	d8800517 	ldw	r2,20(sp)
   30c4c:	15000504 	addi	r20,r2,20
   30c50:	a4c5883a 	add	r2,r20,r19
   30c54:	d8800115 	stw	r2,4(sp)
   30c58:	a0800a2e 	bgeu	r20,r2,30c84 <__multiply+0xbc>
   30c5c:	d8800117 	ldw	r2,4(sp)
   30c60:	d8c00517 	ldw	r3,20(sp)
   30c64:	000b883a 	mov	r5,zero
   30c68:	a009883a 	mov	r4,r20
   30c6c:	10cdc83a 	sub	r6,r2,r3
   30c70:	31bffac4 	addi	r6,r6,-21
   30c74:	300cd0ba 	srli	r6,r6,2
   30c78:	31800044 	addi	r6,r6,1
   30c7c:	300c90ba 	slli	r6,r6,2
   30c80:	00305b80 	call	305b8 <memset>
   30c84:	b02c90ba 	slli	r22,r22,2
   30c88:	882290ba 	slli	r17,r17,2
   30c8c:	94800504 	addi	r18,r18,20
   30c90:	80800504 	addi	r2,r16,20
   30c94:	9587883a 	add	r3,r18,r22
   30c98:	d8800315 	stw	r2,12(sp)
   30c9c:	d8c00215 	stw	r3,8(sp)
   30ca0:	1463883a 	add	r17,r2,r17
   30ca4:	90c0542e 	bgeu	r18,r3,30df8 <__multiply+0x230>
   30ca8:	80800544 	addi	r2,r16,21
   30cac:	88806d36 	bltu	r17,r2,30e64 <__multiply+0x29c>
   30cb0:	8c05c83a 	sub	r2,r17,r16
   30cb4:	10bffac4 	addi	r2,r2,-21
   30cb8:	1004d0ba 	srli	r2,r2,2
   30cbc:	10800044 	addi	r2,r2,1
   30cc0:	100490ba 	slli	r2,r2,2
   30cc4:	d8800415 	stw	r2,16(sp)
   30cc8:	00000606 	br	30ce4 <__multiply+0x11c>
   30ccc:	102ad43a 	srli	r21,r2,16
   30cd0:	a800271e 	bne	r21,zero,30d70 <__multiply+0x1a8>
   30cd4:	d8800217 	ldw	r2,8(sp)
   30cd8:	94800104 	addi	r18,r18,4
   30cdc:	a5000104 	addi	r20,r20,4
   30ce0:	9080452e 	bgeu	r18,r2,30df8 <__multiply+0x230>
   30ce4:	90800017 	ldw	r2,0(r18)
   30ce8:	15ffffcc 	andi	r23,r2,65535
   30cec:	b83ff726 	beq	r23,zero,30ccc <__multiply+0x104>
   30cf0:	dd400317 	ldw	r21,12(sp)
   30cf4:	a02d883a 	mov	r22,r20
   30cf8:	0027883a 	mov	r19,zero
   30cfc:	af000017 	ldw	fp,0(r21)
   30d00:	b4000017 	ldw	r16,0(r22)
   30d04:	b80b883a 	mov	r5,r23
   30d08:	e13fffcc 	andi	r4,fp,65535
   30d0c:	0026b4c0 	call	26b4c <__mulsi3>
   30d10:	e008d43a 	srli	r4,fp,16
   30d14:	823fffcc 	andi	r8,r16,65535
   30d18:	1205883a 	add	r2,r2,r8
   30d1c:	b80b883a 	mov	r5,r23
   30d20:	14e7883a 	add	r19,r2,r19
   30d24:	8020d43a 	srli	r16,r16,16
   30d28:	0026b4c0 	call	26b4c <__mulsi3>
   30d2c:	9808d43a 	srli	r4,r19,16
   30d30:	1405883a 	add	r2,r2,r16
   30d34:	98ffffcc 	andi	r3,r19,65535
   30d38:	1105883a 	add	r2,r2,r4
   30d3c:	1008943a 	slli	r4,r2,16
   30d40:	b5800104 	addi	r22,r22,4
   30d44:	ad400104 	addi	r21,r21,4
   30d48:	20c6b03a 	or	r3,r4,r3
   30d4c:	b0ffff15 	stw	r3,-4(r22)
   30d50:	1026d43a 	srli	r19,r2,16
   30d54:	ac7fe936 	bltu	r21,r17,30cfc <__multiply+0x134>
   30d58:	d8800417 	ldw	r2,16(sp)
   30d5c:	a085883a 	add	r2,r20,r2
   30d60:	14c00015 	stw	r19,0(r2)
   30d64:	90800017 	ldw	r2,0(r18)
   30d68:	102ad43a 	srli	r21,r2,16
   30d6c:	a83fd926 	beq	r21,zero,30cd4 <__multiply+0x10c>
   30d70:	a5c00017 	ldw	r23,0(r20)
   30d74:	dd800317 	ldw	r22,12(sp)
   30d78:	a027883a 	mov	r19,r20
   30d7c:	b821883a 	mov	r16,r23
   30d80:	0039883a 	mov	fp,zero
   30d84:	b100000b 	ldhu	r4,0(r22)
   30d88:	a80b883a 	mov	r5,r21
   30d8c:	9cc00104 	addi	r19,r19,4
   30d90:	0026b4c0 	call	26b4c <__mulsi3>
   30d94:	800cd43a 	srli	r6,r16,16
   30d98:	b8ffffcc 	andi	r3,r23,65535
   30d9c:	b5800104 	addi	r22,r22,4
   30da0:	118d883a 	add	r6,r2,r6
   30da4:	3739883a 	add	fp,r6,fp
   30da8:	e004943a 	slli	r2,fp,16
   30dac:	9c000017 	ldw	r16,0(r19)
   30db0:	a80b883a 	mov	r5,r21
   30db4:	10c6b03a 	or	r3,r2,r3
   30db8:	98ffff15 	stw	r3,-4(r19)
   30dbc:	b13fff8b 	ldhu	r4,-2(r22)
   30dc0:	0026b4c0 	call	26b4c <__mulsi3>
   30dc4:	e00cd43a 	srli	r6,fp,16
   30dc8:	80ffffcc 	andi	r3,r16,65535
   30dcc:	10c7883a 	add	r3,r2,r3
   30dd0:	19af883a 	add	r23,r3,r6
   30dd4:	b838d43a 	srli	fp,r23,16
   30dd8:	b47fea36 	bltu	r22,r17,30d84 <__multiply+0x1bc>
   30ddc:	d8800417 	ldw	r2,16(sp)
   30de0:	94800104 	addi	r18,r18,4
   30de4:	a085883a 	add	r2,r20,r2
   30de8:	15c00015 	stw	r23,0(r2)
   30dec:	d8800217 	ldw	r2,8(sp)
   30df0:	a5000104 	addi	r20,r20,4
   30df4:	90bfbb36 	bltu	r18,r2,30ce4 <__multiply+0x11c>
   30df8:	d8800017 	ldw	r2,0(sp)
   30dfc:	00800516 	blt	zero,r2,30e14 <__multiply+0x24c>
   30e00:	00000906 	br	30e28 <__multiply+0x260>
   30e04:	d8800017 	ldw	r2,0(sp)
   30e08:	10bfffc4 	addi	r2,r2,-1
   30e0c:	d8800015 	stw	r2,0(sp)
   30e10:	10000526 	beq	r2,zero,30e28 <__multiply+0x260>
   30e14:	d8c00117 	ldw	r3,4(sp)
   30e18:	18bfff17 	ldw	r2,-4(r3)
   30e1c:	18ffff04 	addi	r3,r3,-4
   30e20:	d8c00115 	stw	r3,4(sp)
   30e24:	103ff726 	beq	r2,zero,30e04 <__multiply+0x23c>
   30e28:	d8800517 	ldw	r2,20(sp)
   30e2c:	d8c00017 	ldw	r3,0(sp)
   30e30:	10c00415 	stw	r3,16(r2)
   30e34:	dfc00f17 	ldw	ra,60(sp)
   30e38:	df000e17 	ldw	fp,56(sp)
   30e3c:	ddc00d17 	ldw	r23,52(sp)
   30e40:	dd800c17 	ldw	r22,48(sp)
   30e44:	dd400b17 	ldw	r21,44(sp)
   30e48:	dd000a17 	ldw	r20,40(sp)
   30e4c:	dcc00917 	ldw	r19,36(sp)
   30e50:	dc800817 	ldw	r18,32(sp)
   30e54:	dc400717 	ldw	r17,28(sp)
   30e58:	dc000617 	ldw	r16,24(sp)
   30e5c:	dec01004 	addi	sp,sp,64
   30e60:	f800283a 	ret
   30e64:	00800104 	movi	r2,4
   30e68:	d8800415 	stw	r2,16(sp)
   30e6c:	003f9d06 	br	30ce4 <__multiply+0x11c>
   30e70:	01c00134 	movhi	r7,4
   30e74:	01000134 	movhi	r4,4
   30e78:	39e2e504 	addi	r7,r7,-29804
   30e7c:	000d883a 	mov	r6,zero
   30e80:	01405744 	movi	r5,349
   30e84:	2122fa04 	addi	r4,r4,-29720
   30e88:	00338880 	call	33888 <__assert_func>

00030e8c <__pow5mult>:
   30e8c:	defffb04 	addi	sp,sp,-20
   30e90:	dcc00315 	stw	r19,12(sp)
   30e94:	dc000015 	stw	r16,0(sp)
   30e98:	dfc00415 	stw	ra,16(sp)
   30e9c:	dc800215 	stw	r18,8(sp)
   30ea0:	dc400115 	stw	r17,4(sp)
   30ea4:	308000cc 	andi	r2,r6,3
   30ea8:	3021883a 	mov	r16,r6
   30eac:	2027883a 	mov	r19,r4
   30eb0:	10002d1e 	bne	r2,zero,30f68 <__pow5mult+0xdc>
   30eb4:	2825883a 	mov	r18,r5
   30eb8:	8021d0ba 	srai	r16,r16,2
   30ebc:	80001926 	beq	r16,zero,30f24 <__pow5mult+0x98>
   30ec0:	9c401217 	ldw	r17,72(r19)
   30ec4:	8800061e 	bne	r17,zero,30ee0 <__pow5mult+0x54>
   30ec8:	00002f06 	br	30f88 <__pow5mult+0xfc>
   30ecc:	8021d07a 	srai	r16,r16,1
   30ed0:	80001426 	beq	r16,zero,30f24 <__pow5mult+0x98>
   30ed4:	88800017 	ldw	r2,0(r17)
   30ed8:	10001a26 	beq	r2,zero,30f44 <__pow5mult+0xb8>
   30edc:	1023883a 	mov	r17,r2
   30ee0:	8080004c 	andi	r2,r16,1
   30ee4:	103ff926 	beq	r2,zero,30ecc <__pow5mult+0x40>
   30ee8:	880d883a 	mov	r6,r17
   30eec:	900b883a 	mov	r5,r18
   30ef0:	9809883a 	mov	r4,r19
   30ef4:	0030bc80 	call	30bc8 <__multiply>
   30ef8:	90001926 	beq	r18,zero,30f60 <__pow5mult+0xd4>
   30efc:	91000117 	ldw	r4,4(r18)
   30f00:	98c01317 	ldw	r3,76(r19)
   30f04:	8021d07a 	srai	r16,r16,1
   30f08:	200890ba 	slli	r4,r4,2
   30f0c:	1907883a 	add	r3,r3,r4
   30f10:	19000017 	ldw	r4,0(r3)
   30f14:	91000015 	stw	r4,0(r18)
   30f18:	1c800015 	stw	r18,0(r3)
   30f1c:	1025883a 	mov	r18,r2
   30f20:	803fec1e 	bne	r16,zero,30ed4 <__pow5mult+0x48>
   30f24:	9005883a 	mov	r2,r18
   30f28:	dfc00417 	ldw	ra,16(sp)
   30f2c:	dcc00317 	ldw	r19,12(sp)
   30f30:	dc800217 	ldw	r18,8(sp)
   30f34:	dc400117 	ldw	r17,4(sp)
   30f38:	dc000017 	ldw	r16,0(sp)
   30f3c:	dec00504 	addi	sp,sp,20
   30f40:	f800283a 	ret
   30f44:	880d883a 	mov	r6,r17
   30f48:	880b883a 	mov	r5,r17
   30f4c:	9809883a 	mov	r4,r19
   30f50:	0030bc80 	call	30bc8 <__multiply>
   30f54:	88800015 	stw	r2,0(r17)
   30f58:	10000015 	stw	zero,0(r2)
   30f5c:	003fdf06 	br	30edc <__pow5mult+0x50>
   30f60:	1025883a 	mov	r18,r2
   30f64:	003fd906 	br	30ecc <__pow5mult+0x40>
   30f68:	100490ba 	slli	r2,r2,2
   30f6c:	00c00134 	movhi	r3,4
   30f70:	000f883a 	mov	r7,zero
   30f74:	10c7883a 	add	r3,r2,r3
   30f78:	19a30917 	ldw	r6,-29660(r3)
   30f7c:	00307700 	call	30770 <__multadd>
   30f80:	1025883a 	mov	r18,r2
   30f84:	003fcc06 	br	30eb8 <__pow5mult+0x2c>
   30f88:	01400044 	movi	r5,1
   30f8c:	9809883a 	mov	r4,r19
   30f90:	00306a80 	call	306a8 <_Balloc>
   30f94:	1023883a 	mov	r17,r2
   30f98:	10000726 	beq	r2,zero,30fb8 <__pow5mult+0x12c>
   30f9c:	00809c44 	movi	r2,625
   30fa0:	88800515 	stw	r2,20(r17)
   30fa4:	00800044 	movi	r2,1
   30fa8:	88800415 	stw	r2,16(r17)
   30fac:	9c401215 	stw	r17,72(r19)
   30fb0:	88000015 	stw	zero,0(r17)
   30fb4:	003fca06 	br	30ee0 <__pow5mult+0x54>
   30fb8:	01c00134 	movhi	r7,4
   30fbc:	01000134 	movhi	r4,4
   30fc0:	39e2e504 	addi	r7,r7,-29804
   30fc4:	000d883a 	mov	r6,zero
   30fc8:	01405004 	movi	r5,320
   30fcc:	2122fa04 	addi	r4,r4,-29720
   30fd0:	00338880 	call	33888 <__assert_func>

00030fd4 <__lshift>:
   30fd4:	defff804 	addi	sp,sp,-32
   30fd8:	dd800615 	stw	r22,24(sp)
   30fdc:	dc000015 	stw	r16,0(sp)
   30fe0:	302dd17a 	srai	r22,r6,5
   30fe4:	2c000417 	ldw	r16,16(r5)
   30fe8:	28800217 	ldw	r2,8(r5)
   30fec:	dd000415 	stw	r20,16(sp)
   30ff0:	b421883a 	add	r16,r22,r16
   30ff4:	dcc00315 	stw	r19,12(sp)
   30ff8:	dc800215 	stw	r18,8(sp)
   30ffc:	dc400115 	stw	r17,4(sp)
   31000:	dfc00715 	stw	ra,28(sp)
   31004:	dd400515 	stw	r21,20(sp)
   31008:	85000044 	addi	r20,r16,1
   3100c:	2827883a 	mov	r19,r5
   31010:	3025883a 	mov	r18,r6
   31014:	29400117 	ldw	r5,4(r5)
   31018:	2023883a 	mov	r17,r4
   3101c:	1500030e 	bge	r2,r20,3102c <__lshift+0x58>
   31020:	1085883a 	add	r2,r2,r2
   31024:	29400044 	addi	r5,r5,1
   31028:	153ffd16 	blt	r2,r20,31020 <__lshift+0x4c>
   3102c:	8809883a 	mov	r4,r17
   31030:	00306a80 	call	306a8 <_Balloc>
   31034:	102b883a 	mov	r21,r2
   31038:	10004126 	beq	r2,zero,31140 <__lshift+0x16c>
   3103c:	11000504 	addi	r4,r2,20
   31040:	0580050e 	bge	zero,r22,31058 <__lshift+0x84>
   31044:	b02c90ba 	slli	r22,r22,2
   31048:	000b883a 	mov	r5,zero
   3104c:	b00d883a 	mov	r6,r22
   31050:	00305b80 	call	305b8 <memset>
   31054:	1589883a 	add	r4,r2,r22
   31058:	9a000417 	ldw	r8,16(r19)
   3105c:	98c00504 	addi	r3,r19,20
   31060:	948007cc 	andi	r18,r18,31
   31064:	401090ba 	slli	r8,r8,2
   31068:	1a11883a 	add	r8,r3,r8
   3106c:	90002c26 	beq	r18,zero,31120 <__lshift+0x14c>
   31070:	01400804 	movi	r5,32
   31074:	2c8bc83a 	sub	r5,r5,r18
   31078:	2005883a 	mov	r2,r4
   3107c:	000f883a 	mov	r7,zero
   31080:	19800017 	ldw	r6,0(r3)
   31084:	10800104 	addi	r2,r2,4
   31088:	18c00104 	addi	r3,r3,4
   3108c:	348c983a 	sll	r6,r6,r18
   31090:	31ccb03a 	or	r6,r6,r7
   31094:	11bfff15 	stw	r6,-4(r2)
   31098:	19bfff17 	ldw	r6,-4(r3)
   3109c:	314ed83a 	srl	r7,r6,r5
   310a0:	1a3ff736 	bltu	r3,r8,31080 <__lshift+0xac>
   310a4:	98800544 	addi	r2,r19,21
   310a8:	40802336 	bltu	r8,r2,31138 <__lshift+0x164>
   310ac:	44c7c83a 	sub	r3,r8,r19
   310b0:	18fffac4 	addi	r3,r3,-21
   310b4:	1806d0ba 	srli	r3,r3,2
   310b8:	18c00044 	addi	r3,r3,1
   310bc:	180690ba 	slli	r3,r3,2
   310c0:	20c9883a 	add	r4,r4,r3
   310c4:	21c00015 	stw	r7,0(r4)
   310c8:	38000126 	beq	r7,zero,310d0 <__lshift+0xfc>
   310cc:	a021883a 	mov	r16,r20
   310d0:	ac000415 	stw	r16,16(r21)
   310d4:	98000726 	beq	r19,zero,310f4 <__lshift+0x120>
   310d8:	98c00117 	ldw	r3,4(r19)
   310dc:	88801317 	ldw	r2,76(r17)
   310e0:	180690ba 	slli	r3,r3,2
   310e4:	10c5883a 	add	r2,r2,r3
   310e8:	10c00017 	ldw	r3,0(r2)
   310ec:	98c00015 	stw	r3,0(r19)
   310f0:	14c00015 	stw	r19,0(r2)
   310f4:	a805883a 	mov	r2,r21
   310f8:	dfc00717 	ldw	ra,28(sp)
   310fc:	dd800617 	ldw	r22,24(sp)
   31100:	dd400517 	ldw	r21,20(sp)
   31104:	dd000417 	ldw	r20,16(sp)
   31108:	dcc00317 	ldw	r19,12(sp)
   3110c:	dc800217 	ldw	r18,8(sp)
   31110:	dc400117 	ldw	r17,4(sp)
   31114:	dc000017 	ldw	r16,0(sp)
   31118:	dec00804 	addi	sp,sp,32
   3111c:	f800283a 	ret
   31120:	18800017 	ldw	r2,0(r3)
   31124:	18c00104 	addi	r3,r3,4
   31128:	21000104 	addi	r4,r4,4
   3112c:	20bfff15 	stw	r2,-4(r4)
   31130:	1a3ffb36 	bltu	r3,r8,31120 <__lshift+0x14c>
   31134:	003fe606 	br	310d0 <__lshift+0xfc>
   31138:	00c00104 	movi	r3,4
   3113c:	003fe006 	br	310c0 <__lshift+0xec>
   31140:	01c00134 	movhi	r7,4
   31144:	01000134 	movhi	r4,4
   31148:	39e2e504 	addi	r7,r7,-29804
   3114c:	000d883a 	mov	r6,zero
   31150:	01407644 	movi	r5,473
   31154:	2122fa04 	addi	r4,r4,-29720
   31158:	00338880 	call	33888 <__assert_func>

0003115c <__mcmp>:
   3115c:	21800417 	ldw	r6,16(r4)
   31160:	28c00417 	ldw	r3,16(r5)
   31164:	30c5c83a 	sub	r2,r6,r3
   31168:	30c00e1e 	bne	r6,r3,311a4 <__mcmp+0x48>
   3116c:	180690ba 	slli	r3,r3,2
   31170:	21c00504 	addi	r7,r4,20
   31174:	29400504 	addi	r5,r5,20
   31178:	38c9883a 	add	r4,r7,r3
   3117c:	28c7883a 	add	r3,r5,r3
   31180:	00000106 	br	31188 <__mcmp+0x2c>
   31184:	3900082e 	bgeu	r7,r4,311a8 <__mcmp+0x4c>
   31188:	21bfff17 	ldw	r6,-4(r4)
   3118c:	197fff17 	ldw	r5,-4(r3)
   31190:	213fff04 	addi	r4,r4,-4
   31194:	18ffff04 	addi	r3,r3,-4
   31198:	317ffa26 	beq	r6,r5,31184 <__mcmp+0x28>
   3119c:	3140032e 	bgeu	r6,r5,311ac <__mcmp+0x50>
   311a0:	00bfffc4 	movi	r2,-1
   311a4:	f800283a 	ret
   311a8:	f800283a 	ret
   311ac:	00800044 	movi	r2,1
   311b0:	f800283a 	ret

000311b4 <__mdiff>:
   311b4:	28800417 	ldw	r2,16(r5)
   311b8:	30c00417 	ldw	r3,16(r6)
   311bc:	defffc04 	addi	sp,sp,-16
   311c0:	dc800215 	stw	r18,8(sp)
   311c4:	dc400115 	stw	r17,4(sp)
   311c8:	dc000015 	stw	r16,0(sp)
   311cc:	dfc00315 	stw	ra,12(sp)
   311d0:	2823883a 	mov	r17,r5
   311d4:	3021883a 	mov	r16,r6
   311d8:	10e5c83a 	sub	r18,r2,r3
   311dc:	10c0641e 	bne	r2,r3,31370 <__mdiff+0x1bc>
   311e0:	180c90ba 	slli	r6,r3,2
   311e4:	29400504 	addi	r5,r5,20
   311e8:	80c00504 	addi	r3,r16,20
   311ec:	2985883a 	add	r2,r5,r6
   311f0:	1987883a 	add	r3,r3,r6
   311f4:	00000106 	br	311fc <__mdiff+0x48>
   311f8:	2880642e 	bgeu	r5,r2,3138c <__mdiff+0x1d8>
   311fc:	11bfff17 	ldw	r6,-4(r2)
   31200:	19ffff17 	ldw	r7,-4(r3)
   31204:	10bfff04 	addi	r2,r2,-4
   31208:	18ffff04 	addi	r3,r3,-4
   3120c:	31fffa26 	beq	r6,r7,311f8 <__mdiff+0x44>
   31210:	31c05236 	bltu	r6,r7,3135c <__mdiff+0x1a8>
   31214:	89400117 	ldw	r5,4(r17)
   31218:	00306a80 	call	306a8 <_Balloc>
   3121c:	10006226 	beq	r2,zero,313a8 <__mdiff+0x1f4>
   31220:	8a400417 	ldw	r9,16(r17)
   31224:	83000417 	ldw	r12,16(r16)
   31228:	8ac00504 	addi	r11,r17,20
   3122c:	481090ba 	slli	r8,r9,2
   31230:	601890ba 	slli	r12,r12,2
   31234:	81800504 	addi	r6,r16,20
   31238:	13400504 	addi	r13,r2,20
   3123c:	14800315 	stw	r18,12(r2)
   31240:	5a11883a 	add	r8,r11,r8
   31244:	3319883a 	add	r12,r6,r12
   31248:	681d883a 	mov	r14,r13
   3124c:	5815883a 	mov	r10,r11
   31250:	0007883a 	mov	r3,zero
   31254:	51000017 	ldw	r4,0(r10)
   31258:	31c00017 	ldw	r7,0(r6)
   3125c:	73800104 	addi	r14,r14,4
   31260:	217fffcc 	andi	r5,r4,65535
   31264:	28cb883a 	add	r5,r5,r3
   31268:	38ffffcc 	andi	r3,r7,65535
   3126c:	28cbc83a 	sub	r5,r5,r3
   31270:	380ed43a 	srli	r7,r7,16
   31274:	2006d43a 	srli	r3,r4,16
   31278:	2809d43a 	srai	r4,r5,16
   3127c:	297fffcc 	andi	r5,r5,65535
   31280:	19c7c83a 	sub	r3,r3,r7
   31284:	1907883a 	add	r3,r3,r4
   31288:	1808943a 	slli	r4,r3,16
   3128c:	31800104 	addi	r6,r6,4
   31290:	1807d43a 	srai	r3,r3,16
   31294:	214ab03a 	or	r5,r4,r5
   31298:	717fff15 	stw	r5,-4(r14)
   3129c:	52800104 	addi	r10,r10,4
   312a0:	333fec36 	bltu	r6,r12,31254 <__mdiff+0xa0>
   312a4:	640fc83a 	sub	r7,r12,r16
   312a8:	39fffac4 	addi	r7,r7,-21
   312ac:	84000544 	addi	r16,r16,21
   312b0:	380ed0ba 	srli	r7,r7,2
   312b4:	64003336 	bltu	r12,r16,31384 <__mdiff+0x1d0>
   312b8:	380890ba 	slli	r4,r7,2
   312bc:	6909883a 	add	r4,r13,r4
   312c0:	64002e36 	bltu	r12,r16,3137c <__mdiff+0x1c8>
   312c4:	39800044 	addi	r6,r7,1
   312c8:	300c90ba 	slli	r6,r6,2
   312cc:	5997883a 	add	r11,r11,r6
   312d0:	699b883a 	add	r13,r13,r6
   312d4:	5a00152e 	bgeu	r11,r8,3132c <__mdiff+0x178>
   312d8:	680f883a 	mov	r7,r13
   312dc:	580d883a 	mov	r6,r11
   312e0:	31000017 	ldw	r4,0(r6)
   312e4:	39c00104 	addi	r7,r7,4
   312e8:	31800104 	addi	r6,r6,4
   312ec:	217fffcc 	andi	r5,r4,65535
   312f0:	28cb883a 	add	r5,r5,r3
   312f4:	2815d43a 	srai	r10,r5,16
   312f8:	2006d43a 	srli	r3,r4,16
   312fc:	297fffcc 	andi	r5,r5,65535
   31300:	1a87883a 	add	r3,r3,r10
   31304:	1814943a 	slli	r10,r3,16
   31308:	1807d43a 	srai	r3,r3,16
   3130c:	514ab03a 	or	r5,r10,r5
   31310:	397fff15 	stw	r5,-4(r7)
   31314:	323ff236 	bltu	r6,r8,312e0 <__mdiff+0x12c>
   31318:	413fffc4 	addi	r4,r8,-1
   3131c:	22c9c83a 	sub	r4,r4,r11
   31320:	2008d0ba 	srli	r4,r4,2
   31324:	200890ba 	slli	r4,r4,2
   31328:	6909883a 	add	r4,r13,r4
   3132c:	2800041e 	bne	r5,zero,31340 <__mdiff+0x18c>
   31330:	20ffff17 	ldw	r3,-4(r4)
   31334:	4a7fffc4 	addi	r9,r9,-1
   31338:	213fff04 	addi	r4,r4,-4
   3133c:	183ffc26 	beq	r3,zero,31330 <__mdiff+0x17c>
   31340:	12400415 	stw	r9,16(r2)
   31344:	dfc00317 	ldw	ra,12(sp)
   31348:	dc800217 	ldw	r18,8(sp)
   3134c:	dc400117 	ldw	r17,4(sp)
   31350:	dc000017 	ldw	r16,0(sp)
   31354:	dec00404 	addi	sp,sp,16
   31358:	f800283a 	ret
   3135c:	8805883a 	mov	r2,r17
   31360:	04800044 	movi	r18,1
   31364:	8023883a 	mov	r17,r16
   31368:	1021883a 	mov	r16,r2
   3136c:	003fa906 	br	31214 <__mdiff+0x60>
   31370:	903ffa16 	blt	r18,zero,3135c <__mdiff+0x1a8>
   31374:	0025883a 	mov	r18,zero
   31378:	003fa606 	br	31214 <__mdiff+0x60>
   3137c:	01800104 	movi	r6,4
   31380:	003fd206 	br	312cc <__mdiff+0x118>
   31384:	0009883a 	mov	r4,zero
   31388:	003fcc06 	br	312bc <__mdiff+0x108>
   3138c:	000b883a 	mov	r5,zero
   31390:	00306a80 	call	306a8 <_Balloc>
   31394:	10000b26 	beq	r2,zero,313c4 <__mdiff+0x210>
   31398:	00c00044 	movi	r3,1
   3139c:	10c00415 	stw	r3,16(r2)
   313a0:	10000515 	stw	zero,20(r2)
   313a4:	003fe706 	br	31344 <__mdiff+0x190>
   313a8:	01c00134 	movhi	r7,4
   313ac:	01000134 	movhi	r4,4
   313b0:	39e2e504 	addi	r7,r7,-29804
   313b4:	000d883a 	mov	r6,zero
   313b8:	01409004 	movi	r5,576
   313bc:	2122fa04 	addi	r4,r4,-29720
   313c0:	00338880 	call	33888 <__assert_func>
   313c4:	01c00134 	movhi	r7,4
   313c8:	01000134 	movhi	r4,4
   313cc:	39e2e504 	addi	r7,r7,-29804
   313d0:	000d883a 	mov	r6,zero
   313d4:	01408c84 	movi	r5,562
   313d8:	2122fa04 	addi	r4,r4,-29720
   313dc:	00338880 	call	33888 <__assert_func>

000313e0 <__ulp>:
   313e0:	28dffc2c 	andhi	r3,r5,32752
   313e4:	017f3034 	movhi	r5,64704
   313e8:	1947883a 	add	r3,r3,r5
   313ec:	00c0020e 	bge	zero,r3,313f8 <__ulp+0x18>
   313f0:	0005883a 	mov	r2,zero
   313f4:	f800283a 	ret
   313f8:	00c7c83a 	sub	r3,zero,r3
   313fc:	1807d53a 	srai	r3,r3,20
   31400:	18800508 	cmpgei	r2,r3,20
   31404:	1000041e 	bne	r2,zero,31418 <__ulp+0x38>
   31408:	00800234 	movhi	r2,8
   3140c:	10c7d83a 	sra	r3,r2,r3
   31410:	0005883a 	mov	r2,zero
   31414:	f800283a 	ret
   31418:	193ffb04 	addi	r4,r3,-20
   3141c:	208007c8 	cmpgei	r2,r4,31
   31420:	0007883a 	mov	r3,zero
   31424:	1000031e 	bne	r2,zero,31434 <__ulp+0x54>
   31428:	00a00034 	movhi	r2,32768
   3142c:	1104d83a 	srl	r2,r2,r4
   31430:	f800283a 	ret
   31434:	00800044 	movi	r2,1
   31438:	f800283a 	ret

0003143c <__b2d>:
   3143c:	defffa04 	addi	sp,sp,-24
   31440:	dc400115 	stw	r17,4(sp)
   31444:	24400417 	ldw	r17,16(r4)
   31448:	dc000015 	stw	r16,0(sp)
   3144c:	24000504 	addi	r16,r4,20
   31450:	882290ba 	slli	r17,r17,2
   31454:	dc800215 	stw	r18,8(sp)
   31458:	dd000415 	stw	r20,16(sp)
   3145c:	8463883a 	add	r17,r16,r17
   31460:	8cbfff17 	ldw	r18,-4(r17)
   31464:	dcc00315 	stw	r19,12(sp)
   31468:	dfc00515 	stw	ra,20(sp)
   3146c:	9009883a 	mov	r4,r18
   31470:	2827883a 	mov	r19,r5
   31474:	0030a040 	call	30a04 <__hi0bits>
   31478:	00c00804 	movi	r3,32
   3147c:	1889c83a 	sub	r4,r3,r2
   31480:	99000015 	stw	r4,0(r19)
   31484:	110002c8 	cmpgei	r4,r2,11
   31488:	8d3fff04 	addi	r20,r17,-4
   3148c:	20002026 	beq	r4,zero,31510 <__b2d+0xd4>
   31490:	10bffd44 	addi	r2,r2,-11
   31494:	85000e2e 	bgeu	r16,r20,314d0 <__b2d+0x94>
   31498:	897ffe17 	ldw	r5,-8(r17)
   3149c:	10001226 	beq	r2,zero,314e8 <__b2d+0xac>
   314a0:	1889c83a 	sub	r4,r3,r2
   314a4:	90a4983a 	sll	r18,r18,r2
   314a8:	2906d83a 	srl	r3,r5,r4
   314ac:	89bffe04 	addi	r6,r17,-8
   314b0:	2884983a 	sll	r2,r5,r2
   314b4:	90e4b03a 	or	r18,r18,r3
   314b8:	90cffc34 	orhi	r3,r18,16368
   314bc:	81800c2e 	bgeu	r16,r6,314f0 <__b2d+0xb4>
   314c0:	897ffd17 	ldw	r5,-12(r17)
   314c4:	2908d83a 	srl	r4,r5,r4
   314c8:	1104b03a 	or	r2,r2,r4
   314cc:	00000806 	br	314f0 <__b2d+0xb4>
   314d0:	10000426 	beq	r2,zero,314e4 <__b2d+0xa8>
   314d4:	90a4983a 	sll	r18,r18,r2
   314d8:	0005883a 	mov	r2,zero
   314dc:	90cffc34 	orhi	r3,r18,16368
   314e0:	00000306 	br	314f0 <__b2d+0xb4>
   314e4:	000b883a 	mov	r5,zero
   314e8:	90cffc34 	orhi	r3,r18,16368
   314ec:	2805883a 	mov	r2,r5
   314f0:	dfc00517 	ldw	ra,20(sp)
   314f4:	dd000417 	ldw	r20,16(sp)
   314f8:	dcc00317 	ldw	r19,12(sp)
   314fc:	dc800217 	ldw	r18,8(sp)
   31500:	dc400117 	ldw	r17,4(sp)
   31504:	dc000017 	ldw	r16,0(sp)
   31508:	dec00604 	addi	sp,sp,24
   3150c:	f800283a 	ret
   31510:	014002c4 	movi	r5,11
   31514:	2889c83a 	sub	r4,r5,r2
   31518:	9106d83a 	srl	r3,r18,r4
   3151c:	18cffc34 	orhi	r3,r3,16368
   31520:	85000536 	bltu	r16,r20,31538 <__b2d+0xfc>
   31524:	000b883a 	mov	r5,zero
   31528:	10800544 	addi	r2,r2,21
   3152c:	9084983a 	sll	r2,r18,r2
   31530:	1144b03a 	or	r2,r2,r5
   31534:	003fee06 	br	314f0 <__b2d+0xb4>
   31538:	897ffe17 	ldw	r5,-8(r17)
   3153c:	290ad83a 	srl	r5,r5,r4
   31540:	003ff906 	br	31528 <__b2d+0xec>

00031544 <__d2b>:
   31544:	defff804 	addi	sp,sp,-32
   31548:	dd000615 	stw	r20,24(sp)
   3154c:	2829883a 	mov	r20,r5
   31550:	01400044 	movi	r5,1
   31554:	dcc00515 	stw	r19,20(sp)
   31558:	dc000215 	stw	r16,8(sp)
   3155c:	dfc00715 	stw	ra,28(sp)
   31560:	dc800415 	stw	r18,16(sp)
   31564:	dc400315 	stw	r17,12(sp)
   31568:	3021883a 	mov	r16,r6
   3156c:	3827883a 	mov	r19,r7
   31570:	00306a80 	call	306a8 <_Balloc>
   31574:	10004526 	beq	r2,zero,3168c <__d2b+0x148>
   31578:	8024d53a 	srli	r18,r16,20
   3157c:	01800434 	movhi	r6,16
   31580:	31bfffc4 	addi	r6,r6,-1
   31584:	9481ffcc 	andi	r18,r18,2047
   31588:	1023883a 	mov	r17,r2
   3158c:	81a0703a 	and	r16,r16,r6
   31590:	90000126 	beq	r18,zero,31598 <__d2b+0x54>
   31594:	84000434 	orhi	r16,r16,16
   31598:	dc000115 	stw	r16,4(sp)
   3159c:	a0002226 	beq	r20,zero,31628 <__d2b+0xe4>
   315a0:	d809883a 	mov	r4,sp
   315a4:	dd000015 	stw	r20,0(sp)
   315a8:	0030a680 	call	30a68 <__lo0bits>
   315ac:	d8c00117 	ldw	r3,4(sp)
   315b0:	10003326 	beq	r2,zero,31680 <__d2b+0x13c>
   315b4:	01000804 	movi	r4,32
   315b8:	2089c83a 	sub	r4,r4,r2
   315bc:	1908983a 	sll	r4,r3,r4
   315c0:	d9400017 	ldw	r5,0(sp)
   315c4:	1886d83a 	srl	r3,r3,r2
   315c8:	2148b03a 	or	r4,r4,r5
   315cc:	89000515 	stw	r4,20(r17)
   315d0:	d8c00115 	stw	r3,4(sp)
   315d4:	88c00615 	stw	r3,24(r17)
   315d8:	1800271e 	bne	r3,zero,31678 <__d2b+0x134>
   315dc:	04000044 	movi	r16,1
   315e0:	8c000415 	stw	r16,16(r17)
   315e4:	90001926 	beq	r18,zero,3164c <__d2b+0x108>
   315e8:	00c00d44 	movi	r3,53
   315ec:	94bef344 	addi	r18,r18,-1075
   315f0:	90a5883a 	add	r18,r18,r2
   315f4:	1885c83a 	sub	r2,r3,r2
   315f8:	d8c00817 	ldw	r3,32(sp)
   315fc:	9c800015 	stw	r18,0(r19)
   31600:	18800015 	stw	r2,0(r3)
   31604:	8805883a 	mov	r2,r17
   31608:	dfc00717 	ldw	ra,28(sp)
   3160c:	dd000617 	ldw	r20,24(sp)
   31610:	dcc00517 	ldw	r19,20(sp)
   31614:	dc800417 	ldw	r18,16(sp)
   31618:	dc400317 	ldw	r17,12(sp)
   3161c:	dc000217 	ldw	r16,8(sp)
   31620:	dec00804 	addi	sp,sp,32
   31624:	f800283a 	ret
   31628:	d9000104 	addi	r4,sp,4
   3162c:	0030a680 	call	30a68 <__lo0bits>
   31630:	00c00044 	movi	r3,1
   31634:	88c00415 	stw	r3,16(r17)
   31638:	d8c00117 	ldw	r3,4(sp)
   3163c:	10800804 	addi	r2,r2,32
   31640:	04000044 	movi	r16,1
   31644:	88c00515 	stw	r3,20(r17)
   31648:	903fe71e 	bne	r18,zero,315e8 <__d2b+0xa4>
   3164c:	800690ba 	slli	r3,r16,2
   31650:	10bef384 	addi	r2,r2,-1074
   31654:	98800015 	stw	r2,0(r19)
   31658:	88c5883a 	add	r2,r17,r3
   3165c:	11000417 	ldw	r4,16(r2)
   31660:	8020917a 	slli	r16,r16,5
   31664:	0030a040 	call	30a04 <__hi0bits>
   31668:	80a1c83a 	sub	r16,r16,r2
   3166c:	d8800817 	ldw	r2,32(sp)
   31670:	14000015 	stw	r16,0(r2)
   31674:	003fe306 	br	31604 <__d2b+0xc0>
   31678:	04000084 	movi	r16,2
   3167c:	003fd806 	br	315e0 <__d2b+0x9c>
   31680:	d9000017 	ldw	r4,0(sp)
   31684:	89000515 	stw	r4,20(r17)
   31688:	003fd206 	br	315d4 <__d2b+0x90>
   3168c:	01c00134 	movhi	r7,4
   31690:	01000134 	movhi	r4,4
   31694:	39e2e504 	addi	r7,r7,-29804
   31698:	000d883a 	mov	r6,zero
   3169c:	0140c284 	movi	r5,778
   316a0:	2122fa04 	addi	r4,r4,-29720
   316a4:	00338880 	call	33888 <__assert_func>

000316a8 <__ratio>:
   316a8:	defff904 	addi	sp,sp,-28
   316ac:	dc400315 	stw	r17,12(sp)
   316b0:	2823883a 	mov	r17,r5
   316b4:	d80b883a 	mov	r5,sp
   316b8:	dfc00615 	stw	ra,24(sp)
   316bc:	dcc00515 	stw	r19,20(sp)
   316c0:	dc800415 	stw	r18,16(sp)
   316c4:	2027883a 	mov	r19,r4
   316c8:	dc000215 	stw	r16,8(sp)
   316cc:	003143c0 	call	3143c <__b2d>
   316d0:	d9400104 	addi	r5,sp,4
   316d4:	8809883a 	mov	r4,r17
   316d8:	1025883a 	mov	r18,r2
   316dc:	1821883a 	mov	r16,r3
   316e0:	003143c0 	call	3143c <__b2d>
   316e4:	89000417 	ldw	r4,16(r17)
   316e8:	9a000417 	ldw	r8,16(r19)
   316ec:	d9400117 	ldw	r5,4(sp)
   316f0:	100d883a 	mov	r6,r2
   316f4:	4111c83a 	sub	r8,r8,r4
   316f8:	d9000017 	ldw	r4,0(sp)
   316fc:	4010917a 	slli	r8,r8,5
   31700:	180f883a 	mov	r7,r3
   31704:	2149c83a 	sub	r4,r4,r5
   31708:	4111883a 	add	r8,r8,r4
   3170c:	02000c0e 	bge	zero,r8,31740 <__ratio+0x98>
   31710:	4010953a 	slli	r8,r8,20
   31714:	4421883a 	add	r16,r8,r16
   31718:	9009883a 	mov	r4,r18
   3171c:	800b883a 	mov	r5,r16
   31720:	0028a100 	call	28a10 <__divdf3>
   31724:	dfc00617 	ldw	ra,24(sp)
   31728:	dcc00517 	ldw	r19,20(sp)
   3172c:	dc800417 	ldw	r18,16(sp)
   31730:	dc400317 	ldw	r17,12(sp)
   31734:	dc000217 	ldw	r16,8(sp)
   31738:	dec00704 	addi	sp,sp,28
   3173c:	f800283a 	ret
   31740:	4010953a 	slli	r8,r8,20
   31744:	1a0fc83a 	sub	r7,r3,r8
   31748:	003ff306 	br	31718 <__ratio+0x70>

0003174c <_mprec_log10>:
   3174c:	defffe04 	addi	sp,sp,-8
   31750:	dc000015 	stw	r16,0(sp)
   31754:	dfc00115 	stw	ra,4(sp)
   31758:	20800608 	cmpgei	r2,r4,24
   3175c:	2021883a 	mov	r16,r4
   31760:	10000f26 	beq	r2,zero,317a0 <_mprec_log10+0x54>
   31764:	0009883a 	mov	r4,zero
   31768:	014ffc34 	movhi	r5,16368
   3176c:	000d883a 	mov	r6,zero
   31770:	01d00934 	movhi	r7,16420
   31774:	00295100 	call	29510 <__muldf3>
   31778:	843fffc4 	addi	r16,r16,-1
   3177c:	1009883a 	mov	r4,r2
   31780:	180b883a 	mov	r5,r3
   31784:	803ff91e 	bne	r16,zero,3176c <_mprec_log10+0x20>
   31788:	2005883a 	mov	r2,r4
   3178c:	2807883a 	mov	r3,r5
   31790:	dfc00117 	ldw	ra,4(sp)
   31794:	dc000017 	ldw	r16,0(sp)
   31798:	dec00204 	addi	sp,sp,8
   3179c:	f800283a 	ret
   317a0:	202090fa 	slli	r16,r4,3
   317a4:	00800134 	movhi	r2,4
   317a8:	10a32104 	addi	r2,r2,-29564
   317ac:	1421883a 	add	r16,r2,r16
   317b0:	81000017 	ldw	r4,0(r16)
   317b4:	81400117 	ldw	r5,4(r16)
   317b8:	003ff306 	br	31788 <_mprec_log10+0x3c>

000317bc <__copybits>:
   317bc:	297fffc4 	addi	r5,r5,-1
   317c0:	280fd17a 	srai	r7,r5,5
   317c4:	31400417 	ldw	r5,16(r6)
   317c8:	30800504 	addi	r2,r6,20
   317cc:	39c00044 	addi	r7,r7,1
   317d0:	280a90ba 	slli	r5,r5,2
   317d4:	380e90ba 	slli	r7,r7,2
   317d8:	114b883a 	add	r5,r2,r5
   317dc:	21cf883a 	add	r7,r4,r7
   317e0:	11400c2e 	bgeu	r2,r5,31814 <__copybits+0x58>
   317e4:	2007883a 	mov	r3,r4
   317e8:	12000017 	ldw	r8,0(r2)
   317ec:	10800104 	addi	r2,r2,4
   317f0:	18c00104 	addi	r3,r3,4
   317f4:	1a3fff15 	stw	r8,-4(r3)
   317f8:	117ffb36 	bltu	r2,r5,317e8 <__copybits+0x2c>
   317fc:	2985c83a 	sub	r2,r5,r6
   31800:	10bffac4 	addi	r2,r2,-21
   31804:	1004d0ba 	srli	r2,r2,2
   31808:	10800044 	addi	r2,r2,1
   3180c:	100490ba 	slli	r2,r2,2
   31810:	2089883a 	add	r4,r4,r2
   31814:	21c0072e 	bgeu	r4,r7,31834 <__copybits+0x78>
   31818:	39bfffc4 	addi	r6,r7,-1
   3181c:	310dc83a 	sub	r6,r6,r4
   31820:	300cd0ba 	srli	r6,r6,2
   31824:	000b883a 	mov	r5,zero
   31828:	31800044 	addi	r6,r6,1
   3182c:	300c90ba 	slli	r6,r6,2
   31830:	00305b81 	jmpi	305b8 <memset>
   31834:	f800283a 	ret

00031838 <__any_on>:
   31838:	20c00417 	ldw	r3,16(r4)
   3183c:	280dd17a 	srai	r6,r5,5
   31840:	21000504 	addi	r4,r4,20
   31844:	1980080e 	bge	r3,r6,31868 <__any_on+0x30>
   31848:	180490ba 	slli	r2,r3,2
   3184c:	2085883a 	add	r2,r4,r2
   31850:	20800f2e 	bgeu	r4,r2,31890 <__any_on+0x58>
   31854:	10ffff17 	ldw	r3,-4(r2)
   31858:	10bfff04 	addi	r2,r2,-4
   3185c:	183ffc26 	beq	r3,zero,31850 <__any_on+0x18>
   31860:	00800044 	movi	r2,1
   31864:	f800283a 	ret
   31868:	300490ba 	slli	r2,r6,2
   3186c:	2085883a 	add	r2,r4,r2
   31870:	30fff70e 	bge	r6,r3,31850 <__any_on+0x18>
   31874:	294007cc 	andi	r5,r5,31
   31878:	283ff526 	beq	r5,zero,31850 <__any_on+0x18>
   3187c:	11800017 	ldw	r6,0(r2)
   31880:	3146d83a 	srl	r3,r6,r5
   31884:	194a983a 	sll	r5,r3,r5
   31888:	317ff51e 	bne	r6,r5,31860 <__any_on+0x28>
   3188c:	003ff006 	br	31850 <__any_on+0x18>
   31890:	0005883a 	mov	r2,zero
   31894:	f800283a 	ret

00031898 <_putc_r>:
   31898:	defffc04 	addi	sp,sp,-16
   3189c:	dc400215 	stw	r17,8(sp)
   318a0:	dfc00315 	stw	ra,12(sp)
   318a4:	2023883a 	mov	r17,r4
   318a8:	20000226 	beq	r4,zero,318b4 <_putc_r+0x1c>
   318ac:	20800e17 	ldw	r2,56(r4)
   318b0:	10000e26 	beq	r2,zero,318ec <_putc_r+0x54>
   318b4:	30800217 	ldw	r2,8(r6)
   318b8:	10bfffc4 	addi	r2,r2,-1
   318bc:	30800215 	stw	r2,8(r6)
   318c0:	10001316 	blt	r2,zero,31910 <_putc_r+0x78>
   318c4:	30800017 	ldw	r2,0(r6)
   318c8:	11400005 	stb	r5,0(r2)
   318cc:	30800017 	ldw	r2,0(r6)
   318d0:	10c00044 	addi	r3,r2,1
   318d4:	30c00015 	stw	r3,0(r6)
   318d8:	10800003 	ldbu	r2,0(r2)
   318dc:	dfc00317 	ldw	ra,12(sp)
   318e0:	dc400217 	ldw	r17,8(sp)
   318e4:	dec00404 	addi	sp,sp,16
   318e8:	f800283a 	ret
   318ec:	d9800115 	stw	r6,4(sp)
   318f0:	d9400015 	stw	r5,0(sp)
   318f4:	002ee0c0 	call	2ee0c <__sinit>
   318f8:	d9800117 	ldw	r6,4(sp)
   318fc:	d9400017 	ldw	r5,0(sp)
   31900:	30800217 	ldw	r2,8(r6)
   31904:	10bfffc4 	addi	r2,r2,-1
   31908:	30800215 	stw	r2,8(r6)
   3190c:	103fed0e 	bge	r2,zero,318c4 <_putc_r+0x2c>
   31910:	30c00617 	ldw	r3,24(r6)
   31914:	10c00e16 	blt	r2,r3,31950 <_putc_r+0xb8>
   31918:	30800017 	ldw	r2,0(r6)
   3191c:	11400005 	stb	r5,0(r2)
   31920:	30c00017 	ldw	r3,0(r6)
   31924:	18800003 	ldbu	r2,0(r3)
   31928:	108002a0 	cmpeqi	r2,r2,10
   3192c:	1000071e 	bne	r2,zero,3194c <_putc_r+0xb4>
   31930:	18800044 	addi	r2,r3,1
   31934:	30800015 	stw	r2,0(r6)
   31938:	18800003 	ldbu	r2,0(r3)
   3193c:	dfc00317 	ldw	ra,12(sp)
   31940:	dc400217 	ldw	r17,8(sp)
   31944:	dec00404 	addi	sp,sp,16
   31948:	f800283a 	ret
   3194c:	01400284 	movi	r5,10
   31950:	8809883a 	mov	r4,r17
   31954:	dfc00317 	ldw	ra,12(sp)
   31958:	dc400217 	ldw	r17,8(sp)
   3195c:	dec00404 	addi	sp,sp,16
   31960:	003366c1 	jmpi	3366c <__swbuf_r>

00031964 <putc>:
   31964:	defffc04 	addi	sp,sp,-16
   31968:	00800134 	movhi	r2,4
   3196c:	dc800215 	stw	r18,8(sp)
   31970:	14ab2417 	ldw	r18,-21360(r2)
   31974:	dc400115 	stw	r17,4(sp)
   31978:	dfc00315 	stw	ra,12(sp)
   3197c:	2023883a 	mov	r17,r4
   31980:	90000226 	beq	r18,zero,3198c <putc+0x28>
   31984:	90800e17 	ldw	r2,56(r18)
   31988:	10000f26 	beq	r2,zero,319c8 <putc+0x64>
   3198c:	28800217 	ldw	r2,8(r5)
   31990:	10bfffc4 	addi	r2,r2,-1
   31994:	28800215 	stw	r2,8(r5)
   31998:	10001316 	blt	r2,zero,319e8 <putc+0x84>
   3199c:	28800017 	ldw	r2,0(r5)
   319a0:	14400005 	stb	r17,0(r2)
   319a4:	28800017 	ldw	r2,0(r5)
   319a8:	10c00044 	addi	r3,r2,1
   319ac:	28c00015 	stw	r3,0(r5)
   319b0:	10800003 	ldbu	r2,0(r2)
   319b4:	dfc00317 	ldw	ra,12(sp)
   319b8:	dc800217 	ldw	r18,8(sp)
   319bc:	dc400117 	ldw	r17,4(sp)
   319c0:	dec00404 	addi	sp,sp,16
   319c4:	f800283a 	ret
   319c8:	9009883a 	mov	r4,r18
   319cc:	d9400015 	stw	r5,0(sp)
   319d0:	002ee0c0 	call	2ee0c <__sinit>
   319d4:	d9400017 	ldw	r5,0(sp)
   319d8:	28800217 	ldw	r2,8(r5)
   319dc:	10bfffc4 	addi	r2,r2,-1
   319e0:	28800215 	stw	r2,8(r5)
   319e4:	103fed0e 	bge	r2,zero,3199c <putc+0x38>
   319e8:	28c00617 	ldw	r3,24(r5)
   319ec:	10c00a16 	blt	r2,r3,31a18 <putc+0xb4>
   319f0:	28800017 	ldw	r2,0(r5)
   319f4:	14400005 	stb	r17,0(r2)
   319f8:	28c00017 	ldw	r3,0(r5)
   319fc:	18800003 	ldbu	r2,0(r3)
   31a00:	108002a0 	cmpeqi	r2,r2,10
   31a04:	10000c1e 	bne	r2,zero,31a38 <putc+0xd4>
   31a08:	18800044 	addi	r2,r3,1
   31a0c:	28800015 	stw	r2,0(r5)
   31a10:	18800003 	ldbu	r2,0(r3)
   31a14:	003fe706 	br	319b4 <putc+0x50>
   31a18:	280d883a 	mov	r6,r5
   31a1c:	880b883a 	mov	r5,r17
   31a20:	9009883a 	mov	r4,r18
   31a24:	dfc00317 	ldw	ra,12(sp)
   31a28:	dc800217 	ldw	r18,8(sp)
   31a2c:	dc400117 	ldw	r17,4(sp)
   31a30:	dec00404 	addi	sp,sp,16
   31a34:	003366c1 	jmpi	3366c <__swbuf_r>
   31a38:	280d883a 	mov	r6,r5
   31a3c:	01400284 	movi	r5,10
   31a40:	003ff706 	br	31a20 <putc+0xbc>

00031a44 <_realloc_r>:
   31a44:	defff504 	addi	sp,sp,-44
   31a48:	dc800315 	stw	r18,12(sp)
   31a4c:	dfc00a15 	stw	ra,40(sp)
   31a50:	df000915 	stw	fp,36(sp)
   31a54:	ddc00815 	stw	r23,32(sp)
   31a58:	dd800715 	stw	r22,28(sp)
   31a5c:	dd400615 	stw	r21,24(sp)
   31a60:	dd000515 	stw	r20,20(sp)
   31a64:	dcc00415 	stw	r19,16(sp)
   31a68:	dc400215 	stw	r17,8(sp)
   31a6c:	dc000115 	stw	r16,4(sp)
   31a70:	3025883a 	mov	r18,r6
   31a74:	28008b26 	beq	r5,zero,31ca4 <_realloc_r+0x260>
   31a78:	2821883a 	mov	r16,r5
   31a7c:	2027883a 	mov	r19,r4
   31a80:	944002c4 	addi	r17,r18,11
   31a84:	0035d080 	call	35d08 <__malloc_lock>
   31a88:	888005f0 	cmpltui	r2,r17,23
   31a8c:	1000521e 	bne	r2,zero,31bd8 <_realloc_r+0x194>
   31a90:	017ffe04 	movi	r5,-8
   31a94:	8962703a 	and	r17,r17,r5
   31a98:	8807883a 	mov	r3,r17
   31a9c:	88005116 	blt	r17,zero,31be4 <_realloc_r+0x1a0>
   31aa0:	8c805036 	bltu	r17,r18,31be4 <_realloc_r+0x1a0>
   31aa4:	80bfff17 	ldw	r2,-4(r16)
   31aa8:	017fff04 	movi	r5,-4
   31aac:	857ffe04 	addi	r21,r16,-8
   31ab0:	1168703a 	and	r20,r2,r5
   31ab4:	ad2d883a 	add	r22,r21,r20
   31ab8:	a0c0390e 	bge	r20,r3,31ba0 <_realloc_r+0x15c>
   31abc:	07000134 	movhi	fp,4
   31ac0:	e7253004 	addi	fp,fp,-27456
   31ac4:	e2000217 	ldw	r8,8(fp)
   31ac8:	b1000117 	ldw	r4,4(r22)
   31acc:	45808e26 	beq	r8,r22,31d08 <_realloc_r+0x2c4>
   31ad0:	01bfff84 	movi	r6,-2
   31ad4:	218c703a 	and	r6,r4,r6
   31ad8:	b18d883a 	add	r6,r22,r6
   31adc:	31800117 	ldw	r6,4(r6)
   31ae0:	3180004c 	andi	r6,r6,1
   31ae4:	30004f1e 	bne	r6,zero,31c24 <_realloc_r+0x1e0>
   31ae8:	2148703a 	and	r4,r4,r5
   31aec:	a10b883a 	add	r5,r20,r4
   31af0:	28c0bf0e 	bge	r5,r3,31df0 <_realloc_r+0x3ac>
   31af4:	1080004c 	andi	r2,r2,1
   31af8:	10004c1e 	bne	r2,zero,31c2c <_realloc_r+0x1e8>
   31afc:	81fffe17 	ldw	r7,-8(r16)
   31b00:	00bfff04 	movi	r2,-4
   31b04:	a9cfc83a 	sub	r7,r21,r7
   31b08:	39400117 	ldw	r5,4(r7)
   31b0c:	288a703a 	and	r5,r5,r2
   31b10:	b0000426 	beq	r22,zero,31b24 <_realloc_r+0xe0>
   31b14:	a16f883a 	add	r23,r20,r5
   31b18:	b92f883a 	add	r23,r23,r4
   31b1c:	4580bf26 	beq	r8,r22,31e1c <_realloc_r+0x3d8>
   31b20:	b8c0930e 	bge	r23,r3,31d70 <_realloc_r+0x32c>
   31b24:	38004126 	beq	r7,zero,31c2c <_realloc_r+0x1e8>
   31b28:	a16f883a 	add	r23,r20,r5
   31b2c:	b8c03f16 	blt	r23,r3,31c2c <_realloc_r+0x1e8>
   31b30:	38800317 	ldw	r2,12(r7)
   31b34:	38c00217 	ldw	r3,8(r7)
   31b38:	a1bfff04 	addi	r6,r20,-4
   31b3c:	31400968 	cmpgeui	r5,r6,37
   31b40:	18800315 	stw	r2,12(r3)
   31b44:	10c00215 	stw	r3,8(r2)
   31b48:	39000204 	addi	r4,r7,8
   31b4c:	3ded883a 	add	r22,r7,r23
   31b50:	2800941e 	bne	r5,zero,31da4 <_realloc_r+0x360>
   31b54:	30800530 	cmpltui	r2,r6,20
   31b58:	80c00017 	ldw	r3,0(r16)
   31b5c:	1000df1e 	bne	r2,zero,31edc <_realloc_r+0x498>
   31b60:	38c00215 	stw	r3,8(r7)
   31b64:	80c00117 	ldw	r3,4(r16)
   31b68:	30800728 	cmpgeui	r2,r6,28
   31b6c:	38c00315 	stw	r3,12(r7)
   31b70:	1000dc1e 	bne	r2,zero,31ee4 <_realloc_r+0x4a0>
   31b74:	80c00217 	ldw	r3,8(r16)
   31b78:	38800404 	addi	r2,r7,16
   31b7c:	84000204 	addi	r16,r16,8
   31b80:	10c00015 	stw	r3,0(r2)
   31b84:	80c00117 	ldw	r3,4(r16)
   31b88:	b829883a 	mov	r20,r23
   31b8c:	382b883a 	mov	r21,r7
   31b90:	10c00115 	stw	r3,4(r2)
   31b94:	80c00217 	ldw	r3,8(r16)
   31b98:	2021883a 	mov	r16,r4
   31b9c:	10c00215 	stw	r3,8(r2)
   31ba0:	a9800117 	ldw	r6,4(r21)
   31ba4:	a445c83a 	sub	r2,r20,r17
   31ba8:	10c00430 	cmpltui	r3,r2,16
   31bac:	3180004c 	andi	r6,r6,1
   31bb0:	18004926 	beq	r3,zero,31cd8 <_realloc_r+0x294>
   31bb4:	a18cb03a 	or	r6,r20,r6
   31bb8:	a9800115 	stw	r6,4(r21)
   31bbc:	b0800117 	ldw	r2,4(r22)
   31bc0:	10800054 	ori	r2,r2,1
   31bc4:	b0800115 	stw	r2,4(r22)
   31bc8:	9809883a 	mov	r4,r19
   31bcc:	0035d2c0 	call	35d2c <__malloc_unlock>
   31bd0:	8025883a 	mov	r18,r16
   31bd4:	00000606 	br	31bf0 <_realloc_r+0x1ac>
   31bd8:	04400404 	movi	r17,16
   31bdc:	00c00404 	movi	r3,16
   31be0:	8cbfb02e 	bgeu	r17,r18,31aa4 <_realloc_r+0x60>
   31be4:	00800304 	movi	r2,12
   31be8:	98800015 	stw	r2,0(r19)
   31bec:	0025883a 	mov	r18,zero
   31bf0:	9005883a 	mov	r2,r18
   31bf4:	dfc00a17 	ldw	ra,40(sp)
   31bf8:	df000917 	ldw	fp,36(sp)
   31bfc:	ddc00817 	ldw	r23,32(sp)
   31c00:	dd800717 	ldw	r22,28(sp)
   31c04:	dd400617 	ldw	r21,24(sp)
   31c08:	dd000517 	ldw	r20,20(sp)
   31c0c:	dcc00417 	ldw	r19,16(sp)
   31c10:	dc800317 	ldw	r18,12(sp)
   31c14:	dc400217 	ldw	r17,8(sp)
   31c18:	dc000117 	ldw	r16,4(sp)
   31c1c:	dec00b04 	addi	sp,sp,44
   31c20:	f800283a 	ret
   31c24:	1080004c 	andi	r2,r2,1
   31c28:	10006c26 	beq	r2,zero,31ddc <_realloc_r+0x398>
   31c2c:	900b883a 	mov	r5,r18
   31c30:	9809883a 	mov	r4,r19
   31c34:	002fadc0 	call	2fadc <_malloc_r>
   31c38:	1025883a 	mov	r18,r2
   31c3c:	10001626 	beq	r2,zero,31c98 <_realloc_r+0x254>
   31c40:	80bfff17 	ldw	r2,-4(r16)
   31c44:	013fff84 	movi	r4,-2
   31c48:	90fffe04 	addi	r3,r18,-8
   31c4c:	1104703a 	and	r2,r2,r4
   31c50:	a885883a 	add	r2,r21,r2
   31c54:	10c05b26 	beq	r2,r3,31dc4 <_realloc_r+0x380>
   31c58:	a1bfff04 	addi	r6,r20,-4
   31c5c:	30800968 	cmpgeui	r2,r6,37
   31c60:	10006a1e 	bne	r2,zero,31e0c <_realloc_r+0x3c8>
   31c64:	30800530 	cmpltui	r2,r6,20
   31c68:	81000017 	ldw	r4,0(r16)
   31c6c:	10003726 	beq	r2,zero,31d4c <_realloc_r+0x308>
   31c70:	9005883a 	mov	r2,r18
   31c74:	8007883a 	mov	r3,r16
   31c78:	11000015 	stw	r4,0(r2)
   31c7c:	19000117 	ldw	r4,4(r3)
   31c80:	11000115 	stw	r4,4(r2)
   31c84:	18c00217 	ldw	r3,8(r3)
   31c88:	10c00215 	stw	r3,8(r2)
   31c8c:	800b883a 	mov	r5,r16
   31c90:	9809883a 	mov	r4,r19
   31c94:	002ef700 	call	2ef70 <_free_r>
   31c98:	9809883a 	mov	r4,r19
   31c9c:	0035d2c0 	call	35d2c <__malloc_unlock>
   31ca0:	003fd306 	br	31bf0 <_realloc_r+0x1ac>
   31ca4:	300b883a 	mov	r5,r6
   31ca8:	dfc00a17 	ldw	ra,40(sp)
   31cac:	df000917 	ldw	fp,36(sp)
   31cb0:	ddc00817 	ldw	r23,32(sp)
   31cb4:	dd800717 	ldw	r22,28(sp)
   31cb8:	dd400617 	ldw	r21,24(sp)
   31cbc:	dd000517 	ldw	r20,20(sp)
   31cc0:	dcc00417 	ldw	r19,16(sp)
   31cc4:	dc800317 	ldw	r18,12(sp)
   31cc8:	dc400217 	ldw	r17,8(sp)
   31ccc:	dc000117 	ldw	r16,4(sp)
   31cd0:	dec00b04 	addi	sp,sp,44
   31cd4:	002fadc1 	jmpi	2fadc <_malloc_r>
   31cd8:	344cb03a 	or	r6,r6,r17
   31cdc:	a9800115 	stw	r6,4(r21)
   31ce0:	ac4b883a 	add	r5,r21,r17
   31ce4:	10800054 	ori	r2,r2,1
   31ce8:	28800115 	stw	r2,4(r5)
   31cec:	b0800117 	ldw	r2,4(r22)
   31cf0:	29400204 	addi	r5,r5,8
   31cf4:	9809883a 	mov	r4,r19
   31cf8:	10800054 	ori	r2,r2,1
   31cfc:	b0800115 	stw	r2,4(r22)
   31d00:	002ef700 	call	2ef70 <_free_r>
   31d04:	003fb006 	br	31bc8 <_realloc_r+0x184>
   31d08:	2148703a 	and	r4,r4,r5
   31d0c:	a10b883a 	add	r5,r20,r4
   31d10:	89800404 	addi	r6,r17,16
   31d14:	29bf7716 	blt	r5,r6,31af4 <_realloc_r+0xb0>
   31d18:	ac6b883a 	add	r21,r21,r17
   31d1c:	2c45c83a 	sub	r2,r5,r17
   31d20:	e5400215 	stw	r21,8(fp)
   31d24:	10800054 	ori	r2,r2,1
   31d28:	a8800115 	stw	r2,4(r21)
   31d2c:	80bfff17 	ldw	r2,-4(r16)
   31d30:	9809883a 	mov	r4,r19
   31d34:	8025883a 	mov	r18,r16
   31d38:	1080004c 	andi	r2,r2,1
   31d3c:	1462b03a 	or	r17,r2,r17
   31d40:	847fff15 	stw	r17,-4(r16)
   31d44:	0035d2c0 	call	35d2c <__malloc_unlock>
   31d48:	003fa906 	br	31bf0 <_realloc_r+0x1ac>
   31d4c:	91000015 	stw	r4,0(r18)
   31d50:	80c00117 	ldw	r3,4(r16)
   31d54:	30800728 	cmpgeui	r2,r6,28
   31d58:	90c00115 	stw	r3,4(r18)
   31d5c:	1000551e 	bne	r2,zero,31eb4 <_realloc_r+0x470>
   31d60:	81000217 	ldw	r4,8(r16)
   31d64:	80c00204 	addi	r3,r16,8
   31d68:	90800204 	addi	r2,r18,8
   31d6c:	003fc206 	br	31c78 <_realloc_r+0x234>
   31d70:	b0800317 	ldw	r2,12(r22)
   31d74:	b0c00217 	ldw	r3,8(r22)
   31d78:	a1bfff04 	addi	r6,r20,-4
   31d7c:	31400968 	cmpgeui	r5,r6,37
   31d80:	18800315 	stw	r2,12(r3)
   31d84:	10c00215 	stw	r3,8(r2)
   31d88:	38c00217 	ldw	r3,8(r7)
   31d8c:	38800317 	ldw	r2,12(r7)
   31d90:	39000204 	addi	r4,r7,8
   31d94:	3ded883a 	add	r22,r7,r23
   31d98:	18800315 	stw	r2,12(r3)
   31d9c:	10c00215 	stw	r3,8(r2)
   31da0:	283f6c26 	beq	r5,zero,31b54 <_realloc_r+0x110>
   31da4:	800b883a 	mov	r5,r16
   31da8:	d9c00015 	stw	r7,0(sp)
   31dac:	003048c0 	call	3048c <memmove>
   31db0:	d9c00017 	ldw	r7,0(sp)
   31db4:	1021883a 	mov	r16,r2
   31db8:	b829883a 	mov	r20,r23
   31dbc:	382b883a 	mov	r21,r7
   31dc0:	003f7706 	br	31ba0 <_realloc_r+0x15c>
   31dc4:	90bfff17 	ldw	r2,-4(r18)
   31dc8:	00ffff04 	movi	r3,-4
   31dcc:	10c4703a 	and	r2,r2,r3
   31dd0:	a0a9883a 	add	r20,r20,r2
   31dd4:	ad2d883a 	add	r22,r21,r20
   31dd8:	003f7106 	br	31ba0 <_realloc_r+0x15c>
   31ddc:	81fffe17 	ldw	r7,-8(r16)
   31de0:	a9cfc83a 	sub	r7,r21,r7
   31de4:	38800117 	ldw	r2,4(r7)
   31de8:	114a703a 	and	r5,r2,r5
   31dec:	003f4d06 	br	31b24 <_realloc_r+0xe0>
   31df0:	b0800317 	ldw	r2,12(r22)
   31df4:	b0c00217 	ldw	r3,8(r22)
   31df8:	2829883a 	mov	r20,r5
   31dfc:	a96d883a 	add	r22,r21,r5
   31e00:	18800315 	stw	r2,12(r3)
   31e04:	10c00215 	stw	r3,8(r2)
   31e08:	003f6506 	br	31ba0 <_realloc_r+0x15c>
   31e0c:	800b883a 	mov	r5,r16
   31e10:	9009883a 	mov	r4,r18
   31e14:	003048c0 	call	3048c <memmove>
   31e18:	003f9c06 	br	31c8c <_realloc_r+0x248>
   31e1c:	88800404 	addi	r2,r17,16
   31e20:	b8bf4016 	blt	r23,r2,31b24 <_realloc_r+0xe0>
   31e24:	38800317 	ldw	r2,12(r7)
   31e28:	38c00217 	ldw	r3,8(r7)
   31e2c:	a1bfff04 	addi	r6,r20,-4
   31e30:	31000968 	cmpgeui	r4,r6,37
   31e34:	18800315 	stw	r2,12(r3)
   31e38:	10c00215 	stw	r3,8(r2)
   31e3c:	3c800204 	addi	r18,r7,8
   31e40:	20003b1e 	bne	r4,zero,31f30 <_realloc_r+0x4ec>
   31e44:	30800530 	cmpltui	r2,r6,20
   31e48:	80c00017 	ldw	r3,0(r16)
   31e4c:	1000361e 	bne	r2,zero,31f28 <_realloc_r+0x4e4>
   31e50:	38c00215 	stw	r3,8(r7)
   31e54:	80c00117 	ldw	r3,4(r16)
   31e58:	30800728 	cmpgeui	r2,r6,28
   31e5c:	38c00315 	stw	r3,12(r7)
   31e60:	1000401e 	bne	r2,zero,31f64 <_realloc_r+0x520>
   31e64:	80c00217 	ldw	r3,8(r16)
   31e68:	38800404 	addi	r2,r7,16
   31e6c:	84000204 	addi	r16,r16,8
   31e70:	10c00015 	stw	r3,0(r2)
   31e74:	80c00117 	ldw	r3,4(r16)
   31e78:	10c00115 	stw	r3,4(r2)
   31e7c:	80c00217 	ldw	r3,8(r16)
   31e80:	10c00215 	stw	r3,8(r2)
   31e84:	3c47883a 	add	r3,r7,r17
   31e88:	bc45c83a 	sub	r2,r23,r17
   31e8c:	e0c00215 	stw	r3,8(fp)
   31e90:	10800054 	ori	r2,r2,1
   31e94:	18800115 	stw	r2,4(r3)
   31e98:	38800117 	ldw	r2,4(r7)
   31e9c:	9809883a 	mov	r4,r19
   31ea0:	1080004c 	andi	r2,r2,1
   31ea4:	1462b03a 	or	r17,r2,r17
   31ea8:	3c400115 	stw	r17,4(r7)
   31eac:	0035d2c0 	call	35d2c <__malloc_unlock>
   31eb0:	003f4f06 	br	31bf0 <_realloc_r+0x1ac>
   31eb4:	80800217 	ldw	r2,8(r16)
   31eb8:	31800920 	cmpeqi	r6,r6,36
   31ebc:	90800215 	stw	r2,8(r18)
   31ec0:	80800317 	ldw	r2,12(r16)
   31ec4:	90800315 	stw	r2,12(r18)
   31ec8:	81000417 	ldw	r4,16(r16)
   31ecc:	30000f1e 	bne	r6,zero,31f0c <_realloc_r+0x4c8>
   31ed0:	80c00404 	addi	r3,r16,16
   31ed4:	90800404 	addi	r2,r18,16
   31ed8:	003f6706 	br	31c78 <_realloc_r+0x234>
   31edc:	2005883a 	mov	r2,r4
   31ee0:	003f2706 	br	31b80 <_realloc_r+0x13c>
   31ee4:	80800217 	ldw	r2,8(r16)
   31ee8:	31800920 	cmpeqi	r6,r6,36
   31eec:	38800415 	stw	r2,16(r7)
   31ef0:	80800317 	ldw	r2,12(r16)
   31ef4:	38800515 	stw	r2,20(r7)
   31ef8:	80c00417 	ldw	r3,16(r16)
   31efc:	3000121e 	bne	r6,zero,31f48 <_realloc_r+0x504>
   31f00:	38800604 	addi	r2,r7,24
   31f04:	84000404 	addi	r16,r16,16
   31f08:	003f1d06 	br	31b80 <_realloc_r+0x13c>
   31f0c:	91000415 	stw	r4,16(r18)
   31f10:	81000517 	ldw	r4,20(r16)
   31f14:	80c00604 	addi	r3,r16,24
   31f18:	90800604 	addi	r2,r18,24
   31f1c:	91000515 	stw	r4,20(r18)
   31f20:	81000617 	ldw	r4,24(r16)
   31f24:	003f5406 	br	31c78 <_realloc_r+0x234>
   31f28:	9005883a 	mov	r2,r18
   31f2c:	003fd006 	br	31e70 <_realloc_r+0x42c>
   31f30:	800b883a 	mov	r5,r16
   31f34:	9009883a 	mov	r4,r18
   31f38:	d9c00015 	stw	r7,0(sp)
   31f3c:	003048c0 	call	3048c <memmove>
   31f40:	d9c00017 	ldw	r7,0(sp)
   31f44:	003fcf06 	br	31e84 <_realloc_r+0x440>
   31f48:	84000604 	addi	r16,r16,24
   31f4c:	38c00615 	stw	r3,24(r7)
   31f50:	80ffff17 	ldw	r3,-4(r16)
   31f54:	38800804 	addi	r2,r7,32
   31f58:	38c00715 	stw	r3,28(r7)
   31f5c:	80c00017 	ldw	r3,0(r16)
   31f60:	003f0706 	br	31b80 <_realloc_r+0x13c>
   31f64:	80800217 	ldw	r2,8(r16)
   31f68:	31800920 	cmpeqi	r6,r6,36
   31f6c:	38800415 	stw	r2,16(r7)
   31f70:	80800317 	ldw	r2,12(r16)
   31f74:	38800515 	stw	r2,20(r7)
   31f78:	80c00417 	ldw	r3,16(r16)
   31f7c:	3000031e 	bne	r6,zero,31f8c <_realloc_r+0x548>
   31f80:	38800604 	addi	r2,r7,24
   31f84:	84000404 	addi	r16,r16,16
   31f88:	003fb906 	br	31e70 <_realloc_r+0x42c>
   31f8c:	84000604 	addi	r16,r16,24
   31f90:	38c00615 	stw	r3,24(r7)
   31f94:	80ffff17 	ldw	r3,-4(r16)
   31f98:	38800804 	addi	r2,r7,32
   31f9c:	38c00715 	stw	r3,28(r7)
   31fa0:	80c00017 	ldw	r3,0(r16)
   31fa4:	003fb206 	br	31e70 <_realloc_r+0x42c>

00031fa8 <_sbrk_r>:
   31fa8:	defffe04 	addi	sp,sp,-8
   31fac:	dc000015 	stw	r16,0(sp)
   31fb0:	00800134 	movhi	r2,4
   31fb4:	2021883a 	mov	r16,r4
   31fb8:	2809883a 	mov	r4,r5
   31fbc:	dfc00115 	stw	ra,4(sp)
   31fc0:	10324615 	stw	zero,-14056(r2)
   31fc4:	0035f040 	call	35f04 <sbrk>
   31fc8:	10ffffd8 	cmpnei	r3,r2,-1
   31fcc:	18000426 	beq	r3,zero,31fe0 <_sbrk_r+0x38>
   31fd0:	dfc00117 	ldw	ra,4(sp)
   31fd4:	dc000017 	ldw	r16,0(sp)
   31fd8:	dec00204 	addi	sp,sp,8
   31fdc:	f800283a 	ret
   31fe0:	00c00134 	movhi	r3,4
   31fe4:	18f24617 	ldw	r3,-14056(r3)
   31fe8:	183ff926 	beq	r3,zero,31fd0 <_sbrk_r+0x28>
   31fec:	80c00015 	stw	r3,0(r16)
   31ff0:	dfc00117 	ldw	ra,4(sp)
   31ff4:	dc000017 	ldw	r16,0(sp)
   31ff8:	dec00204 	addi	sp,sp,8
   31ffc:	f800283a 	ret

00032000 <__sread>:
   32000:	defffe04 	addi	sp,sp,-8
   32004:	dc000015 	stw	r16,0(sp)
   32008:	2821883a 	mov	r16,r5
   3200c:	2940038f 	ldh	r5,14(r5)
   32010:	dfc00115 	stw	ra,4(sp)
   32014:	003401c0 	call	3401c <_read_r>
   32018:	10000716 	blt	r2,zero,32038 <__sread+0x38>
   3201c:	80c01417 	ldw	r3,80(r16)
   32020:	1887883a 	add	r3,r3,r2
   32024:	80c01415 	stw	r3,80(r16)
   32028:	dfc00117 	ldw	ra,4(sp)
   3202c:	dc000017 	ldw	r16,0(sp)
   32030:	dec00204 	addi	sp,sp,8
   32034:	f800283a 	ret
   32038:	80c0030b 	ldhu	r3,12(r16)
   3203c:	18fbffcc 	andi	r3,r3,61439
   32040:	80c0030d 	sth	r3,12(r16)
   32044:	dfc00117 	ldw	ra,4(sp)
   32048:	dc000017 	ldw	r16,0(sp)
   3204c:	dec00204 	addi	sp,sp,8
   32050:	f800283a 	ret

00032054 <__seofread>:
   32054:	0005883a 	mov	r2,zero
   32058:	f800283a 	ret

0003205c <__swrite>:
   3205c:	2880030b 	ldhu	r2,12(r5)
   32060:	defffb04 	addi	sp,sp,-20
   32064:	dcc00315 	stw	r19,12(sp)
   32068:	dc800215 	stw	r18,8(sp)
   3206c:	dc400115 	stw	r17,4(sp)
   32070:	dc000015 	stw	r16,0(sp)
   32074:	dfc00415 	stw	ra,16(sp)
   32078:	10c0400c 	andi	r3,r2,256
   3207c:	2821883a 	mov	r16,r5
   32080:	2023883a 	mov	r17,r4
   32084:	2940038f 	ldh	r5,14(r5)
   32088:	3025883a 	mov	r18,r6
   3208c:	3827883a 	mov	r19,r7
   32090:	18000c1e 	bne	r3,zero,320c4 <__swrite+0x68>
   32094:	10bbffcc 	andi	r2,r2,61439
   32098:	980f883a 	mov	r7,r19
   3209c:	900d883a 	mov	r6,r18
   320a0:	8809883a 	mov	r4,r17
   320a4:	8080030d 	sth	r2,12(r16)
   320a8:	dfc00417 	ldw	ra,16(sp)
   320ac:	dcc00317 	ldw	r19,12(sp)
   320b0:	dc800217 	ldw	r18,8(sp)
   320b4:	dc400117 	ldw	r17,4(sp)
   320b8:	dc000017 	ldw	r16,0(sp)
   320bc:	dec00504 	addi	sp,sp,20
   320c0:	00337cc1 	jmpi	337cc <_write_r>
   320c4:	01c00084 	movi	r7,2
   320c8:	000d883a 	mov	r6,zero
   320cc:	0033f680 	call	33f68 <_lseek_r>
   320d0:	8080030b 	ldhu	r2,12(r16)
   320d4:	8140038f 	ldh	r5,14(r16)
   320d8:	003fee06 	br	32094 <__swrite+0x38>

000320dc <__sseek>:
   320dc:	defffe04 	addi	sp,sp,-8
   320e0:	dc000015 	stw	r16,0(sp)
   320e4:	2821883a 	mov	r16,r5
   320e8:	2940038f 	ldh	r5,14(r5)
   320ec:	dfc00115 	stw	ra,4(sp)
   320f0:	0033f680 	call	33f68 <_lseek_r>
   320f4:	10ffffd8 	cmpnei	r3,r2,-1
   320f8:	18000826 	beq	r3,zero,3211c <__sseek+0x40>
   320fc:	80c0030b 	ldhu	r3,12(r16)
   32100:	80801415 	stw	r2,80(r16)
   32104:	18c40014 	ori	r3,r3,4096
   32108:	80c0030d 	sth	r3,12(r16)
   3210c:	dfc00117 	ldw	ra,4(sp)
   32110:	dc000017 	ldw	r16,0(sp)
   32114:	dec00204 	addi	sp,sp,8
   32118:	f800283a 	ret
   3211c:	80c0030b 	ldhu	r3,12(r16)
   32120:	18fbffcc 	andi	r3,r3,61439
   32124:	80c0030d 	sth	r3,12(r16)
   32128:	dfc00117 	ldw	ra,4(sp)
   3212c:	dc000017 	ldw	r16,0(sp)
   32130:	dec00204 	addi	sp,sp,8
   32134:	f800283a 	ret

00032138 <__sclose>:
   32138:	2940038f 	ldh	r5,14(r5)
   3213c:	00338301 	jmpi	33830 <_close_r>

00032140 <__sprint_r.part.0>:
   32140:	28801917 	ldw	r2,100(r5)
   32144:	defff604 	addi	sp,sp,-40
   32148:	dcc00315 	stw	r19,12(sp)
   3214c:	dfc00915 	stw	ra,36(sp)
   32150:	df000815 	stw	fp,32(sp)
   32154:	ddc00715 	stw	r23,28(sp)
   32158:	dd800615 	stw	r22,24(sp)
   3215c:	dd400515 	stw	r21,20(sp)
   32160:	dd000415 	stw	r20,16(sp)
   32164:	dc800215 	stw	r18,8(sp)
   32168:	dc400115 	stw	r17,4(sp)
   3216c:	dc000015 	stw	r16,0(sp)
   32170:	1088000c 	andi	r2,r2,8192
   32174:	3027883a 	mov	r19,r6
   32178:	10002c26 	beq	r2,zero,3222c <__sprint_r.part.0+0xec>
   3217c:	30800217 	ldw	r2,8(r6)
   32180:	35000017 	ldw	r20,0(r6)
   32184:	2821883a 	mov	r16,r5
   32188:	2023883a 	mov	r17,r4
   3218c:	05bfff04 	movi	r22,-4
   32190:	10002426 	beq	r2,zero,32224 <__sprint_r.part.0+0xe4>
   32194:	a5400117 	ldw	r21,4(r20)
   32198:	a5c00017 	ldw	r23,0(r20)
   3219c:	a824d0ba 	srli	r18,r21,2
   321a0:	90001b26 	beq	r18,zero,32210 <__sprint_r.part.0+0xd0>
   321a4:	0039883a 	mov	fp,zero
   321a8:	00000206 	br	321b4 <__sprint_r.part.0+0x74>
   321ac:	bdc00104 	addi	r23,r23,4
   321b0:	97001626 	beq	r18,fp,3220c <__sprint_r.part.0+0xcc>
   321b4:	b9400017 	ldw	r5,0(r23)
   321b8:	800d883a 	mov	r6,r16
   321bc:	8809883a 	mov	r4,r17
   321c0:	0033d200 	call	33d20 <_fputwc_r>
   321c4:	10bfffe0 	cmpeqi	r2,r2,-1
   321c8:	e7000044 	addi	fp,fp,1
   321cc:	103ff726 	beq	r2,zero,321ac <__sprint_r.part.0+0x6c>
   321d0:	00bfffc4 	movi	r2,-1
   321d4:	98000215 	stw	zero,8(r19)
   321d8:	98000115 	stw	zero,4(r19)
   321dc:	dfc00917 	ldw	ra,36(sp)
   321e0:	df000817 	ldw	fp,32(sp)
   321e4:	ddc00717 	ldw	r23,28(sp)
   321e8:	dd800617 	ldw	r22,24(sp)
   321ec:	dd400517 	ldw	r21,20(sp)
   321f0:	dd000417 	ldw	r20,16(sp)
   321f4:	dcc00317 	ldw	r19,12(sp)
   321f8:	dc800217 	ldw	r18,8(sp)
   321fc:	dc400117 	ldw	r17,4(sp)
   32200:	dc000017 	ldw	r16,0(sp)
   32204:	dec00a04 	addi	sp,sp,40
   32208:	f800283a 	ret
   3220c:	98800217 	ldw	r2,8(r19)
   32210:	adaa703a 	and	r21,r21,r22
   32214:	1545c83a 	sub	r2,r2,r21
   32218:	98800215 	stw	r2,8(r19)
   3221c:	a5000204 	addi	r20,r20,8
   32220:	103fdc1e 	bne	r2,zero,32194 <__sprint_r.part.0+0x54>
   32224:	0005883a 	mov	r2,zero
   32228:	003fea06 	br	321d4 <__sprint_r.part.0+0x94>
   3222c:	002f26c0 	call	2f26c <__sfvwrite_r>
   32230:	003fe806 	br	321d4 <__sprint_r.part.0+0x94>

00032234 <__sprint_r>:
   32234:	30c00217 	ldw	r3,8(r6)
   32238:	18000126 	beq	r3,zero,32240 <__sprint_r+0xc>
   3223c:	00321401 	jmpi	32140 <__sprint_r.part.0>
   32240:	30000115 	stw	zero,4(r6)
   32244:	0005883a 	mov	r2,zero
   32248:	f800283a 	ret

0003224c <___vfiprintf_internal_r>:
   3224c:	deffcf04 	addi	sp,sp,-196
   32250:	dd802d15 	stw	r22,180(sp)
   32254:	dd402c15 	stw	r21,176(sp)
   32258:	dd002b15 	stw	r20,172(sp)
   3225c:	dfc03015 	stw	ra,192(sp)
   32260:	df002f15 	stw	fp,188(sp)
   32264:	ddc02e15 	stw	r23,184(sp)
   32268:	dcc02a15 	stw	r19,168(sp)
   3226c:	dc802915 	stw	r18,164(sp)
   32270:	dc402815 	stw	r17,160(sp)
   32274:	dc002715 	stw	r16,156(sp)
   32278:	d9c00415 	stw	r7,16(sp)
   3227c:	202d883a 	mov	r22,r4
   32280:	282b883a 	mov	r21,r5
   32284:	3029883a 	mov	r20,r6
   32288:	20000226 	beq	r4,zero,32294 <___vfiprintf_internal_r+0x48>
   3228c:	20800e17 	ldw	r2,56(r4)
   32290:	1001bd26 	beq	r2,zero,32988 <___vfiprintf_internal_r+0x73c>
   32294:	a880030b 	ldhu	r2,12(r21)
   32298:	10c8000c 	andi	r3,r2,8192
   3229c:	1800061e 	bne	r3,zero,322b8 <___vfiprintf_internal_r+0x6c>
   322a0:	a8c01917 	ldw	r3,100(r21)
   322a4:	0137ffc4 	movi	r4,-8193
   322a8:	10880014 	ori	r2,r2,8192
   322ac:	1906703a 	and	r3,r3,r4
   322b0:	a880030d 	sth	r2,12(r21)
   322b4:	a8c01915 	stw	r3,100(r21)
   322b8:	10c0020c 	andi	r3,r2,8
   322bc:	18010826 	beq	r3,zero,326e0 <___vfiprintf_internal_r+0x494>
   322c0:	a8c00417 	ldw	r3,16(r21)
   322c4:	18010626 	beq	r3,zero,326e0 <___vfiprintf_internal_r+0x494>
   322c8:	1080068c 	andi	r2,r2,26
   322cc:	10800298 	cmpnei	r2,r2,10
   322d0:	10010b26 	beq	r2,zero,32700 <___vfiprintf_internal_r+0x4b4>
   322d4:	dc801704 	addi	r18,sp,92
   322d8:	dc800a15 	stw	r18,40(sp)
   322dc:	d8000c15 	stw	zero,48(sp)
   322e0:	d8000b15 	stw	zero,44(sp)
   322e4:	9021883a 	mov	r16,r18
   322e8:	d8000515 	stw	zero,20(sp)
   322ec:	d8000115 	stw	zero,4(sp)
   322f0:	a0800007 	ldb	r2,0(r20)
   322f4:	1000e826 	beq	r2,zero,32698 <___vfiprintf_internal_r+0x44c>
   322f8:	a023883a 	mov	r17,r20
   322fc:	00000306 	br	3230c <___vfiprintf_internal_r+0xc0>
   32300:	88800047 	ldb	r2,1(r17)
   32304:	8c400044 	addi	r17,r17,1
   32308:	10013326 	beq	r2,zero,327d8 <___vfiprintf_internal_r+0x58c>
   3230c:	10800958 	cmpnei	r2,r2,37
   32310:	103ffb1e 	bne	r2,zero,32300 <___vfiprintf_internal_r+0xb4>
   32314:	8d27c83a 	sub	r19,r17,r20
   32318:	8d01311e 	bne	r17,r20,327e0 <___vfiprintf_internal_r+0x594>
   3231c:	88800003 	ldbu	r2,0(r17)
   32320:	10803fcc 	andi	r2,r2,255
   32324:	1080201c 	xori	r2,r2,128
   32328:	10bfe004 	addi	r2,r2,-128
   3232c:	1000da26 	beq	r2,zero,32698 <___vfiprintf_internal_r+0x44c>
   32330:	88800047 	ldb	r2,1(r17)
   32334:	8d000044 	addi	r20,r17,1
   32338:	d8000945 	stb	zero,37(sp)
   3233c:	000b883a 	mov	r5,zero
   32340:	000d883a 	mov	r6,zero
   32344:	023fffc4 	movi	r8,-1
   32348:	0023883a 	mov	r17,zero
   3234c:	001b883a 	mov	r13,zero
   32350:	a5000044 	addi	r20,r20,1
   32354:	10fff804 	addi	r3,r2,-32
   32358:	19001668 	cmpgeui	r4,r3,89
   3235c:	20006c1e 	bne	r4,zero,32510 <___vfiprintf_internal_r+0x2c4>
   32360:	180690ba 	slli	r3,r3,2
   32364:	010000f4 	movhi	r4,3
   32368:	1909883a 	add	r4,r3,r4
   3236c:	20c8dd17 	ldw	r3,9076(r4)
   32370:	1800683a 	jmp	r3
   32374:	00032cb0 	cmpltui	zero,zero,3250
   32378:	00032510 	cmplti	zero,zero,3220
   3237c:	00032510 	cmplti	zero,zero,3220
   32380:	00032ca4 	muli	zero,zero,3250
   32384:	00032510 	cmplti	zero,zero,3220
   32388:	00032510 	cmplti	zero,zero,3220
   3238c:	00032510 	cmplti	zero,zero,3220
   32390:	00032510 	cmplti	zero,zero,3220
   32394:	00032510 	cmplti	zero,zero,3220
   32398:	00032510 	cmplti	zero,zero,3220
   3239c:	00032c7c 	xorhi	zero,zero,3249
   323a0:	00032c6c 	andhi	zero,zero,3249
   323a4:	00032510 	cmplti	zero,zero,3220
   323a8:	00032c54 	movui	zero,3249
   323ac:	00032c08 	cmpgei	zero,zero,3248
   323b0:	00032510 	cmplti	zero,zero,3220
   323b4:	00032bfc 	xorhi	zero,zero,3247
   323b8:	000324d8 	cmpnei	zero,zero,3219
   323bc:	000324d8 	cmpnei	zero,zero,3219
   323c0:	000324d8 	cmpnei	zero,zero,3219
   323c4:	000324d8 	cmpnei	zero,zero,3219
   323c8:	000324d8 	cmpnei	zero,zero,3219
   323cc:	000324d8 	cmpnei	zero,zero,3219
   323d0:	000324d8 	cmpnei	zero,zero,3219
   323d4:	000324d8 	cmpnei	zero,zero,3219
   323d8:	000324d8 	cmpnei	zero,zero,3219
   323dc:	00032510 	cmplti	zero,zero,3220
   323e0:	00032510 	cmplti	zero,zero,3220
   323e4:	00032510 	cmplti	zero,zero,3220
   323e8:	00032510 	cmplti	zero,zero,3220
   323ec:	00032510 	cmplti	zero,zero,3220
   323f0:	00032510 	cmplti	zero,zero,3220
   323f4:	00032510 	cmplti	zero,zero,3220
   323f8:	00032510 	cmplti	zero,zero,3220
   323fc:	00032510 	cmplti	zero,zero,3220
   32400:	00032510 	cmplti	zero,zero,3220
   32404:	00032af8 	rdprs	zero,zero,3243
   32408:	00032510 	cmplti	zero,zero,3220
   3240c:	00032510 	cmplti	zero,zero,3220
   32410:	00032510 	cmplti	zero,zero,3220
   32414:	00032510 	cmplti	zero,zero,3220
   32418:	00032510 	cmplti	zero,zero,3220
   3241c:	00032510 	cmplti	zero,zero,3220
   32420:	00032510 	cmplti	zero,zero,3220
   32424:	00032510 	cmplti	zero,zero,3220
   32428:	00032510 	cmplti	zero,zero,3220
   3242c:	00032510 	cmplti	zero,zero,3220
   32430:	00032770 	cmpltui	zero,zero,3229
   32434:	00032510 	cmplti	zero,zero,3220
   32438:	00032510 	cmplti	zero,zero,3220
   3243c:	00032510 	cmplti	zero,zero,3220
   32440:	00032510 	cmplti	zero,zero,3220
   32444:	00032510 	cmplti	zero,zero,3220
   32448:	00032748 	cmpgei	zero,zero,3229
   3244c:	00032510 	cmplti	zero,zero,3220
   32450:	00032510 	cmplti	zero,zero,3220
   32454:	00032d04 	movi	zero,3252
   32458:	00032510 	cmplti	zero,zero,3220
   3245c:	00032510 	cmplti	zero,zero,3220
   32460:	00032510 	cmplti	zero,zero,3220
   32464:	00032510 	cmplti	zero,zero,3220
   32468:	00032510 	cmplti	zero,zero,3220
   3246c:	00032510 	cmplti	zero,zero,3220
   32470:	00032510 	cmplti	zero,zero,3220
   32474:	00032510 	cmplti	zero,zero,3220
   32478:	00032510 	cmplti	zero,zero,3220
   3247c:	00032510 	cmplti	zero,zero,3220
   32480:	00032cdc 	xori	zero,zero,3251
   32484:	00032990 	cmplti	zero,zero,3238
   32488:	00032510 	cmplti	zero,zero,3220
   3248c:	00032510 	cmplti	zero,zero,3220
   32490:	00032510 	cmplti	zero,zero,3220
   32494:	00032a04 	movi	zero,3240
   32498:	00032990 	cmplti	zero,zero,3238
   3249c:	00032510 	cmplti	zero,zero,3220
   324a0:	00032510 	cmplti	zero,zero,3220
   324a4:	00032d88 	cmpgei	zero,zero,3254
   324a8:	00032510 	cmplti	zero,zero,3220
   324ac:	00032d4c 	andi	zero,zero,3253
   324b0:	00032774 	movhi	zero,3229
   324b4:	00032abc 	xorhi	zero,zero,3242
   324b8:	00032ab0 	cmpltui	zero,zero,3242
   324bc:	00032510 	cmplti	zero,zero,3220
   324c0:	00032a58 	cmpnei	zero,zero,3241
   324c4:	00032510 	cmplti	zero,zero,3220
   324c8:	0003274c 	andi	zero,zero,3229
   324cc:	00032510 	cmplti	zero,zero,3220
   324d0:	00032510 	cmplti	zero,zero,3220
   324d4:	00032a10 	cmplti	zero,zero,3240
   324d8:	0023883a 	mov	r17,zero
   324dc:	113ff404 	addi	r4,r2,-48
   324e0:	880690ba 	slli	r3,r17,2
   324e4:	a0800007 	ldb	r2,0(r20)
   324e8:	a5000044 	addi	r20,r20,1
   324ec:	1c63883a 	add	r17,r3,r17
   324f0:	8c63883a 	add	r17,r17,r17
   324f4:	2463883a 	add	r17,r4,r17
   324f8:	113ff404 	addi	r4,r2,-48
   324fc:	20c002b0 	cmpltui	r3,r4,10
   32500:	183ff71e 	bne	r3,zero,324e0 <___vfiprintf_internal_r+0x294>
   32504:	10fff804 	addi	r3,r2,-32
   32508:	19001668 	cmpgeui	r4,r3,89
   3250c:	203f9426 	beq	r4,zero,32360 <___vfiprintf_internal_r+0x114>
   32510:	29403fcc 	andi	r5,r5,255
   32514:	2803ed1e 	bne	r5,zero,334cc <___vfiprintf_internal_r+0x1280>
   32518:	10005f26 	beq	r2,zero,32698 <___vfiprintf_internal_r+0x44c>
   3251c:	d8800d05 	stb	r2,52(sp)
   32520:	d8000945 	stb	zero,37(sp)
   32524:	05c00044 	movi	r23,1
   32528:	07000044 	movi	fp,1
   3252c:	dcc00d04 	addi	r19,sp,52
   32530:	db400015 	stw	r13,0(sp)
   32534:	0011883a 	mov	r8,zero
   32538:	d8800017 	ldw	r2,0(sp)
   3253c:	1380008c 	andi	r14,r2,2
   32540:	70000126 	beq	r14,zero,32548 <___vfiprintf_internal_r+0x2fc>
   32544:	bdc00084 	addi	r23,r23,2
   32548:	d8800017 	ldw	r2,0(sp)
   3254c:	d9000b17 	ldw	r4,44(sp)
   32550:	1340210c 	andi	r13,r2,132
   32554:	21800044 	addi	r6,r4,1
   32558:	d8800c17 	ldw	r2,48(sp)
   3255c:	300b883a 	mov	r5,r6
   32560:	6800021e 	bne	r13,zero,3256c <___vfiprintf_internal_r+0x320>
   32564:	8dc7c83a 	sub	r3,r17,r23
   32568:	00c2e216 	blt	zero,r3,330f4 <___vfiprintf_internal_r+0xea8>
   3256c:	d8c00947 	ldb	r3,37(sp)
   32570:	81800204 	addi	r6,r16,8
   32574:	18000d26 	beq	r3,zero,325ac <___vfiprintf_internal_r+0x360>
   32578:	d8c00944 	addi	r3,sp,37
   3257c:	10800044 	addi	r2,r2,1
   32580:	80c00015 	stw	r3,0(r16)
   32584:	00c00044 	movi	r3,1
   32588:	80c00115 	stw	r3,4(r16)
   3258c:	d8800c15 	stw	r2,48(sp)
   32590:	d9400b15 	stw	r5,44(sp)
   32594:	28c00208 	cmpgei	r3,r5,8
   32598:	18029a1e 	bne	r3,zero,33004 <___vfiprintf_internal_r+0xdb8>
   3259c:	2809883a 	mov	r4,r5
   325a0:	3021883a 	mov	r16,r6
   325a4:	29400044 	addi	r5,r5,1
   325a8:	31800204 	addi	r6,r6,8
   325ac:	70001826 	beq	r14,zero,32610 <___vfiprintf_internal_r+0x3c4>
   325b0:	d8c00984 	addi	r3,sp,38
   325b4:	10800084 	addi	r2,r2,2
   325b8:	80c00015 	stw	r3,0(r16)
   325bc:	00c00084 	movi	r3,2
   325c0:	80c00115 	stw	r3,4(r16)
   325c4:	d8800c15 	stw	r2,48(sp)
   325c8:	d9400b15 	stw	r5,44(sp)
   325cc:	28c00208 	cmpgei	r3,r5,8
   325d0:	1802a426 	beq	r3,zero,33064 <___vfiprintf_internal_r+0xe18>
   325d4:	10032226 	beq	r2,zero,33260 <___vfiprintf_internal_r+0x1014>
   325d8:	d9800a04 	addi	r6,sp,40
   325dc:	a80b883a 	mov	r5,r21
   325e0:	b009883a 	mov	r4,r22
   325e4:	da000315 	stw	r8,12(sp)
   325e8:	db400215 	stw	r13,8(sp)
   325ec:	00321400 	call	32140 <__sprint_r.part.0>
   325f0:	10002b1e 	bne	r2,zero,326a0 <___vfiprintf_internal_r+0x454>
   325f4:	d9000b17 	ldw	r4,44(sp)
   325f8:	d8800c17 	ldw	r2,48(sp)
   325fc:	da000317 	ldw	r8,12(sp)
   32600:	db400217 	ldw	r13,8(sp)
   32604:	d9801904 	addi	r6,sp,100
   32608:	21400044 	addi	r5,r4,1
   3260c:	9021883a 	mov	r16,r18
   32610:	6b402018 	cmpnei	r13,r13,128
   32614:	6801e526 	beq	r13,zero,32dac <___vfiprintf_internal_r+0xb60>
   32618:	4711c83a 	sub	r8,r8,fp
   3261c:	02022416 	blt	zero,r8,32eb0 <___vfiprintf_internal_r+0xc64>
   32620:	e085883a 	add	r2,fp,r2
   32624:	d9400b15 	stw	r5,44(sp)
   32628:	84c00015 	stw	r19,0(r16)
   3262c:	87000115 	stw	fp,4(r16)
   32630:	d8800c15 	stw	r2,48(sp)
   32634:	29400210 	cmplti	r5,r5,8
   32638:	2800081e 	bne	r5,zero,3265c <___vfiprintf_internal_r+0x410>
   3263c:	10009826 	beq	r2,zero,328a0 <___vfiprintf_internal_r+0x654>
   32640:	d9800a04 	addi	r6,sp,40
   32644:	a80b883a 	mov	r5,r21
   32648:	b009883a 	mov	r4,r22
   3264c:	00321400 	call	32140 <__sprint_r.part.0>
   32650:	1000131e 	bne	r2,zero,326a0 <___vfiprintf_internal_r+0x454>
   32654:	d8800c17 	ldw	r2,48(sp)
   32658:	900d883a 	mov	r6,r18
   3265c:	d8c00017 	ldw	r3,0(sp)
   32660:	1cc0010c 	andi	r19,r3,4
   32664:	98000226 	beq	r19,zero,32670 <___vfiprintf_internal_r+0x424>
   32668:	8de1c83a 	sub	r16,r17,r23
   3266c:	04009316 	blt	zero,r16,328bc <___vfiprintf_internal_r+0x670>
   32670:	8dc0010e 	bge	r17,r23,32678 <___vfiprintf_internal_r+0x42c>
   32674:	b823883a 	mov	r17,r23
   32678:	d8c00117 	ldw	r3,4(sp)
   3267c:	1c47883a 	add	r3,r3,r17
   32680:	d8c00115 	stw	r3,4(sp)
   32684:	1002551e 	bne	r2,zero,32fdc <___vfiprintf_internal_r+0xd90>
   32688:	a0800007 	ldb	r2,0(r20)
   3268c:	d8000b15 	stw	zero,44(sp)
   32690:	9021883a 	mov	r16,r18
   32694:	103f181e 	bne	r2,zero,322f8 <___vfiprintf_internal_r+0xac>
   32698:	d8800c17 	ldw	r2,48(sp)
   3269c:	10038d1e 	bne	r2,zero,334d4 <___vfiprintf_internal_r+0x1288>
   326a0:	a880030b 	ldhu	r2,12(r21)
   326a4:	1080100c 	andi	r2,r2,64
   326a8:	1003a51e 	bne	r2,zero,33540 <___vfiprintf_internal_r+0x12f4>
   326ac:	d8800117 	ldw	r2,4(sp)
   326b0:	dfc03017 	ldw	ra,192(sp)
   326b4:	df002f17 	ldw	fp,188(sp)
   326b8:	ddc02e17 	ldw	r23,184(sp)
   326bc:	dd802d17 	ldw	r22,180(sp)
   326c0:	dd402c17 	ldw	r21,176(sp)
   326c4:	dd002b17 	ldw	r20,172(sp)
   326c8:	dcc02a17 	ldw	r19,168(sp)
   326cc:	dc802917 	ldw	r18,164(sp)
   326d0:	dc402817 	ldw	r17,160(sp)
   326d4:	dc002717 	ldw	r16,156(sp)
   326d8:	dec03104 	addi	sp,sp,196
   326dc:	f800283a 	ret
   326e0:	a80b883a 	mov	r5,r21
   326e4:	b009883a 	mov	r4,r22
   326e8:	002ccd00 	call	2ccd0 <__swsetup_r>
   326ec:	1003941e 	bne	r2,zero,33540 <___vfiprintf_internal_r+0x12f4>
   326f0:	a880030b 	ldhu	r2,12(r21)
   326f4:	1080068c 	andi	r2,r2,26
   326f8:	10800298 	cmpnei	r2,r2,10
   326fc:	103ef51e 	bne	r2,zero,322d4 <___vfiprintf_internal_r+0x88>
   32700:	a880038f 	ldh	r2,14(r21)
   32704:	103ef316 	blt	r2,zero,322d4 <___vfiprintf_internal_r+0x88>
   32708:	d9c00417 	ldw	r7,16(sp)
   3270c:	a00d883a 	mov	r6,r20
   32710:	a80b883a 	mov	r5,r21
   32714:	b009883a 	mov	r4,r22
   32718:	dfc03017 	ldw	ra,192(sp)
   3271c:	df002f17 	ldw	fp,188(sp)
   32720:	ddc02e17 	ldw	r23,184(sp)
   32724:	dd802d17 	ldw	r22,180(sp)
   32728:	dd402c17 	ldw	r21,176(sp)
   3272c:	dd002b17 	ldw	r20,172(sp)
   32730:	dcc02a17 	ldw	r19,168(sp)
   32734:	dc802917 	ldw	r18,164(sp)
   32738:	dc402817 	ldw	r17,160(sp)
   3273c:	dc002717 	ldw	r16,156(sp)
   32740:	dec03104 	addi	sp,sp,196
   32744:	00335ac1 	jmpi	335ac <__sbprintf>
   32748:	6b400414 	ori	r13,r13,16
   3274c:	6880080c 	andi	r2,r13,32
   32750:	10004726 	beq	r2,zero,32870 <___vfiprintf_internal_r+0x624>
   32754:	d8c00417 	ldw	r3,16(sp)
   32758:	00800044 	movi	r2,1
   3275c:	1dc00017 	ldw	r23,0(r3)
   32760:	1f000117 	ldw	fp,4(r3)
   32764:	18c00204 	addi	r3,r3,8
   32768:	d8c00415 	stw	r3,16(sp)
   3276c:	00000906 	br	32794 <___vfiprintf_internal_r+0x548>
   32770:	6b400414 	ori	r13,r13,16
   32774:	6880080c 	andi	r2,r13,32
   32778:	10003126 	beq	r2,zero,32840 <___vfiprintf_internal_r+0x5f4>
   3277c:	d8c00417 	ldw	r3,16(sp)
   32780:	0005883a 	mov	r2,zero
   32784:	1dc00017 	ldw	r23,0(r3)
   32788:	1f000117 	ldw	fp,4(r3)
   3278c:	18c00204 	addi	r3,r3,8
   32790:	d8c00415 	stw	r3,16(sp)
   32794:	d8000945 	stb	zero,37(sp)
   32798:	40ffffe0 	cmpeqi	r3,r8,-1
   3279c:	001d883a 	mov	r14,zero
   327a0:	1800f01e 	bne	r3,zero,32b64 <___vfiprintf_internal_r+0x918>
   327a4:	04ffdfc4 	movi	r19,-129
   327a8:	6cc8703a 	and	r4,r13,r19
   327ac:	bf06b03a 	or	r3,r23,fp
   327b0:	d9000015 	stw	r4,0(sp)
   327b4:	1802301e 	bne	r3,zero,33078 <___vfiprintf_internal_r+0xe2c>
   327b8:	4001f31e 	bne	r8,zero,32f88 <___vfiprintf_internal_r+0xd3c>
   327bc:	10029e1e 	bne	r2,zero,33238 <___vfiprintf_internal_r+0xfec>
   327c0:	6f00004c 	andi	fp,r13,1
   327c4:	e002bc26 	beq	fp,zero,332b8 <___vfiprintf_internal_r+0x106c>
   327c8:	00800c04 	movi	r2,48
   327cc:	d88016c5 	stb	r2,91(sp)
   327d0:	dcc016c4 	addi	r19,sp,91
   327d4:	00010006 	br	32bd8 <___vfiprintf_internal_r+0x98c>
   327d8:	8d27c83a 	sub	r19,r17,r20
   327dc:	8d3fae26 	beq	r17,r20,32698 <___vfiprintf_internal_r+0x44c>
   327e0:	d8c00c17 	ldw	r3,48(sp)
   327e4:	d8800b17 	ldw	r2,44(sp)
   327e8:	85000015 	stw	r20,0(r16)
   327ec:	98c7883a 	add	r3,r19,r3
   327f0:	10800044 	addi	r2,r2,1
   327f4:	d8800b15 	stw	r2,44(sp)
   327f8:	84c00115 	stw	r19,4(r16)
   327fc:	d8c00c15 	stw	r3,48(sp)
   32800:	10800208 	cmpgei	r2,r2,8
   32804:	1000061e 	bne	r2,zero,32820 <___vfiprintf_internal_r+0x5d4>
   32808:	84000204 	addi	r16,r16,8
   3280c:	d8c00117 	ldw	r3,4(sp)
   32810:	88800003 	ldbu	r2,0(r17)
   32814:	1cc7883a 	add	r3,r3,r19
   32818:	d8c00115 	stw	r3,4(sp)
   3281c:	003ec006 	br	32320 <___vfiprintf_internal_r+0xd4>
   32820:	18028126 	beq	r3,zero,33228 <___vfiprintf_internal_r+0xfdc>
   32824:	d9800a04 	addi	r6,sp,40
   32828:	a80b883a 	mov	r5,r21
   3282c:	b009883a 	mov	r4,r22
   32830:	00321400 	call	32140 <__sprint_r.part.0>
   32834:	103f9a1e 	bne	r2,zero,326a0 <___vfiprintf_internal_r+0x454>
   32838:	9021883a 	mov	r16,r18
   3283c:	003ff306 	br	3280c <___vfiprintf_internal_r+0x5c0>
   32840:	d9000417 	ldw	r4,16(sp)
   32844:	6880040c 	andi	r2,r13,16
   32848:	20c00104 	addi	r3,r4,4
   3284c:	1002ac1e 	bne	r2,zero,33300 <___vfiprintf_internal_r+0x10b4>
   32850:	6880100c 	andi	r2,r13,64
   32854:	1002fb26 	beq	r2,zero,33444 <___vfiprintf_internal_r+0x11f8>
   32858:	d8800417 	ldw	r2,16(sp)
   3285c:	0039883a 	mov	fp,zero
   32860:	d8c00415 	stw	r3,16(sp)
   32864:	15c0000b 	ldhu	r23,0(r2)
   32868:	0005883a 	mov	r2,zero
   3286c:	003fc906 	br	32794 <___vfiprintf_internal_r+0x548>
   32870:	d9000417 	ldw	r4,16(sp)
   32874:	6880040c 	andi	r2,r13,16
   32878:	20c00104 	addi	r3,r4,4
   3287c:	1002af1e 	bne	r2,zero,3333c <___vfiprintf_internal_r+0x10f0>
   32880:	6880100c 	andi	r2,r13,64
   32884:	1002fb26 	beq	r2,zero,33474 <___vfiprintf_internal_r+0x1228>
   32888:	d8800417 	ldw	r2,16(sp)
   3288c:	0039883a 	mov	fp,zero
   32890:	d8c00415 	stw	r3,16(sp)
   32894:	15c0000b 	ldhu	r23,0(r2)
   32898:	00800044 	movi	r2,1
   3289c:	003fbd06 	br	32794 <___vfiprintf_internal_r+0x548>
   328a0:	d8c00017 	ldw	r3,0(sp)
   328a4:	d8000b15 	stw	zero,44(sp)
   328a8:	1cc0010c 	andi	r19,r3,4
   328ac:	98024c26 	beq	r19,zero,331e0 <___vfiprintf_internal_r+0xf94>
   328b0:	8de1c83a 	sub	r16,r17,r23
   328b4:	04024a0e 	bge	zero,r16,331e0 <___vfiprintf_internal_r+0xf94>
   328b8:	900d883a 	mov	r6,r18
   328bc:	80c00450 	cmplti	r3,r16,17
   328c0:	d9000b17 	ldw	r4,44(sp)
   328c4:	01c00134 	movhi	r7,4
   328c8:	18031a1e 	bne	r3,zero,33534 <___vfiprintf_internal_r+0x12e8>
   328cc:	39e35704 	addi	r7,r7,-29348
   328d0:	04c00404 	movi	r19,16
   328d4:	00000606 	br	328f0 <___vfiprintf_internal_r+0x6a4>
   328d8:	21400084 	addi	r5,r4,2
   328dc:	31800204 	addi	r6,r6,8
   328e0:	1809883a 	mov	r4,r3
   328e4:	843ffc04 	addi	r16,r16,-16
   328e8:	80c00448 	cmpgei	r3,r16,17
   328ec:	18001726 	beq	r3,zero,3294c <___vfiprintf_internal_r+0x700>
   328f0:	20c00044 	addi	r3,r4,1
   328f4:	10800404 	addi	r2,r2,16
   328f8:	31c00015 	stw	r7,0(r6)
   328fc:	34c00115 	stw	r19,4(r6)
   32900:	d8800c15 	stw	r2,48(sp)
   32904:	d8c00b15 	stw	r3,44(sp)
   32908:	19400208 	cmpgei	r5,r3,8
   3290c:	283ff226 	beq	r5,zero,328d8 <___vfiprintf_internal_r+0x68c>
   32910:	d9800a04 	addi	r6,sp,40
   32914:	a80b883a 	mov	r5,r21
   32918:	b009883a 	mov	r4,r22
   3291c:	10011f26 	beq	r2,zero,32d9c <___vfiprintf_internal_r+0xb50>
   32920:	d9c00015 	stw	r7,0(sp)
   32924:	00321400 	call	32140 <__sprint_r.part.0>
   32928:	103f5d1e 	bne	r2,zero,326a0 <___vfiprintf_internal_r+0x454>
   3292c:	d9000b17 	ldw	r4,44(sp)
   32930:	843ffc04 	addi	r16,r16,-16
   32934:	80c00448 	cmpgei	r3,r16,17
   32938:	d8800c17 	ldw	r2,48(sp)
   3293c:	d9c00017 	ldw	r7,0(sp)
   32940:	900d883a 	mov	r6,r18
   32944:	21400044 	addi	r5,r4,1
   32948:	183fe91e 	bne	r3,zero,328f0 <___vfiprintf_internal_r+0x6a4>
   3294c:	1405883a 	add	r2,r2,r16
   32950:	d9400b15 	stw	r5,44(sp)
   32954:	31c00015 	stw	r7,0(r6)
   32958:	34000115 	stw	r16,4(r6)
   3295c:	d8800c15 	stw	r2,48(sp)
   32960:	29400210 	cmplti	r5,r5,8
   32964:	283f421e 	bne	r5,zero,32670 <___vfiprintf_internal_r+0x424>
   32968:	10021d26 	beq	r2,zero,331e0 <___vfiprintf_internal_r+0xf94>
   3296c:	d9800a04 	addi	r6,sp,40
   32970:	a80b883a 	mov	r5,r21
   32974:	b009883a 	mov	r4,r22
   32978:	00321400 	call	32140 <__sprint_r.part.0>
   3297c:	103f481e 	bne	r2,zero,326a0 <___vfiprintf_internal_r+0x454>
   32980:	d8800c17 	ldw	r2,48(sp)
   32984:	003f3a06 	br	32670 <___vfiprintf_internal_r+0x424>
   32988:	002ee0c0 	call	2ee0c <__sinit>
   3298c:	003e4106 	br	32294 <___vfiprintf_internal_r+0x48>
   32990:	29403fcc 	andi	r5,r5,255
   32994:	2802da1e 	bne	r5,zero,33500 <___vfiprintf_internal_r+0x12b4>
   32998:	6880080c 	andi	r2,r13,32
   3299c:	10005b26 	beq	r2,zero,32b0c <___vfiprintf_internal_r+0x8c0>
   329a0:	d8c00417 	ldw	r3,16(sp)
   329a4:	18800117 	ldw	r2,4(r3)
   329a8:	1dc00017 	ldw	r23,0(r3)
   329ac:	18c00204 	addi	r3,r3,8
   329b0:	d8c00415 	stw	r3,16(sp)
   329b4:	1039883a 	mov	fp,r2
   329b8:	10006016 	blt	r2,zero,32b3c <___vfiprintf_internal_r+0x8f0>
   329bc:	40bfffd8 	cmpnei	r2,r8,-1
   329c0:	db800943 	ldbu	r14,37(sp)
   329c4:	10000626 	beq	r2,zero,329e0 <___vfiprintf_internal_r+0x794>
   329c8:	04ffdfc4 	movi	r19,-129
   329cc:	6cc6703a 	and	r3,r13,r19
   329d0:	bf04b03a 	or	r2,r23,fp
   329d4:	d8c00015 	stw	r3,0(sp)
   329d8:	10021626 	beq	r2,zero,33234 <___vfiprintf_internal_r+0xfe8>
   329dc:	db400017 	ldw	r13,0(sp)
   329e0:	e001a71e 	bne	fp,zero,33080 <___vfiprintf_internal_r+0xe34>
   329e4:	b88002a8 	cmpgeui	r2,r23,10
   329e8:	1001a51e 	bne	r2,zero,33080 <___vfiprintf_internal_r+0xe34>
   329ec:	bdc00c04 	addi	r23,r23,48
   329f0:	ddc016c5 	stb	r23,91(sp)
   329f4:	db400015 	stw	r13,0(sp)
   329f8:	07000044 	movi	fp,1
   329fc:	dcc016c4 	addi	r19,sp,91
   32a00:	00007506 	br	32bd8 <___vfiprintf_internal_r+0x98c>
   32a04:	a0800007 	ldb	r2,0(r20)
   32a08:	6b401014 	ori	r13,r13,64
   32a0c:	003e5006 	br	32350 <___vfiprintf_internal_r+0x104>
   32a10:	29403fcc 	andi	r5,r5,255
   32a14:	2802bc1e 	bne	r5,zero,33508 <___vfiprintf_internal_r+0x12bc>
   32a18:	00c00134 	movhi	r3,4
   32a1c:	18e2cc04 	addi	r3,r3,-29904
   32a20:	d8c00515 	stw	r3,20(sp)
   32a24:	68c0080c 	andi	r3,r13,32
   32a28:	1800bd26 	beq	r3,zero,32d20 <___vfiprintf_internal_r+0xad4>
   32a2c:	d8c00417 	ldw	r3,16(sp)
   32a30:	1dc00017 	ldw	r23,0(r3)
   32a34:	1f000117 	ldw	fp,4(r3)
   32a38:	18c00204 	addi	r3,r3,8
   32a3c:	d8c00415 	stw	r3,16(sp)
   32a40:	68c0004c 	andi	r3,r13,1
   32a44:	18000226 	beq	r3,zero,32a50 <___vfiprintf_internal_r+0x804>
   32a48:	bf06b03a 	or	r3,r23,fp
   32a4c:	1802261e 	bne	r3,zero,332e8 <___vfiprintf_internal_r+0x109c>
   32a50:	00800084 	movi	r2,2
   32a54:	003f4f06 	br	32794 <___vfiprintf_internal_r+0x548>
   32a58:	d8800417 	ldw	r2,16(sp)
   32a5c:	d8000945 	stb	zero,37(sp)
   32a60:	14c00017 	ldw	r19,0(r2)
   32a64:	10c00104 	addi	r3,r2,4
   32a68:	98026926 	beq	r19,zero,33410 <___vfiprintf_internal_r+0x11c4>
   32a6c:	40bfffe0 	cmpeqi	r2,r8,-1
   32a70:	1002411e 	bne	r2,zero,33378 <___vfiprintf_internal_r+0x112c>
   32a74:	400d883a 	mov	r6,r8
   32a78:	000b883a 	mov	r5,zero
   32a7c:	9809883a 	mov	r4,r19
   32a80:	d8c00315 	stw	r3,12(sp)
   32a84:	db400215 	stw	r13,8(sp)
   32a88:	da000015 	stw	r8,0(sp)
   32a8c:	00302bc0 	call	302bc <memchr>
   32a90:	da000017 	ldw	r8,0(sp)
   32a94:	db400217 	ldw	r13,8(sp)
   32a98:	d8c00317 	ldw	r3,12(sp)
   32a9c:	10029426 	beq	r2,zero,334f0 <___vfiprintf_internal_r+0x12a4>
   32aa0:	14f9c83a 	sub	fp,r2,r19
   32aa4:	e02f883a 	mov	r23,fp
   32aa8:	d8c00415 	stw	r3,16(sp)
   32aac:	003ea006 	br	32530 <___vfiprintf_internal_r+0x2e4>
   32ab0:	a0800007 	ldb	r2,0(r20)
   32ab4:	6b400814 	ori	r13,r13,32
   32ab8:	003e2506 	br	32350 <___vfiprintf_internal_r+0x104>
   32abc:	d8c00417 	ldw	r3,16(sp)
   32ac0:	00800c04 	movi	r2,48
   32ac4:	d8800985 	stb	r2,38(sp)
   32ac8:	00801e04 	movi	r2,120
   32acc:	01000134 	movhi	r4,4
   32ad0:	d88009c5 	stb	r2,39(sp)
   32ad4:	18800104 	addi	r2,r3,4
   32ad8:	d8800415 	stw	r2,16(sp)
   32adc:	20a2cc04 	addi	r2,r4,-29904
   32ae0:	d8800515 	stw	r2,20(sp)
   32ae4:	1dc00017 	ldw	r23,0(r3)
   32ae8:	0039883a 	mov	fp,zero
   32aec:	6b400094 	ori	r13,r13,2
   32af0:	00800084 	movi	r2,2
   32af4:	003f2706 	br	32794 <___vfiprintf_internal_r+0x548>
   32af8:	29403fcc 	andi	r5,r5,255
   32afc:	2802841e 	bne	r5,zero,33510 <___vfiprintf_internal_r+0x12c4>
   32b00:	6b400414 	ori	r13,r13,16
   32b04:	6880080c 	andi	r2,r13,32
   32b08:	103fa51e 	bne	r2,zero,329a0 <___vfiprintf_internal_r+0x754>
   32b0c:	d9000417 	ldw	r4,16(sp)
   32b10:	6880040c 	andi	r2,r13,16
   32b14:	20c00104 	addi	r3,r4,4
   32b18:	1001ee1e 	bne	r2,zero,332d4 <___vfiprintf_internal_r+0x1088>
   32b1c:	6880100c 	andi	r2,r13,64
   32b20:	10024e26 	beq	r2,zero,3345c <___vfiprintf_internal_r+0x1210>
   32b24:	d8800417 	ldw	r2,16(sp)
   32b28:	d8c00415 	stw	r3,16(sp)
   32b2c:	15c0000f 	ldh	r23,0(r2)
   32b30:	b839d7fa 	srai	fp,r23,31
   32b34:	e005883a 	mov	r2,fp
   32b38:	103fa00e 	bge	r2,zero,329bc <___vfiprintf_internal_r+0x770>
   32b3c:	b804c03a 	cmpne	r2,r23,zero
   32b40:	0739c83a 	sub	fp,zero,fp
   32b44:	e0b9c83a 	sub	fp,fp,r2
   32b48:	00800b44 	movi	r2,45
   32b4c:	d8800945 	stb	r2,37(sp)
   32b50:	40ffffe0 	cmpeqi	r3,r8,-1
   32b54:	05efc83a 	sub	r23,zero,r23
   32b58:	03800b44 	movi	r14,45
   32b5c:	00800044 	movi	r2,1
   32b60:	183f1026 	beq	r3,zero,327a4 <___vfiprintf_internal_r+0x558>
   32b64:	10c00060 	cmpeqi	r3,r2,1
   32b68:	183f9d1e 	bne	r3,zero,329e0 <___vfiprintf_internal_r+0x794>
   32b6c:	108000a0 	cmpeqi	r2,r2,2
   32b70:	10010a1e 	bne	r2,zero,32f9c <___vfiprintf_internal_r+0xd50>
   32b74:	9027883a 	mov	r19,r18
   32b78:	e008977a 	slli	r4,fp,29
   32b7c:	b806d0fa 	srli	r3,r23,3
   32b80:	e038d0fa 	srli	fp,fp,3
   32b84:	b88001cc 	andi	r2,r23,7
   32b88:	10800c04 	addi	r2,r2,48
   32b8c:	20eeb03a 	or	r23,r4,r3
   32b90:	98bfffc5 	stb	r2,-1(r19)
   32b94:	bf06b03a 	or	r3,r23,fp
   32b98:	980b883a 	mov	r5,r19
   32b9c:	9cffffc4 	addi	r19,r19,-1
   32ba0:	183ff51e 	bne	r3,zero,32b78 <___vfiprintf_internal_r+0x92c>
   32ba4:	68c0004c 	andi	r3,r13,1
   32ba8:	18010926 	beq	r3,zero,32fd0 <___vfiprintf_internal_r+0xd84>
   32bac:	10803fcc 	andi	r2,r2,255
   32bb0:	1080201c 	xori	r2,r2,128
   32bb4:	10bfe004 	addi	r2,r2,-128
   32bb8:	10800c18 	cmpnei	r2,r2,48
   32bbc:	10010426 	beq	r2,zero,32fd0 <___vfiprintf_internal_r+0xd84>
   32bc0:	297fff84 	addi	r5,r5,-2
   32bc4:	00800c04 	movi	r2,48
   32bc8:	98bfffc5 	stb	r2,-1(r19)
   32bcc:	9179c83a 	sub	fp,r18,r5
   32bd0:	db400015 	stw	r13,0(sp)
   32bd4:	2827883a 	mov	r19,r5
   32bd8:	402f883a 	mov	r23,r8
   32bdc:	4700010e 	bge	r8,fp,32be4 <___vfiprintf_internal_r+0x998>
   32be0:	e02f883a 	mov	r23,fp
   32be4:	73803fcc 	andi	r14,r14,255
   32be8:	7380201c 	xori	r14,r14,128
   32bec:	73bfe004 	addi	r14,r14,-128
   32bf0:	703e5126 	beq	r14,zero,32538 <___vfiprintf_internal_r+0x2ec>
   32bf4:	bdc00044 	addi	r23,r23,1
   32bf8:	003e4f06 	br	32538 <___vfiprintf_internal_r+0x2ec>
   32bfc:	a0800007 	ldb	r2,0(r20)
   32c00:	6b402014 	ori	r13,r13,128
   32c04:	003dd206 	br	32350 <___vfiprintf_internal_r+0x104>
   32c08:	a0800007 	ldb	r2,0(r20)
   32c0c:	a0c00044 	addi	r3,r20,1
   32c10:	11000aa0 	cmpeqi	r4,r2,42
   32c14:	2002521e 	bne	r4,zero,33560 <___vfiprintf_internal_r+0x1314>
   32c18:	113ff404 	addi	r4,r2,-48
   32c1c:	21c002b0 	cmpltui	r7,r4,10
   32c20:	1829883a 	mov	r20,r3
   32c24:	0011883a 	mov	r8,zero
   32c28:	383dca26 	beq	r7,zero,32354 <___vfiprintf_internal_r+0x108>
   32c2c:	400690ba 	slli	r3,r8,2
   32c30:	a0800007 	ldb	r2,0(r20)
   32c34:	a5000044 	addi	r20,r20,1
   32c38:	1a11883a 	add	r8,r3,r8
   32c3c:	4211883a 	add	r8,r8,r8
   32c40:	4111883a 	add	r8,r8,r4
   32c44:	113ff404 	addi	r4,r2,-48
   32c48:	20c002b0 	cmpltui	r3,r4,10
   32c4c:	183ff71e 	bne	r3,zero,32c2c <___vfiprintf_internal_r+0x9e0>
   32c50:	003dc006 	br	32354 <___vfiprintf_internal_r+0x108>
   32c54:	a0800003 	ldbu	r2,0(r20)
   32c58:	10803fcc 	andi	r2,r2,255
   32c5c:	1080201c 	xori	r2,r2,128
   32c60:	6b400114 	ori	r13,r13,4
   32c64:	10bfe004 	addi	r2,r2,-128
   32c68:	003db906 	br	32350 <___vfiprintf_internal_r+0x104>
   32c6c:	a0800007 	ldb	r2,0(r20)
   32c70:	01400044 	movi	r5,1
   32c74:	01800ac4 	movi	r6,43
   32c78:	003db506 	br	32350 <___vfiprintf_internal_r+0x104>
   32c7c:	d8c00417 	ldw	r3,16(sp)
   32c80:	a0800003 	ldbu	r2,0(r20)
   32c84:	1c400017 	ldw	r17,0(r3)
   32c88:	18c00104 	addi	r3,r3,4
   32c8c:	8801b716 	blt	r17,zero,3336c <___vfiprintf_internal_r+0x1120>
   32c90:	d8c00415 	stw	r3,16(sp)
   32c94:	10803fcc 	andi	r2,r2,255
   32c98:	1080201c 	xori	r2,r2,128
   32c9c:	10bfe004 	addi	r2,r2,-128
   32ca0:	003dab06 	br	32350 <___vfiprintf_internal_r+0x104>
   32ca4:	a0800007 	ldb	r2,0(r20)
   32ca8:	6b400054 	ori	r13,r13,1
   32cac:	003da806 	br	32350 <___vfiprintf_internal_r+0x104>
   32cb0:	30c03fcc 	andi	r3,r6,255
   32cb4:	18c0201c 	xori	r3,r3,128
   32cb8:	18ffe004 	addi	r3,r3,-128
   32cbc:	a0800003 	ldbu	r2,0(r20)
   32cc0:	183ff41e 	bne	r3,zero,32c94 <___vfiprintf_internal_r+0xa48>
   32cc4:	10803fcc 	andi	r2,r2,255
   32cc8:	1080201c 	xori	r2,r2,128
   32ccc:	01400044 	movi	r5,1
   32cd0:	01800804 	movi	r6,32
   32cd4:	10bfe004 	addi	r2,r2,-128
   32cd8:	003d9d06 	br	32350 <___vfiprintf_internal_r+0x104>
   32cdc:	d8c00417 	ldw	r3,16(sp)
   32ce0:	d8000945 	stb	zero,37(sp)
   32ce4:	05c00044 	movi	r23,1
   32ce8:	18800017 	ldw	r2,0(r3)
   32cec:	18c00104 	addi	r3,r3,4
   32cf0:	d8c00415 	stw	r3,16(sp)
   32cf4:	d8800d05 	stb	r2,52(sp)
   32cf8:	07000044 	movi	fp,1
   32cfc:	dcc00d04 	addi	r19,sp,52
   32d00:	003e0b06 	br	32530 <___vfiprintf_internal_r+0x2e4>
   32d04:	29403fcc 	andi	r5,r5,255
   32d08:	2802061e 	bne	r5,zero,33524 <___vfiprintf_internal_r+0x12d8>
   32d0c:	00c00134 	movhi	r3,4
   32d10:	18e2d104 	addi	r3,r3,-29884
   32d14:	d8c00515 	stw	r3,20(sp)
   32d18:	68c0080c 	andi	r3,r13,32
   32d1c:	183f431e 	bne	r3,zero,32a2c <___vfiprintf_internal_r+0x7e0>
   32d20:	d9400417 	ldw	r5,16(sp)
   32d24:	68c0040c 	andi	r3,r13,16
   32d28:	29000104 	addi	r4,r5,4
   32d2c:	18017f1e 	bne	r3,zero,3332c <___vfiprintf_internal_r+0x10e0>
   32d30:	68c0100c 	andi	r3,r13,64
   32d34:	1801be26 	beq	r3,zero,33430 <___vfiprintf_internal_r+0x11e4>
   32d38:	d8c00417 	ldw	r3,16(sp)
   32d3c:	0039883a 	mov	fp,zero
   32d40:	d9000415 	stw	r4,16(sp)
   32d44:	1dc0000b 	ldhu	r23,0(r3)
   32d48:	003f3d06 	br	32a40 <___vfiprintf_internal_r+0x7f4>
   32d4c:	29403fcc 	andi	r5,r5,255
   32d50:	2801f61e 	bne	r5,zero,3352c <___vfiprintf_internal_r+0x12e0>
   32d54:	d9000417 	ldw	r4,16(sp)
   32d58:	6880080c 	andi	r2,r13,32
   32d5c:	20c00017 	ldw	r3,0(r4)
   32d60:	21000104 	addi	r4,r4,4
   32d64:	10016b1e 	bne	r2,zero,33314 <___vfiprintf_internal_r+0x10c8>
   32d68:	6880040c 	andi	r2,r13,16
   32d6c:	1001951e 	bne	r2,zero,333c4 <___vfiprintf_internal_r+0x1178>
   32d70:	6b40100c 	andi	r13,r13,64
   32d74:	68019326 	beq	r13,zero,333c4 <___vfiprintf_internal_r+0x1178>
   32d78:	d8800117 	ldw	r2,4(sp)
   32d7c:	d9000415 	stw	r4,16(sp)
   32d80:	1880000d 	sth	r2,0(r3)
   32d84:	003d5a06 	br	322f0 <___vfiprintf_internal_r+0xa4>
   32d88:	a0800007 	ldb	r2,0(r20)
   32d8c:	10c01b18 	cmpnei	r3,r2,108
   32d90:	18019826 	beq	r3,zero,333f4 <___vfiprintf_internal_r+0x11a8>
   32d94:	6b400414 	ori	r13,r13,16
   32d98:	003d6d06 	br	32350 <___vfiprintf_internal_r+0x104>
   32d9c:	01400044 	movi	r5,1
   32da0:	0009883a 	mov	r4,zero
   32da4:	900d883a 	mov	r6,r18
   32da8:	003ece06 	br	328e4 <___vfiprintf_internal_r+0x698>
   32dac:	8dc7c83a 	sub	r3,r17,r23
   32db0:	00fe190e 	bge	zero,r3,32618 <___vfiprintf_internal_r+0x3cc>
   32db4:	19c00450 	cmplti	r7,r3,17
   32db8:	3801e41e 	bne	r7,zero,3354c <___vfiprintf_internal_r+0x1300>
   32dbc:	01c00134 	movhi	r7,4
   32dc0:	39e35304 	addi	r7,r7,-29364
   32dc4:	03400404 	movi	r13,16
   32dc8:	00000606 	br	32de4 <___vfiprintf_internal_r+0xb98>
   32dcc:	23800084 	addi	r14,r4,2
   32dd0:	84000204 	addi	r16,r16,8
   32dd4:	2809883a 	mov	r4,r5
   32dd8:	18fffc04 	addi	r3,r3,-16
   32ddc:	19400448 	cmpgei	r5,r3,17
   32de0:	28001c26 	beq	r5,zero,32e54 <___vfiprintf_internal_r+0xc08>
   32de4:	21400044 	addi	r5,r4,1
   32de8:	10800404 	addi	r2,r2,16
   32dec:	81c00015 	stw	r7,0(r16)
   32df0:	83400115 	stw	r13,4(r16)
   32df4:	d8800c15 	stw	r2,48(sp)
   32df8:	d9400b15 	stw	r5,44(sp)
   32dfc:	29800208 	cmpgei	r6,r5,8
   32e00:	303ff226 	beq	r6,zero,32dcc <___vfiprintf_internal_r+0xb80>
   32e04:	d9800a04 	addi	r6,sp,40
   32e08:	a80b883a 	mov	r5,r21
   32e0c:	b009883a 	mov	r4,r22
   32e10:	10007826 	beq	r2,zero,32ff4 <___vfiprintf_internal_r+0xda8>
   32e14:	d9c00615 	stw	r7,24(sp)
   32e18:	d8c00315 	stw	r3,12(sp)
   32e1c:	da000215 	stw	r8,8(sp)
   32e20:	00321400 	call	32140 <__sprint_r.part.0>
   32e24:	103e1e1e 	bne	r2,zero,326a0 <___vfiprintf_internal_r+0x454>
   32e28:	d8c00317 	ldw	r3,12(sp)
   32e2c:	d9000b17 	ldw	r4,44(sp)
   32e30:	d8800c17 	ldw	r2,48(sp)
   32e34:	18fffc04 	addi	r3,r3,-16
   32e38:	19400448 	cmpgei	r5,r3,17
   32e3c:	d9c00617 	ldw	r7,24(sp)
   32e40:	da000217 	ldw	r8,8(sp)
   32e44:	9021883a 	mov	r16,r18
   32e48:	23800044 	addi	r14,r4,1
   32e4c:	03400404 	movi	r13,16
   32e50:	283fe41e 	bne	r5,zero,32de4 <___vfiprintf_internal_r+0xb98>
   32e54:	83400204 	addi	r13,r16,8
   32e58:	10c5883a 	add	r2,r2,r3
   32e5c:	80c00115 	stw	r3,4(r16)
   32e60:	81c00015 	stw	r7,0(r16)
   32e64:	d8800c15 	stw	r2,48(sp)
   32e68:	db800b15 	stw	r14,44(sp)
   32e6c:	70c00208 	cmpgei	r3,r14,8
   32e70:	18011326 	beq	r3,zero,332c0 <___vfiprintf_internal_r+0x1074>
   32e74:	10018826 	beq	r2,zero,33498 <___vfiprintf_internal_r+0x124c>
   32e78:	d9800a04 	addi	r6,sp,40
   32e7c:	a80b883a 	mov	r5,r21
   32e80:	b009883a 	mov	r4,r22
   32e84:	da000215 	stw	r8,8(sp)
   32e88:	00321400 	call	32140 <__sprint_r.part.0>
   32e8c:	103e041e 	bne	r2,zero,326a0 <___vfiprintf_internal_r+0x454>
   32e90:	da000217 	ldw	r8,8(sp)
   32e94:	d9000b17 	ldw	r4,44(sp)
   32e98:	d8800c17 	ldw	r2,48(sp)
   32e9c:	4711c83a 	sub	r8,r8,fp
   32ea0:	d9801904 	addi	r6,sp,100
   32ea4:	21400044 	addi	r5,r4,1
   32ea8:	9021883a 	mov	r16,r18
   32eac:	023ddc0e 	bge	zero,r8,32620 <___vfiprintf_internal_r+0x3d4>
   32eb0:	40c00450 	cmplti	r3,r8,17
   32eb4:	01c00134 	movhi	r7,4
   32eb8:	1801741e 	bne	r3,zero,3348c <___vfiprintf_internal_r+0x1240>
   32ebc:	39e35304 	addi	r7,r7,-29364
   32ec0:	03400404 	movi	r13,16
   32ec4:	00000606 	br	32ee0 <___vfiprintf_internal_r+0xc94>
   32ec8:	21400084 	addi	r5,r4,2
   32ecc:	84000204 	addi	r16,r16,8
   32ed0:	1809883a 	mov	r4,r3
   32ed4:	423ffc04 	addi	r8,r8,-16
   32ed8:	40c00448 	cmpgei	r3,r8,17
   32edc:	18001a26 	beq	r3,zero,32f48 <___vfiprintf_internal_r+0xcfc>
   32ee0:	20c00044 	addi	r3,r4,1
   32ee4:	10800404 	addi	r2,r2,16
   32ee8:	81c00015 	stw	r7,0(r16)
   32eec:	83400115 	stw	r13,4(r16)
   32ef0:	d8800c15 	stw	r2,48(sp)
   32ef4:	d8c00b15 	stw	r3,44(sp)
   32ef8:	19400208 	cmpgei	r5,r3,8
   32efc:	283ff226 	beq	r5,zero,32ec8 <___vfiprintf_internal_r+0xc7c>
   32f00:	d9800a04 	addi	r6,sp,40
   32f04:	a80b883a 	mov	r5,r21
   32f08:	b009883a 	mov	r4,r22
   32f0c:	10001a26 	beq	r2,zero,32f78 <___vfiprintf_internal_r+0xd2c>
   32f10:	d9c00315 	stw	r7,12(sp)
   32f14:	da000215 	stw	r8,8(sp)
   32f18:	00321400 	call	32140 <__sprint_r.part.0>
   32f1c:	103de01e 	bne	r2,zero,326a0 <___vfiprintf_internal_r+0x454>
   32f20:	da000217 	ldw	r8,8(sp)
   32f24:	d9000b17 	ldw	r4,44(sp)
   32f28:	d8800c17 	ldw	r2,48(sp)
   32f2c:	423ffc04 	addi	r8,r8,-16
   32f30:	40c00448 	cmpgei	r3,r8,17
   32f34:	d9c00317 	ldw	r7,12(sp)
   32f38:	9021883a 	mov	r16,r18
   32f3c:	21400044 	addi	r5,r4,1
   32f40:	03400404 	movi	r13,16
   32f44:	183fe61e 	bne	r3,zero,32ee0 <___vfiprintf_internal_r+0xc94>
   32f48:	81000204 	addi	r4,r16,8
   32f4c:	1205883a 	add	r2,r2,r8
   32f50:	81c00015 	stw	r7,0(r16)
   32f54:	82000115 	stw	r8,4(r16)
   32f58:	d8800c15 	stw	r2,48(sp)
   32f5c:	d9400b15 	stw	r5,44(sp)
   32f60:	28c00208 	cmpgei	r3,r5,8
   32f64:	1800a41e 	bne	r3,zero,331f8 <___vfiprintf_internal_r+0xfac>
   32f68:	29400044 	addi	r5,r5,1
   32f6c:	21800204 	addi	r6,r4,8
   32f70:	2021883a 	mov	r16,r4
   32f74:	003daa06 	br	32620 <___vfiprintf_internal_r+0x3d4>
   32f78:	01400044 	movi	r5,1
   32f7c:	0009883a 	mov	r4,zero
   32f80:	9021883a 	mov	r16,r18
   32f84:	003fd306 	br	32ed4 <___vfiprintf_internal_r+0xc88>
   32f88:	10c00060 	cmpeqi	r3,r2,1
   32f8c:	1801561e 	bne	r3,zero,334e8 <___vfiprintf_internal_r+0x129c>
   32f90:	108000a0 	cmpeqi	r2,r2,2
   32f94:	db400017 	ldw	r13,0(sp)
   32f98:	103ef626 	beq	r2,zero,32b74 <___vfiprintf_internal_r+0x928>
   32f9c:	9027883a 	mov	r19,r18
   32fa0:	d9000517 	ldw	r4,20(sp)
   32fa4:	b88003cc 	andi	r2,r23,15
   32fa8:	e006973a 	slli	r3,fp,28
   32fac:	b82ed13a 	srli	r23,r23,4
   32fb0:	2085883a 	add	r2,r4,r2
   32fb4:	10800003 	ldbu	r2,0(r2)
   32fb8:	e038d13a 	srli	fp,fp,4
   32fbc:	1deeb03a 	or	r23,r3,r23
   32fc0:	98bfffc5 	stb	r2,-1(r19)
   32fc4:	bf04b03a 	or	r2,r23,fp
   32fc8:	9cffffc4 	addi	r19,r19,-1
   32fcc:	103ff41e 	bne	r2,zero,32fa0 <___vfiprintf_internal_r+0xd54>
   32fd0:	94f9c83a 	sub	fp,r18,r19
   32fd4:	db400015 	stw	r13,0(sp)
   32fd8:	003eff06 	br	32bd8 <___vfiprintf_internal_r+0x98c>
   32fdc:	d9800a04 	addi	r6,sp,40
   32fe0:	a80b883a 	mov	r5,r21
   32fe4:	b009883a 	mov	r4,r22
   32fe8:	00321400 	call	32140 <__sprint_r.part.0>
   32fec:	103da626 	beq	r2,zero,32688 <___vfiprintf_internal_r+0x43c>
   32ff0:	003dab06 	br	326a0 <___vfiprintf_internal_r+0x454>
   32ff4:	03800044 	movi	r14,1
   32ff8:	0009883a 	mov	r4,zero
   32ffc:	9021883a 	mov	r16,r18
   33000:	003f7506 	br	32dd8 <___vfiprintf_internal_r+0xb8c>
   33004:	10009026 	beq	r2,zero,33248 <___vfiprintf_internal_r+0xffc>
   33008:	d9800a04 	addi	r6,sp,40
   3300c:	a80b883a 	mov	r5,r21
   33010:	b009883a 	mov	r4,r22
   33014:	da000615 	stw	r8,24(sp)
   33018:	db400315 	stw	r13,12(sp)
   3301c:	db800215 	stw	r14,8(sp)
   33020:	00321400 	call	32140 <__sprint_r.part.0>
   33024:	103d9e1e 	bne	r2,zero,326a0 <___vfiprintf_internal_r+0x454>
   33028:	d9000b17 	ldw	r4,44(sp)
   3302c:	d8800c17 	ldw	r2,48(sp)
   33030:	da000617 	ldw	r8,24(sp)
   33034:	db400317 	ldw	r13,12(sp)
   33038:	db800217 	ldw	r14,8(sp)
   3303c:	d9801904 	addi	r6,sp,100
   33040:	21400044 	addi	r5,r4,1
   33044:	9021883a 	mov	r16,r18
   33048:	003d5806 	br	325ac <___vfiprintf_internal_r+0x360>
   3304c:	d8800984 	addi	r2,sp,38
   33050:	d8801715 	stw	r2,92(sp)
   33054:	00800084 	movi	r2,2
   33058:	d8801815 	stw	r2,96(sp)
   3305c:	d9801904 	addi	r6,sp,100
   33060:	01400044 	movi	r5,1
   33064:	3021883a 	mov	r16,r6
   33068:	2809883a 	mov	r4,r5
   3306c:	21400044 	addi	r5,r4,1
   33070:	81800204 	addi	r6,r16,8
   33074:	003d6606 	br	32610 <___vfiprintf_internal_r+0x3c4>
   33078:	db400017 	ldw	r13,0(sp)
   3307c:	003eb906 	br	32b64 <___vfiprintf_internal_r+0x918>
   33080:	9027883a 	mov	r19,r18
   33084:	b809883a 	mov	r4,r23
   33088:	e00b883a 	mov	r5,fp
   3308c:	01800284 	movi	r6,10
   33090:	000f883a 	mov	r7,zero
   33094:	db800315 	stw	r14,12(sp)
   33098:	da000215 	stw	r8,8(sp)
   3309c:	db400015 	stw	r13,0(sp)
   330a0:	0034df40 	call	34df4 <__umoddi3>
   330a4:	10800c04 	addi	r2,r2,48
   330a8:	b809883a 	mov	r4,r23
   330ac:	e00b883a 	mov	r5,fp
   330b0:	98bfffc5 	stb	r2,-1(r19)
   330b4:	01800284 	movi	r6,10
   330b8:	000f883a 	mov	r7,zero
   330bc:	00347d40 	call	347d4 <__udivdi3>
   330c0:	e009883a 	mov	r4,fp
   330c4:	b80b883a 	mov	r5,r23
   330c8:	db400017 	ldw	r13,0(sp)
   330cc:	da000217 	ldw	r8,8(sp)
   330d0:	db800317 	ldw	r14,12(sp)
   330d4:	9cffffc4 	addi	r19,r19,-1
   330d8:	102f883a 	mov	r23,r2
   330dc:	1839883a 	mov	fp,r3
   330e0:	203fe81e 	bne	r4,zero,33084 <___vfiprintf_internal_r+0xe38>
   330e4:	294002a8 	cmpgeui	r5,r5,10
   330e8:	283fe61e 	bne	r5,zero,33084 <___vfiprintf_internal_r+0xe38>
   330ec:	94f9c83a 	sub	fp,r18,r19
   330f0:	003eb906 	br	32bd8 <___vfiprintf_internal_r+0x98c>
   330f4:	19400450 	cmplti	r5,r3,17
   330f8:	01c00134 	movhi	r7,4
   330fc:	2801061e 	bne	r5,zero,33518 <___vfiprintf_internal_r+0x12cc>
   33100:	39e35704 	addi	r7,r7,-29348
   33104:	03c00404 	movi	r15,16
   33108:	00000706 	br	33128 <___vfiprintf_internal_r+0xedc>
   3310c:	27c00084 	addi	ra,r4,2
   33110:	84000204 	addi	r16,r16,8
   33114:	3009883a 	mov	r4,r6
   33118:	18fffc04 	addi	r3,r3,-16
   3311c:	19400448 	cmpgei	r5,r3,17
   33120:	28002026 	beq	r5,zero,331a4 <___vfiprintf_internal_r+0xf58>
   33124:	21800044 	addi	r6,r4,1
   33128:	10800404 	addi	r2,r2,16
   3312c:	81c00015 	stw	r7,0(r16)
   33130:	83c00115 	stw	r15,4(r16)
   33134:	d8800c15 	stw	r2,48(sp)
   33138:	d9800b15 	stw	r6,44(sp)
   3313c:	31400208 	cmpgei	r5,r6,8
   33140:	283ff226 	beq	r5,zero,3310c <___vfiprintf_internal_r+0xec0>
   33144:	d9800a04 	addi	r6,sp,40
   33148:	a80b883a 	mov	r5,r21
   3314c:	b009883a 	mov	r4,r22
   33150:	10001f26 	beq	r2,zero,331d0 <___vfiprintf_internal_r+0xf84>
   33154:	d9c00815 	stw	r7,32(sp)
   33158:	d8c00715 	stw	r3,28(sp)
   3315c:	da000615 	stw	r8,24(sp)
   33160:	db400315 	stw	r13,12(sp)
   33164:	db800215 	stw	r14,8(sp)
   33168:	00321400 	call	32140 <__sprint_r.part.0>
   3316c:	103d4c1e 	bne	r2,zero,326a0 <___vfiprintf_internal_r+0x454>
   33170:	d8c00717 	ldw	r3,28(sp)
   33174:	d9000b17 	ldw	r4,44(sp)
   33178:	d8800c17 	ldw	r2,48(sp)
   3317c:	18fffc04 	addi	r3,r3,-16
   33180:	19400448 	cmpgei	r5,r3,17
   33184:	d9c00817 	ldw	r7,32(sp)
   33188:	da000617 	ldw	r8,24(sp)
   3318c:	db400317 	ldw	r13,12(sp)
   33190:	db800217 	ldw	r14,8(sp)
   33194:	9021883a 	mov	r16,r18
   33198:	27c00044 	addi	ra,r4,1
   3319c:	03c00404 	movi	r15,16
   331a0:	283fe01e 	bne	r5,zero,33124 <___vfiprintf_internal_r+0xed8>
   331a4:	10c5883a 	add	r2,r2,r3
   331a8:	80c00115 	stw	r3,4(r16)
   331ac:	81c00015 	stw	r7,0(r16)
   331b0:	d8800c15 	stw	r2,48(sp)
   331b4:	dfc00b15 	stw	ra,44(sp)
   331b8:	f8c00208 	cmpgei	r3,ra,8
   331bc:	18002d1e 	bne	r3,zero,33274 <___vfiprintf_internal_r+0x1028>
   331c0:	84000204 	addi	r16,r16,8
   331c4:	f9400044 	addi	r5,ra,1
   331c8:	f809883a 	mov	r4,ra
   331cc:	003ce706 	br	3256c <___vfiprintf_internal_r+0x320>
   331d0:	0009883a 	mov	r4,zero
   331d4:	07c00044 	movi	ra,1
   331d8:	9021883a 	mov	r16,r18
   331dc:	003fce06 	br	33118 <___vfiprintf_internal_r+0xecc>
   331e0:	8dc0010e 	bge	r17,r23,331e8 <___vfiprintf_internal_r+0xf9c>
   331e4:	b823883a 	mov	r17,r23
   331e8:	d8800117 	ldw	r2,4(sp)
   331ec:	1445883a 	add	r2,r2,r17
   331f0:	d8800115 	stw	r2,4(sp)
   331f4:	003d2406 	br	32688 <___vfiprintf_internal_r+0x43c>
   331f8:	10007626 	beq	r2,zero,333d4 <___vfiprintf_internal_r+0x1188>
   331fc:	d9800a04 	addi	r6,sp,40
   33200:	a80b883a 	mov	r5,r21
   33204:	b009883a 	mov	r4,r22
   33208:	00321400 	call	32140 <__sprint_r.part.0>
   3320c:	103d241e 	bne	r2,zero,326a0 <___vfiprintf_internal_r+0x454>
   33210:	d9400b17 	ldw	r5,44(sp)
   33214:	d8800c17 	ldw	r2,48(sp)
   33218:	d9801904 	addi	r6,sp,100
   3321c:	29400044 	addi	r5,r5,1
   33220:	9021883a 	mov	r16,r18
   33224:	003cfe06 	br	32620 <___vfiprintf_internal_r+0x3d4>
   33228:	d8000b15 	stw	zero,44(sp)
   3322c:	9021883a 	mov	r16,r18
   33230:	003d7606 	br	3280c <___vfiprintf_internal_r+0x5c0>
   33234:	4000ac1e 	bne	r8,zero,334e8 <___vfiprintf_internal_r+0x129c>
   33238:	0011883a 	mov	r8,zero
   3323c:	0039883a 	mov	fp,zero
   33240:	9027883a 	mov	r19,r18
   33244:	003e6406 	br	32bd8 <___vfiprintf_internal_r+0x98c>
   33248:	7000411e 	bne	r14,zero,33350 <___vfiprintf_internal_r+0x1104>
   3324c:	0009883a 	mov	r4,zero
   33250:	d9801904 	addi	r6,sp,100
   33254:	01400044 	movi	r5,1
   33258:	9021883a 	mov	r16,r18
   3325c:	003cec06 	br	32610 <___vfiprintf_internal_r+0x3c4>
   33260:	d9801904 	addi	r6,sp,100
   33264:	01400044 	movi	r5,1
   33268:	0009883a 	mov	r4,zero
   3326c:	9021883a 	mov	r16,r18
   33270:	003ce706 	br	32610 <___vfiprintf_internal_r+0x3c4>
   33274:	10004a26 	beq	r2,zero,333a0 <___vfiprintf_internal_r+0x1154>
   33278:	d9800a04 	addi	r6,sp,40
   3327c:	a80b883a 	mov	r5,r21
   33280:	b009883a 	mov	r4,r22
   33284:	da000615 	stw	r8,24(sp)
   33288:	db400315 	stw	r13,12(sp)
   3328c:	db800215 	stw	r14,8(sp)
   33290:	00321400 	call	32140 <__sprint_r.part.0>
   33294:	103d021e 	bne	r2,zero,326a0 <___vfiprintf_internal_r+0x454>
   33298:	d9000b17 	ldw	r4,44(sp)
   3329c:	d8800c17 	ldw	r2,48(sp)
   332a0:	da000617 	ldw	r8,24(sp)
   332a4:	db400317 	ldw	r13,12(sp)
   332a8:	db800217 	ldw	r14,8(sp)
   332ac:	9021883a 	mov	r16,r18
   332b0:	21400044 	addi	r5,r4,1
   332b4:	003cad06 	br	3256c <___vfiprintf_internal_r+0x320>
   332b8:	9027883a 	mov	r19,r18
   332bc:	003e4606 	br	32bd8 <___vfiprintf_internal_r+0x98c>
   332c0:	71400044 	addi	r5,r14,1
   332c4:	69800204 	addi	r6,r13,8
   332c8:	7009883a 	mov	r4,r14
   332cc:	6821883a 	mov	r16,r13
   332d0:	003cd106 	br	32618 <___vfiprintf_internal_r+0x3cc>
   332d4:	25c00017 	ldw	r23,0(r4)
   332d8:	d8c00415 	stw	r3,16(sp)
   332dc:	b839d7fa 	srai	fp,r23,31
   332e0:	e005883a 	mov	r2,fp
   332e4:	003db406 	br	329b8 <___vfiprintf_internal_r+0x76c>
   332e8:	00c00c04 	movi	r3,48
   332ec:	d88009c5 	stb	r2,39(sp)
   332f0:	d8c00985 	stb	r3,38(sp)
   332f4:	6b400094 	ori	r13,r13,2
   332f8:	00800084 	movi	r2,2
   332fc:	003d2506 	br	32794 <___vfiprintf_internal_r+0x548>
   33300:	25c00017 	ldw	r23,0(r4)
   33304:	0039883a 	mov	fp,zero
   33308:	d8c00415 	stw	r3,16(sp)
   3330c:	0005883a 	mov	r2,zero
   33310:	003d2006 	br	32794 <___vfiprintf_internal_r+0x548>
   33314:	d9400117 	ldw	r5,4(sp)
   33318:	d9000415 	stw	r4,16(sp)
   3331c:	2805d7fa 	srai	r2,r5,31
   33320:	19400015 	stw	r5,0(r3)
   33324:	18800115 	stw	r2,4(r3)
   33328:	003bf106 	br	322f0 <___vfiprintf_internal_r+0xa4>
   3332c:	2dc00017 	ldw	r23,0(r5)
   33330:	0039883a 	mov	fp,zero
   33334:	d9000415 	stw	r4,16(sp)
   33338:	003dc106 	br	32a40 <___vfiprintf_internal_r+0x7f4>
   3333c:	25c00017 	ldw	r23,0(r4)
   33340:	0039883a 	mov	fp,zero
   33344:	d8c00415 	stw	r3,16(sp)
   33348:	00800044 	movi	r2,1
   3334c:	003d1106 	br	32794 <___vfiprintf_internal_r+0x548>
   33350:	d8800984 	addi	r2,sp,38
   33354:	d8801715 	stw	r2,92(sp)
   33358:	00800084 	movi	r2,2
   3335c:	d8801815 	stw	r2,96(sp)
   33360:	dc001904 	addi	r16,sp,100
   33364:	01000044 	movi	r4,1
   33368:	003f4006 	br	3306c <___vfiprintf_internal_r+0xe20>
   3336c:	0463c83a 	sub	r17,zero,r17
   33370:	d8c00415 	stw	r3,16(sp)
   33374:	003e3806 	br	32c58 <___vfiprintf_internal_r+0xa0c>
   33378:	9809883a 	mov	r4,r19
   3337c:	d8c00215 	stw	r3,8(sp)
   33380:	db400015 	stw	r13,0(sp)
   33384:	002aa580 	call	2aa58 <strlen>
   33388:	d8c00217 	ldw	r3,8(sp)
   3338c:	db400017 	ldw	r13,0(sp)
   33390:	1039883a 	mov	fp,r2
   33394:	102f883a 	mov	r23,r2
   33398:	d8c00415 	stw	r3,16(sp)
   3339c:	003c6406 	br	32530 <___vfiprintf_internal_r+0x2e4>
   333a0:	d8c00947 	ldb	r3,37(sp)
   333a4:	18004326 	beq	r3,zero,334b4 <___vfiprintf_internal_r+0x1268>
   333a8:	d8800944 	addi	r2,sp,37
   333ac:	d8801715 	stw	r2,92(sp)
   333b0:	00800044 	movi	r2,1
   333b4:	d8801815 	stw	r2,96(sp)
   333b8:	d9801904 	addi	r6,sp,100
   333bc:	01400044 	movi	r5,1
   333c0:	003c7606 	br	3259c <___vfiprintf_internal_r+0x350>
   333c4:	d8800117 	ldw	r2,4(sp)
   333c8:	18800015 	stw	r2,0(r3)
   333cc:	d9000415 	stw	r4,16(sp)
   333d0:	003bc706 	br	322f0 <___vfiprintf_internal_r+0xa4>
   333d4:	00c00044 	movi	r3,1
   333d8:	e005883a 	mov	r2,fp
   333dc:	dcc01715 	stw	r19,92(sp)
   333e0:	df001815 	stw	fp,96(sp)
   333e4:	df000c15 	stw	fp,48(sp)
   333e8:	d8c00b15 	stw	r3,44(sp)
   333ec:	d9801904 	addi	r6,sp,100
   333f0:	003c9a06 	br	3265c <___vfiprintf_internal_r+0x410>
   333f4:	a0800043 	ldbu	r2,1(r20)
   333f8:	6b400814 	ori	r13,r13,32
   333fc:	a5000044 	addi	r20,r20,1
   33400:	10803fcc 	andi	r2,r2,255
   33404:	1080201c 	xori	r2,r2,128
   33408:	10bfe004 	addi	r2,r2,-128
   3340c:	003bd006 	br	32350 <___vfiprintf_internal_r+0x104>
   33410:	408001f0 	cmpltui	r2,r8,7
   33414:	4039883a 	mov	fp,r8
   33418:	10002426 	beq	r2,zero,334ac <___vfiprintf_internal_r+0x1260>
   3341c:	04c00134 	movhi	r19,4
   33420:	e02f883a 	mov	r23,fp
   33424:	d8c00415 	stw	r3,16(sp)
   33428:	9ce2d604 	addi	r19,r19,-29864
   3342c:	003c4006 	br	32530 <___vfiprintf_internal_r+0x2e4>
   33430:	d8c00417 	ldw	r3,16(sp)
   33434:	0039883a 	mov	fp,zero
   33438:	d9000415 	stw	r4,16(sp)
   3343c:	1dc00017 	ldw	r23,0(r3)
   33440:	003d7f06 	br	32a40 <___vfiprintf_internal_r+0x7f4>
   33444:	d8800417 	ldw	r2,16(sp)
   33448:	0039883a 	mov	fp,zero
   3344c:	d8c00415 	stw	r3,16(sp)
   33450:	15c00017 	ldw	r23,0(r2)
   33454:	0005883a 	mov	r2,zero
   33458:	003cce06 	br	32794 <___vfiprintf_internal_r+0x548>
   3345c:	d8800417 	ldw	r2,16(sp)
   33460:	d8c00415 	stw	r3,16(sp)
   33464:	15c00017 	ldw	r23,0(r2)
   33468:	b839d7fa 	srai	fp,r23,31
   3346c:	e005883a 	mov	r2,fp
   33470:	003d5106 	br	329b8 <___vfiprintf_internal_r+0x76c>
   33474:	d8800417 	ldw	r2,16(sp)
   33478:	0039883a 	mov	fp,zero
   3347c:	d8c00415 	stw	r3,16(sp)
   33480:	15c00017 	ldw	r23,0(r2)
   33484:	00800044 	movi	r2,1
   33488:	003cc206 	br	32794 <___vfiprintf_internal_r+0x548>
   3348c:	3009883a 	mov	r4,r6
   33490:	39e35304 	addi	r7,r7,-29364
   33494:	003ead06 	br	32f4c <___vfiprintf_internal_r+0xd00>
   33498:	d9801904 	addi	r6,sp,100
   3349c:	01400044 	movi	r5,1
   334a0:	0009883a 	mov	r4,zero
   334a4:	9021883a 	mov	r16,r18
   334a8:	003c5b06 	br	32618 <___vfiprintf_internal_r+0x3cc>
   334ac:	07000184 	movi	fp,6
   334b0:	003fda06 	br	3341c <___vfiprintf_internal_r+0x11d0>
   334b4:	703ee51e 	bne	r14,zero,3304c <___vfiprintf_internal_r+0xe00>
   334b8:	0009883a 	mov	r4,zero
   334bc:	d9801904 	addi	r6,sp,100
   334c0:	01400044 	movi	r5,1
   334c4:	9021883a 	mov	r16,r18
   334c8:	003c5306 	br	32618 <___vfiprintf_internal_r+0x3cc>
   334cc:	d9800945 	stb	r6,37(sp)
   334d0:	003c1106 	br	32518 <___vfiprintf_internal_r+0x2cc>
   334d4:	d9800a04 	addi	r6,sp,40
   334d8:	a80b883a 	mov	r5,r21
   334dc:	b009883a 	mov	r4,r22
   334e0:	00321400 	call	32140 <__sprint_r.part.0>
   334e4:	003c6e06 	br	326a0 <___vfiprintf_internal_r+0x454>
   334e8:	db400017 	ldw	r13,0(sp)
   334ec:	003d3f06 	br	329ec <___vfiprintf_internal_r+0x7a0>
   334f0:	402f883a 	mov	r23,r8
   334f4:	d8c00415 	stw	r3,16(sp)
   334f8:	4039883a 	mov	fp,r8
   334fc:	003c0c06 	br	32530 <___vfiprintf_internal_r+0x2e4>
   33500:	d9800945 	stb	r6,37(sp)
   33504:	003d2406 	br	32998 <___vfiprintf_internal_r+0x74c>
   33508:	d9800945 	stb	r6,37(sp)
   3350c:	003d4206 	br	32a18 <___vfiprintf_internal_r+0x7cc>
   33510:	d9800945 	stb	r6,37(sp)
   33514:	003d7a06 	br	32b00 <___vfiprintf_internal_r+0x8b4>
   33518:	303f883a 	mov	ra,r6
   3351c:	39e35704 	addi	r7,r7,-29348
   33520:	003f2006 	br	331a4 <___vfiprintf_internal_r+0xf58>
   33524:	d9800945 	stb	r6,37(sp)
   33528:	003df806 	br	32d0c <___vfiprintf_internal_r+0xac0>
   3352c:	d9800945 	stb	r6,37(sp)
   33530:	003e0806 	br	32d54 <___vfiprintf_internal_r+0xb08>
   33534:	21400044 	addi	r5,r4,1
   33538:	39e35704 	addi	r7,r7,-29348
   3353c:	003d0306 	br	3294c <___vfiprintf_internal_r+0x700>
   33540:	00bfffc4 	movi	r2,-1
   33544:	d8800115 	stw	r2,4(sp)
   33548:	003c5806 	br	326ac <___vfiprintf_internal_r+0x460>
   3354c:	01c00134 	movhi	r7,4
   33550:	301b883a 	mov	r13,r6
   33554:	281d883a 	mov	r14,r5
   33558:	39e35304 	addi	r7,r7,-29364
   3355c:	003e3e06 	br	32e58 <___vfiprintf_internal_r+0xc0c>
   33560:	d8800417 	ldw	r2,16(sp)
   33564:	12000017 	ldw	r8,0(r2)
   33568:	11000104 	addi	r4,r2,4
   3356c:	4000010e 	bge	r8,zero,33574 <___vfiprintf_internal_r+0x1328>
   33570:	023fffc4 	movi	r8,-1
   33574:	a0800043 	ldbu	r2,1(r20)
   33578:	d9000415 	stw	r4,16(sp)
   3357c:	1829883a 	mov	r20,r3
   33580:	10803fcc 	andi	r2,r2,255
   33584:	1080201c 	xori	r2,r2,128
   33588:	10bfe004 	addi	r2,r2,-128
   3358c:	003b7006 	br	32350 <___vfiprintf_internal_r+0x104>

00033590 <__vfiprintf_internal>:
   33590:	00c00134 	movhi	r3,4
   33594:	2005883a 	mov	r2,r4
   33598:	192b2417 	ldw	r4,-21360(r3)
   3359c:	300f883a 	mov	r7,r6
   335a0:	280d883a 	mov	r6,r5
   335a4:	100b883a 	mov	r5,r2
   335a8:	003224c1 	jmpi	3224c <___vfiprintf_internal_r>

000335ac <__sbprintf>:
   335ac:	2880030b 	ldhu	r2,12(r5)
   335b0:	2b001917 	ldw	r12,100(r5)
   335b4:	2ac0038b 	ldhu	r11,14(r5)
   335b8:	2a800717 	ldw	r10,28(r5)
   335bc:	2a400917 	ldw	r9,36(r5)
   335c0:	defee204 	addi	sp,sp,-1144
   335c4:	da001a04 	addi	r8,sp,104
   335c8:	00c10004 	movi	r3,1024
   335cc:	dc011a15 	stw	r16,1128(sp)
   335d0:	10bfff4c 	andi	r2,r2,65533
   335d4:	2821883a 	mov	r16,r5
   335d8:	d80b883a 	mov	r5,sp
   335dc:	dc811c15 	stw	r18,1136(sp)
   335e0:	dc411b15 	stw	r17,1132(sp)
   335e4:	dfc11d15 	stw	ra,1140(sp)
   335e8:	2025883a 	mov	r18,r4
   335ec:	d880030d 	sth	r2,12(sp)
   335f0:	db001915 	stw	r12,100(sp)
   335f4:	dac0038d 	sth	r11,14(sp)
   335f8:	da800715 	stw	r10,28(sp)
   335fc:	da400915 	stw	r9,36(sp)
   33600:	da000015 	stw	r8,0(sp)
   33604:	da000415 	stw	r8,16(sp)
   33608:	d8c00215 	stw	r3,8(sp)
   3360c:	d8c00515 	stw	r3,20(sp)
   33610:	d8000615 	stw	zero,24(sp)
   33614:	003224c0 	call	3224c <___vfiprintf_internal_r>
   33618:	1023883a 	mov	r17,r2
   3361c:	10000d0e 	bge	r2,zero,33654 <__sbprintf+0xa8>
   33620:	d880030b 	ldhu	r2,12(sp)
   33624:	1080100c 	andi	r2,r2,64
   33628:	10000326 	beq	r2,zero,33638 <__sbprintf+0x8c>
   3362c:	8080030b 	ldhu	r2,12(r16)
   33630:	10801014 	ori	r2,r2,64
   33634:	8080030d 	sth	r2,12(r16)
   33638:	8805883a 	mov	r2,r17
   3363c:	dfc11d17 	ldw	ra,1140(sp)
   33640:	dc811c17 	ldw	r18,1136(sp)
   33644:	dc411b17 	ldw	r17,1132(sp)
   33648:	dc011a17 	ldw	r16,1128(sp)
   3364c:	dec11e04 	addi	sp,sp,1144
   33650:	f800283a 	ret
   33654:	d80b883a 	mov	r5,sp
   33658:	9009883a 	mov	r4,r18
   3365c:	002e9c40 	call	2e9c4 <_fflush_r>
   33660:	103fef26 	beq	r2,zero,33620 <__sbprintf+0x74>
   33664:	047fffc4 	movi	r17,-1
   33668:	003fed06 	br	33620 <__sbprintf+0x74>

0003366c <__swbuf_r>:
   3366c:	defffb04 	addi	sp,sp,-20
   33670:	dcc00315 	stw	r19,12(sp)
   33674:	dc400115 	stw	r17,4(sp)
   33678:	dc000015 	stw	r16,0(sp)
   3367c:	dfc00415 	stw	ra,16(sp)
   33680:	dc800215 	stw	r18,8(sp)
   33684:	2027883a 	mov	r19,r4
   33688:	2823883a 	mov	r17,r5
   3368c:	3021883a 	mov	r16,r6
   33690:	20000226 	beq	r4,zero,3369c <__swbuf_r+0x30>
   33694:	20800e17 	ldw	r2,56(r4)
   33698:	10003e26 	beq	r2,zero,33794 <__swbuf_r+0x128>
   3369c:	80800617 	ldw	r2,24(r16)
   336a0:	80c0030b 	ldhu	r3,12(r16)
   336a4:	80800215 	stw	r2,8(r16)
   336a8:	1880020c 	andi	r2,r3,8
   336ac:	10001f26 	beq	r2,zero,3372c <__swbuf_r+0xc0>
   336b0:	80800417 	ldw	r2,16(r16)
   336b4:	10001d26 	beq	r2,zero,3372c <__swbuf_r+0xc0>
   336b8:	1948000c 	andi	r5,r3,8192
   336bc:	8c803fcc 	andi	r18,r17,255
   336c0:	28002326 	beq	r5,zero,33750 <__swbuf_r+0xe4>
   336c4:	80c00017 	ldw	r3,0(r16)
   336c8:	81000517 	ldw	r4,20(r16)
   336cc:	1885c83a 	sub	r2,r3,r2
   336d0:	1100290e 	bge	r2,r4,33778 <__swbuf_r+0x10c>
   336d4:	10800044 	addi	r2,r2,1
   336d8:	81400217 	ldw	r5,8(r16)
   336dc:	19000044 	addi	r4,r3,1
   336e0:	81000015 	stw	r4,0(r16)
   336e4:	297fffc4 	addi	r5,r5,-1
   336e8:	81400215 	stw	r5,8(r16)
   336ec:	1c400005 	stb	r17,0(r3)
   336f0:	80c00517 	ldw	r3,20(r16)
   336f4:	18802926 	beq	r3,r2,3379c <__swbuf_r+0x130>
   336f8:	8080030b 	ldhu	r2,12(r16)
   336fc:	1080004c 	andi	r2,r2,1
   33700:	10000226 	beq	r2,zero,3370c <__swbuf_r+0xa0>
   33704:	90800298 	cmpnei	r2,r18,10
   33708:	10002426 	beq	r2,zero,3379c <__swbuf_r+0x130>
   3370c:	9005883a 	mov	r2,r18
   33710:	dfc00417 	ldw	ra,16(sp)
   33714:	dcc00317 	ldw	r19,12(sp)
   33718:	dc800217 	ldw	r18,8(sp)
   3371c:	dc400117 	ldw	r17,4(sp)
   33720:	dc000017 	ldw	r16,0(sp)
   33724:	dec00504 	addi	sp,sp,20
   33728:	f800283a 	ret
   3372c:	800b883a 	mov	r5,r16
   33730:	9809883a 	mov	r4,r19
   33734:	002ccd00 	call	2ccd0 <__swsetup_r>
   33738:	10001c1e 	bne	r2,zero,337ac <__swbuf_r+0x140>
   3373c:	80c0030b 	ldhu	r3,12(r16)
   33740:	80800417 	ldw	r2,16(r16)
   33744:	8c803fcc 	andi	r18,r17,255
   33748:	1948000c 	andi	r5,r3,8192
   3374c:	283fdd1e 	bne	r5,zero,336c4 <__swbuf_r+0x58>
   33750:	81001917 	ldw	r4,100(r16)
   33754:	18c80014 	ori	r3,r3,8192
   33758:	0177ffc4 	movi	r5,-8193
   3375c:	2148703a 	and	r4,r4,r5
   33760:	80c0030d 	sth	r3,12(r16)
   33764:	80c00017 	ldw	r3,0(r16)
   33768:	81001915 	stw	r4,100(r16)
   3376c:	81000517 	ldw	r4,20(r16)
   33770:	1885c83a 	sub	r2,r3,r2
   33774:	113fd716 	blt	r2,r4,336d4 <__swbuf_r+0x68>
   33778:	800b883a 	mov	r5,r16
   3377c:	9809883a 	mov	r4,r19
   33780:	002e9c40 	call	2e9c4 <_fflush_r>
   33784:	1000091e 	bne	r2,zero,337ac <__swbuf_r+0x140>
   33788:	80c00017 	ldw	r3,0(r16)
   3378c:	00800044 	movi	r2,1
   33790:	003fd106 	br	336d8 <__swbuf_r+0x6c>
   33794:	002ee0c0 	call	2ee0c <__sinit>
   33798:	003fc006 	br	3369c <__swbuf_r+0x30>
   3379c:	800b883a 	mov	r5,r16
   337a0:	9809883a 	mov	r4,r19
   337a4:	002e9c40 	call	2e9c4 <_fflush_r>
   337a8:	103fd826 	beq	r2,zero,3370c <__swbuf_r+0xa0>
   337ac:	04bfffc4 	movi	r18,-1
   337b0:	003fd606 	br	3370c <__swbuf_r+0xa0>

000337b4 <__swbuf>:
   337b4:	00c00134 	movhi	r3,4
   337b8:	2005883a 	mov	r2,r4
   337bc:	192b2417 	ldw	r4,-21360(r3)
   337c0:	280d883a 	mov	r6,r5
   337c4:	100b883a 	mov	r5,r2
   337c8:	003366c1 	jmpi	3366c <__swbuf_r>

000337cc <_write_r>:
   337cc:	2807883a 	mov	r3,r5
   337d0:	defffe04 	addi	sp,sp,-8
   337d4:	dc000015 	stw	r16,0(sp)
   337d8:	300b883a 	mov	r5,r6
   337dc:	00800134 	movhi	r2,4
   337e0:	380d883a 	mov	r6,r7
   337e4:	2021883a 	mov	r16,r4
   337e8:	1809883a 	mov	r4,r3
   337ec:	dfc00115 	stw	ra,4(sp)
   337f0:	10324615 	stw	zero,-14056(r2)
   337f4:	00361d40 	call	361d4 <write>
   337f8:	10ffffd8 	cmpnei	r3,r2,-1
   337fc:	18000426 	beq	r3,zero,33810 <_write_r+0x44>
   33800:	dfc00117 	ldw	ra,4(sp)
   33804:	dc000017 	ldw	r16,0(sp)
   33808:	dec00204 	addi	sp,sp,8
   3380c:	f800283a 	ret
   33810:	00c00134 	movhi	r3,4
   33814:	18f24617 	ldw	r3,-14056(r3)
   33818:	183ff926 	beq	r3,zero,33800 <_write_r+0x34>
   3381c:	80c00015 	stw	r3,0(r16)
   33820:	dfc00117 	ldw	ra,4(sp)
   33824:	dc000017 	ldw	r16,0(sp)
   33828:	dec00204 	addi	sp,sp,8
   3382c:	f800283a 	ret

00033830 <_close_r>:
   33830:	defffe04 	addi	sp,sp,-8
   33834:	dc000015 	stw	r16,0(sp)
   33838:	00800134 	movhi	r2,4
   3383c:	2021883a 	mov	r16,r4
   33840:	2809883a 	mov	r4,r5
   33844:	dfc00115 	stw	ra,4(sp)
   33848:	10324615 	stw	zero,-14056(r2)
   3384c:	00355d80 	call	355d8 <close>
   33850:	10ffffd8 	cmpnei	r3,r2,-1
   33854:	18000426 	beq	r3,zero,33868 <_close_r+0x38>
   33858:	dfc00117 	ldw	ra,4(sp)
   3385c:	dc000017 	ldw	r16,0(sp)
   33860:	dec00204 	addi	sp,sp,8
   33864:	f800283a 	ret
   33868:	00c00134 	movhi	r3,4
   3386c:	18f24617 	ldw	r3,-14056(r3)
   33870:	183ff926 	beq	r3,zero,33858 <_close_r+0x28>
   33874:	80c00015 	stw	r3,0(r16)
   33878:	dfc00117 	ldw	ra,4(sp)
   3387c:	dc000017 	ldw	r16,0(sp)
   33880:	dec00204 	addi	sp,sp,8
   33884:	f800283a 	ret

00033888 <__assert_func>:
   33888:	00800134 	movhi	r2,4
   3388c:	122b2417 	ldw	r8,-21360(r2)
   33890:	defffc04 	addi	sp,sp,-16
   33894:	3807883a 	mov	r3,r7
   33898:	3005883a 	mov	r2,r6
   3389c:	dfc00315 	stw	ra,12(sp)
   338a0:	42400317 	ldw	r9,12(r8)
   338a4:	200f883a 	mov	r7,r4
   338a8:	2811883a 	mov	r8,r5
   338ac:	180d883a 	mov	r6,r3
   338b0:	10000a26 	beq	r2,zero,338dc <__assert_func+0x54>
   338b4:	00c00134 	movhi	r3,4
   338b8:	18e35b04 	addi	r3,r3,-29332
   338bc:	01400134 	movhi	r5,4
   338c0:	29635f04 	addi	r5,r5,-29316
   338c4:	4809883a 	mov	r4,r9
   338c8:	d8c00115 	stw	r3,4(sp)
   338cc:	da000015 	stw	r8,0(sp)
   338d0:	d8800215 	stw	r2,8(sp)
   338d4:	0033b840 	call	33b84 <fiprintf>
   338d8:	003426c0 	call	3426c <abort>
   338dc:	00c00134 	movhi	r3,4
   338e0:	18e35e04 	addi	r3,r3,-29320
   338e4:	1805883a 	mov	r2,r3
   338e8:	003ff406 	br	338bc <__assert_func+0x34>

000338ec <__assert>:
   338ec:	deffff04 	addi	sp,sp,-4
   338f0:	300f883a 	mov	r7,r6
   338f4:	000d883a 	mov	r6,zero
   338f8:	dfc00015 	stw	ra,0(sp)
   338fc:	00338880 	call	33888 <__assert_func>

00033900 <_calloc_r>:
   33900:	defffe04 	addi	sp,sp,-8
   33904:	dc000015 	stw	r16,0(sp)
   33908:	2021883a 	mov	r16,r4
   3390c:	2809883a 	mov	r4,r5
   33910:	300b883a 	mov	r5,r6
   33914:	dfc00115 	stw	ra,4(sp)
   33918:	0026b4c0 	call	26b4c <__mulsi3>
   3391c:	8009883a 	mov	r4,r16
   33920:	100b883a 	mov	r5,r2
   33924:	002fadc0 	call	2fadc <_malloc_r>
   33928:	1009883a 	mov	r4,r2
   3392c:	10000c26 	beq	r2,zero,33960 <_calloc_r+0x60>
   33930:	11bfff17 	ldw	r6,-4(r2)
   33934:	00bfff04 	movi	r2,-4
   33938:	308c703a 	and	r6,r6,r2
   3393c:	31bfff04 	addi	r6,r6,-4
   33940:	30800968 	cmpgeui	r2,r6,37
   33944:	1000151e 	bne	r2,zero,3399c <_calloc_r+0x9c>
   33948:	30800530 	cmpltui	r2,r6,20
   3394c:	10000926 	beq	r2,zero,33974 <_calloc_r+0x74>
   33950:	2005883a 	mov	r2,r4
   33954:	10000015 	stw	zero,0(r2)
   33958:	10000115 	stw	zero,4(r2)
   3395c:	10000215 	stw	zero,8(r2)
   33960:	2005883a 	mov	r2,r4
   33964:	dfc00117 	ldw	ra,4(sp)
   33968:	dc000017 	ldw	r16,0(sp)
   3396c:	dec00204 	addi	sp,sp,8
   33970:	f800283a 	ret
   33974:	20000015 	stw	zero,0(r4)
   33978:	20000115 	stw	zero,4(r4)
   3397c:	30800728 	cmpgeui	r2,r6,28
   33980:	10000a26 	beq	r2,zero,339ac <_calloc_r+0xac>
   33984:	20000215 	stw	zero,8(r4)
   33988:	20000315 	stw	zero,12(r4)
   3398c:	31800920 	cmpeqi	r6,r6,36
   33990:	3000081e 	bne	r6,zero,339b4 <_calloc_r+0xb4>
   33994:	20800404 	addi	r2,r4,16
   33998:	003fee06 	br	33954 <_calloc_r+0x54>
   3399c:	000b883a 	mov	r5,zero
   339a0:	00305b80 	call	305b8 <memset>
   339a4:	1009883a 	mov	r4,r2
   339a8:	003fed06 	br	33960 <_calloc_r+0x60>
   339ac:	20800204 	addi	r2,r4,8
   339b0:	003fe806 	br	33954 <_calloc_r+0x54>
   339b4:	20000415 	stw	zero,16(r4)
   339b8:	20800604 	addi	r2,r4,24
   339bc:	20000515 	stw	zero,20(r4)
   339c0:	003fe406 	br	33954 <_calloc_r+0x54>

000339c4 <_fclose_r.part.0>:
   339c4:	defffc04 	addi	sp,sp,-16
   339c8:	dc800215 	stw	r18,8(sp)
   339cc:	dc400115 	stw	r17,4(sp)
   339d0:	dc000015 	stw	r16,0(sp)
   339d4:	dfc00315 	stw	ra,12(sp)
   339d8:	2821883a 	mov	r16,r5
   339dc:	2023883a 	mov	r17,r4
   339e0:	002e79c0 	call	2e79c <__sflush_r>
   339e4:	80c00b17 	ldw	r3,44(r16)
   339e8:	1025883a 	mov	r18,r2
   339ec:	18000426 	beq	r3,zero,33a00 <_fclose_r.part.0+0x3c>
   339f0:	81400717 	ldw	r5,28(r16)
   339f4:	8809883a 	mov	r4,r17
   339f8:	183ee83a 	callr	r3
   339fc:	10001916 	blt	r2,zero,33a64 <_fclose_r.part.0+0xa0>
   33a00:	8080030b 	ldhu	r2,12(r16)
   33a04:	1080200c 	andi	r2,r2,128
   33a08:	10001a1e 	bne	r2,zero,33a74 <_fclose_r.part.0+0xb0>
   33a0c:	81400c17 	ldw	r5,48(r16)
   33a10:	28000526 	beq	r5,zero,33a28 <_fclose_r.part.0+0x64>
   33a14:	80801004 	addi	r2,r16,64
   33a18:	28800226 	beq	r5,r2,33a24 <_fclose_r.part.0+0x60>
   33a1c:	8809883a 	mov	r4,r17
   33a20:	002ef700 	call	2ef70 <_free_r>
   33a24:	80000c15 	stw	zero,48(r16)
   33a28:	81401117 	ldw	r5,68(r16)
   33a2c:	28000326 	beq	r5,zero,33a3c <_fclose_r.part.0+0x78>
   33a30:	8809883a 	mov	r4,r17
   33a34:	002ef700 	call	2ef70 <_free_r>
   33a38:	80001115 	stw	zero,68(r16)
   33a3c:	002ee1c0 	call	2ee1c <__sfp_lock_acquire>
   33a40:	8000030d 	sth	zero,12(r16)
   33a44:	002ee200 	call	2ee20 <__sfp_lock_release>
   33a48:	9005883a 	mov	r2,r18
   33a4c:	dfc00317 	ldw	ra,12(sp)
   33a50:	dc800217 	ldw	r18,8(sp)
   33a54:	dc400117 	ldw	r17,4(sp)
   33a58:	dc000017 	ldw	r16,0(sp)
   33a5c:	dec00404 	addi	sp,sp,16
   33a60:	f800283a 	ret
   33a64:	8080030b 	ldhu	r2,12(r16)
   33a68:	04bfffc4 	movi	r18,-1
   33a6c:	1080200c 	andi	r2,r2,128
   33a70:	103fe626 	beq	r2,zero,33a0c <_fclose_r.part.0+0x48>
   33a74:	81400417 	ldw	r5,16(r16)
   33a78:	8809883a 	mov	r4,r17
   33a7c:	002ef700 	call	2ef70 <_free_r>
   33a80:	003fe206 	br	33a0c <_fclose_r.part.0+0x48>

00033a84 <_fclose_r>:
   33a84:	28001926 	beq	r5,zero,33aec <_fclose_r+0x68>
   33a88:	defffd04 	addi	sp,sp,-12
   33a8c:	dc000115 	stw	r16,4(sp)
   33a90:	dfc00215 	stw	ra,8(sp)
   33a94:	2021883a 	mov	r16,r4
   33a98:	20000226 	beq	r4,zero,33aa4 <_fclose_r+0x20>
   33a9c:	20800e17 	ldw	r2,56(r4)
   33aa0:	10000c26 	beq	r2,zero,33ad4 <_fclose_r+0x50>
   33aa4:	2880030f 	ldh	r2,12(r5)
   33aa8:	1000051e 	bne	r2,zero,33ac0 <_fclose_r+0x3c>
   33aac:	0005883a 	mov	r2,zero
   33ab0:	dfc00217 	ldw	ra,8(sp)
   33ab4:	dc000117 	ldw	r16,4(sp)
   33ab8:	dec00304 	addi	sp,sp,12
   33abc:	f800283a 	ret
   33ac0:	8009883a 	mov	r4,r16
   33ac4:	dfc00217 	ldw	ra,8(sp)
   33ac8:	dc000117 	ldw	r16,4(sp)
   33acc:	dec00304 	addi	sp,sp,12
   33ad0:	00339c41 	jmpi	339c4 <_fclose_r.part.0>
   33ad4:	d9400015 	stw	r5,0(sp)
   33ad8:	002ee0c0 	call	2ee0c <__sinit>
   33adc:	d9400017 	ldw	r5,0(sp)
   33ae0:	2880030f 	ldh	r2,12(r5)
   33ae4:	103ff126 	beq	r2,zero,33aac <_fclose_r+0x28>
   33ae8:	003ff506 	br	33ac0 <_fclose_r+0x3c>
   33aec:	0005883a 	mov	r2,zero
   33af0:	f800283a 	ret

00033af4 <fclose>:
   33af4:	20000826 	beq	r4,zero,33b18 <fclose+0x24>
   33af8:	00800134 	movhi	r2,4
   33afc:	200b883a 	mov	r5,r4
   33b00:	112b2417 	ldw	r4,-21360(r2)
   33b04:	20000226 	beq	r4,zero,33b10 <fclose+0x1c>
   33b08:	20800e17 	ldw	r2,56(r4)
   33b0c:	10000526 	beq	r2,zero,33b24 <fclose+0x30>
   33b10:	2880030f 	ldh	r2,12(r5)
   33b14:	1000021e 	bne	r2,zero,33b20 <fclose+0x2c>
   33b18:	0005883a 	mov	r2,zero
   33b1c:	f800283a 	ret
   33b20:	00339c41 	jmpi	339c4 <_fclose_r.part.0>
   33b24:	defffd04 	addi	sp,sp,-12
   33b28:	d9400115 	stw	r5,4(sp)
   33b2c:	d9000015 	stw	r4,0(sp)
   33b30:	dfc00215 	stw	ra,8(sp)
   33b34:	002ee0c0 	call	2ee0c <__sinit>
   33b38:	d9400117 	ldw	r5,4(sp)
   33b3c:	d9000017 	ldw	r4,0(sp)
   33b40:	2880030f 	ldh	r2,12(r5)
   33b44:	10000326 	beq	r2,zero,33b54 <fclose+0x60>
   33b48:	dfc00217 	ldw	ra,8(sp)
   33b4c:	dec00304 	addi	sp,sp,12
   33b50:	00339c41 	jmpi	339c4 <_fclose_r.part.0>
   33b54:	0005883a 	mov	r2,zero
   33b58:	dfc00217 	ldw	ra,8(sp)
   33b5c:	dec00304 	addi	sp,sp,12
   33b60:	f800283a 	ret

00033b64 <_fiprintf_r>:
   33b64:	defffe04 	addi	sp,sp,-8
   33b68:	dfc00015 	stw	ra,0(sp)
   33b6c:	d9c00115 	stw	r7,4(sp)
   33b70:	d9c00104 	addi	r7,sp,4
   33b74:	00341380 	call	34138 <_vfiprintf_r>
   33b78:	dfc00017 	ldw	ra,0(sp)
   33b7c:	dec00204 	addi	sp,sp,8
   33b80:	f800283a 	ret

00033b84 <fiprintf>:
   33b84:	defffd04 	addi	sp,sp,-12
   33b88:	2005883a 	mov	r2,r4
   33b8c:	dfc00015 	stw	ra,0(sp)
   33b90:	d9800115 	stw	r6,4(sp)
   33b94:	d9c00215 	stw	r7,8(sp)
   33b98:	00c00134 	movhi	r3,4
   33b9c:	192b2417 	ldw	r4,-21360(r3)
   33ba0:	280d883a 	mov	r6,r5
   33ba4:	d9c00104 	addi	r7,sp,4
   33ba8:	100b883a 	mov	r5,r2
   33bac:	00341380 	call	34138 <_vfiprintf_r>
   33bb0:	dfc00017 	ldw	ra,0(sp)
   33bb4:	dec00304 	addi	sp,sp,12
   33bb8:	f800283a 	ret

00033bbc <__fputwc>:
   33bbc:	defff904 	addi	sp,sp,-28
   33bc0:	dcc00415 	stw	r19,16(sp)
   33bc4:	dc800315 	stw	r18,12(sp)
   33bc8:	dc000115 	stw	r16,4(sp)
   33bcc:	dfc00615 	stw	ra,24(sp)
   33bd0:	dd000515 	stw	r20,20(sp)
   33bd4:	dc400215 	stw	r17,8(sp)
   33bd8:	2025883a 	mov	r18,r4
   33bdc:	2827883a 	mov	r19,r5
   33be0:	3021883a 	mov	r16,r6
   33be4:	0033ee80 	call	33ee8 <__locale_mb_cur_max>
   33be8:	10800058 	cmpnei	r2,r2,1
   33bec:	1000071e 	bne	r2,zero,33c0c <__fputwc+0x50>
   33bf0:	98bfffc4 	addi	r2,r19,-1
   33bf4:	10803fe8 	cmpgeui	r2,r2,255
   33bf8:	1000041e 	bne	r2,zero,33c0c <__fputwc+0x50>
   33bfc:	980b883a 	mov	r5,r19
   33c00:	dcc000c5 	stb	r19,3(sp)
   33c04:	05000044 	movi	r20,1
   33c08:	00000a06 	br	33c34 <__fputwc+0x78>
   33c0c:	81c01704 	addi	r7,r16,92
   33c10:	980d883a 	mov	r6,r19
   33c14:	d94000c4 	addi	r5,sp,3
   33c18:	9009883a 	mov	r4,r18
   33c1c:	003413c0 	call	3413c <_wcrtomb_r>
   33c20:	1029883a 	mov	r20,r2
   33c24:	10bfffd8 	cmpnei	r2,r2,-1
   33c28:	10003926 	beq	r2,zero,33d10 <__fputwc+0x154>
   33c2c:	a0001f26 	beq	r20,zero,33cac <__fputwc+0xf0>
   33c30:	d94000c3 	ldbu	r5,3(sp)
   33c34:	0023883a 	mov	r17,zero
   33c38:	00000a06 	br	33c64 <__fputwc+0xa8>
   33c3c:	80800017 	ldw	r2,0(r16)
   33c40:	11400005 	stb	r5,0(r2)
   33c44:	80c00017 	ldw	r3,0(r16)
   33c48:	18c00044 	addi	r3,r3,1
   33c4c:	80c00015 	stw	r3,0(r16)
   33c50:	8c400044 	addi	r17,r17,1
   33c54:	d88000c4 	addi	r2,sp,3
   33c58:	1447883a 	add	r3,r2,r17
   33c5c:	8d00132e 	bgeu	r17,r20,33cac <__fputwc+0xf0>
   33c60:	19400003 	ldbu	r5,0(r3)
   33c64:	80c00217 	ldw	r3,8(r16)
   33c68:	18ffffc4 	addi	r3,r3,-1
   33c6c:	80c00215 	stw	r3,8(r16)
   33c70:	183ff20e 	bge	r3,zero,33c3c <__fputwc+0x80>
   33c74:	80800617 	ldw	r2,24(r16)
   33c78:	18801616 	blt	r3,r2,33cd4 <__fputwc+0x118>
   33c7c:	80800017 	ldw	r2,0(r16)
   33c80:	11400005 	stb	r5,0(r2)
   33c84:	80800017 	ldw	r2,0(r16)
   33c88:	10c00003 	ldbu	r3,0(r2)
   33c8c:	10800044 	addi	r2,r2,1
   33c90:	18c002a0 	cmpeqi	r3,r3,10
   33c94:	1800171e 	bne	r3,zero,33cf4 <__fputwc+0x138>
   33c98:	80800015 	stw	r2,0(r16)
   33c9c:	8c400044 	addi	r17,r17,1
   33ca0:	d88000c4 	addi	r2,sp,3
   33ca4:	1447883a 	add	r3,r2,r17
   33ca8:	8d3fed36 	bltu	r17,r20,33c60 <__fputwc+0xa4>
   33cac:	9829883a 	mov	r20,r19
   33cb0:	a005883a 	mov	r2,r20
   33cb4:	dfc00617 	ldw	ra,24(sp)
   33cb8:	dd000517 	ldw	r20,20(sp)
   33cbc:	dcc00417 	ldw	r19,16(sp)
   33cc0:	dc800317 	ldw	r18,12(sp)
   33cc4:	dc400217 	ldw	r17,8(sp)
   33cc8:	dc000117 	ldw	r16,4(sp)
   33ccc:	dec00704 	addi	sp,sp,28
   33cd0:	f800283a 	ret
   33cd4:	29403fcc 	andi	r5,r5,255
   33cd8:	800d883a 	mov	r6,r16
   33cdc:	9009883a 	mov	r4,r18
   33ce0:	003366c0 	call	3366c <__swbuf_r>
   33ce4:	10bfffe0 	cmpeqi	r2,r2,-1
   33ce8:	103fd926 	beq	r2,zero,33c50 <__fputwc+0x94>
   33cec:	053fffc4 	movi	r20,-1
   33cf0:	003fef06 	br	33cb0 <__fputwc+0xf4>
   33cf4:	800d883a 	mov	r6,r16
   33cf8:	01400284 	movi	r5,10
   33cfc:	9009883a 	mov	r4,r18
   33d00:	003366c0 	call	3366c <__swbuf_r>
   33d04:	10bfffe0 	cmpeqi	r2,r2,-1
   33d08:	103fd126 	beq	r2,zero,33c50 <__fputwc+0x94>
   33d0c:	003ff706 	br	33cec <__fputwc+0x130>
   33d10:	8080030b 	ldhu	r2,12(r16)
   33d14:	10801014 	ori	r2,r2,64
   33d18:	8080030d 	sth	r2,12(r16)
   33d1c:	003fe406 	br	33cb0 <__fputwc+0xf4>

00033d20 <_fputwc_r>:
   33d20:	3080030b 	ldhu	r2,12(r6)
   33d24:	10c8000c 	andi	r3,r2,8192
   33d28:	1800051e 	bne	r3,zero,33d40 <_fputwc_r+0x20>
   33d2c:	30c01917 	ldw	r3,100(r6)
   33d30:	10880014 	ori	r2,r2,8192
   33d34:	3080030d 	sth	r2,12(r6)
   33d38:	18880014 	ori	r2,r3,8192
   33d3c:	30801915 	stw	r2,100(r6)
   33d40:	0033bbc1 	jmpi	33bbc <__fputwc>

00033d44 <fputwc>:
   33d44:	defffc04 	addi	sp,sp,-16
   33d48:	00800134 	movhi	r2,4
   33d4c:	dc000215 	stw	r16,8(sp)
   33d50:	142b2417 	ldw	r16,-21360(r2)
   33d54:	dfc00315 	stw	ra,12(sp)
   33d58:	280d883a 	mov	r6,r5
   33d5c:	200b883a 	mov	r5,r4
   33d60:	80000226 	beq	r16,zero,33d6c <fputwc+0x28>
   33d64:	80800e17 	ldw	r2,56(r16)
   33d68:	10000d26 	beq	r2,zero,33da0 <fputwc+0x5c>
   33d6c:	3080030b 	ldhu	r2,12(r6)
   33d70:	10c8000c 	andi	r3,r2,8192
   33d74:	1800051e 	bne	r3,zero,33d8c <fputwc+0x48>
   33d78:	30c01917 	ldw	r3,100(r6)
   33d7c:	10880014 	ori	r2,r2,8192
   33d80:	3080030d 	sth	r2,12(r6)
   33d84:	18880014 	ori	r2,r3,8192
   33d88:	30801915 	stw	r2,100(r6)
   33d8c:	8009883a 	mov	r4,r16
   33d90:	dfc00317 	ldw	ra,12(sp)
   33d94:	dc000217 	ldw	r16,8(sp)
   33d98:	dec00404 	addi	sp,sp,16
   33d9c:	0033bbc1 	jmpi	33bbc <__fputwc>
   33da0:	d9000015 	stw	r4,0(sp)
   33da4:	8009883a 	mov	r4,r16
   33da8:	d9800115 	stw	r6,4(sp)
   33dac:	002ee0c0 	call	2ee0c <__sinit>
   33db0:	d9800117 	ldw	r6,4(sp)
   33db4:	d9400017 	ldw	r5,0(sp)
   33db8:	003fec06 	br	33d6c <fputwc+0x28>

00033dbc <_fstat_r>:
   33dbc:	2807883a 	mov	r3,r5
   33dc0:	defffe04 	addi	sp,sp,-8
   33dc4:	dc000015 	stw	r16,0(sp)
   33dc8:	00800134 	movhi	r2,4
   33dcc:	300b883a 	mov	r5,r6
   33dd0:	2021883a 	mov	r16,r4
   33dd4:	1809883a 	mov	r4,r3
   33dd8:	dfc00115 	stw	ra,4(sp)
   33ddc:	10324615 	stw	zero,-14056(r2)
   33de0:	00357540 	call	35754 <fstat>
   33de4:	10ffffd8 	cmpnei	r3,r2,-1
   33de8:	18000426 	beq	r3,zero,33dfc <_fstat_r+0x40>
   33dec:	dfc00117 	ldw	ra,4(sp)
   33df0:	dc000017 	ldw	r16,0(sp)
   33df4:	dec00204 	addi	sp,sp,8
   33df8:	f800283a 	ret
   33dfc:	00c00134 	movhi	r3,4
   33e00:	18f24617 	ldw	r3,-14056(r3)
   33e04:	183ff926 	beq	r3,zero,33dec <_fstat_r+0x30>
   33e08:	80c00015 	stw	r3,0(r16)
   33e0c:	dfc00117 	ldw	ra,4(sp)
   33e10:	dc000017 	ldw	r16,0(sp)
   33e14:	dec00204 	addi	sp,sp,8
   33e18:	f800283a 	ret

00033e1c <_isatty_r>:
   33e1c:	defffe04 	addi	sp,sp,-8
   33e20:	dc000015 	stw	r16,0(sp)
   33e24:	00800134 	movhi	r2,4
   33e28:	2021883a 	mov	r16,r4
   33e2c:	2809883a 	mov	r4,r5
   33e30:	dfc00115 	stw	ra,4(sp)
   33e34:	10324615 	stw	zero,-14056(r2)
   33e38:	003586c0 	call	3586c <isatty>
   33e3c:	10ffffd8 	cmpnei	r3,r2,-1
   33e40:	18000426 	beq	r3,zero,33e54 <_isatty_r+0x38>
   33e44:	dfc00117 	ldw	ra,4(sp)
   33e48:	dc000017 	ldw	r16,0(sp)
   33e4c:	dec00204 	addi	sp,sp,8
   33e50:	f800283a 	ret
   33e54:	00c00134 	movhi	r3,4
   33e58:	18f24617 	ldw	r3,-14056(r3)
   33e5c:	183ff926 	beq	r3,zero,33e44 <_isatty_r+0x28>
   33e60:	80c00015 	stw	r3,0(r16)
   33e64:	dfc00117 	ldw	ra,4(sp)
   33e68:	dc000017 	ldw	r16,0(sp)
   33e6c:	dec00204 	addi	sp,sp,8
   33e70:	f800283a 	ret

00033e74 <_setlocale_r>:
   33e74:	30001626 	beq	r6,zero,33ed0 <_setlocale_r+0x5c>
   33e78:	01400134 	movhi	r5,4
   33e7c:	defffe04 	addi	sp,sp,-8
   33e80:	29636c04 	addi	r5,r5,-29264
   33e84:	3009883a 	mov	r4,r6
   33e88:	dc000015 	stw	r16,0(sp)
   33e8c:	dfc00115 	stw	ra,4(sp)
   33e90:	3021883a 	mov	r16,r6
   33e94:	00340800 	call	34080 <strcmp>
   33e98:	1000061e 	bne	r2,zero,33eb4 <_setlocale_r+0x40>
   33e9c:	00800134 	movhi	r2,4
   33ea0:	10a36b04 	addi	r2,r2,-29268
   33ea4:	dfc00117 	ldw	ra,4(sp)
   33ea8:	dc000017 	ldw	r16,0(sp)
   33eac:	dec00204 	addi	sp,sp,8
   33eb0:	f800283a 	ret
   33eb4:	80800003 	ldbu	r2,0(r16)
   33eb8:	10bfef44 	addi	r2,r2,-67
   33ebc:	10000726 	beq	r2,zero,33edc <_setlocale_r+0x68>
   33ec0:	80800003 	ldbu	r2,0(r16)
   33ec4:	103ff526 	beq	r2,zero,33e9c <_setlocale_r+0x28>
   33ec8:	0005883a 	mov	r2,zero
   33ecc:	003ff506 	br	33ea4 <_setlocale_r+0x30>
   33ed0:	00800134 	movhi	r2,4
   33ed4:	10a36b04 	addi	r2,r2,-29268
   33ed8:	f800283a 	ret
   33edc:	80800043 	ldbu	r2,1(r16)
   33ee0:	103fee26 	beq	r2,zero,33e9c <_setlocale_r+0x28>
   33ee4:	003ff606 	br	33ec0 <_setlocale_r+0x4c>

00033ee8 <__locale_mb_cur_max>:
   33ee8:	00800134 	movhi	r2,4
   33eec:	10a67c07 	ldb	r2,-26128(r2)
   33ef0:	f800283a 	ret

00033ef4 <setlocale>:
   33ef4:	28001626 	beq	r5,zero,33f50 <setlocale+0x5c>
   33ef8:	defffe04 	addi	sp,sp,-8
   33efc:	dc000015 	stw	r16,0(sp)
   33f00:	2821883a 	mov	r16,r5
   33f04:	01400134 	movhi	r5,4
   33f08:	29636c04 	addi	r5,r5,-29264
   33f0c:	8009883a 	mov	r4,r16
   33f10:	dfc00115 	stw	ra,4(sp)
   33f14:	00340800 	call	34080 <strcmp>
   33f18:	1000061e 	bne	r2,zero,33f34 <setlocale+0x40>
   33f1c:	00800134 	movhi	r2,4
   33f20:	10a36b04 	addi	r2,r2,-29268
   33f24:	dfc00117 	ldw	ra,4(sp)
   33f28:	dc000017 	ldw	r16,0(sp)
   33f2c:	dec00204 	addi	sp,sp,8
   33f30:	f800283a 	ret
   33f34:	80800003 	ldbu	r2,0(r16)
   33f38:	10bfef44 	addi	r2,r2,-67
   33f3c:	10000726 	beq	r2,zero,33f5c <setlocale+0x68>
   33f40:	80800003 	ldbu	r2,0(r16)
   33f44:	103ff526 	beq	r2,zero,33f1c <setlocale+0x28>
   33f48:	0005883a 	mov	r2,zero
   33f4c:	003ff506 	br	33f24 <setlocale+0x30>
   33f50:	00800134 	movhi	r2,4
   33f54:	10a36b04 	addi	r2,r2,-29268
   33f58:	f800283a 	ret
   33f5c:	80800043 	ldbu	r2,1(r16)
   33f60:	103fee26 	beq	r2,zero,33f1c <setlocale+0x28>
   33f64:	003ff606 	br	33f40 <setlocale+0x4c>

00033f68 <_lseek_r>:
   33f68:	2807883a 	mov	r3,r5
   33f6c:	defffe04 	addi	sp,sp,-8
   33f70:	dc000015 	stw	r16,0(sp)
   33f74:	300b883a 	mov	r5,r6
   33f78:	00800134 	movhi	r2,4
   33f7c:	380d883a 	mov	r6,r7
   33f80:	2021883a 	mov	r16,r4
   33f84:	1809883a 	mov	r4,r3
   33f88:	dfc00115 	stw	ra,4(sp)
   33f8c:	10324615 	stw	zero,-14056(r2)
   33f90:	0035bac0 	call	35bac <lseek>
   33f94:	10ffffd8 	cmpnei	r3,r2,-1
   33f98:	18000426 	beq	r3,zero,33fac <_lseek_r+0x44>
   33f9c:	dfc00117 	ldw	ra,4(sp)
   33fa0:	dc000017 	ldw	r16,0(sp)
   33fa4:	dec00204 	addi	sp,sp,8
   33fa8:	f800283a 	ret
   33fac:	00c00134 	movhi	r3,4
   33fb0:	18f24617 	ldw	r3,-14056(r3)
   33fb4:	183ff926 	beq	r3,zero,33f9c <_lseek_r+0x34>
   33fb8:	80c00015 	stw	r3,0(r16)
   33fbc:	dfc00117 	ldw	ra,4(sp)
   33fc0:	dc000017 	ldw	r16,0(sp)
   33fc4:	dec00204 	addi	sp,sp,8
   33fc8:	f800283a 	ret

00033fcc <_mbtowc_r>:
   33fcc:	00800134 	movhi	r2,4
   33fd0:	10a66b17 	ldw	r2,-26196(r2)
   33fd4:	1000683a 	jmp	r2

00033fd8 <__ascii_mbtowc>:
   33fd8:	deffff04 	addi	sp,sp,-4
   33fdc:	28000826 	beq	r5,zero,34000 <__ascii_mbtowc+0x28>
   33fe0:	30000926 	beq	r6,zero,34008 <__ascii_mbtowc+0x30>
   33fe4:	38000b26 	beq	r7,zero,34014 <__ascii_mbtowc+0x3c>
   33fe8:	30800003 	ldbu	r2,0(r6)
   33fec:	28800015 	stw	r2,0(r5)
   33ff0:	30800003 	ldbu	r2,0(r6)
   33ff4:	1004c03a 	cmpne	r2,r2,zero
   33ff8:	dec00104 	addi	sp,sp,4
   33ffc:	f800283a 	ret
   34000:	d80b883a 	mov	r5,sp
   34004:	303ff71e 	bne	r6,zero,33fe4 <__ascii_mbtowc+0xc>
   34008:	0005883a 	mov	r2,zero
   3400c:	dec00104 	addi	sp,sp,4
   34010:	f800283a 	ret
   34014:	00bfff84 	movi	r2,-2
   34018:	003ff706 	br	33ff8 <__ascii_mbtowc+0x20>

0003401c <_read_r>:
   3401c:	2807883a 	mov	r3,r5
   34020:	defffe04 	addi	sp,sp,-8
   34024:	dc000015 	stw	r16,0(sp)
   34028:	300b883a 	mov	r5,r6
   3402c:	00800134 	movhi	r2,4
   34030:	380d883a 	mov	r6,r7
   34034:	2021883a 	mov	r16,r4
   34038:	1809883a 	mov	r4,r3
   3403c:	dfc00115 	stw	ra,4(sp)
   34040:	10324615 	stw	zero,-14056(r2)
   34044:	0035d8c0 	call	35d8c <read>
   34048:	10ffffd8 	cmpnei	r3,r2,-1
   3404c:	18000426 	beq	r3,zero,34060 <_read_r+0x44>
   34050:	dfc00117 	ldw	ra,4(sp)
   34054:	dc000017 	ldw	r16,0(sp)
   34058:	dec00204 	addi	sp,sp,8
   3405c:	f800283a 	ret
   34060:	00c00134 	movhi	r3,4
   34064:	18f24617 	ldw	r3,-14056(r3)
   34068:	183ff926 	beq	r3,zero,34050 <_read_r+0x34>
   3406c:	80c00015 	stw	r3,0(r16)
   34070:	dfc00117 	ldw	ra,4(sp)
   34074:	dc000017 	ldw	r16,0(sp)
   34078:	dec00204 	addi	sp,sp,8
   3407c:	f800283a 	ret

00034080 <strcmp>:
   34080:	2144b03a 	or	r2,r4,r5
   34084:	108000cc 	andi	r2,r2,3
   34088:	1000141e 	bne	r2,zero,340dc <strcmp+0x5c>
   3408c:	20800017 	ldw	r2,0(r4)
   34090:	28c00017 	ldw	r3,0(r5)
   34094:	10c0111e 	bne	r2,r3,340dc <strcmp+0x5c>
   34098:	01ffbff4 	movhi	r7,65279
   3409c:	01a02074 	movhi	r6,32897
   340a0:	39ffbfc4 	addi	r7,r7,-257
   340a4:	31a02004 	addi	r6,r6,-32640
   340a8:	00000306 	br	340b8 <strcmp+0x38>
   340ac:	20800017 	ldw	r2,0(r4)
   340b0:	28c00017 	ldw	r3,0(r5)
   340b4:	10c0091e 	bne	r2,r3,340dc <strcmp+0x5c>
   340b8:	11c7883a 	add	r3,r2,r7
   340bc:	0084303a 	nor	r2,zero,r2
   340c0:	1884703a 	and	r2,r3,r2
   340c4:	1184703a 	and	r2,r2,r6
   340c8:	21000104 	addi	r4,r4,4
   340cc:	29400104 	addi	r5,r5,4
   340d0:	103ff626 	beq	r2,zero,340ac <strcmp+0x2c>
   340d4:	0005883a 	mov	r2,zero
   340d8:	f800283a 	ret
   340dc:	20c00003 	ldbu	r3,0(r4)
   340e0:	18803fcc 	andi	r2,r3,255
   340e4:	1080201c 	xori	r2,r2,128
   340e8:	10bfe004 	addi	r2,r2,-128
   340ec:	1000071e 	bne	r2,zero,3410c <strcmp+0x8c>
   340f0:	00000a06 	br	3411c <strcmp+0x9c>
   340f4:	20c00003 	ldbu	r3,0(r4)
   340f8:	29400044 	addi	r5,r5,1
   340fc:	18803fcc 	andi	r2,r3,255
   34100:	1080201c 	xori	r2,r2,128
   34104:	10bfe004 	addi	r2,r2,-128
   34108:	10000726 	beq	r2,zero,34128 <strcmp+0xa8>
   3410c:	29800007 	ldb	r6,0(r5)
   34110:	21000044 	addi	r4,r4,1
   34114:	30bff726 	beq	r6,r2,340f4 <strcmp+0x74>
   34118:	18803fcc 	andi	r2,r3,255
   3411c:	28c00003 	ldbu	r3,0(r5)
   34120:	10c5c83a 	sub	r2,r2,r3
   34124:	f800283a 	ret
   34128:	28c00003 	ldbu	r3,0(r5)
   3412c:	0005883a 	mov	r2,zero
   34130:	10c5c83a 	sub	r2,r2,r3
   34134:	f800283a 	ret

00034138 <_vfiprintf_r>:
   34138:	003224c1 	jmpi	3224c <___vfiprintf_internal_r>

0003413c <_wcrtomb_r>:
   3413c:	defffa04 	addi	sp,sp,-24
   34140:	dc400415 	stw	r17,16(sp)
   34144:	dc000315 	stw	r16,12(sp)
   34148:	00800134 	movhi	r2,4
   3414c:	dfc00515 	stw	ra,20(sp)
   34150:	10a66a17 	ldw	r2,-26200(r2)
   34154:	2023883a 	mov	r17,r4
   34158:	3821883a 	mov	r16,r7
   3415c:	28000826 	beq	r5,zero,34180 <_wcrtomb_r+0x44>
   34160:	103ee83a 	callr	r2
   34164:	10ffffd8 	cmpnei	r3,r2,-1
   34168:	18000a26 	beq	r3,zero,34194 <_wcrtomb_r+0x58>
   3416c:	dfc00517 	ldw	ra,20(sp)
   34170:	dc400417 	ldw	r17,16(sp)
   34174:	dc000317 	ldw	r16,12(sp)
   34178:	dec00604 	addi	sp,sp,24
   3417c:	f800283a 	ret
   34180:	000d883a 	mov	r6,zero
   34184:	d9400084 	addi	r5,sp,2
   34188:	103ee83a 	callr	r2
   3418c:	10ffffd8 	cmpnei	r3,r2,-1
   34190:	183ff61e 	bne	r3,zero,3416c <_wcrtomb_r+0x30>
   34194:	00802284 	movi	r2,138
   34198:	80000015 	stw	zero,0(r16)
   3419c:	88800015 	stw	r2,0(r17)
   341a0:	00bfffc4 	movi	r2,-1
   341a4:	003ff106 	br	3416c <_wcrtomb_r+0x30>

000341a8 <wcrtomb>:
   341a8:	defffa04 	addi	sp,sp,-24
   341ac:	00c00134 	movhi	r3,4
   341b0:	dc400415 	stw	r17,16(sp)
   341b4:	dc000315 	stw	r16,12(sp)
   341b8:	1c6b2417 	ldw	r17,-21360(r3)
   341bc:	dfc00515 	stw	ra,20(sp)
   341c0:	00c00134 	movhi	r3,4
   341c4:	18e66a17 	ldw	r3,-26200(r3)
   341c8:	3021883a 	mov	r16,r6
   341cc:	20000c26 	beq	r4,zero,34200 <wcrtomb+0x58>
   341d0:	280d883a 	mov	r6,r5
   341d4:	800f883a 	mov	r7,r16
   341d8:	200b883a 	mov	r5,r4
   341dc:	8809883a 	mov	r4,r17
   341e0:	183ee83a 	callr	r3
   341e4:	10ffffd8 	cmpnei	r3,r2,-1
   341e8:	18000c26 	beq	r3,zero,3421c <wcrtomb+0x74>
   341ec:	dfc00517 	ldw	ra,20(sp)
   341f0:	dc400417 	ldw	r17,16(sp)
   341f4:	dc000317 	ldw	r16,12(sp)
   341f8:	dec00604 	addi	sp,sp,24
   341fc:	f800283a 	ret
   34200:	300f883a 	mov	r7,r6
   34204:	d9400084 	addi	r5,sp,2
   34208:	000d883a 	mov	r6,zero
   3420c:	8809883a 	mov	r4,r17
   34210:	183ee83a 	callr	r3
   34214:	10ffffd8 	cmpnei	r3,r2,-1
   34218:	183ff41e 	bne	r3,zero,341ec <wcrtomb+0x44>
   3421c:	00802284 	movi	r2,138
   34220:	80000015 	stw	zero,0(r16)
   34224:	88800015 	stw	r2,0(r17)
   34228:	00bfffc4 	movi	r2,-1
   3422c:	003fef06 	br	341ec <wcrtomb+0x44>

00034230 <_wctomb_r>:
   34230:	00800134 	movhi	r2,4
   34234:	10a66a17 	ldw	r2,-26200(r2)
   34238:	1000683a 	jmp	r2

0003423c <__ascii_wctomb>:
   3423c:	28000926 	beq	r5,zero,34264 <__ascii_wctomb+0x28>
   34240:	30804030 	cmpltui	r2,r6,256
   34244:	10000326 	beq	r2,zero,34254 <__ascii_wctomb+0x18>
   34248:	29800005 	stb	r6,0(r5)
   3424c:	00800044 	movi	r2,1
   34250:	f800283a 	ret
   34254:	00802284 	movi	r2,138
   34258:	20800015 	stw	r2,0(r4)
   3425c:	00bfffc4 	movi	r2,-1
   34260:	f800283a 	ret
   34264:	0005883a 	mov	r2,zero
   34268:	f800283a 	ret

0003426c <abort>:
   3426c:	deffff04 	addi	sp,sp,-4
   34270:	01000184 	movi	r4,6
   34274:	dfc00015 	stw	ra,0(sp)
   34278:	00344f80 	call	344f8 <raise>
   3427c:	01000044 	movi	r4,1
   34280:	00356e00 	call	356e0 <_exit>

00034284 <_init_signal_r>:
   34284:	2080b717 	ldw	r2,732(r4)
   34288:	10000226 	beq	r2,zero,34294 <_init_signal_r+0x10>
   3428c:	0005883a 	mov	r2,zero
   34290:	f800283a 	ret
   34294:	defffe04 	addi	sp,sp,-8
   34298:	01402004 	movi	r5,128
   3429c:	dc000015 	stw	r16,0(sp)
   342a0:	dfc00115 	stw	ra,4(sp)
   342a4:	2021883a 	mov	r16,r4
   342a8:	002fadc0 	call	2fadc <_malloc_r>
   342ac:	8080b715 	stw	r2,732(r16)
   342b0:	1009883a 	mov	r4,r2
   342b4:	10000826 	beq	r2,zero,342d8 <_init_signal_r+0x54>
   342b8:	01802004 	movi	r6,128
   342bc:	000b883a 	mov	r5,zero
   342c0:	00305b80 	call	305b8 <memset>
   342c4:	0005883a 	mov	r2,zero
   342c8:	dfc00117 	ldw	ra,4(sp)
   342cc:	dc000017 	ldw	r16,0(sp)
   342d0:	dec00204 	addi	sp,sp,8
   342d4:	f800283a 	ret
   342d8:	00bfffc4 	movi	r2,-1
   342dc:	003ffa06 	br	342c8 <_init_signal_r+0x44>

000342e0 <_signal_r>:
   342e0:	defffc04 	addi	sp,sp,-16
   342e4:	dc400115 	stw	r17,4(sp)
   342e8:	dfc00315 	stw	ra,12(sp)
   342ec:	dc800215 	stw	r18,8(sp)
   342f0:	dc000015 	stw	r16,0(sp)
   342f4:	28800830 	cmpltui	r2,r5,32
   342f8:	2023883a 	mov	r17,r4
   342fc:	10000e26 	beq	r2,zero,34338 <_signal_r+0x58>
   34300:	20c0b717 	ldw	r3,732(r4)
   34304:	2821883a 	mov	r16,r5
   34308:	3025883a 	mov	r18,r6
   3430c:	18000e26 	beq	r3,zero,34348 <_signal_r+0x68>
   34310:	802090ba 	slli	r16,r16,2
   34314:	1c21883a 	add	r16,r3,r16
   34318:	80800017 	ldw	r2,0(r16)
   3431c:	84800015 	stw	r18,0(r16)
   34320:	dfc00317 	ldw	ra,12(sp)
   34324:	dc800217 	ldw	r18,8(sp)
   34328:	dc400117 	ldw	r17,4(sp)
   3432c:	dc000017 	ldw	r16,0(sp)
   34330:	dec00404 	addi	sp,sp,16
   34334:	f800283a 	ret
   34338:	00800584 	movi	r2,22
   3433c:	20800015 	stw	r2,0(r4)
   34340:	00bfffc4 	movi	r2,-1
   34344:	003ff606 	br	34320 <_signal_r+0x40>
   34348:	01402004 	movi	r5,128
   3434c:	002fadc0 	call	2fadc <_malloc_r>
   34350:	8880b715 	stw	r2,732(r17)
   34354:	10000626 	beq	r2,zero,34370 <_signal_r+0x90>
   34358:	01802004 	movi	r6,128
   3435c:	000b883a 	mov	r5,zero
   34360:	1009883a 	mov	r4,r2
   34364:	00305b80 	call	305b8 <memset>
   34368:	1007883a 	mov	r3,r2
   3436c:	003fe806 	br	34310 <_signal_r+0x30>
   34370:	00bfffc4 	movi	r2,-1
   34374:	003fea06 	br	34320 <_signal_r+0x40>

00034378 <_raise_r>:
   34378:	28800830 	cmpltui	r2,r5,32
   3437c:	10002b26 	beq	r2,zero,3442c <_raise_r+0xb4>
   34380:	2080b717 	ldw	r2,732(r4)
   34384:	defffd04 	addi	sp,sp,-12
   34388:	dc000115 	stw	r16,4(sp)
   3438c:	dfc00215 	stw	ra,8(sp)
   34390:	2821883a 	mov	r16,r5
   34394:	10001026 	beq	r2,zero,343d8 <_raise_r+0x60>
   34398:	280690ba 	slli	r3,r5,2
   3439c:	10c5883a 	add	r2,r2,r3
   343a0:	10c00017 	ldw	r3,0(r2)
   343a4:	18000c26 	beq	r3,zero,343d8 <_raise_r+0x60>
   343a8:	19400060 	cmpeqi	r5,r3,1
   343ac:	28001a1e 	bne	r5,zero,34418 <_raise_r+0xa0>
   343b0:	197fffd8 	cmpnei	r5,r3,-1
   343b4:	28001126 	beq	r5,zero,343fc <_raise_r+0x84>
   343b8:	10000015 	stw	zero,0(r2)
   343bc:	8009883a 	mov	r4,r16
   343c0:	183ee83a 	callr	r3
   343c4:	0005883a 	mov	r2,zero
   343c8:	dfc00217 	ldw	ra,8(sp)
   343cc:	dc000117 	ldw	r16,4(sp)
   343d0:	dec00304 	addi	sp,sp,12
   343d4:	f800283a 	ret
   343d8:	d9000015 	stw	r4,0(sp)
   343dc:	00347d00 	call	347d0 <_getpid_r>
   343e0:	d9000017 	ldw	r4,0(sp)
   343e4:	800d883a 	mov	r6,r16
   343e8:	100b883a 	mov	r5,r2
   343ec:	dfc00217 	ldw	ra,8(sp)
   343f0:	dc000117 	ldw	r16,4(sp)
   343f4:	dec00304 	addi	sp,sp,12
   343f8:	00347701 	jmpi	34770 <_kill_r>
   343fc:	00800584 	movi	r2,22
   34400:	20800015 	stw	r2,0(r4)
   34404:	00800044 	movi	r2,1
   34408:	dfc00217 	ldw	ra,8(sp)
   3440c:	dc000117 	ldw	r16,4(sp)
   34410:	dec00304 	addi	sp,sp,12
   34414:	f800283a 	ret
   34418:	0005883a 	mov	r2,zero
   3441c:	dfc00217 	ldw	ra,8(sp)
   34420:	dc000117 	ldw	r16,4(sp)
   34424:	dec00304 	addi	sp,sp,12
   34428:	f800283a 	ret
   3442c:	00800584 	movi	r2,22
   34430:	20800015 	stw	r2,0(r4)
   34434:	00bfffc4 	movi	r2,-1
   34438:	f800283a 	ret

0003443c <__sigtramp_r>:
   3443c:	28800830 	cmpltui	r2,r5,32
   34440:	10002b26 	beq	r2,zero,344f0 <__sigtramp_r+0xb4>
   34444:	20c0b717 	ldw	r3,732(r4)
   34448:	defffd04 	addi	sp,sp,-12
   3444c:	dc400115 	stw	r17,4(sp)
   34450:	dc000015 	stw	r16,0(sp)
   34454:	dfc00215 	stw	ra,8(sp)
   34458:	2821883a 	mov	r16,r5
   3445c:	2023883a 	mov	r17,r4
   34460:	18001326 	beq	r3,zero,344b0 <__sigtramp_r+0x74>
   34464:	800490ba 	slli	r2,r16,2
   34468:	1887883a 	add	r3,r3,r2
   3446c:	18800017 	ldw	r2,0(r3)
   34470:	10000d26 	beq	r2,zero,344a8 <__sigtramp_r+0x6c>
   34474:	113fffe0 	cmpeqi	r4,r2,-1
   34478:	2000191e 	bne	r4,zero,344e0 <__sigtramp_r+0xa4>
   3447c:	11000060 	cmpeqi	r4,r2,1
   34480:	2000151e 	bne	r4,zero,344d8 <__sigtramp_r+0x9c>
   34484:	18000015 	stw	zero,0(r3)
   34488:	8009883a 	mov	r4,r16
   3448c:	103ee83a 	callr	r2
   34490:	0005883a 	mov	r2,zero
   34494:	dfc00217 	ldw	ra,8(sp)
   34498:	dc400117 	ldw	r17,4(sp)
   3449c:	dc000017 	ldw	r16,0(sp)
   344a0:	dec00304 	addi	sp,sp,12
   344a4:	f800283a 	ret
   344a8:	00800044 	movi	r2,1
   344ac:	003ff906 	br	34494 <__sigtramp_r+0x58>
   344b0:	01402004 	movi	r5,128
   344b4:	002fadc0 	call	2fadc <_malloc_r>
   344b8:	8880b715 	stw	r2,732(r17)
   344bc:	10000a26 	beq	r2,zero,344e8 <__sigtramp_r+0xac>
   344c0:	01802004 	movi	r6,128
   344c4:	000b883a 	mov	r5,zero
   344c8:	1009883a 	mov	r4,r2
   344cc:	00305b80 	call	305b8 <memset>
   344d0:	1007883a 	mov	r3,r2
   344d4:	003fe306 	br	34464 <__sigtramp_r+0x28>
   344d8:	008000c4 	movi	r2,3
   344dc:	003fed06 	br	34494 <__sigtramp_r+0x58>
   344e0:	00800084 	movi	r2,2
   344e4:	003feb06 	br	34494 <__sigtramp_r+0x58>
   344e8:	00bfffc4 	movi	r2,-1
   344ec:	003fe906 	br	34494 <__sigtramp_r+0x58>
   344f0:	00bfffc4 	movi	r2,-1
   344f4:	f800283a 	ret

000344f8 <raise>:
   344f8:	defffd04 	addi	sp,sp,-12
   344fc:	dc400115 	stw	r17,4(sp)
   34500:	00c00134 	movhi	r3,4
   34504:	dfc00215 	stw	ra,8(sp)
   34508:	dc000015 	stw	r16,0(sp)
   3450c:	20800830 	cmpltui	r2,r4,32
   34510:	1c6b2417 	ldw	r17,-21360(r3)
   34514:	10002326 	beq	r2,zero,345a4 <raise+0xac>
   34518:	8880b717 	ldw	r2,732(r17)
   3451c:	2021883a 	mov	r16,r4
   34520:	10001026 	beq	r2,zero,34564 <raise+0x6c>
   34524:	200690ba 	slli	r3,r4,2
   34528:	10c5883a 	add	r2,r2,r3
   3452c:	10c00017 	ldw	r3,0(r2)
   34530:	18000c26 	beq	r3,zero,34564 <raise+0x6c>
   34534:	19400060 	cmpeqi	r5,r3,1
   34538:	2800181e 	bne	r5,zero,3459c <raise+0xa4>
   3453c:	197fffd8 	cmpnei	r5,r3,-1
   34540:	28001226 	beq	r5,zero,3458c <raise+0x94>
   34544:	10000015 	stw	zero,0(r2)
   34548:	183ee83a 	callr	r3
   3454c:	0005883a 	mov	r2,zero
   34550:	dfc00217 	ldw	ra,8(sp)
   34554:	dc400117 	ldw	r17,4(sp)
   34558:	dc000017 	ldw	r16,0(sp)
   3455c:	dec00304 	addi	sp,sp,12
   34560:	f800283a 	ret
   34564:	8809883a 	mov	r4,r17
   34568:	00347d00 	call	347d0 <_getpid_r>
   3456c:	800d883a 	mov	r6,r16
   34570:	100b883a 	mov	r5,r2
   34574:	8809883a 	mov	r4,r17
   34578:	dfc00217 	ldw	ra,8(sp)
   3457c:	dc400117 	ldw	r17,4(sp)
   34580:	dc000017 	ldw	r16,0(sp)
   34584:	dec00304 	addi	sp,sp,12
   34588:	00347701 	jmpi	34770 <_kill_r>
   3458c:	00800584 	movi	r2,22
   34590:	88800015 	stw	r2,0(r17)
   34594:	00800044 	movi	r2,1
   34598:	003fed06 	br	34550 <raise+0x58>
   3459c:	0005883a 	mov	r2,zero
   345a0:	003feb06 	br	34550 <raise+0x58>
   345a4:	00800584 	movi	r2,22
   345a8:	88800015 	stw	r2,0(r17)
   345ac:	00bfffc4 	movi	r2,-1
   345b0:	003fe706 	br	34550 <raise+0x58>

000345b4 <signal>:
   345b4:	defffc04 	addi	sp,sp,-16
   345b8:	dc800215 	stw	r18,8(sp)
   345bc:	00c00134 	movhi	r3,4
   345c0:	dfc00315 	stw	ra,12(sp)
   345c4:	dc400115 	stw	r17,4(sp)
   345c8:	dc000015 	stw	r16,0(sp)
   345cc:	20800830 	cmpltui	r2,r4,32
   345d0:	1cab2417 	ldw	r18,-21360(r3)
   345d4:	10000e26 	beq	r2,zero,34610 <signal+0x5c>
   345d8:	2021883a 	mov	r16,r4
   345dc:	9100b717 	ldw	r4,732(r18)
   345e0:	2823883a 	mov	r17,r5
   345e4:	20000e26 	beq	r4,zero,34620 <signal+0x6c>
   345e8:	802090ba 	slli	r16,r16,2
   345ec:	2421883a 	add	r16,r4,r16
   345f0:	80800017 	ldw	r2,0(r16)
   345f4:	84400015 	stw	r17,0(r16)
   345f8:	dfc00317 	ldw	ra,12(sp)
   345fc:	dc800217 	ldw	r18,8(sp)
   34600:	dc400117 	ldw	r17,4(sp)
   34604:	dc000017 	ldw	r16,0(sp)
   34608:	dec00404 	addi	sp,sp,16
   3460c:	f800283a 	ret
   34610:	00800584 	movi	r2,22
   34614:	90800015 	stw	r2,0(r18)
   34618:	00bfffc4 	movi	r2,-1
   3461c:	003ff606 	br	345f8 <signal+0x44>
   34620:	9009883a 	mov	r4,r18
   34624:	01402004 	movi	r5,128
   34628:	002fadc0 	call	2fadc <_malloc_r>
   3462c:	9080b715 	stw	r2,732(r18)
   34630:	1009883a 	mov	r4,r2
   34634:	10000526 	beq	r2,zero,3464c <signal+0x98>
   34638:	01802004 	movi	r6,128
   3463c:	000b883a 	mov	r5,zero
   34640:	00305b80 	call	305b8 <memset>
   34644:	1009883a 	mov	r4,r2
   34648:	003fe706 	br	345e8 <signal+0x34>
   3464c:	00bfffc4 	movi	r2,-1
   34650:	003fe906 	br	345f8 <signal+0x44>

00034654 <_init_signal>:
   34654:	defffe04 	addi	sp,sp,-8
   34658:	00800134 	movhi	r2,4
   3465c:	dc000015 	stw	r16,0(sp)
   34660:	142b2417 	ldw	r16,-21360(r2)
   34664:	dfc00115 	stw	ra,4(sp)
   34668:	8080b717 	ldw	r2,732(r16)
   3466c:	10000526 	beq	r2,zero,34684 <_init_signal+0x30>
   34670:	0005883a 	mov	r2,zero
   34674:	dfc00117 	ldw	ra,4(sp)
   34678:	dc000017 	ldw	r16,0(sp)
   3467c:	dec00204 	addi	sp,sp,8
   34680:	f800283a 	ret
   34684:	8009883a 	mov	r4,r16
   34688:	01402004 	movi	r5,128
   3468c:	002fadc0 	call	2fadc <_malloc_r>
   34690:	8080b715 	stw	r2,732(r16)
   34694:	1009883a 	mov	r4,r2
   34698:	10000426 	beq	r2,zero,346ac <_init_signal+0x58>
   3469c:	01802004 	movi	r6,128
   346a0:	000b883a 	mov	r5,zero
   346a4:	00305b80 	call	305b8 <memset>
   346a8:	003ff106 	br	34670 <_init_signal+0x1c>
   346ac:	00bfffc4 	movi	r2,-1
   346b0:	003ff006 	br	34674 <_init_signal+0x20>

000346b4 <__sigtramp>:
   346b4:	defffd04 	addi	sp,sp,-12
   346b8:	dc400115 	stw	r17,4(sp)
   346bc:	00c00134 	movhi	r3,4
   346c0:	dfc00215 	stw	ra,8(sp)
   346c4:	dc000015 	stw	r16,0(sp)
   346c8:	20800830 	cmpltui	r2,r4,32
   346cc:	1c6b2417 	ldw	r17,-21360(r3)
   346d0:	10002526 	beq	r2,zero,34768 <__sigtramp+0xb4>
   346d4:	88c0b717 	ldw	r3,732(r17)
   346d8:	2021883a 	mov	r16,r4
   346dc:	18001326 	beq	r3,zero,3472c <__sigtramp+0x78>
   346e0:	800890ba 	slli	r4,r16,2
   346e4:	1907883a 	add	r3,r3,r4
   346e8:	18800017 	ldw	r2,0(r3)
   346ec:	10000d26 	beq	r2,zero,34724 <__sigtramp+0x70>
   346f0:	113fffe0 	cmpeqi	r4,r2,-1
   346f4:	20001a1e 	bne	r4,zero,34760 <__sigtramp+0xac>
   346f8:	11000060 	cmpeqi	r4,r2,1
   346fc:	2000161e 	bne	r4,zero,34758 <__sigtramp+0xa4>
   34700:	18000015 	stw	zero,0(r3)
   34704:	8009883a 	mov	r4,r16
   34708:	103ee83a 	callr	r2
   3470c:	0005883a 	mov	r2,zero
   34710:	dfc00217 	ldw	ra,8(sp)
   34714:	dc400117 	ldw	r17,4(sp)
   34718:	dc000017 	ldw	r16,0(sp)
   3471c:	dec00304 	addi	sp,sp,12
   34720:	f800283a 	ret
   34724:	00800044 	movi	r2,1
   34728:	003ff906 	br	34710 <__sigtramp+0x5c>
   3472c:	01402004 	movi	r5,128
   34730:	8809883a 	mov	r4,r17
   34734:	002fadc0 	call	2fadc <_malloc_r>
   34738:	8880b715 	stw	r2,732(r17)
   3473c:	10000a26 	beq	r2,zero,34768 <__sigtramp+0xb4>
   34740:	01802004 	movi	r6,128
   34744:	000b883a 	mov	r5,zero
   34748:	1009883a 	mov	r4,r2
   3474c:	00305b80 	call	305b8 <memset>
   34750:	1007883a 	mov	r3,r2
   34754:	003fe206 	br	346e0 <__sigtramp+0x2c>
   34758:	008000c4 	movi	r2,3
   3475c:	003fec06 	br	34710 <__sigtramp+0x5c>
   34760:	00800084 	movi	r2,2
   34764:	003fea06 	br	34710 <__sigtramp+0x5c>
   34768:	00bfffc4 	movi	r2,-1
   3476c:	003fe806 	br	34710 <__sigtramp+0x5c>

00034770 <_kill_r>:
   34770:	2807883a 	mov	r3,r5
   34774:	defffe04 	addi	sp,sp,-8
   34778:	dc000015 	stw	r16,0(sp)
   3477c:	00800134 	movhi	r2,4
   34780:	300b883a 	mov	r5,r6
   34784:	2021883a 	mov	r16,r4
   34788:	1809883a 	mov	r4,r3
   3478c:	dfc00115 	stw	ra,4(sp)
   34790:	10324615 	stw	zero,-14056(r2)
   34794:	00359580 	call	35958 <kill>
   34798:	10ffffd8 	cmpnei	r3,r2,-1
   3479c:	18000426 	beq	r3,zero,347b0 <_kill_r+0x40>
   347a0:	dfc00117 	ldw	ra,4(sp)
   347a4:	dc000017 	ldw	r16,0(sp)
   347a8:	dec00204 	addi	sp,sp,8
   347ac:	f800283a 	ret
   347b0:	00c00134 	movhi	r3,4
   347b4:	18f24617 	ldw	r3,-14056(r3)
   347b8:	183ff926 	beq	r3,zero,347a0 <_kill_r+0x30>
   347bc:	80c00015 	stw	r3,0(r16)
   347c0:	dfc00117 	ldw	ra,4(sp)
   347c4:	dc000017 	ldw	r16,0(sp)
   347c8:	dec00204 	addi	sp,sp,8
   347cc:	f800283a 	ret

000347d0 <_getpid_r>:
   347d0:	00358101 	jmpi	35810 <getpid>

000347d4 <__udivdi3>:
   347d4:	defff504 	addi	sp,sp,-44
   347d8:	dd000515 	stw	r20,20(sp)
   347dc:	dc800315 	stw	r18,12(sp)
   347e0:	dfc00a15 	stw	ra,40(sp)
   347e4:	df000915 	stw	fp,36(sp)
   347e8:	ddc00815 	stw	r23,32(sp)
   347ec:	dd800715 	stw	r22,28(sp)
   347f0:	dd400615 	stw	r21,24(sp)
   347f4:	dcc00415 	stw	r19,16(sp)
   347f8:	dc400215 	stw	r17,8(sp)
   347fc:	dc000115 	stw	r16,4(sp)
   34800:	2029883a 	mov	r20,r4
   34804:	2825883a 	mov	r18,r5
   34808:	3800461e 	bne	r7,zero,34924 <__udivdi3+0x150>
   3480c:	3823883a 	mov	r17,r7
   34810:	3021883a 	mov	r16,r6
   34814:	2027883a 	mov	r19,r4
   34818:	2980622e 	bgeu	r5,r6,349a4 <__udivdi3+0x1d0>
   3481c:	00bfffd4 	movui	r2,65535
   34820:	282b883a 	mov	r21,r5
   34824:	1180aa2e 	bgeu	r2,r6,34ad0 <__udivdi3+0x2fc>
   34828:	00804034 	movhi	r2,256
   3482c:	30815a36 	bltu	r6,r2,34d98 <__udivdi3+0x5c4>
   34830:	3006d63a 	srli	r3,r6,24
   34834:	04400604 	movi	r17,24
   34838:	00800134 	movhi	r2,4
   3483c:	1885883a 	add	r2,r3,r2
   34840:	10a28703 	ldbu	r2,-30180(r2)
   34844:	00c00804 	movi	r3,32
   34848:	1463883a 	add	r17,r2,r17
   3484c:	1c45c83a 	sub	r2,r3,r17
   34850:	1c400526 	beq	r3,r17,34868 <__udivdi3+0x94>
   34854:	9086983a 	sll	r3,r18,r2
   34858:	a462d83a 	srl	r17,r20,r17
   3485c:	30a0983a 	sll	r16,r6,r2
   34860:	a0a6983a 	sll	r19,r20,r2
   34864:	88eab03a 	or	r21,r17,r3
   34868:	802cd43a 	srli	r22,r16,16
   3486c:	a809883a 	mov	r4,r21
   34870:	853fffcc 	andi	r20,r16,65535
   34874:	b00b883a 	mov	r5,r22
   34878:	0026af00 	call	26af0 <__umodsi3>
   3487c:	a809883a 	mov	r4,r21
   34880:	b00b883a 	mov	r5,r22
   34884:	1025883a 	mov	r18,r2
   34888:	0026a8c0 	call	26a8c <__udivsi3>
   3488c:	a009883a 	mov	r4,r20
   34890:	100b883a 	mov	r5,r2
   34894:	102b883a 	mov	r21,r2
   34898:	0026b4c0 	call	26b4c <__mulsi3>
   3489c:	9024943a 	slli	r18,r18,16
   348a0:	9808d43a 	srli	r4,r19,16
   348a4:	9108b03a 	or	r4,r18,r4
   348a8:	2080052e 	bgeu	r4,r2,348c0 <__udivdi3+0xec>
   348ac:	2409883a 	add	r4,r4,r16
   348b0:	a8ffffc4 	addi	r3,r21,-1
   348b4:	24000136 	bltu	r4,r16,348bc <__udivdi3+0xe8>
   348b8:	20814836 	bltu	r4,r2,34ddc <__udivdi3+0x608>
   348bc:	182b883a 	mov	r21,r3
   348c0:	20a3c83a 	sub	r17,r4,r2
   348c4:	8809883a 	mov	r4,r17
   348c8:	b00b883a 	mov	r5,r22
   348cc:	0026af00 	call	26af0 <__umodsi3>
   348d0:	8809883a 	mov	r4,r17
   348d4:	1023883a 	mov	r17,r2
   348d8:	b00b883a 	mov	r5,r22
   348dc:	8822943a 	slli	r17,r17,16
   348e0:	0026a8c0 	call	26a8c <__udivsi3>
   348e4:	100b883a 	mov	r5,r2
   348e8:	a009883a 	mov	r4,r20
   348ec:	9cffffcc 	andi	r19,r19,65535
   348f0:	1025883a 	mov	r18,r2
   348f4:	8ce6b03a 	or	r19,r17,r19
   348f8:	0026b4c0 	call	26b4c <__mulsi3>
   348fc:	9880052e 	bgeu	r19,r2,34914 <__udivdi3+0x140>
   34900:	84e7883a 	add	r19,r16,r19
   34904:	90ffffc4 	addi	r3,r18,-1
   34908:	9c000136 	bltu	r19,r16,34910 <__udivdi3+0x13c>
   3490c:	98813136 	bltu	r19,r2,34dd4 <__udivdi3+0x600>
   34910:	1825883a 	mov	r18,r3
   34914:	a80c943a 	slli	r6,r21,16
   34918:	0007883a 	mov	r3,zero
   3491c:	3484b03a 	or	r2,r6,r18
   34920:	00000306 	br	34930 <__udivdi3+0x15c>
   34924:	29c00e2e 	bgeu	r5,r7,34960 <__udivdi3+0x18c>
   34928:	0007883a 	mov	r3,zero
   3492c:	0005883a 	mov	r2,zero
   34930:	dfc00a17 	ldw	ra,40(sp)
   34934:	df000917 	ldw	fp,36(sp)
   34938:	ddc00817 	ldw	r23,32(sp)
   3493c:	dd800717 	ldw	r22,28(sp)
   34940:	dd400617 	ldw	r21,24(sp)
   34944:	dd000517 	ldw	r20,20(sp)
   34948:	dcc00417 	ldw	r19,16(sp)
   3494c:	dc800317 	ldw	r18,12(sp)
   34950:	dc400217 	ldw	r17,8(sp)
   34954:	dc000117 	ldw	r16,4(sp)
   34958:	dec00b04 	addi	sp,sp,44
   3495c:	f800283a 	ret
   34960:	00bfffd4 	movui	r2,65535
   34964:	11c05f2e 	bgeu	r2,r7,34ae4 <__udivdi3+0x310>
   34968:	00804034 	movhi	r2,256
   3496c:	3880fc36 	bltu	r7,r2,34d60 <__udivdi3+0x58c>
   34970:	3804d63a 	srli	r2,r7,24
   34974:	01000604 	movi	r4,24
   34978:	00c00134 	movhi	r3,4
   3497c:	10c7883a 	add	r3,r2,r3
   34980:	18a28703 	ldbu	r2,-30180(r3)
   34984:	00c00804 	movi	r3,32
   34988:	1105883a 	add	r2,r2,r4
   3498c:	18a3c83a 	sub	r17,r3,r2
   34990:	1880901e 	bne	r3,r2,34bd4 <__udivdi3+0x400>
   34994:	3c80f736 	bltu	r7,r18,34d74 <__udivdi3+0x5a0>
   34998:	a185403a 	cmpgeu	r2,r20,r6
   3499c:	0007883a 	mov	r3,zero
   349a0:	003fe306 	br	34930 <__udivdi3+0x15c>
   349a4:	3000041e 	bne	r6,zero,349b8 <__udivdi3+0x1e4>
   349a8:	000b883a 	mov	r5,zero
   349ac:	01000044 	movi	r4,1
   349b0:	0026a8c0 	call	26a8c <__udivsi3>
   349b4:	1021883a 	mov	r16,r2
   349b8:	00bfffd4 	movui	r2,65535
   349bc:	14003f2e 	bgeu	r2,r16,34abc <__udivdi3+0x2e8>
   349c0:	00804034 	movhi	r2,256
   349c4:	8080f136 	bltu	r16,r2,34d8c <__udivdi3+0x5b8>
   349c8:	8006d63a 	srli	r3,r16,24
   349cc:	04400604 	movi	r17,24
   349d0:	00800134 	movhi	r2,4
   349d4:	1885883a 	add	r2,r3,r2
   349d8:	10a28703 	ldbu	r2,-30180(r2)
   349dc:	00c00804 	movi	r3,32
   349e0:	1463883a 	add	r17,r2,r17
   349e4:	1c45c83a 	sub	r2,r3,r17
   349e8:	1c40431e 	bne	r3,r17,34af8 <__udivdi3+0x324>
   349ec:	802cd43a 	srli	r22,r16,16
   349f0:	9423c83a 	sub	r17,r18,r16
   349f4:	853fffcc 	andi	r20,r16,65535
   349f8:	00c00044 	movi	r3,1
   349fc:	b00b883a 	mov	r5,r22
   34a00:	8809883a 	mov	r4,r17
   34a04:	d8c00015 	stw	r3,0(sp)
   34a08:	0026af00 	call	26af0 <__umodsi3>
   34a0c:	b00b883a 	mov	r5,r22
   34a10:	8809883a 	mov	r4,r17
   34a14:	1025883a 	mov	r18,r2
   34a18:	0026a8c0 	call	26a8c <__udivsi3>
   34a1c:	1009883a 	mov	r4,r2
   34a20:	a00b883a 	mov	r5,r20
   34a24:	102b883a 	mov	r21,r2
   34a28:	0026b4c0 	call	26b4c <__mulsi3>
   34a2c:	9024943a 	slli	r18,r18,16
   34a30:	9808d43a 	srli	r4,r19,16
   34a34:	d8c00017 	ldw	r3,0(sp)
   34a38:	9108b03a 	or	r4,r18,r4
   34a3c:	2080052e 	bgeu	r4,r2,34a54 <__udivdi3+0x280>
   34a40:	2409883a 	add	r4,r4,r16
   34a44:	a97fffc4 	addi	r5,r21,-1
   34a48:	24000136 	bltu	r4,r16,34a50 <__udivdi3+0x27c>
   34a4c:	2080e636 	bltu	r4,r2,34de8 <__udivdi3+0x614>
   34a50:	282b883a 	mov	r21,r5
   34a54:	20a3c83a 	sub	r17,r4,r2
   34a58:	8809883a 	mov	r4,r17
   34a5c:	b00b883a 	mov	r5,r22
   34a60:	d8c00015 	stw	r3,0(sp)
   34a64:	0026af00 	call	26af0 <__umodsi3>
   34a68:	8809883a 	mov	r4,r17
   34a6c:	1023883a 	mov	r17,r2
   34a70:	b00b883a 	mov	r5,r22
   34a74:	8822943a 	slli	r17,r17,16
   34a78:	0026a8c0 	call	26a8c <__udivsi3>
   34a7c:	a00b883a 	mov	r5,r20
   34a80:	1009883a 	mov	r4,r2
   34a84:	9cffffcc 	andi	r19,r19,65535
   34a88:	1025883a 	mov	r18,r2
   34a8c:	8ce6b03a 	or	r19,r17,r19
   34a90:	0026b4c0 	call	26b4c <__mulsi3>
   34a94:	d8c00017 	ldw	r3,0(sp)
   34a98:	9880052e 	bgeu	r19,r2,34ab0 <__udivdi3+0x2dc>
   34a9c:	84e7883a 	add	r19,r16,r19
   34aa0:	913fffc4 	addi	r4,r18,-1
   34aa4:	9c000136 	bltu	r19,r16,34aac <__udivdi3+0x2d8>
   34aa8:	9880c836 	bltu	r19,r2,34dcc <__udivdi3+0x5f8>
   34aac:	2025883a 	mov	r18,r4
   34ab0:	a80c943a 	slli	r6,r21,16
   34ab4:	3484b03a 	or	r2,r6,r18
   34ab8:	003f9d06 	br	34930 <__udivdi3+0x15c>
   34abc:	80804030 	cmpltui	r2,r16,256
   34ac0:	1000b81e 	bne	r2,zero,34da4 <__udivdi3+0x5d0>
   34ac4:	8006d23a 	srli	r3,r16,8
   34ac8:	04400204 	movi	r17,8
   34acc:	003fc006 	br	349d0 <__udivdi3+0x1fc>
   34ad0:	30804030 	cmpltui	r2,r6,256
   34ad4:	1000a51e 	bne	r2,zero,34d6c <__udivdi3+0x598>
   34ad8:	3006d23a 	srli	r3,r6,8
   34adc:	04400204 	movi	r17,8
   34ae0:	003f5506 	br	34838 <__udivdi3+0x64>
   34ae4:	38804030 	cmpltui	r2,r7,256
   34ae8:	1000a51e 	bne	r2,zero,34d80 <__udivdi3+0x5ac>
   34aec:	3804d23a 	srli	r2,r7,8
   34af0:	01000204 	movi	r4,8
   34af4:	003fa006 	br	34978 <__udivdi3+0x1a4>
   34af8:	80a0983a 	sll	r16,r16,r2
   34afc:	946ed83a 	srl	r23,r18,r17
   34b00:	9086983a 	sll	r3,r18,r2
   34b04:	802cd43a 	srli	r22,r16,16
   34b08:	a462d83a 	srl	r17,r20,r17
   34b0c:	b809883a 	mov	r4,r23
   34b10:	b00b883a 	mov	r5,r22
   34b14:	88eab03a 	or	r21,r17,r3
   34b18:	a0a6983a 	sll	r19,r20,r2
   34b1c:	0026af00 	call	26af0 <__umodsi3>
   34b20:	b809883a 	mov	r4,r23
   34b24:	b00b883a 	mov	r5,r22
   34b28:	1025883a 	mov	r18,r2
   34b2c:	853fffcc 	andi	r20,r16,65535
   34b30:	0026a8c0 	call	26a8c <__udivsi3>
   34b34:	a009883a 	mov	r4,r20
   34b38:	100b883a 	mov	r5,r2
   34b3c:	102f883a 	mov	r23,r2
   34b40:	0026b4c0 	call	26b4c <__mulsi3>
   34b44:	9024943a 	slli	r18,r18,16
   34b48:	a808d43a 	srli	r4,r21,16
   34b4c:	9108b03a 	or	r4,r18,r4
   34b50:	2080062e 	bgeu	r4,r2,34b6c <__udivdi3+0x398>
   34b54:	2409883a 	add	r4,r4,r16
   34b58:	b8ffffc4 	addi	r3,r23,-1
   34b5c:	24009936 	bltu	r4,r16,34dc4 <__udivdi3+0x5f0>
   34b60:	2080982e 	bgeu	r4,r2,34dc4 <__udivdi3+0x5f0>
   34b64:	bdffff84 	addi	r23,r23,-2
   34b68:	2409883a 	add	r4,r4,r16
   34b6c:	20a3c83a 	sub	r17,r4,r2
   34b70:	8809883a 	mov	r4,r17
   34b74:	b00b883a 	mov	r5,r22
   34b78:	0026af00 	call	26af0 <__umodsi3>
   34b7c:	1025883a 	mov	r18,r2
   34b80:	8809883a 	mov	r4,r17
   34b84:	b00b883a 	mov	r5,r22
   34b88:	9024943a 	slli	r18,r18,16
   34b8c:	0026a8c0 	call	26a8c <__udivsi3>
   34b90:	100b883a 	mov	r5,r2
   34b94:	a009883a 	mov	r4,r20
   34b98:	ac7fffcc 	andi	r17,r21,65535
   34b9c:	1039883a 	mov	fp,r2
   34ba0:	9462b03a 	or	r17,r18,r17
   34ba4:	0026b4c0 	call	26b4c <__mulsi3>
   34ba8:	8880062e 	bgeu	r17,r2,34bc4 <__udivdi3+0x3f0>
   34bac:	8c23883a 	add	r17,r17,r16
   34bb0:	e0ffffc4 	addi	r3,fp,-1
   34bb4:	8c007f36 	bltu	r17,r16,34db4 <__udivdi3+0x5e0>
   34bb8:	88807e2e 	bgeu	r17,r2,34db4 <__udivdi3+0x5e0>
   34bbc:	e73fff84 	addi	fp,fp,-2
   34bc0:	8c23883a 	add	r17,r17,r16
   34bc4:	b806943a 	slli	r3,r23,16
   34bc8:	88a3c83a 	sub	r17,r17,r2
   34bcc:	1f06b03a 	or	r3,r3,fp
   34bd0:	003f8a06 	br	349fc <__udivdi3+0x228>
   34bd4:	30a6d83a 	srl	r19,r6,r2
   34bd8:	3c4e983a 	sll	r7,r7,r17
   34bdc:	90a0d83a 	srl	r16,r18,r2
   34be0:	9446983a 	sll	r3,r18,r17
   34be4:	99e6b03a 	or	r19,r19,r7
   34be8:	a084d83a 	srl	r2,r20,r2
   34bec:	9838d43a 	srli	fp,r19,16
   34bf0:	8009883a 	mov	r4,r16
   34bf4:	10eab03a 	or	r21,r2,r3
   34bf8:	e00b883a 	mov	r5,fp
   34bfc:	346c983a 	sll	r22,r6,r17
   34c00:	dd400015 	stw	r21,0(sp)
   34c04:	0026af00 	call	26af0 <__umodsi3>
   34c08:	8009883a 	mov	r4,r16
   34c0c:	e00b883a 	mov	r5,fp
   34c10:	102f883a 	mov	r23,r2
   34c14:	9cbfffcc 	andi	r18,r19,65535
   34c18:	0026a8c0 	call	26a8c <__udivsi3>
   34c1c:	9009883a 	mov	r4,r18
   34c20:	100b883a 	mov	r5,r2
   34c24:	1021883a 	mov	r16,r2
   34c28:	0026b4c0 	call	26b4c <__mulsi3>
   34c2c:	b82e943a 	slli	r23,r23,16
   34c30:	a808d43a 	srli	r4,r21,16
   34c34:	b908b03a 	or	r4,r23,r4
   34c38:	2080062e 	bgeu	r4,r2,34c54 <__udivdi3+0x480>
   34c3c:	24c9883a 	add	r4,r4,r19
   34c40:	817fffc4 	addi	r5,r16,-1
   34c44:	24c05d36 	bltu	r4,r19,34dbc <__udivdi3+0x5e8>
   34c48:	20805c2e 	bgeu	r4,r2,34dbc <__udivdi3+0x5e8>
   34c4c:	843fff84 	addi	r16,r16,-2
   34c50:	24c9883a 	add	r4,r4,r19
   34c54:	20abc83a 	sub	r21,r4,r2
   34c58:	a809883a 	mov	r4,r21
   34c5c:	e00b883a 	mov	r5,fp
   34c60:	0026af00 	call	26af0 <__umodsi3>
   34c64:	a809883a 	mov	r4,r21
   34c68:	e00b883a 	mov	r5,fp
   34c6c:	102b883a 	mov	r21,r2
   34c70:	0026a8c0 	call	26a8c <__udivsi3>
   34c74:	9009883a 	mov	r4,r18
   34c78:	100b883a 	mov	r5,r2
   34c7c:	102f883a 	mov	r23,r2
   34c80:	0026b4c0 	call	26b4c <__mulsi3>
   34c84:	d8c00017 	ldw	r3,0(sp)
   34c88:	a82a943a 	slli	r21,r21,16
   34c8c:	100d883a 	mov	r6,r2
   34c90:	1cbfffcc 	andi	r18,r3,65535
   34c94:	aca4b03a 	or	r18,r21,r18
   34c98:	9080062e 	bgeu	r18,r2,34cb4 <__udivdi3+0x4e0>
   34c9c:	94e5883a 	add	r18,r18,r19
   34ca0:	b8bfffc4 	addi	r2,r23,-1
   34ca4:	94c04136 	bltu	r18,r19,34dac <__udivdi3+0x5d8>
   34ca8:	9180402e 	bgeu	r18,r6,34dac <__udivdi3+0x5d8>
   34cac:	bdffff84 	addi	r23,r23,-2
   34cb0:	94e5883a 	add	r18,r18,r19
   34cb4:	8004943a 	slli	r2,r16,16
   34cb8:	bd7fffcc 	andi	r21,r23,65535
   34cbc:	b73fffcc 	andi	fp,r22,65535
   34cc0:	15e0b03a 	or	r16,r2,r23
   34cc4:	8026d43a 	srli	r19,r16,16
   34cc8:	a809883a 	mov	r4,r21
   34ccc:	e00b883a 	mov	r5,fp
   34cd0:	91a5c83a 	sub	r18,r18,r6
   34cd4:	b02cd43a 	srli	r22,r22,16
   34cd8:	0026b4c0 	call	26b4c <__mulsi3>
   34cdc:	9809883a 	mov	r4,r19
   34ce0:	e00b883a 	mov	r5,fp
   34ce4:	102f883a 	mov	r23,r2
   34ce8:	0026b4c0 	call	26b4c <__mulsi3>
   34cec:	9809883a 	mov	r4,r19
   34cf0:	b00b883a 	mov	r5,r22
   34cf4:	1027883a 	mov	r19,r2
   34cf8:	0026b4c0 	call	26b4c <__mulsi3>
   34cfc:	a809883a 	mov	r4,r21
   34d00:	b00b883a 	mov	r5,r22
   34d04:	102b883a 	mov	r21,r2
   34d08:	0026b4c0 	call	26b4c <__mulsi3>
   34d0c:	b806d43a 	srli	r3,r23,16
   34d10:	14c5883a 	add	r2,r2,r19
   34d14:	1887883a 	add	r3,r3,r2
   34d18:	1cc0022e 	bgeu	r3,r19,34d24 <__udivdi3+0x550>
   34d1c:	00800074 	movhi	r2,1
   34d20:	a8ab883a 	add	r21,r21,r2
   34d24:	1804d43a 	srli	r2,r3,16
   34d28:	156b883a 	add	r21,r2,r21
   34d2c:	95400936 	bltu	r18,r21,34d54 <__udivdi3+0x580>
   34d30:	95400326 	beq	r18,r21,34d40 <__udivdi3+0x56c>
   34d34:	8005883a 	mov	r2,r16
   34d38:	0007883a 	mov	r3,zero
   34d3c:	003efc06 	br	34930 <__udivdi3+0x15c>
   34d40:	1806943a 	slli	r3,r3,16
   34d44:	a44c983a 	sll	r6,r20,r17
   34d48:	bdffffcc 	andi	r23,r23,65535
   34d4c:	1dc7883a 	add	r3,r3,r23
   34d50:	30fff82e 	bgeu	r6,r3,34d34 <__udivdi3+0x560>
   34d54:	80bfffc4 	addi	r2,r16,-1
   34d58:	0007883a 	mov	r3,zero
   34d5c:	003ef406 	br	34930 <__udivdi3+0x15c>
   34d60:	3804d43a 	srli	r2,r7,16
   34d64:	01000404 	movi	r4,16
   34d68:	003f0306 	br	34978 <__udivdi3+0x1a4>
   34d6c:	3007883a 	mov	r3,r6
   34d70:	003eb106 	br	34838 <__udivdi3+0x64>
   34d74:	0007883a 	mov	r3,zero
   34d78:	00800044 	movi	r2,1
   34d7c:	003eec06 	br	34930 <__udivdi3+0x15c>
   34d80:	3805883a 	mov	r2,r7
   34d84:	0009883a 	mov	r4,zero
   34d88:	003efb06 	br	34978 <__udivdi3+0x1a4>
   34d8c:	8006d43a 	srli	r3,r16,16
   34d90:	04400404 	movi	r17,16
   34d94:	003f0e06 	br	349d0 <__udivdi3+0x1fc>
   34d98:	3006d43a 	srli	r3,r6,16
   34d9c:	04400404 	movi	r17,16
   34da0:	003ea506 	br	34838 <__udivdi3+0x64>
   34da4:	8007883a 	mov	r3,r16
   34da8:	003f0906 	br	349d0 <__udivdi3+0x1fc>
   34dac:	102f883a 	mov	r23,r2
   34db0:	003fc006 	br	34cb4 <__udivdi3+0x4e0>
   34db4:	1839883a 	mov	fp,r3
   34db8:	003f8206 	br	34bc4 <__udivdi3+0x3f0>
   34dbc:	2821883a 	mov	r16,r5
   34dc0:	003fa406 	br	34c54 <__udivdi3+0x480>
   34dc4:	182f883a 	mov	r23,r3
   34dc8:	003f6806 	br	34b6c <__udivdi3+0x398>
   34dcc:	94bfff84 	addi	r18,r18,-2
   34dd0:	003f3706 	br	34ab0 <__udivdi3+0x2dc>
   34dd4:	94bfff84 	addi	r18,r18,-2
   34dd8:	003ece06 	br	34914 <__udivdi3+0x140>
   34ddc:	ad7fff84 	addi	r21,r21,-2
   34de0:	2409883a 	add	r4,r4,r16
   34de4:	003eb606 	br	348c0 <__udivdi3+0xec>
   34de8:	ad7fff84 	addi	r21,r21,-2
   34dec:	2409883a 	add	r4,r4,r16
   34df0:	003f1806 	br	34a54 <__udivdi3+0x280>

00034df4 <__umoddi3>:
   34df4:	defff304 	addi	sp,sp,-52
   34df8:	dc400415 	stw	r17,16(sp)
   34dfc:	dc000315 	stw	r16,12(sp)
   34e00:	dfc00c15 	stw	ra,48(sp)
   34e04:	df000b15 	stw	fp,44(sp)
   34e08:	ddc00a15 	stw	r23,40(sp)
   34e0c:	dd800915 	stw	r22,36(sp)
   34e10:	dd400815 	stw	r21,32(sp)
   34e14:	dd000715 	stw	r20,28(sp)
   34e18:	dcc00615 	stw	r19,24(sp)
   34e1c:	dc800515 	stw	r18,20(sp)
   34e20:	2823883a 	mov	r17,r5
   34e24:	2021883a 	mov	r16,r4
   34e28:	38003b1e 	bne	r7,zero,34f18 <__umoddi3+0x124>
   34e2c:	3825883a 	mov	r18,r7
   34e30:	3029883a 	mov	r20,r6
   34e34:	2027883a 	mov	r19,r4
   34e38:	29805b2e 	bgeu	r5,r6,34fa8 <__umoddi3+0x1b4>
   34e3c:	00bfffd4 	movui	r2,65535
   34e40:	282d883a 	mov	r22,r5
   34e44:	11809a2e 	bgeu	r2,r6,350b0 <__umoddi3+0x2bc>
   34e48:	00804034 	movhi	r2,256
   34e4c:	30814436 	bltu	r6,r2,35360 <__umoddi3+0x56c>
   34e50:	3006d63a 	srli	r3,r6,24
   34e54:	04800604 	movi	r18,24
   34e58:	00800134 	movhi	r2,4
   34e5c:	1885883a 	add	r2,r3,r2
   34e60:	10a28703 	ldbu	r2,-30180(r2)
   34e64:	00c00804 	movi	r3,32
   34e68:	1485883a 	add	r2,r2,r18
   34e6c:	18a5c83a 	sub	r18,r3,r2
   34e70:	18800526 	beq	r3,r2,34e88 <__umoddi3+0x94>
   34e74:	8ca2983a 	sll	r17,r17,r18
   34e78:	8084d83a 	srl	r2,r16,r2
   34e7c:	34a8983a 	sll	r20,r6,r18
   34e80:	84a6983a 	sll	r19,r16,r18
   34e84:	146cb03a 	or	r22,r2,r17
   34e88:	a02ed43a 	srli	r23,r20,16
   34e8c:	b009883a 	mov	r4,r22
   34e90:	a57fffcc 	andi	r21,r20,65535
   34e94:	b80b883a 	mov	r5,r23
   34e98:	0026af00 	call	26af0 <__umodsi3>
   34e9c:	b80b883a 	mov	r5,r23
   34ea0:	b009883a 	mov	r4,r22
   34ea4:	1023883a 	mov	r17,r2
   34ea8:	0026a8c0 	call	26a8c <__udivsi3>
   34eac:	a809883a 	mov	r4,r21
   34eb0:	100b883a 	mov	r5,r2
   34eb4:	0026b4c0 	call	26b4c <__mulsi3>
   34eb8:	8822943a 	slli	r17,r17,16
   34ebc:	9808d43a 	srli	r4,r19,16
   34ec0:	8908b03a 	or	r4,r17,r4
   34ec4:	2080042e 	bgeu	r4,r2,34ed8 <__umoddi3+0xe4>
   34ec8:	2509883a 	add	r4,r4,r20
   34ecc:	25000236 	bltu	r4,r20,34ed8 <__umoddi3+0xe4>
   34ed0:	2080012e 	bgeu	r4,r2,34ed8 <__umoddi3+0xe4>
   34ed4:	2509883a 	add	r4,r4,r20
   34ed8:	20a1c83a 	sub	r16,r4,r2
   34edc:	b80b883a 	mov	r5,r23
   34ee0:	8009883a 	mov	r4,r16
   34ee4:	0026af00 	call	26af0 <__umodsi3>
   34ee8:	b80b883a 	mov	r5,r23
   34eec:	8009883a 	mov	r4,r16
   34ef0:	1023883a 	mov	r17,r2
   34ef4:	0026a8c0 	call	26a8c <__udivsi3>
   34ef8:	8822943a 	slli	r17,r17,16
   34efc:	100b883a 	mov	r5,r2
   34f00:	a809883a 	mov	r4,r21
   34f04:	0026b4c0 	call	26b4c <__mulsi3>
   34f08:	98ffffcc 	andi	r3,r19,65535
   34f0c:	88c6b03a 	or	r3,r17,r3
   34f10:	18805e2e 	bgeu	r3,r2,3508c <__umoddi3+0x298>
   34f14:	00005906 	br	3507c <__umoddi3+0x288>
   34f18:	2005883a 	mov	r2,r4
   34f1c:	29c00d2e 	bgeu	r5,r7,34f54 <__umoddi3+0x160>
   34f20:	2807883a 	mov	r3,r5
   34f24:	dfc00c17 	ldw	ra,48(sp)
   34f28:	df000b17 	ldw	fp,44(sp)
   34f2c:	ddc00a17 	ldw	r23,40(sp)
   34f30:	dd800917 	ldw	r22,36(sp)
   34f34:	dd400817 	ldw	r21,32(sp)
   34f38:	dd000717 	ldw	r20,28(sp)
   34f3c:	dcc00617 	ldw	r19,24(sp)
   34f40:	dc800517 	ldw	r18,20(sp)
   34f44:	dc400417 	ldw	r17,16(sp)
   34f48:	dc000317 	ldw	r16,12(sp)
   34f4c:	dec00d04 	addi	sp,sp,52
   34f50:	f800283a 	ret
   34f54:	013fffd4 	movui	r4,65535
   34f58:	2807883a 	mov	r3,r5
   34f5c:	21c0592e 	bgeu	r4,r7,350c4 <__umoddi3+0x2d0>
   34f60:	01004034 	movhi	r4,256
   34f64:	39010336 	bltu	r7,r4,35374 <__umoddi3+0x580>
   34f68:	3808d63a 	srli	r4,r7,24
   34f6c:	02000604 	movi	r8,24
   34f70:	01400134 	movhi	r5,4
   34f74:	214b883a 	add	r5,r4,r5
   34f78:	2d228703 	ldbu	r20,-30180(r5)
   34f7c:	01000804 	movi	r4,32
   34f80:	a229883a 	add	r20,r20,r8
   34f84:	252bc83a 	sub	r21,r4,r20
   34f88:	2500531e 	bne	r4,r20,350d8 <__umoddi3+0x2e4>
   34f8c:	3c400136 	bltu	r7,r17,34f94 <__umoddi3+0x1a0>
   34f90:	81bfe436 	bltu	r16,r6,34f24 <__umoddi3+0x130>
   34f94:	8185c83a 	sub	r2,r16,r6
   34f98:	89cfc83a 	sub	r7,r17,r7
   34f9c:	8087803a 	cmpltu	r3,r16,r2
   34fa0:	38c7c83a 	sub	r3,r7,r3
   34fa4:	003fdf06 	br	34f24 <__umoddi3+0x130>
   34fa8:	3000041e 	bne	r6,zero,34fbc <__umoddi3+0x1c8>
   34fac:	000b883a 	mov	r5,zero
   34fb0:	01000044 	movi	r4,1
   34fb4:	0026a8c0 	call	26a8c <__udivsi3>
   34fb8:	1029883a 	mov	r20,r2
   34fbc:	00bfffd4 	movui	r2,65535
   34fc0:	1500362e 	bgeu	r2,r20,3509c <__umoddi3+0x2a8>
   34fc4:	00804034 	movhi	r2,256
   34fc8:	a080ed36 	bltu	r20,r2,35380 <__umoddi3+0x58c>
   34fcc:	a006d63a 	srli	r3,r20,24
   34fd0:	04800604 	movi	r18,24
   34fd4:	00800134 	movhi	r2,4
   34fd8:	1885883a 	add	r2,r3,r2
   34fdc:	15a28703 	ldbu	r22,-30180(r2)
   34fe0:	00800804 	movi	r2,32
   34fe4:	b4ad883a 	add	r22,r22,r18
   34fe8:	15a5c83a 	sub	r18,r2,r22
   34fec:	1580a51e 	bne	r2,r22,35284 <__umoddi3+0x490>
   34ff0:	a02ed43a 	srli	r23,r20,16
   34ff4:	8d23c83a 	sub	r17,r17,r20
   34ff8:	a57fffcc 	andi	r21,r20,65535
   34ffc:	8809883a 	mov	r4,r17
   35000:	b80b883a 	mov	r5,r23
   35004:	0026af00 	call	26af0 <__umodsi3>
   35008:	8809883a 	mov	r4,r17
   3500c:	b80b883a 	mov	r5,r23
   35010:	1023883a 	mov	r17,r2
   35014:	0026a8c0 	call	26a8c <__udivsi3>
   35018:	1009883a 	mov	r4,r2
   3501c:	a80b883a 	mov	r5,r21
   35020:	0026b4c0 	call	26b4c <__mulsi3>
   35024:	8822943a 	slli	r17,r17,16
   35028:	9808d43a 	srli	r4,r19,16
   3502c:	8908b03a 	or	r4,r17,r4
   35030:	2080032e 	bgeu	r4,r2,35040 <__umoddi3+0x24c>
   35034:	2509883a 	add	r4,r4,r20
   35038:	25000136 	bltu	r4,r20,35040 <__umoddi3+0x24c>
   3503c:	2080dc36 	bltu	r4,r2,353b0 <__umoddi3+0x5bc>
   35040:	20a1c83a 	sub	r16,r4,r2
   35044:	b80b883a 	mov	r5,r23
   35048:	8009883a 	mov	r4,r16
   3504c:	0026af00 	call	26af0 <__umodsi3>
   35050:	b80b883a 	mov	r5,r23
   35054:	8009883a 	mov	r4,r16
   35058:	1023883a 	mov	r17,r2
   3505c:	8822943a 	slli	r17,r17,16
   35060:	0026a8c0 	call	26a8c <__udivsi3>
   35064:	a80b883a 	mov	r5,r21
   35068:	1009883a 	mov	r4,r2
   3506c:	0026b4c0 	call	26b4c <__mulsi3>
   35070:	9cffffcc 	andi	r19,r19,65535
   35074:	8cc6b03a 	or	r3,r17,r19
   35078:	1880042e 	bgeu	r3,r2,3508c <__umoddi3+0x298>
   3507c:	1d07883a 	add	r3,r3,r20
   35080:	1d000236 	bltu	r3,r20,3508c <__umoddi3+0x298>
   35084:	1880012e 	bgeu	r3,r2,3508c <__umoddi3+0x298>
   35088:	1d07883a 	add	r3,r3,r20
   3508c:	1885c83a 	sub	r2,r3,r2
   35090:	1484d83a 	srl	r2,r2,r18
   35094:	0007883a 	mov	r3,zero
   35098:	003fa206 	br	34f24 <__umoddi3+0x130>
   3509c:	a0804030 	cmpltui	r2,r20,256
   350a0:	1000ba1e 	bne	r2,zero,3538c <__umoddi3+0x598>
   350a4:	a006d23a 	srli	r3,r20,8
   350a8:	04800204 	movi	r18,8
   350ac:	003fc906 	br	34fd4 <__umoddi3+0x1e0>
   350b0:	30804030 	cmpltui	r2,r6,256
   350b4:	1000ad1e 	bne	r2,zero,3536c <__umoddi3+0x578>
   350b8:	3006d23a 	srli	r3,r6,8
   350bc:	04800204 	movi	r18,8
   350c0:	003f6506 	br	34e58 <__umoddi3+0x64>
   350c4:	39004030 	cmpltui	r4,r7,256
   350c8:	2000b21e 	bne	r4,zero,35394 <__umoddi3+0x5a0>
   350cc:	3808d23a 	srli	r4,r7,8
   350d0:	02000204 	movi	r8,8
   350d4:	003fa606 	br	34f70 <__umoddi3+0x17c>
   350d8:	3d4e983a 	sll	r7,r7,r21
   350dc:	3508d83a 	srl	r4,r6,r20
   350e0:	8d2cd83a 	srl	r22,r17,r20
   350e4:	8504d83a 	srl	r2,r16,r20
   350e8:	21e4b03a 	or	r18,r4,r7
   350ec:	8d62983a 	sll	r17,r17,r21
   350f0:	9026d43a 	srli	r19,r18,16
   350f4:	354c983a 	sll	r6,r6,r21
   350f8:	1444b03a 	or	r2,r2,r17
   350fc:	b009883a 	mov	r4,r22
   35100:	980b883a 	mov	r5,r19
   35104:	d9800115 	stw	r6,4(sp)
   35108:	d8800015 	stw	r2,0(sp)
   3510c:	0026af00 	call	26af0 <__umodsi3>
   35110:	980b883a 	mov	r5,r19
   35114:	b009883a 	mov	r4,r22
   35118:	102f883a 	mov	r23,r2
   3511c:	947fffcc 	andi	r17,r18,65535
   35120:	0026a8c0 	call	26a8c <__udivsi3>
   35124:	8809883a 	mov	r4,r17
   35128:	100b883a 	mov	r5,r2
   3512c:	1039883a 	mov	fp,r2
   35130:	0026b4c0 	call	26b4c <__mulsi3>
   35134:	d8c00017 	ldw	r3,0(sp)
   35138:	b82e943a 	slli	r23,r23,16
   3513c:	8560983a 	sll	r16,r16,r21
   35140:	1808d43a 	srli	r4,r3,16
   35144:	b908b03a 	or	r4,r23,r4
   35148:	2080062e 	bgeu	r4,r2,35164 <__umoddi3+0x370>
   3514c:	2489883a 	add	r4,r4,r18
   35150:	e17fffc4 	addi	r5,fp,-1
   35154:	24809436 	bltu	r4,r18,353a8 <__umoddi3+0x5b4>
   35158:	2080932e 	bgeu	r4,r2,353a8 <__umoddi3+0x5b4>
   3515c:	e73fff84 	addi	fp,fp,-2
   35160:	2489883a 	add	r4,r4,r18
   35164:	20adc83a 	sub	r22,r4,r2
   35168:	980b883a 	mov	r5,r19
   3516c:	b009883a 	mov	r4,r22
   35170:	0026af00 	call	26af0 <__umodsi3>
   35174:	980b883a 	mov	r5,r19
   35178:	b009883a 	mov	r4,r22
   3517c:	102f883a 	mov	r23,r2
   35180:	0026a8c0 	call	26a8c <__udivsi3>
   35184:	100b883a 	mov	r5,r2
   35188:	8809883a 	mov	r4,r17
   3518c:	d8800215 	stw	r2,8(sp)
   35190:	0026b4c0 	call	26b4c <__mulsi3>
   35194:	d8c00017 	ldw	r3,0(sp)
   35198:	b82e943a 	slli	r23,r23,16
   3519c:	d9400217 	ldw	r5,8(sp)
   351a0:	1c7fffcc 	andi	r17,r3,65535
   351a4:	bc62b03a 	or	r17,r23,r17
   351a8:	8880062e 	bgeu	r17,r2,351c4 <__umoddi3+0x3d0>
   351ac:	8ca3883a 	add	r17,r17,r18
   351b0:	28ffffc4 	addi	r3,r5,-1
   351b4:	8c807a36 	bltu	r17,r18,353a0 <__umoddi3+0x5ac>
   351b8:	8880792e 	bgeu	r17,r2,353a0 <__umoddi3+0x5ac>
   351bc:	297fff84 	addi	r5,r5,-2
   351c0:	8ca3883a 	add	r17,r17,r18
   351c4:	e02c943a 	slli	r22,fp,16
   351c8:	d9c00117 	ldw	r7,4(sp)
   351cc:	29bfffcc 	andi	r6,r5,65535
   351d0:	b16cb03a 	or	r22,r22,r5
   351d4:	38ffffcc 	andi	r3,r7,65535
   351d8:	b02cd43a 	srli	r22,r22,16
   351dc:	180b883a 	mov	r5,r3
   351e0:	3009883a 	mov	r4,r6
   351e4:	3838d43a 	srli	fp,r7,16
   351e8:	182f883a 	mov	r23,r3
   351ec:	d9800015 	stw	r6,0(sp)
   351f0:	88a3c83a 	sub	r17,r17,r2
   351f4:	0026b4c0 	call	26b4c <__mulsi3>
   351f8:	b80b883a 	mov	r5,r23
   351fc:	b009883a 	mov	r4,r22
   35200:	102f883a 	mov	r23,r2
   35204:	0026b4c0 	call	26b4c <__mulsi3>
   35208:	e00b883a 	mov	r5,fp
   3520c:	b009883a 	mov	r4,r22
   35210:	102d883a 	mov	r22,r2
   35214:	0026b4c0 	call	26b4c <__mulsi3>
   35218:	d9800017 	ldw	r6,0(sp)
   3521c:	e00b883a 	mov	r5,fp
   35220:	1039883a 	mov	fp,r2
   35224:	3009883a 	mov	r4,r6
   35228:	0026b4c0 	call	26b4c <__mulsi3>
   3522c:	b808d43a 	srli	r4,r23,16
   35230:	1585883a 	add	r2,r2,r22
   35234:	2089883a 	add	r4,r4,r2
   35238:	2580022e 	bgeu	r4,r22,35244 <__umoddi3+0x450>
   3523c:	00800074 	movhi	r2,1
   35240:	e0b9883a 	add	fp,fp,r2
   35244:	2006d43a 	srli	r3,r4,16
   35248:	2008943a 	slli	r4,r4,16
   3524c:	bdffffcc 	andi	r23,r23,65535
   35250:	1f07883a 	add	r3,r3,fp
   35254:	25c9883a 	add	r4,r4,r23
   35258:	88c03a36 	bltu	r17,r3,35344 <__umoddi3+0x550>
   3525c:	88c03826 	beq	r17,r3,35340 <__umoddi3+0x54c>
   35260:	8109c83a 	sub	r4,r16,r4
   35264:	8121803a 	cmpltu	r16,r16,r4
   35268:	88c7c83a 	sub	r3,r17,r3
   3526c:	1c07c83a 	sub	r3,r3,r16
   35270:	1d04983a 	sll	r2,r3,r20
   35274:	2548d83a 	srl	r4,r4,r21
   35278:	1d46d83a 	srl	r3,r3,r21
   3527c:	1104b03a 	or	r2,r2,r4
   35280:	003f2806 	br	34f24 <__umoddi3+0x130>
   35284:	a4a8983a 	sll	r20,r20,r18
   35288:	8da6d83a 	srl	r19,r17,r22
   3528c:	8ca2983a 	sll	r17,r17,r18
   35290:	a02ed43a 	srli	r23,r20,16
   35294:	9809883a 	mov	r4,r19
   35298:	85acd83a 	srl	r22,r16,r22
   3529c:	b80b883a 	mov	r5,r23
   352a0:	0026af00 	call	26af0 <__umodsi3>
   352a4:	9809883a 	mov	r4,r19
   352a8:	b80b883a 	mov	r5,r23
   352ac:	b46cb03a 	or	r22,r22,r17
   352b0:	a57fffcc 	andi	r21,r20,65535
   352b4:	1023883a 	mov	r17,r2
   352b8:	0026a8c0 	call	26a8c <__udivsi3>
   352bc:	a809883a 	mov	r4,r21
   352c0:	100b883a 	mov	r5,r2
   352c4:	0026b4c0 	call	26b4c <__mulsi3>
   352c8:	8822943a 	slli	r17,r17,16
   352cc:	b008d43a 	srli	r4,r22,16
   352d0:	84a6983a 	sll	r19,r16,r18
   352d4:	8908b03a 	or	r4,r17,r4
   352d8:	2080042e 	bgeu	r4,r2,352ec <__umoddi3+0x4f8>
   352dc:	2509883a 	add	r4,r4,r20
   352e0:	25000236 	bltu	r4,r20,352ec <__umoddi3+0x4f8>
   352e4:	2080012e 	bgeu	r4,r2,352ec <__umoddi3+0x4f8>
   352e8:	2509883a 	add	r4,r4,r20
   352ec:	20a1c83a 	sub	r16,r4,r2
   352f0:	8009883a 	mov	r4,r16
   352f4:	b80b883a 	mov	r5,r23
   352f8:	0026af00 	call	26af0 <__umodsi3>
   352fc:	8009883a 	mov	r4,r16
   35300:	1021883a 	mov	r16,r2
   35304:	b80b883a 	mov	r5,r23
   35308:	8020943a 	slli	r16,r16,16
   3530c:	0026a8c0 	call	26a8c <__udivsi3>
   35310:	100b883a 	mov	r5,r2
   35314:	a809883a 	mov	r4,r21
   35318:	b47fffcc 	andi	r17,r22,65535
   3531c:	0026b4c0 	call	26b4c <__mulsi3>
   35320:	8462b03a 	or	r17,r16,r17
   35324:	8880042e 	bgeu	r17,r2,35338 <__umoddi3+0x544>
   35328:	8d23883a 	add	r17,r17,r20
   3532c:	8d000236 	bltu	r17,r20,35338 <__umoddi3+0x544>
   35330:	8880012e 	bgeu	r17,r2,35338 <__umoddi3+0x544>
   35334:	8d23883a 	add	r17,r17,r20
   35338:	88a3c83a 	sub	r17,r17,r2
   3533c:	003f2f06 	br	34ffc <__umoddi3+0x208>
   35340:	813fc72e 	bgeu	r16,r4,35260 <__umoddi3+0x46c>
   35344:	d8800117 	ldw	r2,4(sp)
   35348:	20a7c83a 	sub	r19,r4,r2
   3534c:	24c9803a 	cmpltu	r4,r4,r19
   35350:	2489883a 	add	r4,r4,r18
   35354:	1907c83a 	sub	r3,r3,r4
   35358:	9809883a 	mov	r4,r19
   3535c:	003fc006 	br	35260 <__umoddi3+0x46c>
   35360:	3006d43a 	srli	r3,r6,16
   35364:	04800404 	movi	r18,16
   35368:	003ebb06 	br	34e58 <__umoddi3+0x64>
   3536c:	3007883a 	mov	r3,r6
   35370:	003eb906 	br	34e58 <__umoddi3+0x64>
   35374:	3808d43a 	srli	r4,r7,16
   35378:	02000404 	movi	r8,16
   3537c:	003efc06 	br	34f70 <__umoddi3+0x17c>
   35380:	a006d43a 	srli	r3,r20,16
   35384:	04800404 	movi	r18,16
   35388:	003f1206 	br	34fd4 <__umoddi3+0x1e0>
   3538c:	a007883a 	mov	r3,r20
   35390:	003f1006 	br	34fd4 <__umoddi3+0x1e0>
   35394:	3809883a 	mov	r4,r7
   35398:	0011883a 	mov	r8,zero
   3539c:	003ef406 	br	34f70 <__umoddi3+0x17c>
   353a0:	180b883a 	mov	r5,r3
   353a4:	003f8706 	br	351c4 <__umoddi3+0x3d0>
   353a8:	2839883a 	mov	fp,r5
   353ac:	003f6d06 	br	35164 <__umoddi3+0x370>
   353b0:	2509883a 	add	r4,r4,r20
   353b4:	003f2206 	br	35040 <__umoddi3+0x24c>

000353b8 <__eqdf2>:
   353b8:	2810d53a 	srli	r8,r5,20
   353bc:	3806d53a 	srli	r3,r7,20
   353c0:	00800434 	movhi	r2,16
   353c4:	4201ffcc 	andi	r8,r8,2047
   353c8:	10bfffc4 	addi	r2,r2,-1
   353cc:	4241ffd8 	cmpnei	r9,r8,2047
   353d0:	2814d7fa 	srli	r10,r5,31
   353d4:	3816d7fa 	srli	r11,r7,31
   353d8:	288a703a 	and	r5,r5,r2
   353dc:	388e703a 	and	r7,r7,r2
   353e0:	1881ffcc 	andi	r2,r3,2047
   353e4:	48000626 	beq	r9,zero,35400 <__eqdf2+0x48>
   353e8:	10c1ffe0 	cmpeqi	r3,r2,2047
   353ec:	1800021e 	bne	r3,zero,353f8 <__eqdf2+0x40>
   353f0:	4080011e 	bne	r8,r2,353f8 <__eqdf2+0x40>
   353f4:	29c00826 	beq	r5,r7,35418 <__eqdf2+0x60>
   353f8:	00800044 	movi	r2,1
   353fc:	f800283a 	ret
   35400:	2906b03a 	or	r3,r5,r4
   35404:	183ffc1e 	bne	r3,zero,353f8 <__eqdf2+0x40>
   35408:	1081ffd8 	cmpnei	r2,r2,2047
   3540c:	103ffa1e 	bne	r2,zero,353f8 <__eqdf2+0x40>
   35410:	398eb03a 	or	r7,r7,r6
   35414:	383ff81e 	bne	r7,zero,353f8 <__eqdf2+0x40>
   35418:	21bff71e 	bne	r4,r6,353f8 <__eqdf2+0x40>
   3541c:	52c00426 	beq	r10,r11,35430 <__eqdf2+0x78>
   35420:	403ff51e 	bne	r8,zero,353f8 <__eqdf2+0x40>
   35424:	290ab03a 	or	r5,r5,r4
   35428:	2804c03a 	cmpne	r2,r5,zero
   3542c:	f800283a 	ret
   35430:	0005883a 	mov	r2,zero
   35434:	f800283a 	ret

00035438 <__unorddf2>:
   35438:	2806d53a 	srli	r3,r5,20
   3543c:	3810d53a 	srli	r8,r7,20
   35440:	02400434 	movhi	r9,16
   35444:	18c1ffcc 	andi	r3,r3,2047
   35448:	4a7fffc4 	addi	r9,r9,-1
   3544c:	18c1ffd8 	cmpnei	r3,r3,2047
   35450:	2a4a703a 	and	r5,r5,r9
   35454:	3a4e703a 	and	r7,r7,r9
   35458:	4201ffcc 	andi	r8,r8,2047
   3545c:	18000426 	beq	r3,zero,35470 <__unorddf2+0x38>
   35460:	4201ffd8 	cmpnei	r8,r8,2047
   35464:	40000626 	beq	r8,zero,35480 <__unorddf2+0x48>
   35468:	0005883a 	mov	r2,zero
   3546c:	f800283a 	ret
   35470:	290ab03a 	or	r5,r5,r4
   35474:	283ffa26 	beq	r5,zero,35460 <__unorddf2+0x28>
   35478:	00800044 	movi	r2,1
   3547c:	f800283a 	ret
   35480:	398eb03a 	or	r7,r7,r6
   35484:	3804c03a 	cmpne	r2,r7,zero
   35488:	f800283a 	ret

0003548c <__fixdfsi>:
   3548c:	2806d53a 	srli	r3,r5,20
   35490:	01800434 	movhi	r6,16
   35494:	31bfffc4 	addi	r6,r6,-1
   35498:	18c1ffcc 	andi	r3,r3,2047
   3549c:	19c0ffd0 	cmplti	r7,r3,1023
   354a0:	2810d7fa 	srli	r8,r5,31
   354a4:	298a703a 	and	r5,r5,r6
   354a8:	3800061e 	bne	r7,zero,354c4 <__fixdfsi+0x38>
   354ac:	18810790 	cmplti	r2,r3,1054
   354b0:	1000061e 	bne	r2,zero,354cc <__fixdfsi+0x40>
   354b4:	00a00034 	movhi	r2,32768
   354b8:	10bfffc4 	addi	r2,r2,-1
   354bc:	4085883a 	add	r2,r8,r2
   354c0:	f800283a 	ret
   354c4:	0005883a 	mov	r2,zero
   354c8:	f800283a 	ret
   354cc:	01810cc4 	movi	r6,1075
   354d0:	30cdc83a 	sub	r6,r6,r3
   354d4:	30800808 	cmpgei	r2,r6,32
   354d8:	29400434 	orhi	r5,r5,16
   354dc:	1000071e 	bne	r2,zero,354fc <__fixdfsi+0x70>
   354e0:	18befb44 	addi	r2,r3,-1043
   354e4:	2884983a 	sll	r2,r5,r2
   354e8:	2188d83a 	srl	r4,r4,r6
   354ec:	1104b03a 	or	r2,r2,r4
   354f0:	403ff526 	beq	r8,zero,354c8 <__fixdfsi+0x3c>
   354f4:	0085c83a 	sub	r2,zero,r2
   354f8:	f800283a 	ret
   354fc:	008104c4 	movi	r2,1043
   35500:	10c5c83a 	sub	r2,r2,r3
   35504:	2884d83a 	srl	r2,r5,r2
   35508:	003ff906 	br	354f0 <__fixdfsi+0x64>

0003550c <__floatunsidf>:
   3550c:	defffe04 	addi	sp,sp,-8
   35510:	dc000015 	stw	r16,0(sp)
   35514:	dfc00115 	stw	ra,4(sp)
   35518:	2021883a 	mov	r16,r4
   3551c:	20000f26 	beq	r4,zero,3555c <__floatunsidf+0x50>
   35520:	002a8940 	call	2a894 <__clzsi2>
   35524:	00c10784 	movi	r3,1054
   35528:	1887c83a 	sub	r3,r3,r2
   3552c:	110002c8 	cmpgei	r4,r2,11
   35530:	18c1ffcc 	andi	r3,r3,2047
   35534:	2000121e 	bne	r4,zero,35580 <__floatunsidf+0x74>
   35538:	014002c4 	movi	r5,11
   3553c:	288bc83a 	sub	r5,r5,r2
   35540:	814ad83a 	srl	r5,r16,r5
   35544:	01000434 	movhi	r4,16
   35548:	10800544 	addi	r2,r2,21
   3554c:	213fffc4 	addi	r4,r4,-1
   35550:	80a0983a 	sll	r16,r16,r2
   35554:	290a703a 	and	r5,r5,r4
   35558:	00000206 	br	35564 <__floatunsidf+0x58>
   3555c:	0007883a 	mov	r3,zero
   35560:	000b883a 	mov	r5,zero
   35564:	1806953a 	slli	r3,r3,20
   35568:	8005883a 	mov	r2,r16
   3556c:	1946b03a 	or	r3,r3,r5
   35570:	dfc00117 	ldw	ra,4(sp)
   35574:	dc000017 	ldw	r16,0(sp)
   35578:	dec00204 	addi	sp,sp,8
   3557c:	f800283a 	ret
   35580:	117ffd44 	addi	r5,r2,-11
   35584:	814a983a 	sll	r5,r16,r5
   35588:	00800434 	movhi	r2,16
   3558c:	10bfffc4 	addi	r2,r2,-1
   35590:	288a703a 	and	r5,r5,r2
   35594:	0021883a 	mov	r16,zero
   35598:	003ff206 	br	35564 <__floatunsidf+0x58>

0003559c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3559c:	defffe04 	addi	sp,sp,-8
   355a0:	dfc00115 	stw	ra,4(sp)
   355a4:	df000015 	stw	fp,0(sp)
   355a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   355ac:	d0a01217 	ldw	r2,-32696(gp)
   355b0:	10000326 	beq	r2,zero,355c0 <alt_get_errno+0x24>
   355b4:	d0a01217 	ldw	r2,-32696(gp)
   355b8:	103ee83a 	callr	r2
   355bc:	00000106 	br	355c4 <alt_get_errno+0x28>
   355c0:	d0a72c04 	addi	r2,gp,-25424
}
   355c4:	e037883a 	mov	sp,fp
   355c8:	dfc00117 	ldw	ra,4(sp)
   355cc:	df000017 	ldw	fp,0(sp)
   355d0:	dec00204 	addi	sp,sp,8
   355d4:	f800283a 	ret

000355d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   355d8:	defffb04 	addi	sp,sp,-20
   355dc:	dfc00415 	stw	ra,16(sp)
   355e0:	df000315 	stw	fp,12(sp)
   355e4:	df000304 	addi	fp,sp,12
   355e8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   355ec:	e0bffd17 	ldw	r2,-12(fp)
   355f0:	10000916 	blt	r2,zero,35618 <close+0x40>
   355f4:	e0fffd17 	ldw	r3,-12(fp)
   355f8:	1805883a 	mov	r2,r3
   355fc:	1085883a 	add	r2,r2,r2
   35600:	10c5883a 	add	r2,r2,r3
   35604:	100490ba 	slli	r2,r2,2
   35608:	00c00134 	movhi	r3,4
   3560c:	18e69704 	addi	r3,r3,-26020
   35610:	10c5883a 	add	r2,r2,r3
   35614:	00000106 	br	3561c <close+0x44>
   35618:	0005883a 	mov	r2,zero
   3561c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   35620:	e0bfff17 	ldw	r2,-4(fp)
   35624:	10001926 	beq	r2,zero,3568c <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   35628:	e0bfff17 	ldw	r2,-4(fp)
   3562c:	10800017 	ldw	r2,0(r2)
   35630:	10800417 	ldw	r2,16(r2)
   35634:	10000626 	beq	r2,zero,35650 <close+0x78>
   35638:	e0bfff17 	ldw	r2,-4(fp)
   3563c:	10800017 	ldw	r2,0(r2)
   35640:	10800417 	ldw	r2,16(r2)
   35644:	e13fff17 	ldw	r4,-4(fp)
   35648:	103ee83a 	callr	r2
   3564c:	00000106 	br	35654 <close+0x7c>
   35650:	0005883a 	mov	r2,zero
   35654:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   35658:	e13ffd17 	ldw	r4,-12(fp)
   3565c:	0035e940 	call	35e94 <alt_release_fd>
    if (rval < 0)
   35660:	e0bffe17 	ldw	r2,-8(fp)
   35664:	1000070e 	bge	r2,zero,35684 <close+0xac>
    {
      ALT_ERRNO = -rval;
   35668:	003559c0 	call	3559c <alt_get_errno>
   3566c:	1007883a 	mov	r3,r2
   35670:	e0bffe17 	ldw	r2,-8(fp)
   35674:	0085c83a 	sub	r2,zero,r2
   35678:	18800015 	stw	r2,0(r3)
      return -1;
   3567c:	00bfffc4 	movi	r2,-1
   35680:	00000706 	br	356a0 <close+0xc8>
    }
    return 0;
   35684:	0005883a 	mov	r2,zero
   35688:	00000506 	br	356a0 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   3568c:	003559c0 	call	3559c <alt_get_errno>
   35690:	1007883a 	mov	r3,r2
   35694:	00801444 	movi	r2,81
   35698:	18800015 	stw	r2,0(r3)
    return -1;
   3569c:	00bfffc4 	movi	r2,-1
  }
}
   356a0:	e037883a 	mov	sp,fp
   356a4:	dfc00117 	ldw	ra,4(sp)
   356a8:	df000017 	ldw	fp,0(sp)
   356ac:	dec00204 	addi	sp,sp,8
   356b0:	f800283a 	ret

000356b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   356b4:	defffc04 	addi	sp,sp,-16
   356b8:	df000315 	stw	fp,12(sp)
   356bc:	df000304 	addi	fp,sp,12
   356c0:	e13fff15 	stw	r4,-4(fp)
   356c4:	e17ffe15 	stw	r5,-8(fp)
   356c8:	e1bffd15 	stw	r6,-12(fp)
  return len;
   356cc:	e0bffd17 	ldw	r2,-12(fp)
}
   356d0:	e037883a 	mov	sp,fp
   356d4:	df000017 	ldw	fp,0(sp)
   356d8:	dec00104 	addi	sp,sp,4
   356dc:	f800283a 	ret

000356e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   356e0:	defffd04 	addi	sp,sp,-12
   356e4:	df000215 	stw	fp,8(sp)
   356e8:	df000204 	addi	fp,sp,8
   356ec:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   356f0:	0001883a 	nop
   356f4:	e0bffe17 	ldw	r2,-8(fp)
   356f8:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   356fc:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   35700:	10000226 	beq	r2,zero,3570c <_exit+0x2c>
    ALT_SIM_FAIL();
   35704:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   35708:	00000106 	br	35710 <_exit+0x30>
    ALT_SIM_PASS();
   3570c:	002af0b0 	cmpltui	zero,zero,43970
}
   35710:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   35714:	003fff06 	br	35714 <_exit+0x34>

00035718 <alt_get_errno>:
{
   35718:	defffe04 	addi	sp,sp,-8
   3571c:	dfc00115 	stw	ra,4(sp)
   35720:	df000015 	stw	fp,0(sp)
   35724:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   35728:	d0a01217 	ldw	r2,-32696(gp)
   3572c:	10000326 	beq	r2,zero,3573c <alt_get_errno+0x24>
   35730:	d0a01217 	ldw	r2,-32696(gp)
   35734:	103ee83a 	callr	r2
   35738:	00000106 	br	35740 <alt_get_errno+0x28>
   3573c:	d0a72c04 	addi	r2,gp,-25424
}
   35740:	e037883a 	mov	sp,fp
   35744:	dfc00117 	ldw	ra,4(sp)
   35748:	df000017 	ldw	fp,0(sp)
   3574c:	dec00204 	addi	sp,sp,8
   35750:	f800283a 	ret

00035754 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   35754:	defffb04 	addi	sp,sp,-20
   35758:	dfc00415 	stw	ra,16(sp)
   3575c:	df000315 	stw	fp,12(sp)
   35760:	df000304 	addi	fp,sp,12
   35764:	e13ffe15 	stw	r4,-8(fp)
   35768:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3576c:	e0bffe17 	ldw	r2,-8(fp)
   35770:	10000916 	blt	r2,zero,35798 <fstat+0x44>
   35774:	e0fffe17 	ldw	r3,-8(fp)
   35778:	1805883a 	mov	r2,r3
   3577c:	1085883a 	add	r2,r2,r2
   35780:	10c5883a 	add	r2,r2,r3
   35784:	100490ba 	slli	r2,r2,2
   35788:	00c00134 	movhi	r3,4
   3578c:	18e69704 	addi	r3,r3,-26020
   35790:	10c5883a 	add	r2,r2,r3
   35794:	00000106 	br	3579c <fstat+0x48>
   35798:	0005883a 	mov	r2,zero
   3579c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   357a0:	e0bfff17 	ldw	r2,-4(fp)
   357a4:	10001026 	beq	r2,zero,357e8 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   357a8:	e0bfff17 	ldw	r2,-4(fp)
   357ac:	10800017 	ldw	r2,0(r2)
   357b0:	10800817 	ldw	r2,32(r2)
   357b4:	10000726 	beq	r2,zero,357d4 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   357b8:	e0bfff17 	ldw	r2,-4(fp)
   357bc:	10800017 	ldw	r2,0(r2)
   357c0:	10800817 	ldw	r2,32(r2)
   357c4:	e17ffd17 	ldw	r5,-12(fp)
   357c8:	e13fff17 	ldw	r4,-4(fp)
   357cc:	103ee83a 	callr	r2
   357d0:	00000a06 	br	357fc <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   357d4:	e0bffd17 	ldw	r2,-12(fp)
   357d8:	00c80004 	movi	r3,8192
   357dc:	10c00115 	stw	r3,4(r2)
      return 0;
   357e0:	0005883a 	mov	r2,zero
   357e4:	00000506 	br	357fc <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   357e8:	00357180 	call	35718 <alt_get_errno>
   357ec:	1007883a 	mov	r3,r2
   357f0:	00801444 	movi	r2,81
   357f4:	18800015 	stw	r2,0(r3)
    return -1;
   357f8:	00bfffc4 	movi	r2,-1
  }
}
   357fc:	e037883a 	mov	sp,fp
   35800:	dfc00117 	ldw	ra,4(sp)
   35804:	df000017 	ldw	fp,0(sp)
   35808:	dec00204 	addi	sp,sp,8
   3580c:	f800283a 	ret

00035810 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   35810:	deffff04 	addi	sp,sp,-4
   35814:	df000015 	stw	fp,0(sp)
   35818:	d839883a 	mov	fp,sp
  return 0;
   3581c:	0005883a 	mov	r2,zero
}
   35820:	e037883a 	mov	sp,fp
   35824:	df000017 	ldw	fp,0(sp)
   35828:	dec00104 	addi	sp,sp,4
   3582c:	f800283a 	ret

00035830 <alt_get_errno>:
{
   35830:	defffe04 	addi	sp,sp,-8
   35834:	dfc00115 	stw	ra,4(sp)
   35838:	df000015 	stw	fp,0(sp)
   3583c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   35840:	d0a01217 	ldw	r2,-32696(gp)
   35844:	10000326 	beq	r2,zero,35854 <alt_get_errno+0x24>
   35848:	d0a01217 	ldw	r2,-32696(gp)
   3584c:	103ee83a 	callr	r2
   35850:	00000106 	br	35858 <alt_get_errno+0x28>
   35854:	d0a72c04 	addi	r2,gp,-25424
}
   35858:	e037883a 	mov	sp,fp
   3585c:	dfc00117 	ldw	ra,4(sp)
   35860:	df000017 	ldw	fp,0(sp)
   35864:	dec00204 	addi	sp,sp,8
   35868:	f800283a 	ret

0003586c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   3586c:	deffea04 	addi	sp,sp,-88
   35870:	dfc01515 	stw	ra,84(sp)
   35874:	df001415 	stw	fp,80(sp)
   35878:	df001404 	addi	fp,sp,80
   3587c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   35880:	e0bfec17 	ldw	r2,-80(fp)
   35884:	10000916 	blt	r2,zero,358ac <isatty+0x40>
   35888:	e0ffec17 	ldw	r3,-80(fp)
   3588c:	1805883a 	mov	r2,r3
   35890:	1085883a 	add	r2,r2,r2
   35894:	10c5883a 	add	r2,r2,r3
   35898:	100490ba 	slli	r2,r2,2
   3589c:	00c00134 	movhi	r3,4
   358a0:	18e69704 	addi	r3,r3,-26020
   358a4:	10c5883a 	add	r2,r2,r3
   358a8:	00000106 	br	358b0 <isatty+0x44>
   358ac:	0005883a 	mov	r2,zero
   358b0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   358b4:	e0bfff17 	ldw	r2,-4(fp)
   358b8:	10000e26 	beq	r2,zero,358f4 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   358bc:	e0bfff17 	ldw	r2,-4(fp)
   358c0:	10800017 	ldw	r2,0(r2)
   358c4:	10800817 	ldw	r2,32(r2)
   358c8:	1000021e 	bne	r2,zero,358d4 <isatty+0x68>
    {
      return 1;
   358cc:	00800044 	movi	r2,1
   358d0:	00000d06 	br	35908 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   358d4:	e0bfed04 	addi	r2,fp,-76
   358d8:	100b883a 	mov	r5,r2
   358dc:	e13fec17 	ldw	r4,-80(fp)
   358e0:	00357540 	call	35754 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   358e4:	e0bfee17 	ldw	r2,-72(fp)
   358e8:	10880020 	cmpeqi	r2,r2,8192
   358ec:	10803fcc 	andi	r2,r2,255
   358f0:	00000506 	br	35908 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   358f4:	00358300 	call	35830 <alt_get_errno>
   358f8:	1007883a 	mov	r3,r2
   358fc:	00801444 	movi	r2,81
   35900:	18800015 	stw	r2,0(r3)
    return 0;
   35904:	0005883a 	mov	r2,zero
  }
}
   35908:	e037883a 	mov	sp,fp
   3590c:	dfc00117 	ldw	ra,4(sp)
   35910:	df000017 	ldw	fp,0(sp)
   35914:	dec00204 	addi	sp,sp,8
   35918:	f800283a 	ret

0003591c <alt_get_errno>:
{
   3591c:	defffe04 	addi	sp,sp,-8
   35920:	dfc00115 	stw	ra,4(sp)
   35924:	df000015 	stw	fp,0(sp)
   35928:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3592c:	d0a01217 	ldw	r2,-32696(gp)
   35930:	10000326 	beq	r2,zero,35940 <alt_get_errno+0x24>
   35934:	d0a01217 	ldw	r2,-32696(gp)
   35938:	103ee83a 	callr	r2
   3593c:	00000106 	br	35944 <alt_get_errno+0x28>
   35940:	d0a72c04 	addi	r2,gp,-25424
}
   35944:	e037883a 	mov	sp,fp
   35948:	dfc00117 	ldw	ra,4(sp)
   3594c:	df000017 	ldw	fp,0(sp)
   35950:	dec00204 	addi	sp,sp,8
   35954:	f800283a 	ret

00035958 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   35958:	defffb04 	addi	sp,sp,-20
   3595c:	dfc00415 	stw	ra,16(sp)
   35960:	df000315 	stw	fp,12(sp)
   35964:	df000304 	addi	fp,sp,12
   35968:	e13ffe15 	stw	r4,-8(fp)
   3596c:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
   35970:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
   35974:	e0bffe17 	ldw	r2,-8(fp)
   35978:	00802e16 	blt	zero,r2,35a34 <kill+0xdc>
   3597c:	e0bffd17 	ldw	r2,-12(fp)
   35980:	10800828 	cmpgeui	r2,r2,32
   35984:	1000281e 	bne	r2,zero,35a28 <kill+0xd0>
   35988:	e0bffd17 	ldw	r2,-12(fp)
   3598c:	100690ba 	slli	r3,r2,2
   35990:	008000f4 	movhi	r2,3
   35994:	1885883a 	add	r2,r3,r2
   35998:	10966817 	ldw	r2,22944(r2)
   3599c:	1000683a 	jmp	r2
   359a0:	00035a48 	cmpgei	zero,zero,3433
   359a4:	00035a28 	cmpgeui	zero,zero,3432
   359a8:	00035a28 	cmpgeui	zero,zero,3432
   359ac:	00035a20 	cmpeqi	zero,zero,3432
   359b0:	00035a20 	cmpeqi	zero,zero,3432
   359b4:	00035a20 	cmpeqi	zero,zero,3432
   359b8:	00035a20 	cmpeqi	zero,zero,3432
   359bc:	00035a28 	cmpgeui	zero,zero,3432
   359c0:	00035a20 	cmpeqi	zero,zero,3432
   359c4:	00035a20 	cmpeqi	zero,zero,3432
   359c8:	00035a20 	cmpeqi	zero,zero,3432
   359cc:	00035a20 	cmpeqi	zero,zero,3432
   359d0:	00035a20 	cmpeqi	zero,zero,3432
   359d4:	00035a20 	cmpeqi	zero,zero,3432
   359d8:	00035a20 	cmpeqi	zero,zero,3432
   359dc:	00035a20 	cmpeqi	zero,zero,3432
   359e0:	00035a48 	cmpgei	zero,zero,3433
   359e4:	00035a28 	cmpgeui	zero,zero,3432
   359e8:	00035a28 	cmpgeui	zero,zero,3432
   359ec:	00035a28 	cmpgeui	zero,zero,3432
   359f0:	00035a48 	cmpgei	zero,zero,3433
   359f4:	00035a28 	cmpgeui	zero,zero,3432
   359f8:	00035a28 	cmpgeui	zero,zero,3432
   359fc:	00035a20 	cmpeqi	zero,zero,3432
   35a00:	00035a20 	cmpeqi	zero,zero,3432
   35a04:	00035a20 	cmpeqi	zero,zero,3432
   35a08:	00035a20 	cmpeqi	zero,zero,3432
   35a0c:	00035a20 	cmpeqi	zero,zero,3432
   35a10:	00035a28 	cmpgeui	zero,zero,3432
   35a14:	00035a28 	cmpgeui	zero,zero,3432
   35a18:	00035a20 	cmpeqi	zero,zero,3432
   35a1c:	00035a20 	cmpeqi	zero,zero,3432
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   35a20:	0009883a 	mov	r4,zero
   35a24:	00356e00 	call	356e0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   35a28:	00800584 	movi	r2,22
   35a2c:	e0bfff15 	stw	r2,-4(fp)
   35a30:	00000606 	br	35a4c <kill+0xf4>
    }
  }

  else if (pid > 0)
   35a34:	e0bffe17 	ldw	r2,-8(fp)
   35a38:	0080040e 	bge	zero,r2,35a4c <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   35a3c:	008000c4 	movi	r2,3
   35a40:	e0bfff15 	stw	r2,-4(fp)
   35a44:	00000106 	br	35a4c <kill+0xf4>
      break;
   35a48:	0001883a 	nop
  }

  if (status)
   35a4c:	e0bfff17 	ldw	r2,-4(fp)
   35a50:	10000626 	beq	r2,zero,35a6c <kill+0x114>
  {
    ALT_ERRNO = status;
   35a54:	003591c0 	call	3591c <alt_get_errno>
   35a58:	1007883a 	mov	r3,r2
   35a5c:	e0bfff17 	ldw	r2,-4(fp)
   35a60:	18800015 	stw	r2,0(r3)
    return -1;
   35a64:	00bfffc4 	movi	r2,-1
   35a68:	00000106 	br	35a70 <kill+0x118>
  }

  return 0;
   35a6c:	0005883a 	mov	r2,zero
}
   35a70:	e037883a 	mov	sp,fp
   35a74:	dfc00117 	ldw	ra,4(sp)
   35a78:	df000017 	ldw	fp,0(sp)
   35a7c:	dec00204 	addi	sp,sp,8
   35a80:	f800283a 	ret

00035a84 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   35a84:	defffc04 	addi	sp,sp,-16
   35a88:	df000315 	stw	fp,12(sp)
   35a8c:	df000304 	addi	fp,sp,12
   35a90:	e13fff15 	stw	r4,-4(fp)
   35a94:	e17ffe15 	stw	r5,-8(fp)
   35a98:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   35a9c:	e0fffe17 	ldw	r3,-8(fp)
   35aa0:	e0bfff17 	ldw	r2,-4(fp)
   35aa4:	18800c26 	beq	r3,r2,35ad8 <alt_load_section+0x54>
  {
    while( to != end )
   35aa8:	00000806 	br	35acc <alt_load_section+0x48>
    {
      *to++ = *from++;
   35aac:	e0ffff17 	ldw	r3,-4(fp)
   35ab0:	18800104 	addi	r2,r3,4
   35ab4:	e0bfff15 	stw	r2,-4(fp)
   35ab8:	e0bffe17 	ldw	r2,-8(fp)
   35abc:	11000104 	addi	r4,r2,4
   35ac0:	e13ffe15 	stw	r4,-8(fp)
   35ac4:	18c00017 	ldw	r3,0(r3)
   35ac8:	10c00015 	stw	r3,0(r2)
    while( to != end )
   35acc:	e0fffe17 	ldw	r3,-8(fp)
   35ad0:	e0bffd17 	ldw	r2,-12(fp)
   35ad4:	18bff51e 	bne	r3,r2,35aac <alt_load_section+0x28>
    }
  }
}
   35ad8:	0001883a 	nop
   35adc:	e037883a 	mov	sp,fp
   35ae0:	df000017 	ldw	fp,0(sp)
   35ae4:	dec00104 	addi	sp,sp,4
   35ae8:	f800283a 	ret

00035aec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   35aec:	defffe04 	addi	sp,sp,-8
   35af0:	dfc00115 	stw	ra,4(sp)
   35af4:	df000015 	stw	fp,0(sp)
   35af8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   35afc:	01800134 	movhi	r6,4
   35b00:	31ab3104 	addi	r6,r6,-21308
   35b04:	01400134 	movhi	r5,4
   35b08:	29642704 	addi	r5,r5,-28516
   35b0c:	01000134 	movhi	r4,4
   35b10:	212b3104 	addi	r4,r4,-21308
   35b14:	0035a840 	call	35a84 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   35b18:	018000b4 	movhi	r6,2
   35b1c:	31808904 	addi	r6,r6,548
   35b20:	014000b4 	movhi	r5,2
   35b24:	29400804 	addi	r5,r5,32
   35b28:	010000b4 	movhi	r4,2
   35b2c:	21000804 	addi	r4,r4,32
   35b30:	0035a840 	call	35a84 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   35b34:	01800134 	movhi	r6,4
   35b38:	31a42704 	addi	r6,r6,-28516
   35b3c:	01400134 	movhi	r5,4
   35b40:	29606004 	addi	r5,r5,-32384
   35b44:	01000134 	movhi	r4,4
   35b48:	21206004 	addi	r4,r4,-32384
   35b4c:	0035a840 	call	35a84 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   35b50:	00373b80 	call	373b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   35b54:	00375840 	call	37584 <alt_icache_flush_all>
}
   35b58:	0001883a 	nop
   35b5c:	e037883a 	mov	sp,fp
   35b60:	dfc00117 	ldw	ra,4(sp)
   35b64:	df000017 	ldw	fp,0(sp)
   35b68:	dec00204 	addi	sp,sp,8
   35b6c:	f800283a 	ret

00035b70 <alt_get_errno>:
{
   35b70:	defffe04 	addi	sp,sp,-8
   35b74:	dfc00115 	stw	ra,4(sp)
   35b78:	df000015 	stw	fp,0(sp)
   35b7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   35b80:	d0a01217 	ldw	r2,-32696(gp)
   35b84:	10000326 	beq	r2,zero,35b94 <alt_get_errno+0x24>
   35b88:	d0a01217 	ldw	r2,-32696(gp)
   35b8c:	103ee83a 	callr	r2
   35b90:	00000106 	br	35b98 <alt_get_errno+0x28>
   35b94:	d0a72c04 	addi	r2,gp,-25424
}
   35b98:	e037883a 	mov	sp,fp
   35b9c:	dfc00117 	ldw	ra,4(sp)
   35ba0:	df000017 	ldw	fp,0(sp)
   35ba4:	dec00204 	addi	sp,sp,8
   35ba8:	f800283a 	ret

00035bac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   35bac:	defff904 	addi	sp,sp,-28
   35bb0:	dfc00615 	stw	ra,24(sp)
   35bb4:	df000515 	stw	fp,20(sp)
   35bb8:	df000504 	addi	fp,sp,20
   35bbc:	e13ffd15 	stw	r4,-12(fp)
   35bc0:	e17ffc15 	stw	r5,-16(fp)
   35bc4:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   35bc8:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   35bcc:	e0bffd17 	ldw	r2,-12(fp)
   35bd0:	10000916 	blt	r2,zero,35bf8 <lseek+0x4c>
   35bd4:	e0fffd17 	ldw	r3,-12(fp)
   35bd8:	1805883a 	mov	r2,r3
   35bdc:	1085883a 	add	r2,r2,r2
   35be0:	10c5883a 	add	r2,r2,r3
   35be4:	100490ba 	slli	r2,r2,2
   35be8:	00c00134 	movhi	r3,4
   35bec:	18e69704 	addi	r3,r3,-26020
   35bf0:	10c5883a 	add	r2,r2,r3
   35bf4:	00000106 	br	35bfc <lseek+0x50>
   35bf8:	0005883a 	mov	r2,zero
   35bfc:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   35c00:	e0bffe17 	ldw	r2,-8(fp)
   35c04:	10001026 	beq	r2,zero,35c48 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   35c08:	e0bffe17 	ldw	r2,-8(fp)
   35c0c:	10800017 	ldw	r2,0(r2)
   35c10:	10800717 	ldw	r2,28(r2)
   35c14:	10000926 	beq	r2,zero,35c3c <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   35c18:	e0bffe17 	ldw	r2,-8(fp)
   35c1c:	10800017 	ldw	r2,0(r2)
   35c20:	10800717 	ldw	r2,28(r2)
   35c24:	e1bffb17 	ldw	r6,-20(fp)
   35c28:	e17ffc17 	ldw	r5,-16(fp)
   35c2c:	e13ffe17 	ldw	r4,-8(fp)
   35c30:	103ee83a 	callr	r2
   35c34:	e0bfff15 	stw	r2,-4(fp)
   35c38:	00000506 	br	35c50 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   35c3c:	00bfde84 	movi	r2,-134
   35c40:	e0bfff15 	stw	r2,-4(fp)
   35c44:	00000206 	br	35c50 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   35c48:	00bfebc4 	movi	r2,-81
   35c4c:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   35c50:	e0bfff17 	ldw	r2,-4(fp)
   35c54:	1000070e 	bge	r2,zero,35c74 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   35c58:	0035b700 	call	35b70 <alt_get_errno>
   35c5c:	1007883a 	mov	r3,r2
   35c60:	e0bfff17 	ldw	r2,-4(fp)
   35c64:	0085c83a 	sub	r2,zero,r2
   35c68:	18800015 	stw	r2,0(r3)
    rc = -1;
   35c6c:	00bfffc4 	movi	r2,-1
   35c70:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   35c74:	e0bfff17 	ldw	r2,-4(fp)
}
   35c78:	e037883a 	mov	sp,fp
   35c7c:	dfc00117 	ldw	ra,4(sp)
   35c80:	df000017 	ldw	fp,0(sp)
   35c84:	dec00204 	addi	sp,sp,8
   35c88:	f800283a 	ret

00035c8c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   35c8c:	defffd04 	addi	sp,sp,-12
   35c90:	dfc00215 	stw	ra,8(sp)
   35c94:	df000115 	stw	fp,4(sp)
   35c98:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   35c9c:	0009883a 	mov	r4,zero
   35ca0:	003630c0 	call	3630c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   35ca4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   35ca8:	00363480 	call	36348 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   35cac:	01800134 	movhi	r6,4
   35cb0:	31a41304 	addi	r6,r6,-28596
   35cb4:	01400134 	movhi	r5,4
   35cb8:	29641304 	addi	r5,r5,-28596
   35cbc:	01000134 	movhi	r4,4
   35cc0:	21241304 	addi	r4,r4,-28596
   35cc4:	00379100 	call	37910 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   35cc8:	00374bc0 	call	374bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   35ccc:	010000f4 	movhi	r4,3
   35cd0:	211d4804 	addi	r4,r4,29984
   35cd4:	0037f100 	call	37f10 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   35cd8:	d0a72e17 	ldw	r2,-25416(gp)
   35cdc:	d0e72f17 	ldw	r3,-25412(gp)
   35ce0:	d1273017 	ldw	r4,-25408(gp)
   35ce4:	200d883a 	mov	r6,r4
   35ce8:	180b883a 	mov	r5,r3
   35cec:	1009883a 	mov	r4,r2
   35cf0:	00238340 	call	23834 <main>
   35cf4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   35cf8:	01000044 	movi	r4,1
   35cfc:	00355d80 	call	355d8 <close>
  exit (result);
   35d00:	e13fff17 	ldw	r4,-4(fp)
   35d04:	0037f240 	call	37f24 <exit>

00035d08 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   35d08:	defffe04 	addi	sp,sp,-8
   35d0c:	df000115 	stw	fp,4(sp)
   35d10:	df000104 	addi	fp,sp,4
   35d14:	e13fff15 	stw	r4,-4(fp)
}
   35d18:	0001883a 	nop
   35d1c:	e037883a 	mov	sp,fp
   35d20:	df000017 	ldw	fp,0(sp)
   35d24:	dec00104 	addi	sp,sp,4
   35d28:	f800283a 	ret

00035d2c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   35d2c:	defffe04 	addi	sp,sp,-8
   35d30:	df000115 	stw	fp,4(sp)
   35d34:	df000104 	addi	fp,sp,4
   35d38:	e13fff15 	stw	r4,-4(fp)
}
   35d3c:	0001883a 	nop
   35d40:	e037883a 	mov	sp,fp
   35d44:	df000017 	ldw	fp,0(sp)
   35d48:	dec00104 	addi	sp,sp,4
   35d4c:	f800283a 	ret

00035d50 <alt_get_errno>:
{
   35d50:	defffe04 	addi	sp,sp,-8
   35d54:	dfc00115 	stw	ra,4(sp)
   35d58:	df000015 	stw	fp,0(sp)
   35d5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   35d60:	d0a01217 	ldw	r2,-32696(gp)
   35d64:	10000326 	beq	r2,zero,35d74 <alt_get_errno+0x24>
   35d68:	d0a01217 	ldw	r2,-32696(gp)
   35d6c:	103ee83a 	callr	r2
   35d70:	00000106 	br	35d78 <alt_get_errno+0x28>
   35d74:	d0a72c04 	addi	r2,gp,-25424
}
   35d78:	e037883a 	mov	sp,fp
   35d7c:	dfc00117 	ldw	ra,4(sp)
   35d80:	df000017 	ldw	fp,0(sp)
   35d84:	dec00204 	addi	sp,sp,8
   35d88:	f800283a 	ret

00035d8c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   35d8c:	defff904 	addi	sp,sp,-28
   35d90:	dfc00615 	stw	ra,24(sp)
   35d94:	df000515 	stw	fp,20(sp)
   35d98:	df000504 	addi	fp,sp,20
   35d9c:	e13ffd15 	stw	r4,-12(fp)
   35da0:	e17ffc15 	stw	r5,-16(fp)
   35da4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   35da8:	e0bffd17 	ldw	r2,-12(fp)
   35dac:	10000916 	blt	r2,zero,35dd4 <read+0x48>
   35db0:	e0fffd17 	ldw	r3,-12(fp)
   35db4:	1805883a 	mov	r2,r3
   35db8:	1085883a 	add	r2,r2,r2
   35dbc:	10c5883a 	add	r2,r2,r3
   35dc0:	100490ba 	slli	r2,r2,2
   35dc4:	00c00134 	movhi	r3,4
   35dc8:	18e69704 	addi	r3,r3,-26020
   35dcc:	10c5883a 	add	r2,r2,r3
   35dd0:	00000106 	br	35dd8 <read+0x4c>
   35dd4:	0005883a 	mov	r2,zero
   35dd8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   35ddc:	e0bfff17 	ldw	r2,-4(fp)
   35de0:	10002226 	beq	r2,zero,35e6c <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   35de4:	e0bfff17 	ldw	r2,-4(fp)
   35de8:	10800217 	ldw	r2,8(r2)
   35dec:	108000cc 	andi	r2,r2,3
   35df0:	10800060 	cmpeqi	r2,r2,1
   35df4:	1000181e 	bne	r2,zero,35e58 <read+0xcc>
        (fd->dev->read))
   35df8:	e0bfff17 	ldw	r2,-4(fp)
   35dfc:	10800017 	ldw	r2,0(r2)
   35e00:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   35e04:	10001426 	beq	r2,zero,35e58 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   35e08:	e0bfff17 	ldw	r2,-4(fp)
   35e0c:	10800017 	ldw	r2,0(r2)
   35e10:	10800517 	ldw	r2,20(r2)
   35e14:	e0fffb17 	ldw	r3,-20(fp)
   35e18:	180d883a 	mov	r6,r3
   35e1c:	e17ffc17 	ldw	r5,-16(fp)
   35e20:	e13fff17 	ldw	r4,-4(fp)
   35e24:	103ee83a 	callr	r2
   35e28:	e0bffe15 	stw	r2,-8(fp)
   35e2c:	e0bffe17 	ldw	r2,-8(fp)
   35e30:	1000070e 	bge	r2,zero,35e50 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   35e34:	0035d500 	call	35d50 <alt_get_errno>
   35e38:	1007883a 	mov	r3,r2
   35e3c:	e0bffe17 	ldw	r2,-8(fp)
   35e40:	0085c83a 	sub	r2,zero,r2
   35e44:	18800015 	stw	r2,0(r3)
          return -1;
   35e48:	00bfffc4 	movi	r2,-1
   35e4c:	00000c06 	br	35e80 <read+0xf4>
        }
        return rval;
   35e50:	e0bffe17 	ldw	r2,-8(fp)
   35e54:	00000a06 	br	35e80 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   35e58:	0035d500 	call	35d50 <alt_get_errno>
   35e5c:	1007883a 	mov	r3,r2
   35e60:	00800344 	movi	r2,13
   35e64:	18800015 	stw	r2,0(r3)
   35e68:	00000406 	br	35e7c <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   35e6c:	0035d500 	call	35d50 <alt_get_errno>
   35e70:	1007883a 	mov	r3,r2
   35e74:	00801444 	movi	r2,81
   35e78:	18800015 	stw	r2,0(r3)
  }
  return -1;
   35e7c:	00bfffc4 	movi	r2,-1
}
   35e80:	e037883a 	mov	sp,fp
   35e84:	dfc00117 	ldw	ra,4(sp)
   35e88:	df000017 	ldw	fp,0(sp)
   35e8c:	dec00204 	addi	sp,sp,8
   35e90:	f800283a 	ret

00035e94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   35e94:	defffe04 	addi	sp,sp,-8
   35e98:	df000115 	stw	fp,4(sp)
   35e9c:	df000104 	addi	fp,sp,4
   35ea0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   35ea4:	e0bfff17 	ldw	r2,-4(fp)
   35ea8:	108000d0 	cmplti	r2,r2,3
   35eac:	1000101e 	bne	r2,zero,35ef0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   35eb0:	e0ffff17 	ldw	r3,-4(fp)
   35eb4:	1805883a 	mov	r2,r3
   35eb8:	1085883a 	add	r2,r2,r2
   35ebc:	10c5883a 	add	r2,r2,r3
   35ec0:	100490ba 	slli	r2,r2,2
   35ec4:	00c00134 	movhi	r3,4
   35ec8:	10c7883a 	add	r3,r2,r3
   35ecc:	18269915 	stw	zero,-26012(r3)
    alt_fd_list[fd].dev      = 0;
   35ed0:	e0ffff17 	ldw	r3,-4(fp)
   35ed4:	1805883a 	mov	r2,r3
   35ed8:	1085883a 	add	r2,r2,r2
   35edc:	10c5883a 	add	r2,r2,r3
   35ee0:	100490ba 	slli	r2,r2,2
   35ee4:	00c00134 	movhi	r3,4
   35ee8:	10c7883a 	add	r3,r2,r3
   35eec:	18269715 	stw	zero,-26020(r3)
  }
}
   35ef0:	0001883a 	nop
   35ef4:	e037883a 	mov	sp,fp
   35ef8:	df000017 	ldw	fp,0(sp)
   35efc:	dec00104 	addi	sp,sp,4
   35f00:	f800283a 	ret

00035f04 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   35f04:	defff904 	addi	sp,sp,-28
   35f08:	df000615 	stw	fp,24(sp)
   35f0c:	df000604 	addi	fp,sp,24
   35f10:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   35f14:	0005303a 	rdctl	r2,status
   35f18:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   35f1c:	e0fffd17 	ldw	r3,-12(fp)
   35f20:	00bfff84 	movi	r2,-2
   35f24:	1884703a 	and	r2,r3,r2
   35f28:	1001703a 	wrctl	status,r2
  return context;
   35f2c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   35f30:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   35f34:	d0a01317 	ldw	r2,-32692(gp)
   35f38:	10c000c4 	addi	r3,r2,3
   35f3c:	00bfff04 	movi	r2,-4
   35f40:	1884703a 	and	r2,r3,r2
   35f44:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   35f48:	d0e01317 	ldw	r3,-32692(gp)
   35f4c:	e0bffa17 	ldw	r2,-24(fp)
   35f50:	1887883a 	add	r3,r3,r2
   35f54:	00800134 	movhi	r2,4
   35f58:	10800004 	addi	r2,r2,0
   35f5c:	10c0072e 	bgeu	r2,r3,35f7c <sbrk+0x78>
   35f60:	e0bfff17 	ldw	r2,-4(fp)
   35f64:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   35f68:	e0bffc17 	ldw	r2,-16(fp)
   35f6c:	1001703a 	wrctl	status,r2
}
   35f70:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   35f74:	00bfffc4 	movi	r2,-1
   35f78:	00000c06 	br	35fac <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   35f7c:	d0a01317 	ldw	r2,-32692(gp)
   35f80:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   35f84:	d0e01317 	ldw	r3,-32692(gp)
   35f88:	e0bffa17 	ldw	r2,-24(fp)
   35f8c:	1885883a 	add	r2,r3,r2
   35f90:	d0a01315 	stw	r2,-32692(gp)
   35f94:	e0bfff17 	ldw	r2,-4(fp)
   35f98:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   35f9c:	e0bffb17 	ldw	r2,-20(fp)
   35fa0:	1001703a 	wrctl	status,r2
}
   35fa4:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   35fa8:	e0bffe17 	ldw	r2,-8(fp)
} 
   35fac:	e037883a 	mov	sp,fp
   35fb0:	df000017 	ldw	fp,0(sp)
   35fb4:	dec00104 	addi	sp,sp,4
   35fb8:	f800283a 	ret

00035fbc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   35fbc:	defffa04 	addi	sp,sp,-24
   35fc0:	df000515 	stw	fp,20(sp)
   35fc4:	df000504 	addi	fp,sp,20
   35fc8:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   35fcc:	0005303a 	rdctl	r2,status
   35fd0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   35fd4:	e0fffc17 	ldw	r3,-16(fp)
   35fd8:	00bfff84 	movi	r2,-2
   35fdc:	1884703a 	and	r2,r3,r2
   35fe0:	1001703a 	wrctl	status,r2
  return context;
   35fe4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   35fe8:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   35fec:	e0bffb17 	ldw	r2,-20(fp)
   35ff0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   35ff4:	e0bffd17 	ldw	r2,-12(fp)
   35ff8:	10800017 	ldw	r2,0(r2)
   35ffc:	e0fffd17 	ldw	r3,-12(fp)
   36000:	18c00117 	ldw	r3,4(r3)
   36004:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   36008:	e0bffd17 	ldw	r2,-12(fp)
   3600c:	10800117 	ldw	r2,4(r2)
   36010:	e0fffd17 	ldw	r3,-12(fp)
   36014:	18c00017 	ldw	r3,0(r3)
   36018:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   3601c:	e0bffd17 	ldw	r2,-12(fp)
   36020:	e0fffd17 	ldw	r3,-12(fp)
   36024:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   36028:	e0bffd17 	ldw	r2,-12(fp)
   3602c:	e0fffd17 	ldw	r3,-12(fp)
   36030:	10c00015 	stw	r3,0(r2)
} 
   36034:	0001883a 	nop
   36038:	e0bfff17 	ldw	r2,-4(fp)
   3603c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   36040:	e0bffe17 	ldw	r2,-8(fp)
   36044:	1001703a 	wrctl	status,r2
}
   36048:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   3604c:	0001883a 	nop
   36050:	e037883a 	mov	sp,fp
   36054:	df000017 	ldw	fp,0(sp)
   36058:	dec00104 	addi	sp,sp,4
   3605c:	f800283a 	ret

00036060 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   36060:	defffb04 	addi	sp,sp,-20
   36064:	dfc00415 	stw	ra,16(sp)
   36068:	df000315 	stw	fp,12(sp)
   3606c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   36070:	d0a01417 	ldw	r2,-32688(gp)
   36074:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   36078:	d0a73217 	ldw	r2,-25400(gp)
   3607c:	10800044 	addi	r2,r2,1
   36080:	d0a73215 	stw	r2,-25400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   36084:	00002e06 	br	36140 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   36088:	e0bfff17 	ldw	r2,-4(fp)
   3608c:	10800017 	ldw	r2,0(r2)
   36090:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   36094:	e0bfff17 	ldw	r2,-4(fp)
   36098:	10800403 	ldbu	r2,16(r2)
   3609c:	10803fcc 	andi	r2,r2,255
   360a0:	10000426 	beq	r2,zero,360b4 <alt_tick+0x54>
   360a4:	d0a73217 	ldw	r2,-25400(gp)
   360a8:	1000021e 	bne	r2,zero,360b4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   360ac:	e0bfff17 	ldw	r2,-4(fp)
   360b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   360b4:	e0bfff17 	ldw	r2,-4(fp)
   360b8:	10800217 	ldw	r2,8(r2)
   360bc:	d0e73217 	ldw	r3,-25400(gp)
   360c0:	18801d36 	bltu	r3,r2,36138 <alt_tick+0xd8>
   360c4:	e0bfff17 	ldw	r2,-4(fp)
   360c8:	10800403 	ldbu	r2,16(r2)
   360cc:	10803fcc 	andi	r2,r2,255
   360d0:	1000191e 	bne	r2,zero,36138 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   360d4:	e0bfff17 	ldw	r2,-4(fp)
   360d8:	10800317 	ldw	r2,12(r2)
   360dc:	e0ffff17 	ldw	r3,-4(fp)
   360e0:	18c00517 	ldw	r3,20(r3)
   360e4:	1809883a 	mov	r4,r3
   360e8:	103ee83a 	callr	r2
   360ec:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   360f0:	e0bffd17 	ldw	r2,-12(fp)
   360f4:	1000031e 	bne	r2,zero,36104 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   360f8:	e13fff17 	ldw	r4,-4(fp)
   360fc:	0035fbc0 	call	35fbc <alt_alarm_stop>
   36100:	00000d06 	br	36138 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   36104:	e0bfff17 	ldw	r2,-4(fp)
   36108:	10c00217 	ldw	r3,8(r2)
   3610c:	e0bffd17 	ldw	r2,-12(fp)
   36110:	1887883a 	add	r3,r3,r2
   36114:	e0bfff17 	ldw	r2,-4(fp)
   36118:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   3611c:	e0bfff17 	ldw	r2,-4(fp)
   36120:	10c00217 	ldw	r3,8(r2)
   36124:	d0a73217 	ldw	r2,-25400(gp)
   36128:	1880032e 	bgeu	r3,r2,36138 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   3612c:	e0bfff17 	ldw	r2,-4(fp)
   36130:	00c00044 	movi	r3,1
   36134:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   36138:	e0bffe17 	ldw	r2,-8(fp)
   3613c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   36140:	e0ffff17 	ldw	r3,-4(fp)
   36144:	d0a01404 	addi	r2,gp,-32688
   36148:	18bfcf1e 	bne	r3,r2,36088 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   3614c:	0001883a 	nop
}
   36150:	0001883a 	nop
   36154:	e037883a 	mov	sp,fp
   36158:	dfc00117 	ldw	ra,4(sp)
   3615c:	df000017 	ldw	fp,0(sp)
   36160:	dec00204 	addi	sp,sp,8
   36164:	f800283a 	ret

00036168 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   36168:	defffd04 	addi	sp,sp,-12
   3616c:	dfc00215 	stw	ra,8(sp)
   36170:	df000115 	stw	fp,4(sp)
   36174:	df000104 	addi	fp,sp,4
   36178:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   3617c:	e13fff17 	ldw	r4,-4(fp)
   36180:	00372600 	call	37260 <alt_busy_sleep>
}
   36184:	e037883a 	mov	sp,fp
   36188:	dfc00117 	ldw	ra,4(sp)
   3618c:	df000017 	ldw	fp,0(sp)
   36190:	dec00204 	addi	sp,sp,8
   36194:	f800283a 	ret

00036198 <alt_get_errno>:
{
   36198:	defffe04 	addi	sp,sp,-8
   3619c:	dfc00115 	stw	ra,4(sp)
   361a0:	df000015 	stw	fp,0(sp)
   361a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   361a8:	d0a01217 	ldw	r2,-32696(gp)
   361ac:	10000326 	beq	r2,zero,361bc <alt_get_errno+0x24>
   361b0:	d0a01217 	ldw	r2,-32696(gp)
   361b4:	103ee83a 	callr	r2
   361b8:	00000106 	br	361c0 <alt_get_errno+0x28>
   361bc:	d0a72c04 	addi	r2,gp,-25424
}
   361c0:	e037883a 	mov	sp,fp
   361c4:	dfc00117 	ldw	ra,4(sp)
   361c8:	df000017 	ldw	fp,0(sp)
   361cc:	dec00204 	addi	sp,sp,8
   361d0:	f800283a 	ret

000361d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   361d4:	defff904 	addi	sp,sp,-28
   361d8:	dfc00615 	stw	ra,24(sp)
   361dc:	df000515 	stw	fp,20(sp)
   361e0:	df000504 	addi	fp,sp,20
   361e4:	e13ffd15 	stw	r4,-12(fp)
   361e8:	e17ffc15 	stw	r5,-16(fp)
   361ec:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   361f0:	e0bffd17 	ldw	r2,-12(fp)
   361f4:	10000916 	blt	r2,zero,3621c <write+0x48>
   361f8:	e0fffd17 	ldw	r3,-12(fp)
   361fc:	1805883a 	mov	r2,r3
   36200:	1085883a 	add	r2,r2,r2
   36204:	10c5883a 	add	r2,r2,r3
   36208:	100490ba 	slli	r2,r2,2
   3620c:	00c00134 	movhi	r3,4
   36210:	18e69704 	addi	r3,r3,-26020
   36214:	10c5883a 	add	r2,r2,r3
   36218:	00000106 	br	36220 <write+0x4c>
   3621c:	0005883a 	mov	r2,zero
   36220:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   36224:	e0bfff17 	ldw	r2,-4(fp)
   36228:	10002126 	beq	r2,zero,362b0 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   3622c:	e0bfff17 	ldw	r2,-4(fp)
   36230:	10800217 	ldw	r2,8(r2)
   36234:	108000cc 	andi	r2,r2,3
   36238:	10001826 	beq	r2,zero,3629c <write+0xc8>
   3623c:	e0bfff17 	ldw	r2,-4(fp)
   36240:	10800017 	ldw	r2,0(r2)
   36244:	10800617 	ldw	r2,24(r2)
   36248:	10001426 	beq	r2,zero,3629c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   3624c:	e0bfff17 	ldw	r2,-4(fp)
   36250:	10800017 	ldw	r2,0(r2)
   36254:	10800617 	ldw	r2,24(r2)
   36258:	e0fffb17 	ldw	r3,-20(fp)
   3625c:	180d883a 	mov	r6,r3
   36260:	e17ffc17 	ldw	r5,-16(fp)
   36264:	e13fff17 	ldw	r4,-4(fp)
   36268:	103ee83a 	callr	r2
   3626c:	e0bffe15 	stw	r2,-8(fp)
   36270:	e0bffe17 	ldw	r2,-8(fp)
   36274:	1000070e 	bge	r2,zero,36294 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   36278:	00361980 	call	36198 <alt_get_errno>
   3627c:	1007883a 	mov	r3,r2
   36280:	e0bffe17 	ldw	r2,-8(fp)
   36284:	0085c83a 	sub	r2,zero,r2
   36288:	18800015 	stw	r2,0(r3)
        return -1;
   3628c:	00bfffc4 	movi	r2,-1
   36290:	00000c06 	br	362c4 <write+0xf0>
      }
      return rval;
   36294:	e0bffe17 	ldw	r2,-8(fp)
   36298:	00000a06 	br	362c4 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   3629c:	00361980 	call	36198 <alt_get_errno>
   362a0:	1007883a 	mov	r3,r2
   362a4:	00800344 	movi	r2,13
   362a8:	18800015 	stw	r2,0(r3)
   362ac:	00000406 	br	362c0 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   362b0:	00361980 	call	36198 <alt_get_errno>
   362b4:	1007883a 	mov	r3,r2
   362b8:	00801444 	movi	r2,81
   362bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   362c0:	00bfffc4 	movi	r2,-1
}
   362c4:	e037883a 	mov	sp,fp
   362c8:	dfc00117 	ldw	ra,4(sp)
   362cc:	df000017 	ldw	fp,0(sp)
   362d0:	dec00204 	addi	sp,sp,8
   362d4:	f800283a 	ret

000362d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   362d8:	defffd04 	addi	sp,sp,-12
   362dc:	dfc00215 	stw	ra,8(sp)
   362e0:	df000115 	stw	fp,4(sp)
   362e4:	df000104 	addi	fp,sp,4
   362e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   362ec:	d1600f04 	addi	r5,gp,-32708
   362f0:	e13fff17 	ldw	r4,-4(fp)
   362f4:	00374140 	call	37414 <alt_dev_llist_insert>
}
   362f8:	e037883a 	mov	sp,fp
   362fc:	dfc00117 	ldw	ra,4(sp)
   36300:	df000017 	ldw	fp,0(sp)
   36304:	dec00204 	addi	sp,sp,8
   36308:	f800283a 	ret

0003630c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   3630c:	defffd04 	addi	sp,sp,-12
   36310:	dfc00215 	stw	ra,8(sp)
   36314:	df000115 	stw	fp,4(sp)
   36318:	df000104 	addi	fp,sp,4
   3631c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_SYSTEM_NIOS2_GEN2, nios_system_nios2_gen2);
   36320:	0037c040 	call	37c04 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   36324:	00800044 	movi	r2,1
   36328:	1001703a 	wrctl	status,r2
}
   3632c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   36330:	0001883a 	nop
   36334:	e037883a 	mov	sp,fp
   36338:	dfc00117 	ldw	ra,4(sp)
   3633c:	df000017 	ldw	fp,0(sp)
   36340:	dec00204 	addi	sp,sp,8
   36344:	f800283a 	ret

00036348 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   36348:	defffe04 	addi	sp,sp,-8
   3634c:	dfc00115 	stw	ra,4(sp)
   36350:	df000015 	stw	fp,0(sp)
   36354:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( NIOS_SYSTEM_TIMER, nios_system_timer);
   36358:	01c0fa04 	movi	r7,1000
   3635c:	01800044 	movi	r6,1
   36360:	000b883a 	mov	r5,zero
   36364:	01000134 	movhi	r4,4
   36368:	21041804 	addi	r4,r4,4192
   3636c:	00370a80 	call	370a8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( NIOS_SYSTEM_JTAG_UART, nios_system_jtag_uart);
   36370:	000d883a 	mov	r6,zero
   36374:	000b883a 	mov	r5,zero
   36378:	01000134 	movhi	r4,4
   3637c:	21270104 	addi	r4,r4,-25596
   36380:	00365200 	call	36520 <altera_avalon_jtag_uart_init>
   36384:	01000134 	movhi	r4,4
   36388:	2126f704 	addi	r4,r4,-25636
   3638c:	00362d80 	call	362d8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( NIOS_SYSTEM_SPI_0, nios_system_spi_0);
   36390:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( NIOS_SYSTEM_SYSID_QSYS, nios_system_sysid_qsys);
   36394:	0001883a 	nop
    ALTERA_UP_AVALON_ADC_INIT ( NIOS_SYSTEM_ADC_0, nios_system_adc_0);
   36398:	01000134 	movhi	r4,4
   3639c:	212b0f04 	addi	r4,r4,-21444
   363a0:	00362d80 	call	362d8 <alt_dev_reg>
}
   363a4:	0001883a 	nop
   363a8:	e037883a 	mov	sp,fp
   363ac:	dfc00117 	ldw	ra,4(sp)
   363b0:	df000017 	ldw	fp,0(sp)
   363b4:	dec00204 	addi	sp,sp,8
   363b8:	f800283a 	ret

000363bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   363bc:	defffa04 	addi	sp,sp,-24
   363c0:	dfc00515 	stw	ra,20(sp)
   363c4:	df000415 	stw	fp,16(sp)
   363c8:	df000404 	addi	fp,sp,16
   363cc:	e13ffe15 	stw	r4,-8(fp)
   363d0:	e17ffd15 	stw	r5,-12(fp)
   363d4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   363d8:	e0bffe17 	ldw	r2,-8(fp)
   363dc:	10800017 	ldw	r2,0(r2)
   363e0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   363e4:	e0bfff17 	ldw	r2,-4(fp)
   363e8:	10c00a04 	addi	r3,r2,40
   363ec:	e0bffe17 	ldw	r2,-8(fp)
   363f0:	10800217 	ldw	r2,8(r2)
   363f4:	100f883a 	mov	r7,r2
   363f8:	e1bffc17 	ldw	r6,-16(fp)
   363fc:	e17ffd17 	ldw	r5,-12(fp)
   36400:	1809883a 	mov	r4,r3
   36404:	00369e80 	call	369e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   36408:	e037883a 	mov	sp,fp
   3640c:	dfc00117 	ldw	ra,4(sp)
   36410:	df000017 	ldw	fp,0(sp)
   36414:	dec00204 	addi	sp,sp,8
   36418:	f800283a 	ret

0003641c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   3641c:	defffa04 	addi	sp,sp,-24
   36420:	dfc00515 	stw	ra,20(sp)
   36424:	df000415 	stw	fp,16(sp)
   36428:	df000404 	addi	fp,sp,16
   3642c:	e13ffe15 	stw	r4,-8(fp)
   36430:	e17ffd15 	stw	r5,-12(fp)
   36434:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   36438:	e0bffe17 	ldw	r2,-8(fp)
   3643c:	10800017 	ldw	r2,0(r2)
   36440:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   36444:	e0bfff17 	ldw	r2,-4(fp)
   36448:	10c00a04 	addi	r3,r2,40
   3644c:	e0bffe17 	ldw	r2,-8(fp)
   36450:	10800217 	ldw	r2,8(r2)
   36454:	100f883a 	mov	r7,r2
   36458:	e1bffc17 	ldw	r6,-16(fp)
   3645c:	e17ffd17 	ldw	r5,-12(fp)
   36460:	1809883a 	mov	r4,r3
   36464:	0036c080 	call	36c08 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   36468:	e037883a 	mov	sp,fp
   3646c:	dfc00117 	ldw	ra,4(sp)
   36470:	df000017 	ldw	fp,0(sp)
   36474:	dec00204 	addi	sp,sp,8
   36478:	f800283a 	ret

0003647c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   3647c:	defffc04 	addi	sp,sp,-16
   36480:	dfc00315 	stw	ra,12(sp)
   36484:	df000215 	stw	fp,8(sp)
   36488:	df000204 	addi	fp,sp,8
   3648c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   36490:	e0bffe17 	ldw	r2,-8(fp)
   36494:	10800017 	ldw	r2,0(r2)
   36498:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   3649c:	e0bfff17 	ldw	r2,-4(fp)
   364a0:	10c00a04 	addi	r3,r2,40
   364a4:	e0bffe17 	ldw	r2,-8(fp)
   364a8:	10800217 	ldw	r2,8(r2)
   364ac:	100b883a 	mov	r5,r2
   364b0:	1809883a 	mov	r4,r3
   364b4:	003688c0 	call	3688c <altera_avalon_jtag_uart_close>
}
   364b8:	e037883a 	mov	sp,fp
   364bc:	dfc00117 	ldw	ra,4(sp)
   364c0:	df000017 	ldw	fp,0(sp)
   364c4:	dec00204 	addi	sp,sp,8
   364c8:	f800283a 	ret

000364cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   364cc:	defffa04 	addi	sp,sp,-24
   364d0:	dfc00515 	stw	ra,20(sp)
   364d4:	df000415 	stw	fp,16(sp)
   364d8:	df000404 	addi	fp,sp,16
   364dc:	e13ffe15 	stw	r4,-8(fp)
   364e0:	e17ffd15 	stw	r5,-12(fp)
   364e4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   364e8:	e0bffe17 	ldw	r2,-8(fp)
   364ec:	10800017 	ldw	r2,0(r2)
   364f0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   364f4:	e0bfff17 	ldw	r2,-4(fp)
   364f8:	10800a04 	addi	r2,r2,40
   364fc:	e1bffc17 	ldw	r6,-16(fp)
   36500:	e17ffd17 	ldw	r5,-12(fp)
   36504:	1009883a 	mov	r4,r2
   36508:	00368f40 	call	368f4 <altera_avalon_jtag_uart_ioctl>
}
   3650c:	e037883a 	mov	sp,fp
   36510:	dfc00117 	ldw	ra,4(sp)
   36514:	df000017 	ldw	fp,0(sp)
   36518:	dec00204 	addi	sp,sp,8
   3651c:	f800283a 	ret

00036520 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   36520:	defffa04 	addi	sp,sp,-24
   36524:	dfc00515 	stw	ra,20(sp)
   36528:	df000415 	stw	fp,16(sp)
   3652c:	df000404 	addi	fp,sp,16
   36530:	e13fff15 	stw	r4,-4(fp)
   36534:	e17ffe15 	stw	r5,-8(fp)
   36538:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3653c:	e0bfff17 	ldw	r2,-4(fp)
   36540:	00c00044 	movi	r3,1
   36544:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   36548:	e0bfff17 	ldw	r2,-4(fp)
   3654c:	10800017 	ldw	r2,0(r2)
   36550:	10800104 	addi	r2,r2,4
   36554:	1007883a 	mov	r3,r2
   36558:	e0bfff17 	ldw	r2,-4(fp)
   3655c:	10800817 	ldw	r2,32(r2)
   36560:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   36564:	e0bffe17 	ldw	r2,-8(fp)
   36568:	e0fffd17 	ldw	r3,-12(fp)
   3656c:	d8000015 	stw	zero,0(sp)
   36570:	e1ffff17 	ldw	r7,-4(fp)
   36574:	018000f4 	movhi	r6,3
   36578:	31997804 	addi	r6,r6,26080
   3657c:	180b883a 	mov	r5,r3
   36580:	1009883a 	mov	r4,r2
   36584:	00375a40 	call	375a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   36588:	e0bfff17 	ldw	r2,-4(fp)
   3658c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   36590:	e0bfff17 	ldw	r2,-4(fp)
   36594:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   36598:	d0e73117 	ldw	r3,-25404(gp)
   3659c:	e1ffff17 	ldw	r7,-4(fp)
   365a0:	018000f4 	movhi	r6,3
   365a4:	3199fb04 	addi	r6,r6,26604
   365a8:	180b883a 	mov	r5,r3
   365ac:	1009883a 	mov	r4,r2
   365b0:	003712c0 	call	3712c <alt_alarm_start>
   365b4:	1000040e 	bge	r2,zero,365c8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   365b8:	e0ffff17 	ldw	r3,-4(fp)
   365bc:	00a00034 	movhi	r2,32768
   365c0:	10bfffc4 	addi	r2,r2,-1
   365c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   365c8:	0001883a 	nop
   365cc:	e037883a 	mov	sp,fp
   365d0:	dfc00117 	ldw	ra,4(sp)
   365d4:	df000017 	ldw	fp,0(sp)
   365d8:	dec00204 	addi	sp,sp,8
   365dc:	f800283a 	ret

000365e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   365e0:	defff804 	addi	sp,sp,-32
   365e4:	df000715 	stw	fp,28(sp)
   365e8:	df000704 	addi	fp,sp,28
   365ec:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   365f0:	e0bff917 	ldw	r2,-28(fp)
   365f4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   365f8:	e0bffd17 	ldw	r2,-12(fp)
   365fc:	10800017 	ldw	r2,0(r2)
   36600:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   36604:	e0bffc17 	ldw	r2,-16(fp)
   36608:	10800104 	addi	r2,r2,4
   3660c:	10800037 	ldwio	r2,0(r2)
   36610:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   36614:	e0bffb17 	ldw	r2,-20(fp)
   36618:	1080c00c 	andi	r2,r2,768
   3661c:	10006d26 	beq	r2,zero,367d4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   36620:	e0bffb17 	ldw	r2,-20(fp)
   36624:	1080400c 	andi	r2,r2,256
   36628:	10003526 	beq	r2,zero,36700 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   3662c:	00800074 	movhi	r2,1
   36630:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   36634:	e0bffd17 	ldw	r2,-12(fp)
   36638:	10800a17 	ldw	r2,40(r2)
   3663c:	10800044 	addi	r2,r2,1
   36640:	1081ffcc 	andi	r2,r2,2047
   36644:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   36648:	e0bffd17 	ldw	r2,-12(fp)
   3664c:	10800b17 	ldw	r2,44(r2)
   36650:	e0fffa17 	ldw	r3,-24(fp)
   36654:	18801526 	beq	r3,r2,366ac <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   36658:	e0bffc17 	ldw	r2,-16(fp)
   3665c:	10800037 	ldwio	r2,0(r2)
   36660:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   36664:	e0bfff17 	ldw	r2,-4(fp)
   36668:	10a0000c 	andi	r2,r2,32768
   3666c:	10001126 	beq	r2,zero,366b4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   36670:	e0bffd17 	ldw	r2,-12(fp)
   36674:	10800a17 	ldw	r2,40(r2)
   36678:	e0ffff17 	ldw	r3,-4(fp)
   3667c:	1809883a 	mov	r4,r3
   36680:	e0fffd17 	ldw	r3,-12(fp)
   36684:	1885883a 	add	r2,r3,r2
   36688:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3668c:	e0bffd17 	ldw	r2,-12(fp)
   36690:	10800a17 	ldw	r2,40(r2)
   36694:	10800044 	addi	r2,r2,1
   36698:	10c1ffcc 	andi	r3,r2,2047
   3669c:	e0bffd17 	ldw	r2,-12(fp)
   366a0:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   366a4:	0001883a 	nop
      {
   366a8:	003fe206 	br	36634 <altera_avalon_jtag_uart_irq+0x54>
          break;
   366ac:	0001883a 	nop
   366b0:	00000106 	br	366b8 <altera_avalon_jtag_uart_irq+0xd8>
          break;
   366b4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   366b8:	e0bfff17 	ldw	r2,-4(fp)
   366bc:	10bfffec 	andhi	r2,r2,65535
   366c0:	10000f26 	beq	r2,zero,36700 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   366c4:	e0bffd17 	ldw	r2,-12(fp)
   366c8:	10c00817 	ldw	r3,32(r2)
   366cc:	00bfff84 	movi	r2,-2
   366d0:	1886703a 	and	r3,r3,r2
   366d4:	e0bffd17 	ldw	r2,-12(fp)
   366d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   366dc:	e0bffc17 	ldw	r2,-16(fp)
   366e0:	10800104 	addi	r2,r2,4
   366e4:	1007883a 	mov	r3,r2
   366e8:	e0bffd17 	ldw	r2,-12(fp)
   366ec:	10800817 	ldw	r2,32(r2)
   366f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   366f4:	e0bffc17 	ldw	r2,-16(fp)
   366f8:	10800104 	addi	r2,r2,4
   366fc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   36700:	e0bffb17 	ldw	r2,-20(fp)
   36704:	1080800c 	andi	r2,r2,512
   36708:	103fbe26 	beq	r2,zero,36604 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   3670c:	e0bffb17 	ldw	r2,-20(fp)
   36710:	1004d43a 	srli	r2,r2,16
   36714:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   36718:	00001406 	br	3676c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   3671c:	e0bffc17 	ldw	r2,-16(fp)
   36720:	e0fffd17 	ldw	r3,-12(fp)
   36724:	18c00d17 	ldw	r3,52(r3)
   36728:	e13ffd17 	ldw	r4,-12(fp)
   3672c:	20c7883a 	add	r3,r4,r3
   36730:	18c20e03 	ldbu	r3,2104(r3)
   36734:	18c03fcc 	andi	r3,r3,255
   36738:	18c0201c 	xori	r3,r3,128
   3673c:	18ffe004 	addi	r3,r3,-128
   36740:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   36744:	e0bffd17 	ldw	r2,-12(fp)
   36748:	10800d17 	ldw	r2,52(r2)
   3674c:	10800044 	addi	r2,r2,1
   36750:	10c1ffcc 	andi	r3,r2,2047
   36754:	e0bffd17 	ldw	r2,-12(fp)
   36758:	10c00d15 	stw	r3,52(r2)
   3675c:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   36760:	e0bffe17 	ldw	r2,-8(fp)
   36764:	10bfffc4 	addi	r2,r2,-1
   36768:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   3676c:	e0bffe17 	ldw	r2,-8(fp)
   36770:	10000526 	beq	r2,zero,36788 <altera_avalon_jtag_uart_irq+0x1a8>
   36774:	e0bffd17 	ldw	r2,-12(fp)
   36778:	10c00d17 	ldw	r3,52(r2)
   3677c:	e0bffd17 	ldw	r2,-12(fp)
   36780:	10800c17 	ldw	r2,48(r2)
   36784:	18bfe51e 	bne	r3,r2,3671c <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
   36788:	e0bffe17 	ldw	r2,-8(fp)
   3678c:	103f9d26 	beq	r2,zero,36604 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   36790:	e0bffd17 	ldw	r2,-12(fp)
   36794:	10c00817 	ldw	r3,32(r2)
   36798:	00bfff44 	movi	r2,-3
   3679c:	1886703a 	and	r3,r3,r2
   367a0:	e0bffd17 	ldw	r2,-12(fp)
   367a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   367a8:	e0bffd17 	ldw	r2,-12(fp)
   367ac:	10800017 	ldw	r2,0(r2)
   367b0:	10800104 	addi	r2,r2,4
   367b4:	1007883a 	mov	r3,r2
   367b8:	e0bffd17 	ldw	r2,-12(fp)
   367bc:	10800817 	ldw	r2,32(r2)
   367c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   367c4:	e0bffc17 	ldw	r2,-16(fp)
   367c8:	10800104 	addi	r2,r2,4
   367cc:	10800037 	ldwio	r2,0(r2)
  {
   367d0:	003f8c06 	br	36604 <altera_avalon_jtag_uart_irq+0x24>
      break;
   367d4:	0001883a 	nop
      }
    }
  }
}
   367d8:	0001883a 	nop
   367dc:	e037883a 	mov	sp,fp
   367e0:	df000017 	ldw	fp,0(sp)
   367e4:	dec00104 	addi	sp,sp,4
   367e8:	f800283a 	ret

000367ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   367ec:	defffc04 	addi	sp,sp,-16
   367f0:	df000315 	stw	fp,12(sp)
   367f4:	df000304 	addi	fp,sp,12
   367f8:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   367fc:	e0bffd17 	ldw	r2,-12(fp)
   36800:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   36804:	e0bfff17 	ldw	r2,-4(fp)
   36808:	10800017 	ldw	r2,0(r2)
   3680c:	10800104 	addi	r2,r2,4
   36810:	10800037 	ldwio	r2,0(r2)
   36814:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   36818:	e0bffe17 	ldw	r2,-8(fp)
   3681c:	1081000c 	andi	r2,r2,1024
   36820:	10000b26 	beq	r2,zero,36850 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   36824:	e0bfff17 	ldw	r2,-4(fp)
   36828:	10800017 	ldw	r2,0(r2)
   3682c:	10800104 	addi	r2,r2,4
   36830:	1007883a 	mov	r3,r2
   36834:	e0bfff17 	ldw	r2,-4(fp)
   36838:	10800817 	ldw	r2,32(r2)
   3683c:	10810014 	ori	r2,r2,1024
   36840:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   36844:	e0bfff17 	ldw	r2,-4(fp)
   36848:	10000915 	stw	zero,36(r2)
   3684c:	00000a06 	br	36878 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   36850:	e0bfff17 	ldw	r2,-4(fp)
   36854:	10c00917 	ldw	r3,36(r2)
   36858:	00a00034 	movhi	r2,32768
   3685c:	10bfff04 	addi	r2,r2,-4
   36860:	10c00536 	bltu	r2,r3,36878 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   36864:	e0bfff17 	ldw	r2,-4(fp)
   36868:	10800917 	ldw	r2,36(r2)
   3686c:	10c00044 	addi	r3,r2,1
   36870:	e0bfff17 	ldw	r2,-4(fp)
   36874:	10c00915 	stw	r3,36(r2)
   36878:	d0a73117 	ldw	r2,-25404(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   3687c:	e037883a 	mov	sp,fp
   36880:	df000017 	ldw	fp,0(sp)
   36884:	dec00104 	addi	sp,sp,4
   36888:	f800283a 	ret

0003688c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   3688c:	defffd04 	addi	sp,sp,-12
   36890:	df000215 	stw	fp,8(sp)
   36894:	df000204 	addi	fp,sp,8
   36898:	e13fff15 	stw	r4,-4(fp)
   3689c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   368a0:	00000506 	br	368b8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   368a4:	e0bffe17 	ldw	r2,-8(fp)
   368a8:	1090000c 	andi	r2,r2,16384
   368ac:	10000226 	beq	r2,zero,368b8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   368b0:	00bffd44 	movi	r2,-11
   368b4:	00000b06 	br	368e4 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   368b8:	e0bfff17 	ldw	r2,-4(fp)
   368bc:	10c00d17 	ldw	r3,52(r2)
   368c0:	e0bfff17 	ldw	r2,-4(fp)
   368c4:	10800c17 	ldw	r2,48(r2)
   368c8:	18800526 	beq	r3,r2,368e0 <altera_avalon_jtag_uart_close+0x54>
   368cc:	e0bfff17 	ldw	r2,-4(fp)
   368d0:	10c00917 	ldw	r3,36(r2)
   368d4:	e0bfff17 	ldw	r2,-4(fp)
   368d8:	10800117 	ldw	r2,4(r2)
   368dc:	18bff136 	bltu	r3,r2,368a4 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   368e0:	0005883a 	mov	r2,zero
}
   368e4:	e037883a 	mov	sp,fp
   368e8:	df000017 	ldw	fp,0(sp)
   368ec:	dec00104 	addi	sp,sp,4
   368f0:	f800283a 	ret

000368f4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   368f4:	defffa04 	addi	sp,sp,-24
   368f8:	df000515 	stw	fp,20(sp)
   368fc:	df000504 	addi	fp,sp,20
   36900:	e13ffd15 	stw	r4,-12(fp)
   36904:	e17ffc15 	stw	r5,-16(fp)
   36908:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   3690c:	00bff9c4 	movi	r2,-25
   36910:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   36914:	e0bffc17 	ldw	r2,-16(fp)
   36918:	109a8060 	cmpeqi	r2,r2,27137
   3691c:	1000041e 	bne	r2,zero,36930 <altera_avalon_jtag_uart_ioctl+0x3c>
   36920:	e0bffc17 	ldw	r2,-16(fp)
   36924:	109a80a0 	cmpeqi	r2,r2,27138
   36928:	1000181e 	bne	r2,zero,3698c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   3692c:	00002906 	br	369d4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   36930:	e0bffd17 	ldw	r2,-12(fp)
   36934:	10c00117 	ldw	r3,4(r2)
   36938:	00a00034 	movhi	r2,32768
   3693c:	10bfffc4 	addi	r2,r2,-1
   36940:	18802126 	beq	r3,r2,369c8 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   36944:	e0bffb17 	ldw	r2,-20(fp)
   36948:	10800017 	ldw	r2,0(r2)
   3694c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   36950:	e0bffe17 	ldw	r2,-8(fp)
   36954:	10800090 	cmplti	r2,r2,2
   36958:	1000061e 	bne	r2,zero,36974 <altera_avalon_jtag_uart_ioctl+0x80>
   3695c:	e0fffe17 	ldw	r3,-8(fp)
   36960:	00a00034 	movhi	r2,32768
   36964:	10bfffc4 	addi	r2,r2,-1
   36968:	18800226 	beq	r3,r2,36974 <altera_avalon_jtag_uart_ioctl+0x80>
   3696c:	e0bffe17 	ldw	r2,-8(fp)
   36970:	00000206 	br	3697c <altera_avalon_jtag_uart_ioctl+0x88>
   36974:	00a00034 	movhi	r2,32768
   36978:	10bfff84 	addi	r2,r2,-2
   3697c:	e0fffd17 	ldw	r3,-12(fp)
   36980:	18800115 	stw	r2,4(r3)
      rc = 0;
   36984:	e03fff15 	stw	zero,-4(fp)
    break;
   36988:	00000f06 	br	369c8 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   3698c:	e0bffd17 	ldw	r2,-12(fp)
   36990:	10c00117 	ldw	r3,4(r2)
   36994:	00a00034 	movhi	r2,32768
   36998:	10bfffc4 	addi	r2,r2,-1
   3699c:	18800c26 	beq	r3,r2,369d0 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   369a0:	e0bffd17 	ldw	r2,-12(fp)
   369a4:	10c00917 	ldw	r3,36(r2)
   369a8:	e0bffd17 	ldw	r2,-12(fp)
   369ac:	10800117 	ldw	r2,4(r2)
   369b0:	1885803a 	cmpltu	r2,r3,r2
   369b4:	10c03fcc 	andi	r3,r2,255
   369b8:	e0bffb17 	ldw	r2,-20(fp)
   369bc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   369c0:	e03fff15 	stw	zero,-4(fp)
    break;
   369c4:	00000206 	br	369d0 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   369c8:	0001883a 	nop
   369cc:	00000106 	br	369d4 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   369d0:	0001883a 	nop
  }

  return rc;
   369d4:	e0bfff17 	ldw	r2,-4(fp)
}
   369d8:	e037883a 	mov	sp,fp
   369dc:	df000017 	ldw	fp,0(sp)
   369e0:	dec00104 	addi	sp,sp,4
   369e4:	f800283a 	ret

000369e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   369e8:	defff304 	addi	sp,sp,-52
   369ec:	dfc00c15 	stw	ra,48(sp)
   369f0:	df000b15 	stw	fp,44(sp)
   369f4:	df000b04 	addi	fp,sp,44
   369f8:	e13ff815 	stw	r4,-32(fp)
   369fc:	e17ff715 	stw	r5,-36(fp)
   36a00:	e1bff615 	stw	r6,-40(fp)
   36a04:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   36a08:	e0bff717 	ldw	r2,-36(fp)
   36a0c:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   36a10:	00004706 	br	36b30 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   36a14:	e0bff817 	ldw	r2,-32(fp)
   36a18:	10800a17 	ldw	r2,40(r2)
   36a1c:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   36a20:	e0bff817 	ldw	r2,-32(fp)
   36a24:	10800b17 	ldw	r2,44(r2)
   36a28:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   36a2c:	e0fffd17 	ldw	r3,-12(fp)
   36a30:	e0bffc17 	ldw	r2,-16(fp)
   36a34:	18800536 	bltu	r3,r2,36a4c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   36a38:	e0fffd17 	ldw	r3,-12(fp)
   36a3c:	e0bffc17 	ldw	r2,-16(fp)
   36a40:	1885c83a 	sub	r2,r3,r2
   36a44:	e0bffe15 	stw	r2,-8(fp)
   36a48:	00000406 	br	36a5c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   36a4c:	00c20004 	movi	r3,2048
   36a50:	e0bffc17 	ldw	r2,-16(fp)
   36a54:	1885c83a 	sub	r2,r3,r2
   36a58:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   36a5c:	e0bffe17 	ldw	r2,-8(fp)
   36a60:	10001e26 	beq	r2,zero,36adc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   36a64:	e0fff617 	ldw	r3,-40(fp)
   36a68:	e0bffe17 	ldw	r2,-8(fp)
   36a6c:	1880022e 	bgeu	r3,r2,36a78 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   36a70:	e0bff617 	ldw	r2,-40(fp)
   36a74:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   36a78:	e0bff817 	ldw	r2,-32(fp)
   36a7c:	10c00e04 	addi	r3,r2,56
   36a80:	e0bffc17 	ldw	r2,-16(fp)
   36a84:	1885883a 	add	r2,r3,r2
   36a88:	e1bffe17 	ldw	r6,-8(fp)
   36a8c:	100b883a 	mov	r5,r2
   36a90:	e13fff17 	ldw	r4,-4(fp)
   36a94:	003038c0 	call	3038c <memcpy>
      ptr   += n;
   36a98:	e0ffff17 	ldw	r3,-4(fp)
   36a9c:	e0bffe17 	ldw	r2,-8(fp)
   36aa0:	1885883a 	add	r2,r3,r2
   36aa4:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   36aa8:	e0fff617 	ldw	r3,-40(fp)
   36aac:	e0bffe17 	ldw	r2,-8(fp)
   36ab0:	1885c83a 	sub	r2,r3,r2
   36ab4:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   36ab8:	e0fffc17 	ldw	r3,-16(fp)
   36abc:	e0bffe17 	ldw	r2,-8(fp)
   36ac0:	1885883a 	add	r2,r3,r2
   36ac4:	10c1ffcc 	andi	r3,r2,2047
   36ac8:	e0bff817 	ldw	r2,-32(fp)
   36acc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   36ad0:	e0bff617 	ldw	r2,-40(fp)
   36ad4:	00bfcf16 	blt	zero,r2,36a14 <altera_avalon_jtag_uart_read+0x2c>
   36ad8:	00000106 	br	36ae0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   36adc:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   36ae0:	e0ffff17 	ldw	r3,-4(fp)
   36ae4:	e0bff717 	ldw	r2,-36(fp)
   36ae8:	1880141e 	bne	r3,r2,36b3c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   36aec:	e0bff517 	ldw	r2,-44(fp)
   36af0:	1090000c 	andi	r2,r2,16384
   36af4:	1000131e 	bne	r2,zero,36b44 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   36af8:	0001883a 	nop
   36afc:	e0bff817 	ldw	r2,-32(fp)
   36b00:	10800a17 	ldw	r2,40(r2)
   36b04:	e0fffd17 	ldw	r3,-12(fp)
   36b08:	1880051e 	bne	r3,r2,36b20 <altera_avalon_jtag_uart_read+0x138>
   36b0c:	e0bff817 	ldw	r2,-32(fp)
   36b10:	10c00917 	ldw	r3,36(r2)
   36b14:	e0bff817 	ldw	r2,-32(fp)
   36b18:	10800117 	ldw	r2,4(r2)
   36b1c:	18bff736 	bltu	r3,r2,36afc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   36b20:	e0bff817 	ldw	r2,-32(fp)
   36b24:	10800a17 	ldw	r2,40(r2)
   36b28:	e0fffd17 	ldw	r3,-12(fp)
   36b2c:	18800726 	beq	r3,r2,36b4c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   36b30:	e0bff617 	ldw	r2,-40(fp)
   36b34:	00bfb716 	blt	zero,r2,36a14 <altera_avalon_jtag_uart_read+0x2c>
   36b38:	00000506 	br	36b50 <altera_avalon_jtag_uart_read+0x168>
      break;
   36b3c:	0001883a 	nop
   36b40:	00000306 	br	36b50 <altera_avalon_jtag_uart_read+0x168>
      break;
   36b44:	0001883a 	nop
   36b48:	00000106 	br	36b50 <altera_avalon_jtag_uart_read+0x168>
      break;
   36b4c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   36b50:	e0ffff17 	ldw	r3,-4(fp)
   36b54:	e0bff717 	ldw	r2,-36(fp)
   36b58:	18801926 	beq	r3,r2,36bc0 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   36b5c:	0005303a 	rdctl	r2,status
   36b60:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   36b64:	e0fff917 	ldw	r3,-28(fp)
   36b68:	00bfff84 	movi	r2,-2
   36b6c:	1884703a 	and	r2,r3,r2
   36b70:	1001703a 	wrctl	status,r2
  return context;
   36b74:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   36b78:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   36b7c:	e0bff817 	ldw	r2,-32(fp)
   36b80:	10800817 	ldw	r2,32(r2)
   36b84:	10c00054 	ori	r3,r2,1
   36b88:	e0bff817 	ldw	r2,-32(fp)
   36b8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   36b90:	e0bff817 	ldw	r2,-32(fp)
   36b94:	10800017 	ldw	r2,0(r2)
   36b98:	10800104 	addi	r2,r2,4
   36b9c:	1007883a 	mov	r3,r2
   36ba0:	e0bff817 	ldw	r2,-32(fp)
   36ba4:	10800817 	ldw	r2,32(r2)
   36ba8:	18800035 	stwio	r2,0(r3)
   36bac:	e0bffb17 	ldw	r2,-20(fp)
   36bb0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   36bb4:	e0bffa17 	ldw	r2,-24(fp)
   36bb8:	1001703a 	wrctl	status,r2
}
   36bbc:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   36bc0:	e0ffff17 	ldw	r3,-4(fp)
   36bc4:	e0bff717 	ldw	r2,-36(fp)
   36bc8:	18800426 	beq	r3,r2,36bdc <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   36bcc:	e0ffff17 	ldw	r3,-4(fp)
   36bd0:	e0bff717 	ldw	r2,-36(fp)
   36bd4:	1885c83a 	sub	r2,r3,r2
   36bd8:	00000606 	br	36bf4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   36bdc:	e0bff517 	ldw	r2,-44(fp)
   36be0:	1090000c 	andi	r2,r2,16384
   36be4:	10000226 	beq	r2,zero,36bf0 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   36be8:	00bffd44 	movi	r2,-11
   36bec:	00000106 	br	36bf4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   36bf0:	00bffec4 	movi	r2,-5
}
   36bf4:	e037883a 	mov	sp,fp
   36bf8:	dfc00117 	ldw	ra,4(sp)
   36bfc:	df000017 	ldw	fp,0(sp)
   36c00:	dec00204 	addi	sp,sp,8
   36c04:	f800283a 	ret

00036c08 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   36c08:	defff304 	addi	sp,sp,-52
   36c0c:	dfc00c15 	stw	ra,48(sp)
   36c10:	df000b15 	stw	fp,44(sp)
   36c14:	df000b04 	addi	fp,sp,44
   36c18:	e13ff815 	stw	r4,-32(fp)
   36c1c:	e17ff715 	stw	r5,-36(fp)
   36c20:	e1bff615 	stw	r6,-40(fp)
   36c24:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   36c28:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   36c2c:	e0bff717 	ldw	r2,-36(fp)
   36c30:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   36c34:	00003706 	br	36d14 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   36c38:	e0bff817 	ldw	r2,-32(fp)
   36c3c:	10800c17 	ldw	r2,48(r2)
   36c40:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   36c44:	e0bff817 	ldw	r2,-32(fp)
   36c48:	10800d17 	ldw	r2,52(r2)
   36c4c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   36c50:	e0fffc17 	ldw	r3,-16(fp)
   36c54:	e0bfff17 	ldw	r2,-4(fp)
   36c58:	1880062e 	bgeu	r3,r2,36c74 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   36c5c:	e0ffff17 	ldw	r3,-4(fp)
   36c60:	e0bffc17 	ldw	r2,-16(fp)
   36c64:	1885c83a 	sub	r2,r3,r2
   36c68:	10bfffc4 	addi	r2,r2,-1
   36c6c:	e0bffe15 	stw	r2,-8(fp)
   36c70:	00000b06 	br	36ca0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   36c74:	e0bfff17 	ldw	r2,-4(fp)
   36c78:	10000526 	beq	r2,zero,36c90 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   36c7c:	00c20004 	movi	r3,2048
   36c80:	e0bffc17 	ldw	r2,-16(fp)
   36c84:	1885c83a 	sub	r2,r3,r2
   36c88:	e0bffe15 	stw	r2,-8(fp)
   36c8c:	00000406 	br	36ca0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   36c90:	00c1ffc4 	movi	r3,2047
   36c94:	e0bffc17 	ldw	r2,-16(fp)
   36c98:	1885c83a 	sub	r2,r3,r2
   36c9c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   36ca0:	e0bffe17 	ldw	r2,-8(fp)
   36ca4:	10001e26 	beq	r2,zero,36d20 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   36ca8:	e0fff617 	ldw	r3,-40(fp)
   36cac:	e0bffe17 	ldw	r2,-8(fp)
   36cb0:	1880022e 	bgeu	r3,r2,36cbc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   36cb4:	e0bff617 	ldw	r2,-40(fp)
   36cb8:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   36cbc:	e0bff817 	ldw	r2,-32(fp)
   36cc0:	10c20e04 	addi	r3,r2,2104
   36cc4:	e0bffc17 	ldw	r2,-16(fp)
   36cc8:	1885883a 	add	r2,r3,r2
   36ccc:	e1bffe17 	ldw	r6,-8(fp)
   36cd0:	e17ff717 	ldw	r5,-36(fp)
   36cd4:	1009883a 	mov	r4,r2
   36cd8:	003038c0 	call	3038c <memcpy>
      ptr   += n;
   36cdc:	e0fff717 	ldw	r3,-36(fp)
   36ce0:	e0bffe17 	ldw	r2,-8(fp)
   36ce4:	1885883a 	add	r2,r3,r2
   36ce8:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   36cec:	e0fff617 	ldw	r3,-40(fp)
   36cf0:	e0bffe17 	ldw	r2,-8(fp)
   36cf4:	1885c83a 	sub	r2,r3,r2
   36cf8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   36cfc:	e0fffc17 	ldw	r3,-16(fp)
   36d00:	e0bffe17 	ldw	r2,-8(fp)
   36d04:	1885883a 	add	r2,r3,r2
   36d08:	10c1ffcc 	andi	r3,r2,2047
   36d0c:	e0bff817 	ldw	r2,-32(fp)
   36d10:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   36d14:	e0bff617 	ldw	r2,-40(fp)
   36d18:	00bfc716 	blt	zero,r2,36c38 <altera_avalon_jtag_uart_write+0x30>
   36d1c:	00000106 	br	36d24 <altera_avalon_jtag_uart_write+0x11c>
        break;
   36d20:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   36d24:	0005303a 	rdctl	r2,status
   36d28:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   36d2c:	e0fff917 	ldw	r3,-28(fp)
   36d30:	00bfff84 	movi	r2,-2
   36d34:	1884703a 	and	r2,r3,r2
   36d38:	1001703a 	wrctl	status,r2
  return context;
   36d3c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   36d40:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   36d44:	e0bff817 	ldw	r2,-32(fp)
   36d48:	10800817 	ldw	r2,32(r2)
   36d4c:	10c00094 	ori	r3,r2,2
   36d50:	e0bff817 	ldw	r2,-32(fp)
   36d54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   36d58:	e0bff817 	ldw	r2,-32(fp)
   36d5c:	10800017 	ldw	r2,0(r2)
   36d60:	10800104 	addi	r2,r2,4
   36d64:	1007883a 	mov	r3,r2
   36d68:	e0bff817 	ldw	r2,-32(fp)
   36d6c:	10800817 	ldw	r2,32(r2)
   36d70:	18800035 	stwio	r2,0(r3)
   36d74:	e0bffb17 	ldw	r2,-20(fp)
   36d78:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   36d7c:	e0bffa17 	ldw	r2,-24(fp)
   36d80:	1001703a 	wrctl	status,r2
}
   36d84:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   36d88:	e0bff617 	ldw	r2,-40(fp)
   36d8c:	0080100e 	bge	zero,r2,36dd0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   36d90:	e0bff517 	ldw	r2,-44(fp)
   36d94:	1090000c 	andi	r2,r2,16384
   36d98:	1000101e 	bne	r2,zero,36ddc <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   36d9c:	0001883a 	nop
   36da0:	e0bff817 	ldw	r2,-32(fp)
   36da4:	10800d17 	ldw	r2,52(r2)
   36da8:	e0ffff17 	ldw	r3,-4(fp)
   36dac:	1880051e 	bne	r3,r2,36dc4 <altera_avalon_jtag_uart_write+0x1bc>
   36db0:	e0bff817 	ldw	r2,-32(fp)
   36db4:	10c00917 	ldw	r3,36(r2)
   36db8:	e0bff817 	ldw	r2,-32(fp)
   36dbc:	10800117 	ldw	r2,4(r2)
   36dc0:	18bff736 	bltu	r3,r2,36da0 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   36dc4:	e0bff817 	ldw	r2,-32(fp)
   36dc8:	10800917 	ldw	r2,36(r2)
   36dcc:	1000051e 	bne	r2,zero,36de4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   36dd0:	e0bff617 	ldw	r2,-40(fp)
   36dd4:	00bfcf16 	blt	zero,r2,36d14 <altera_avalon_jtag_uart_write+0x10c>
   36dd8:	00000306 	br	36de8 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   36ddc:	0001883a 	nop
   36de0:	00000106 	br	36de8 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   36de4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   36de8:	e0fff717 	ldw	r3,-36(fp)
   36dec:	e0bffd17 	ldw	r2,-12(fp)
   36df0:	18800426 	beq	r3,r2,36e04 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   36df4:	e0fff717 	ldw	r3,-36(fp)
   36df8:	e0bffd17 	ldw	r2,-12(fp)
   36dfc:	1885c83a 	sub	r2,r3,r2
   36e00:	00000606 	br	36e1c <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   36e04:	e0bff517 	ldw	r2,-44(fp)
   36e08:	1090000c 	andi	r2,r2,16384
   36e0c:	10000226 	beq	r2,zero,36e18 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   36e10:	00bffd44 	movi	r2,-11
   36e14:	00000106 	br	36e1c <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   36e18:	00bffec4 	movi	r2,-5
}
   36e1c:	e037883a 	mov	sp,fp
   36e20:	dfc00117 	ldw	ra,4(sp)
   36e24:	df000017 	ldw	fp,0(sp)
   36e28:	dec00204 	addi	sp,sp,8
   36e2c:	f800283a 	ret

00036e30 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   36e30:	defff404 	addi	sp,sp,-48
   36e34:	df000b15 	stw	fp,44(sp)
   36e38:	df000b04 	addi	fp,sp,44
   36e3c:	e13ff815 	stw	r4,-32(fp)
   36e40:	e17ff715 	stw	r5,-36(fp)
   36e44:	e1bff615 	stw	r6,-40(fp)
   36e48:	e1fff515 	stw	r7,-44(fp)
  const alt_u8 * write_end = write_data + write_length;
   36e4c:	e0fff517 	ldw	r3,-44(fp)
   36e50:	e0bff617 	ldw	r2,-40(fp)
   36e54:	1885883a 	add	r2,r3,r2
   36e58:	e0bffc15 	stw	r2,-16(fp)
  alt_u8 * read_end = read_data + read_length;
   36e5c:	e0c00217 	ldw	r3,8(fp)
   36e60:	e0800117 	ldw	r2,4(fp)
   36e64:	1885883a 	add	r2,r3,r2
   36e68:	e0bffb15 	stw	r2,-20(fp)

  alt_u32 write_zeros = read_length;
   36e6c:	e0800117 	ldw	r2,4(fp)
   36e70:	e0bfff15 	stw	r2,-4(fp)
  alt_u32 read_ignore = write_length;
   36e74:	e0bff617 	ldw	r2,-40(fp)
   36e78:	e0bffe15 	stw	r2,-8(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   36e7c:	00800044 	movi	r2,1
   36e80:	e0bffd15 	stw	r2,-12(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   36e84:	e0bff817 	ldw	r2,-32(fp)
   36e88:	10800504 	addi	r2,r2,20
   36e8c:	1009883a 	mov	r4,r2
   36e90:	00c00044 	movi	r3,1
   36e94:	e0bff717 	ldw	r2,-36(fp)
   36e98:	1884983a 	sll	r2,r3,r2
   36e9c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   36ea0:	e0800317 	ldw	r2,12(fp)
   36ea4:	1080008c 	andi	r2,r2,2
   36ea8:	1000051e 	bne	r2,zero,36ec0 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   36eac:	e0bff817 	ldw	r2,-32(fp)
   36eb0:	10800304 	addi	r2,r2,12
   36eb4:	1007883a 	mov	r3,r2
   36eb8:	00810004 	movi	r2,1024
   36ebc:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   36ec0:	e0bff817 	ldw	r2,-32(fp)
   36ec4:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   36ec8:	e0bff817 	ldw	r2,-32(fp)
   36ecc:	10800204 	addi	r2,r2,8
   36ed0:	10800037 	ldwio	r2,0(r2)
   36ed4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   36ed8:	e0bffa17 	ldw	r2,-24(fp)
   36edc:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   36ee0:	10000226 	beq	r2,zero,36eec <alt_avalon_spi_command+0xbc>
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   36ee4:	e0bffd17 	ldw	r2,-12(fp)
   36ee8:	1000031e 	bne	r2,zero,36ef8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   36eec:	e0bffa17 	ldw	r2,-24(fp)
   36ef0:	1080200c 	andi	r2,r2,128
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   36ef4:	103ff426 	beq	r2,zero,36ec8 <alt_avalon_spi_command+0x98>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   36ef8:	e0bffa17 	ldw	r2,-24(fp)
   36efc:	1080100c 	andi	r2,r2,64
   36f00:	10001e26 	beq	r2,zero,36f7c <alt_avalon_spi_command+0x14c>
   36f04:	e0bffd17 	ldw	r2,-12(fp)
   36f08:	00801c0e 	bge	zero,r2,36f7c <alt_avalon_spi_command+0x14c>
    {
      credits--;
   36f0c:	e0bffd17 	ldw	r2,-12(fp)
   36f10:	10bfffc4 	addi	r2,r2,-1
   36f14:	e0bffd15 	stw	r2,-12(fp)

      if (write_data < write_end)
   36f18:	e0fff517 	ldw	r3,-44(fp)
   36f1c:	e0bffc17 	ldw	r2,-16(fp)
   36f20:	18800a2e 	bgeu	r3,r2,36f4c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   36f24:	e0bff817 	ldw	r2,-32(fp)
   36f28:	10800104 	addi	r2,r2,4
   36f2c:	1009883a 	mov	r4,r2
   36f30:	e0bff517 	ldw	r2,-44(fp)
   36f34:	10c00044 	addi	r3,r2,1
   36f38:	e0fff515 	stw	r3,-44(fp)
   36f3c:	10800003 	ldbu	r2,0(r2)
   36f40:	10803fcc 	andi	r2,r2,255
   36f44:	20800035 	stwio	r2,0(r4)
   36f48:	00000c06 	br	36f7c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   36f4c:	e0bfff17 	ldw	r2,-4(fp)
   36f50:	10000826 	beq	r2,zero,36f74 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   36f54:	e0bfff17 	ldw	r2,-4(fp)
   36f58:	10bfffc4 	addi	r2,r2,-1
   36f5c:	e0bfff15 	stw	r2,-4(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   36f60:	e0bff817 	ldw	r2,-32(fp)
   36f64:	10800104 	addi	r2,r2,4
   36f68:	0007883a 	mov	r3,zero
   36f6c:	10c00035 	stwio	r3,0(r2)
   36f70:	00000206 	br	36f7c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   36f74:	00bf0004 	movi	r2,-1024
   36f78:	e0bffd15 	stw	r2,-12(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   36f7c:	e0bffa17 	ldw	r2,-24(fp)
   36f80:	1080200c 	andi	r2,r2,128
   36f84:	103fd026 	beq	r2,zero,36ec8 <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   36f88:	e0bff817 	ldw	r2,-32(fp)
   36f8c:	10800037 	ldwio	r2,0(r2)
   36f90:	e0bff915 	stw	r2,-28(fp)

      if (read_ignore > 0)
   36f94:	e0bffe17 	ldw	r2,-8(fp)
   36f98:	10000426 	beq	r2,zero,36fac <alt_avalon_spi_command+0x17c>
        read_ignore--;
   36f9c:	e0bffe17 	ldw	r2,-8(fp)
   36fa0:	10bfffc4 	addi	r2,r2,-1
   36fa4:	e0bffe15 	stw	r2,-8(fp)
   36fa8:	00000506 	br	36fc0 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   36fac:	e0800217 	ldw	r2,8(fp)
   36fb0:	10c00044 	addi	r3,r2,1
   36fb4:	e0c00215 	stw	r3,8(fp)
   36fb8:	e0fff917 	ldw	r3,-28(fp)
   36fbc:	10c00005 	stb	r3,0(r2)
      credits++;
   36fc0:	e0bffd17 	ldw	r2,-12(fp)
   36fc4:	10800044 	addi	r2,r2,1
   36fc8:	e0bffd15 	stw	r2,-12(fp)

      if (read_ignore == 0 && read_data == read_end)
   36fcc:	e0bffe17 	ldw	r2,-8(fp)
   36fd0:	103fbd1e 	bne	r2,zero,36ec8 <alt_avalon_spi_command+0x98>
   36fd4:	e0c00217 	ldw	r3,8(fp)
   36fd8:	e0bffb17 	ldw	r2,-20(fp)
   36fdc:	18bfba1e 	bne	r3,r2,36ec8 <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   36fe0:	e0bff817 	ldw	r2,-32(fp)
   36fe4:	10800204 	addi	r2,r2,8
   36fe8:	10800037 	ldwio	r2,0(r2)
   36fec:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   36ff0:	e0bffa17 	ldw	r2,-24(fp)
   36ff4:	1080080c 	andi	r2,r2,32
   36ff8:	103ff926 	beq	r2,zero,36fe0 <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   36ffc:	e0800317 	ldw	r2,12(fp)
   37000:	1080004c 	andi	r2,r2,1
   37004:	1000041e 	bne	r2,zero,37018 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   37008:	e0bff817 	ldw	r2,-32(fp)
   3700c:	10800304 	addi	r2,r2,12
   37010:	0007883a 	mov	r3,zero
   37014:	10c00035 	stwio	r3,0(r2)

  return read_length;
   37018:	e0800117 	ldw	r2,4(fp)
}
   3701c:	e037883a 	mov	sp,fp
   37020:	df000017 	ldw	fp,0(sp)
   37024:	dec00104 	addi	sp,sp,4
   37028:	f800283a 	ret

0003702c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   3702c:	defffa04 	addi	sp,sp,-24
   37030:	dfc00515 	stw	ra,20(sp)
   37034:	df000415 	stw	fp,16(sp)
   37038:	df000404 	addi	fp,sp,16
   3703c:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   37040:	0007883a 	mov	r3,zero
   37044:	e0bffc17 	ldw	r2,-16(fp)
   37048:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   3704c:	e0bffc17 	ldw	r2,-16(fp)
   37050:	10800104 	addi	r2,r2,4
   37054:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   37058:	0005303a 	rdctl	r2,status
   3705c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   37060:	e0fffd17 	ldw	r3,-12(fp)
   37064:	00bfff84 	movi	r2,-2
   37068:	1884703a 	and	r2,r3,r2
   3706c:	1001703a 	wrctl	status,r2
  return context;
   37070:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   37074:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   37078:	00360600 	call	36060 <alt_tick>
   3707c:	e0bfff17 	ldw	r2,-4(fp)
   37080:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   37084:	e0bffe17 	ldw	r2,-8(fp)
   37088:	1001703a 	wrctl	status,r2
}
   3708c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   37090:	0001883a 	nop
   37094:	e037883a 	mov	sp,fp
   37098:	dfc00117 	ldw	ra,4(sp)
   3709c:	df000017 	ldw	fp,0(sp)
   370a0:	dec00204 	addi	sp,sp,8
   370a4:	f800283a 	ret

000370a8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   370a8:	defff804 	addi	sp,sp,-32
   370ac:	dfc00715 	stw	ra,28(sp)
   370b0:	df000615 	stw	fp,24(sp)
   370b4:	df000604 	addi	fp,sp,24
   370b8:	e13ffe15 	stw	r4,-8(fp)
   370bc:	e17ffd15 	stw	r5,-12(fp)
   370c0:	e1bffc15 	stw	r6,-16(fp)
   370c4:	e1fffb15 	stw	r7,-20(fp)
   370c8:	e0bffb17 	ldw	r2,-20(fp)
   370cc:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   370d0:	d0a73117 	ldw	r2,-25404(gp)
   370d4:	1000031e 	bne	r2,zero,370e4 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   370d8:	e0bfff17 	ldw	r2,-4(fp)
   370dc:	d0a73115 	stw	r2,-25404(gp)
    return 0;
   370e0:	00000106 	br	370e8 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   370e4:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   370e8:	e0bffe17 	ldw	r2,-8(fp)
   370ec:	10800104 	addi	r2,r2,4
   370f0:	00c001c4 	movi	r3,7
   370f4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   370f8:	d8000015 	stw	zero,0(sp)
   370fc:	e1fffe17 	ldw	r7,-8(fp)
   37100:	018000f4 	movhi	r6,3
   37104:	319c0b04 	addi	r6,r6,28716
   37108:	e17ffc17 	ldw	r5,-16(fp)
   3710c:	e13ffd17 	ldw	r4,-12(fp)
   37110:	00375a40 	call	375a4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   37114:	0001883a 	nop
   37118:	e037883a 	mov	sp,fp
   3711c:	dfc00117 	ldw	ra,4(sp)
   37120:	df000017 	ldw	fp,0(sp)
   37124:	dec00204 	addi	sp,sp,8
   37128:	f800283a 	ret

0003712c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   3712c:	defff504 	addi	sp,sp,-44
   37130:	df000a15 	stw	fp,40(sp)
   37134:	df000a04 	addi	fp,sp,40
   37138:	e13ff915 	stw	r4,-28(fp)
   3713c:	e17ff815 	stw	r5,-32(fp)
   37140:	e1bff715 	stw	r6,-36(fp)
   37144:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   37148:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   3714c:	d0a73117 	ldw	r2,-25404(gp)
  
  if (alt_ticks_per_second ())
   37150:	10003e26 	beq	r2,zero,3724c <alt_alarm_start+0x120>
  {
    if (alarm)
   37154:	e0bff917 	ldw	r2,-28(fp)
   37158:	10003a26 	beq	r2,zero,37244 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
   3715c:	e0bff917 	ldw	r2,-28(fp)
   37160:	e0fff717 	ldw	r3,-36(fp)
   37164:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   37168:	e0bff917 	ldw	r2,-28(fp)
   3716c:	e0fff617 	ldw	r3,-40(fp)
   37170:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   37174:	0005303a 	rdctl	r2,status
   37178:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3717c:	e0fffd17 	ldw	r3,-12(fp)
   37180:	00bfff84 	movi	r2,-2
   37184:	1884703a 	and	r2,r3,r2
   37188:	1001703a 	wrctl	status,r2
  return context;
   3718c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
   37190:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   37194:	d0a73217 	ldw	r2,-25400(gp)
      
      current_nticks = alt_nticks();
   37198:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   3719c:	e0fff817 	ldw	r3,-32(fp)
   371a0:	e0bfff17 	ldw	r2,-4(fp)
   371a4:	1885883a 	add	r2,r3,r2
   371a8:	10c00044 	addi	r3,r2,1
   371ac:	e0bff917 	ldw	r2,-28(fp)
   371b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   371b4:	e0bff917 	ldw	r2,-28(fp)
   371b8:	10c00217 	ldw	r3,8(r2)
   371bc:	e0bfff17 	ldw	r2,-4(fp)
   371c0:	1880042e 	bgeu	r3,r2,371d4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   371c4:	e0bff917 	ldw	r2,-28(fp)
   371c8:	00c00044 	movi	r3,1
   371cc:	10c00405 	stb	r3,16(r2)
   371d0:	00000206 	br	371dc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   371d4:	e0bff917 	ldw	r2,-28(fp)
   371d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   371dc:	e0bff917 	ldw	r2,-28(fp)
   371e0:	d0e01404 	addi	r3,gp,-32688
   371e4:	e0fffb15 	stw	r3,-20(fp)
   371e8:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
   371ec:	e0bffa17 	ldw	r2,-24(fp)
   371f0:	e0fffb17 	ldw	r3,-20(fp)
   371f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   371f8:	e0bffb17 	ldw	r2,-20(fp)
   371fc:	10c00017 	ldw	r3,0(r2)
   37200:	e0bffa17 	ldw	r2,-24(fp)
   37204:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   37208:	e0bffb17 	ldw	r2,-20(fp)
   3720c:	10800017 	ldw	r2,0(r2)
   37210:	e0fffa17 	ldw	r3,-24(fp)
   37214:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   37218:	e0bffb17 	ldw	r2,-20(fp)
   3721c:	e0fffa17 	ldw	r3,-24(fp)
   37220:	10c00015 	stw	r3,0(r2)
}
   37224:	0001883a 	nop
   37228:	e0bffe17 	ldw	r2,-8(fp)
   3722c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   37230:	e0bffc17 	ldw	r2,-16(fp)
   37234:	1001703a 	wrctl	status,r2
}
   37238:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   3723c:	0005883a 	mov	r2,zero
   37240:	00000306 	br	37250 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
   37244:	00bffa84 	movi	r2,-22
   37248:	00000106 	br	37250 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
   3724c:	00bfde84 	movi	r2,-134
  }
}
   37250:	e037883a 	mov	sp,fp
   37254:	df000017 	ldw	fp,0(sp)
   37258:	dec00104 	addi	sp,sp,4
   3725c:	f800283a 	ret

00037260 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   37260:	defffa04 	addi	sp,sp,-24
   37264:	dfc00515 	stw	ra,20(sp)
   37268:	df000415 	stw	fp,16(sp)
   3726c:	df000404 	addi	fp,sp,16
   37270:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   37274:	00800244 	movi	r2,9
   37278:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   3727c:	014003f4 	movhi	r5,15
   37280:	29509004 	addi	r5,r5,16960
   37284:	e13ffe17 	ldw	r4,-8(fp)
   37288:	0026b4c0 	call	26b4c <__mulsi3>
   3728c:	100b883a 	mov	r5,r2
   37290:	0100bef4 	movhi	r4,763
   37294:	213c2004 	addi	r4,r4,-3968
   37298:	0026a8c0 	call	26a8c <__udivsi3>
  big_loops = us / (INT_MAX/
   3729c:	100b883a 	mov	r5,r2
   372a0:	01200034 	movhi	r4,32768
   372a4:	213fffc4 	addi	r4,r4,-1
   372a8:	0026a8c0 	call	26a8c <__udivsi3>
   372ac:	100b883a 	mov	r5,r2
   372b0:	e13ffc17 	ldw	r4,-16(fp)
   372b4:	0026a8c0 	call	26a8c <__udivsi3>
   372b8:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
   372bc:	e0bffd17 	ldw	r2,-12(fp)
   372c0:	10002a26 	beq	r2,zero,3736c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   372c4:	e03fff15 	stw	zero,-4(fp)
   372c8:	00001706 	br	37328 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   372cc:	00a00034 	movhi	r2,32768
   372d0:	10bfffc4 	addi	r2,r2,-1
   372d4:	10bfffc4 	addi	r2,r2,-1
   372d8:	103ffe1e 	bne	r2,zero,372d4 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   372dc:	014003f4 	movhi	r5,15
   372e0:	29509004 	addi	r5,r5,16960
   372e4:	e13ffe17 	ldw	r4,-8(fp)
   372e8:	0026b4c0 	call	26b4c <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
   372ec:	100b883a 	mov	r5,r2
   372f0:	0100bef4 	movhi	r4,763
   372f4:	213c2004 	addi	r4,r4,-3968
   372f8:	0026a8c0 	call	26a8c <__udivsi3>
   372fc:	100b883a 	mov	r5,r2
   37300:	01200034 	movhi	r4,32768
   37304:	213fffc4 	addi	r4,r4,-1
   37308:	0026a8c0 	call	26a8c <__udivsi3>
   3730c:	1007883a 	mov	r3,r2
   37310:	e0bffc17 	ldw	r2,-16(fp)
   37314:	10c5c83a 	sub	r2,r2,r3
   37318:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
   3731c:	e0bfff17 	ldw	r2,-4(fp)
   37320:	10800044 	addi	r2,r2,1
   37324:	e0bfff15 	stw	r2,-4(fp)
   37328:	e0ffff17 	ldw	r3,-4(fp)
   3732c:	e0bffd17 	ldw	r2,-12(fp)
   37330:	18bfe616 	blt	r3,r2,372cc <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   37334:	014003f4 	movhi	r5,15
   37338:	29509004 	addi	r5,r5,16960
   3733c:	e13ffe17 	ldw	r4,-8(fp)
   37340:	0026b4c0 	call	26b4c <__mulsi3>
   37344:	100b883a 	mov	r5,r2
   37348:	0100bef4 	movhi	r4,763
   3734c:	213c2004 	addi	r4,r4,-3968
   37350:	0026a8c0 	call	26a8c <__udivsi3>
   37354:	e17ffc17 	ldw	r5,-16(fp)
   37358:	1009883a 	mov	r4,r2
   3735c:	0026b4c0 	call	26b4c <__mulsi3>
    __asm__ volatile (
   37360:	10bfffc4 	addi	r2,r2,-1
   37364:	103ffe1e 	bne	r2,zero,37360 <alt_busy_sleep+0x100>
   37368:	00000d06 	br	373a0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   3736c:	014003f4 	movhi	r5,15
   37370:	29509004 	addi	r5,r5,16960
   37374:	e13ffe17 	ldw	r4,-8(fp)
   37378:	0026b4c0 	call	26b4c <__mulsi3>
   3737c:	100b883a 	mov	r5,r2
   37380:	0100bef4 	movhi	r4,763
   37384:	213c2004 	addi	r4,r4,-3968
   37388:	0026a8c0 	call	26a8c <__udivsi3>
   3738c:	e17ffc17 	ldw	r5,-16(fp)
   37390:	1009883a 	mov	r4,r2
   37394:	0026b4c0 	call	26b4c <__mulsi3>
    __asm__ volatile (
   37398:	10bfffc4 	addi	r2,r2,-1
   3739c:	00bffe16 	blt	zero,r2,37398 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   373a0:	0005883a 	mov	r2,zero
}
   373a4:	e037883a 	mov	sp,fp
   373a8:	dfc00117 	ldw	ra,4(sp)
   373ac:	df000017 	ldw	fp,0(sp)
   373b0:	dec00204 	addi	sp,sp,8
   373b4:	f800283a 	ret

000373b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   373b8:	deffff04 	addi	sp,sp,-4
   373bc:	df000015 	stw	fp,0(sp)
   373c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   373c4:	0001883a 	nop
   373c8:	e037883a 	mov	sp,fp
   373cc:	df000017 	ldw	fp,0(sp)
   373d0:	dec00104 	addi	sp,sp,4
   373d4:	f800283a 	ret

000373d8 <alt_get_errno>:
{
   373d8:	defffe04 	addi	sp,sp,-8
   373dc:	dfc00115 	stw	ra,4(sp)
   373e0:	df000015 	stw	fp,0(sp)
   373e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   373e8:	d0a01217 	ldw	r2,-32696(gp)
   373ec:	10000326 	beq	r2,zero,373fc <alt_get_errno+0x24>
   373f0:	d0a01217 	ldw	r2,-32696(gp)
   373f4:	103ee83a 	callr	r2
   373f8:	00000106 	br	37400 <alt_get_errno+0x28>
   373fc:	d0a72c04 	addi	r2,gp,-25424
}
   37400:	e037883a 	mov	sp,fp
   37404:	dfc00117 	ldw	ra,4(sp)
   37408:	df000017 	ldw	fp,0(sp)
   3740c:	dec00204 	addi	sp,sp,8
   37410:	f800283a 	ret

00037414 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   37414:	defffa04 	addi	sp,sp,-24
   37418:	dfc00515 	stw	ra,20(sp)
   3741c:	df000415 	stw	fp,16(sp)
   37420:	df000404 	addi	fp,sp,16
   37424:	e13ffd15 	stw	r4,-12(fp)
   37428:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   3742c:	e0bffd17 	ldw	r2,-12(fp)
   37430:	10000326 	beq	r2,zero,37440 <alt_dev_llist_insert+0x2c>
   37434:	e0bffd17 	ldw	r2,-12(fp)
   37438:	10800217 	ldw	r2,8(r2)
   3743c:	1000061e 	bne	r2,zero,37458 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   37440:	00373d80 	call	373d8 <alt_get_errno>
   37444:	1007883a 	mov	r3,r2
   37448:	00800584 	movi	r2,22
   3744c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   37450:	00bffa84 	movi	r2,-22
   37454:	00001406 	br	374a8 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   37458:	e0bffd17 	ldw	r2,-12(fp)
   3745c:	e0fffc17 	ldw	r3,-16(fp)
   37460:	e0ffff15 	stw	r3,-4(fp)
   37464:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   37468:	e0bffe17 	ldw	r2,-8(fp)
   3746c:	e0ffff17 	ldw	r3,-4(fp)
   37470:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   37474:	e0bfff17 	ldw	r2,-4(fp)
   37478:	10c00017 	ldw	r3,0(r2)
   3747c:	e0bffe17 	ldw	r2,-8(fp)
   37480:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   37484:	e0bfff17 	ldw	r2,-4(fp)
   37488:	10800017 	ldw	r2,0(r2)
   3748c:	e0fffe17 	ldw	r3,-8(fp)
   37490:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   37494:	e0bfff17 	ldw	r2,-4(fp)
   37498:	e0fffe17 	ldw	r3,-8(fp)
   3749c:	10c00015 	stw	r3,0(r2)
}
   374a0:	0001883a 	nop

  return 0;  
   374a4:	0005883a 	mov	r2,zero
}
   374a8:	e037883a 	mov	sp,fp
   374ac:	dfc00117 	ldw	ra,4(sp)
   374b0:	df000017 	ldw	fp,0(sp)
   374b4:	dec00204 	addi	sp,sp,8
   374b8:	f800283a 	ret

000374bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   374bc:	defffd04 	addi	sp,sp,-12
   374c0:	dfc00215 	stw	ra,8(sp)
   374c4:	df000115 	stw	fp,4(sp)
   374c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   374cc:	00800134 	movhi	r2,4
   374d0:	10a05f04 	addi	r2,r2,-32388
   374d4:	e0bfff15 	stw	r2,-4(fp)
   374d8:	00000606 	br	374f4 <_do_ctors+0x38>
        (*ctor) (); 
   374dc:	e0bfff17 	ldw	r2,-4(fp)
   374e0:	10800017 	ldw	r2,0(r2)
   374e4:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   374e8:	e0bfff17 	ldw	r2,-4(fp)
   374ec:	10bfff04 	addi	r2,r2,-4
   374f0:	e0bfff15 	stw	r2,-4(fp)
   374f4:	e0ffff17 	ldw	r3,-4(fp)
   374f8:	00800134 	movhi	r2,4
   374fc:	10a06004 	addi	r2,r2,-32384
   37500:	18bff62e 	bgeu	r3,r2,374dc <_do_ctors+0x20>
}
   37504:	0001883a 	nop
   37508:	0001883a 	nop
   3750c:	e037883a 	mov	sp,fp
   37510:	dfc00117 	ldw	ra,4(sp)
   37514:	df000017 	ldw	fp,0(sp)
   37518:	dec00204 	addi	sp,sp,8
   3751c:	f800283a 	ret

00037520 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   37520:	defffd04 	addi	sp,sp,-12
   37524:	dfc00215 	stw	ra,8(sp)
   37528:	df000115 	stw	fp,4(sp)
   3752c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   37530:	00800134 	movhi	r2,4
   37534:	10a05f04 	addi	r2,r2,-32388
   37538:	e0bfff15 	stw	r2,-4(fp)
   3753c:	00000606 	br	37558 <_do_dtors+0x38>
        (*dtor) (); 
   37540:	e0bfff17 	ldw	r2,-4(fp)
   37544:	10800017 	ldw	r2,0(r2)
   37548:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3754c:	e0bfff17 	ldw	r2,-4(fp)
   37550:	10bfff04 	addi	r2,r2,-4
   37554:	e0bfff15 	stw	r2,-4(fp)
   37558:	e0ffff17 	ldw	r3,-4(fp)
   3755c:	00800134 	movhi	r2,4
   37560:	10a06004 	addi	r2,r2,-32384
   37564:	18bff62e 	bgeu	r3,r2,37540 <_do_dtors+0x20>
}
   37568:	0001883a 	nop
   3756c:	0001883a 	nop
   37570:	e037883a 	mov	sp,fp
   37574:	dfc00117 	ldw	ra,4(sp)
   37578:	df000017 	ldw	fp,0(sp)
   3757c:	dec00204 	addi	sp,sp,8
   37580:	f800283a 	ret

00037584 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   37584:	deffff04 	addi	sp,sp,-4
   37588:	df000015 	stw	fp,0(sp)
   3758c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   37590:	0001883a 	nop
   37594:	e037883a 	mov	sp,fp
   37598:	df000017 	ldw	fp,0(sp)
   3759c:	dec00104 	addi	sp,sp,4
   375a0:	f800283a 	ret

000375a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   375a4:	defff904 	addi	sp,sp,-28
   375a8:	dfc00615 	stw	ra,24(sp)
   375ac:	df000515 	stw	fp,20(sp)
   375b0:	df000504 	addi	fp,sp,20
   375b4:	e13fff15 	stw	r4,-4(fp)
   375b8:	e17ffe15 	stw	r5,-8(fp)
   375bc:	e1bffd15 	stw	r6,-12(fp)
   375c0:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   375c4:	e0800217 	ldw	r2,8(fp)
   375c8:	d8800015 	stw	r2,0(sp)
   375cc:	e1fffc17 	ldw	r7,-16(fp)
   375d0:	e1bffd17 	ldw	r6,-12(fp)
   375d4:	e17ffe17 	ldw	r5,-8(fp)
   375d8:	e13fff17 	ldw	r4,-4(fp)
   375dc:	00377540 	call	37754 <alt_iic_isr_register>
}  
   375e0:	e037883a 	mov	sp,fp
   375e4:	dfc00117 	ldw	ra,4(sp)
   375e8:	df000017 	ldw	fp,0(sp)
   375ec:	dec00204 	addi	sp,sp,8
   375f0:	f800283a 	ret

000375f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   375f4:	defff904 	addi	sp,sp,-28
   375f8:	df000615 	stw	fp,24(sp)
   375fc:	df000604 	addi	fp,sp,24
   37600:	e13ffb15 	stw	r4,-20(fp)
   37604:	e17ffa15 	stw	r5,-24(fp)
   37608:	e0bffa17 	ldw	r2,-24(fp)
   3760c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   37610:	0005303a 	rdctl	r2,status
   37614:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   37618:	e0fffe17 	ldw	r3,-8(fp)
   3761c:	00bfff84 	movi	r2,-2
   37620:	1884703a 	and	r2,r3,r2
   37624:	1001703a 	wrctl	status,r2
  return context;
   37628:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3762c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   37630:	00c00044 	movi	r3,1
   37634:	e0bfff17 	ldw	r2,-4(fp)
   37638:	1884983a 	sll	r2,r3,r2
   3763c:	1007883a 	mov	r3,r2
   37640:	d0a73317 	ldw	r2,-25396(gp)
   37644:	1884b03a 	or	r2,r3,r2
   37648:	d0a73315 	stw	r2,-25396(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3764c:	d0a73317 	ldw	r2,-25396(gp)
   37650:	100170fa 	wrctl	ienable,r2
   37654:	e0bffd17 	ldw	r2,-12(fp)
   37658:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   3765c:	e0bffc17 	ldw	r2,-16(fp)
   37660:	1001703a 	wrctl	status,r2
}
   37664:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   37668:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   3766c:	e037883a 	mov	sp,fp
   37670:	df000017 	ldw	fp,0(sp)
   37674:	dec00104 	addi	sp,sp,4
   37678:	f800283a 	ret

0003767c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   3767c:	defff904 	addi	sp,sp,-28
   37680:	df000615 	stw	fp,24(sp)
   37684:	df000604 	addi	fp,sp,24
   37688:	e13ffb15 	stw	r4,-20(fp)
   3768c:	e17ffa15 	stw	r5,-24(fp)
   37690:	e0bffa17 	ldw	r2,-24(fp)
   37694:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   37698:	0005303a 	rdctl	r2,status
   3769c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   376a0:	e0fffe17 	ldw	r3,-8(fp)
   376a4:	00bfff84 	movi	r2,-2
   376a8:	1884703a 	and	r2,r3,r2
   376ac:	1001703a 	wrctl	status,r2
  return context;
   376b0:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   376b4:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   376b8:	00c00044 	movi	r3,1
   376bc:	e0bfff17 	ldw	r2,-4(fp)
   376c0:	1884983a 	sll	r2,r3,r2
   376c4:	0084303a 	nor	r2,zero,r2
   376c8:	1007883a 	mov	r3,r2
   376cc:	d0a73317 	ldw	r2,-25396(gp)
   376d0:	1884703a 	and	r2,r3,r2
   376d4:	d0a73315 	stw	r2,-25396(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   376d8:	d0a73317 	ldw	r2,-25396(gp)
   376dc:	100170fa 	wrctl	ienable,r2
   376e0:	e0bffd17 	ldw	r2,-12(fp)
   376e4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   376e8:	e0bffc17 	ldw	r2,-16(fp)
   376ec:	1001703a 	wrctl	status,r2
}
   376f0:	0001883a 	nop
  return 0;
   376f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   376f8:	e037883a 	mov	sp,fp
   376fc:	df000017 	ldw	fp,0(sp)
   37700:	dec00104 	addi	sp,sp,4
   37704:	f800283a 	ret

00037708 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   37708:	defffc04 	addi	sp,sp,-16
   3770c:	df000315 	stw	fp,12(sp)
   37710:	df000304 	addi	fp,sp,12
   37714:	e13ffe15 	stw	r4,-8(fp)
   37718:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   3771c:	000530fa 	rdctl	r2,ienable
   37720:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   37724:	00c00044 	movi	r3,1
   37728:	e0bffd17 	ldw	r2,-12(fp)
   3772c:	1884983a 	sll	r2,r3,r2
   37730:	1007883a 	mov	r3,r2
   37734:	e0bfff17 	ldw	r2,-4(fp)
   37738:	1884703a 	and	r2,r3,r2
   3773c:	1004c03a 	cmpne	r2,r2,zero
   37740:	10803fcc 	andi	r2,r2,255
}
   37744:	e037883a 	mov	sp,fp
   37748:	df000017 	ldw	fp,0(sp)
   3774c:	dec00104 	addi	sp,sp,4
   37750:	f800283a 	ret

00037754 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   37754:	defff504 	addi	sp,sp,-44
   37758:	dfc00a15 	stw	ra,40(sp)
   3775c:	df000915 	stw	fp,36(sp)
   37760:	df000904 	addi	fp,sp,36
   37764:	e13ffa15 	stw	r4,-24(fp)
   37768:	e17ff915 	stw	r5,-28(fp)
   3776c:	e1bff815 	stw	r6,-32(fp)
   37770:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   37774:	00bffa84 	movi	r2,-22
   37778:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   3777c:	e0bff917 	ldw	r2,-28(fp)
   37780:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   37784:	e0bffe17 	ldw	r2,-8(fp)
   37788:	10800808 	cmpgei	r2,r2,32
   3778c:	1000251e 	bne	r2,zero,37824 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   37790:	0005303a 	rdctl	r2,status
   37794:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   37798:	e0fffc17 	ldw	r3,-16(fp)
   3779c:	00bfff84 	movi	r2,-2
   377a0:	1884703a 	and	r2,r3,r2
   377a4:	1001703a 	wrctl	status,r2
  return context;
   377a8:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   377ac:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   377b0:	e0bffe17 	ldw	r2,-8(fp)
   377b4:	100890fa 	slli	r4,r2,3
   377b8:	e0fff817 	ldw	r3,-32(fp)
   377bc:	00800134 	movhi	r2,4
   377c0:	2085883a 	add	r2,r4,r2
   377c4:	10f28c15 	stw	r3,-13776(r2)
    alt_irq[id].context = isr_context;
   377c8:	e0bffe17 	ldw	r2,-8(fp)
   377cc:	100890fa 	slli	r4,r2,3
   377d0:	e0fff717 	ldw	r3,-36(fp)
   377d4:	00800134 	movhi	r2,4
   377d8:	2085883a 	add	r2,r4,r2
   377dc:	10f28d15 	stw	r3,-13772(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   377e0:	e0bff817 	ldw	r2,-32(fp)
   377e4:	10000526 	beq	r2,zero,377fc <alt_iic_isr_register+0xa8>
   377e8:	e0bffe17 	ldw	r2,-8(fp)
   377ec:	100b883a 	mov	r5,r2
   377f0:	e13ffa17 	ldw	r4,-24(fp)
   377f4:	00375f40 	call	375f4 <alt_ic_irq_enable>
   377f8:	00000406 	br	3780c <alt_iic_isr_register+0xb8>
   377fc:	e0bffe17 	ldw	r2,-8(fp)
   37800:	100b883a 	mov	r5,r2
   37804:	e13ffa17 	ldw	r4,-24(fp)
   37808:	003767c0 	call	3767c <alt_ic_irq_disable>
   3780c:	e0bfff15 	stw	r2,-4(fp)
   37810:	e0bffd17 	ldw	r2,-12(fp)
   37814:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   37818:	e0bffb17 	ldw	r2,-20(fp)
   3781c:	1001703a 	wrctl	status,r2
}
   37820:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   37824:	e0bfff17 	ldw	r2,-4(fp)
}
   37828:	e037883a 	mov	sp,fp
   3782c:	dfc00117 	ldw	ra,4(sp)
   37830:	df000017 	ldw	fp,0(sp)
   37834:	dec00204 	addi	sp,sp,8
   37838:	f800283a 	ret

0003783c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   3783c:	defff904 	addi	sp,sp,-28
   37840:	dfc00615 	stw	ra,24(sp)
   37844:	df000515 	stw	fp,20(sp)
   37848:	df000504 	addi	fp,sp,20
   3784c:	e13ffe15 	stw	r4,-8(fp)
   37850:	e17ffd15 	stw	r5,-12(fp)
   37854:	e1bffc15 	stw	r6,-16(fp)
   37858:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   3785c:	e1bffb17 	ldw	r6,-20(fp)
   37860:	e17ffc17 	ldw	r5,-16(fp)
   37864:	e13ffd17 	ldw	r4,-12(fp)
   37868:	0037aa40 	call	37aa4 <open>
   3786c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   37870:	e0bfff17 	ldw	r2,-4(fp)
   37874:	10002016 	blt	r2,zero,378f8 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   37878:	e0ffff17 	ldw	r3,-4(fp)
   3787c:	1805883a 	mov	r2,r3
   37880:	1085883a 	add	r2,r2,r2
   37884:	10c5883a 	add	r2,r2,r3
   37888:	100490ba 	slli	r2,r2,2
   3788c:	00c00134 	movhi	r3,4
   37890:	10c7883a 	add	r3,r2,r3
   37894:	18e69717 	ldw	r3,-26020(r3)
   37898:	e0bffe17 	ldw	r2,-8(fp)
   3789c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   378a0:	e0ffff17 	ldw	r3,-4(fp)
   378a4:	1805883a 	mov	r2,r3
   378a8:	1085883a 	add	r2,r2,r2
   378ac:	10c5883a 	add	r2,r2,r3
   378b0:	100490ba 	slli	r2,r2,2
   378b4:	00c00134 	movhi	r3,4
   378b8:	10c7883a 	add	r3,r2,r3
   378bc:	18e69817 	ldw	r3,-26016(r3)
   378c0:	e0bffe17 	ldw	r2,-8(fp)
   378c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   378c8:	e0ffff17 	ldw	r3,-4(fp)
   378cc:	1805883a 	mov	r2,r3
   378d0:	1085883a 	add	r2,r2,r2
   378d4:	10c5883a 	add	r2,r2,r3
   378d8:	100490ba 	slli	r2,r2,2
   378dc:	00c00134 	movhi	r3,4
   378e0:	10c7883a 	add	r3,r2,r3
   378e4:	18e69917 	ldw	r3,-26012(r3)
   378e8:	e0bffe17 	ldw	r2,-8(fp)
   378ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   378f0:	e13fff17 	ldw	r4,-4(fp)
   378f4:	0035e940 	call	35e94 <alt_release_fd>
  }
} 
   378f8:	0001883a 	nop
   378fc:	e037883a 	mov	sp,fp
   37900:	dfc00117 	ldw	ra,4(sp)
   37904:	df000017 	ldw	fp,0(sp)
   37908:	dec00204 	addi	sp,sp,8
   3790c:	f800283a 	ret

00037910 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   37910:	defffb04 	addi	sp,sp,-20
   37914:	dfc00415 	stw	ra,16(sp)
   37918:	df000315 	stw	fp,12(sp)
   3791c:	df000304 	addi	fp,sp,12
   37920:	e13fff15 	stw	r4,-4(fp)
   37924:	e17ffe15 	stw	r5,-8(fp)
   37928:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   3792c:	01c07fc4 	movi	r7,511
   37930:	01800044 	movi	r6,1
   37934:	e17fff17 	ldw	r5,-4(fp)
   37938:	01000134 	movhi	r4,4
   3793c:	21269a04 	addi	r4,r4,-26008
   37940:	003783c0 	call	3783c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   37944:	01c07fc4 	movi	r7,511
   37948:	000d883a 	mov	r6,zero
   3794c:	e17ffe17 	ldw	r5,-8(fp)
   37950:	01000134 	movhi	r4,4
   37954:	21269704 	addi	r4,r4,-26020
   37958:	003783c0 	call	3783c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   3795c:	01c07fc4 	movi	r7,511
   37960:	01800044 	movi	r6,1
   37964:	e17ffd17 	ldw	r5,-12(fp)
   37968:	01000134 	movhi	r4,4
   3796c:	21269d04 	addi	r4,r4,-25996
   37970:	003783c0 	call	3783c <alt_open_fd>
}  
   37974:	0001883a 	nop
   37978:	e037883a 	mov	sp,fp
   3797c:	dfc00117 	ldw	ra,4(sp)
   37980:	df000017 	ldw	fp,0(sp)
   37984:	dec00204 	addi	sp,sp,8
   37988:	f800283a 	ret

0003798c <alt_get_errno>:
{
   3798c:	defffe04 	addi	sp,sp,-8
   37990:	dfc00115 	stw	ra,4(sp)
   37994:	df000015 	stw	fp,0(sp)
   37998:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3799c:	d0a01217 	ldw	r2,-32696(gp)
   379a0:	10000326 	beq	r2,zero,379b0 <alt_get_errno+0x24>
   379a4:	d0a01217 	ldw	r2,-32696(gp)
   379a8:	103ee83a 	callr	r2
   379ac:	00000106 	br	379b4 <alt_get_errno+0x28>
   379b0:	d0a72c04 	addi	r2,gp,-25424
}
   379b4:	e037883a 	mov	sp,fp
   379b8:	dfc00117 	ldw	ra,4(sp)
   379bc:	df000017 	ldw	fp,0(sp)
   379c0:	dec00204 	addi	sp,sp,8
   379c4:	f800283a 	ret

000379c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   379c8:	defffd04 	addi	sp,sp,-12
   379cc:	df000215 	stw	fp,8(sp)
   379d0:	df000204 	addi	fp,sp,8
   379d4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   379d8:	e0bffe17 	ldw	r2,-8(fp)
   379dc:	10800217 	ldw	r2,8(r2)
   379e0:	10d00034 	orhi	r3,r2,16384
   379e4:	e0bffe17 	ldw	r2,-8(fp)
   379e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   379ec:	e03fff15 	stw	zero,-4(fp)
   379f0:	00002306 	br	37a80 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   379f4:	e0ffff17 	ldw	r3,-4(fp)
   379f8:	1805883a 	mov	r2,r3
   379fc:	1085883a 	add	r2,r2,r2
   37a00:	10c5883a 	add	r2,r2,r3
   37a04:	100490ba 	slli	r2,r2,2
   37a08:	00c00134 	movhi	r3,4
   37a0c:	10c7883a 	add	r3,r2,r3
   37a10:	18e69717 	ldw	r3,-26020(r3)
   37a14:	e0bffe17 	ldw	r2,-8(fp)
   37a18:	10800017 	ldw	r2,0(r2)
   37a1c:	1880151e 	bne	r3,r2,37a74 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   37a20:	e0ffff17 	ldw	r3,-4(fp)
   37a24:	1805883a 	mov	r2,r3
   37a28:	1085883a 	add	r2,r2,r2
   37a2c:	10c5883a 	add	r2,r2,r3
   37a30:	100490ba 	slli	r2,r2,2
   37a34:	00c00134 	movhi	r3,4
   37a38:	10c7883a 	add	r3,r2,r3
   37a3c:	18a69917 	ldw	r2,-26012(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   37a40:	10000c0e 	bge	r2,zero,37a74 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   37a44:	e0ffff17 	ldw	r3,-4(fp)
   37a48:	1805883a 	mov	r2,r3
   37a4c:	1085883a 	add	r2,r2,r2
   37a50:	10c5883a 	add	r2,r2,r3
   37a54:	100490ba 	slli	r2,r2,2
   37a58:	00c00134 	movhi	r3,4
   37a5c:	18e69704 	addi	r3,r3,-26020
   37a60:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   37a64:	e0fffe17 	ldw	r3,-8(fp)
   37a68:	18800226 	beq	r3,r2,37a74 <alt_file_locked+0xac>
    {
      return -EACCES;
   37a6c:	00bffcc4 	movi	r2,-13
   37a70:	00000806 	br	37a94 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   37a74:	e0bfff17 	ldw	r2,-4(fp)
   37a78:	10800044 	addi	r2,r2,1
   37a7c:	e0bfff15 	stw	r2,-4(fp)
   37a80:	d0a01117 	ldw	r2,-32700(gp)
   37a84:	1007883a 	mov	r3,r2
   37a88:	e0bfff17 	ldw	r2,-4(fp)
   37a8c:	18bfd92e 	bgeu	r3,r2,379f4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   37a90:	0005883a 	mov	r2,zero
}
   37a94:	e037883a 	mov	sp,fp
   37a98:	df000017 	ldw	fp,0(sp)
   37a9c:	dec00104 	addi	sp,sp,4
   37aa0:	f800283a 	ret

00037aa4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   37aa4:	defff604 	addi	sp,sp,-40
   37aa8:	dfc00915 	stw	ra,36(sp)
   37aac:	df000815 	stw	fp,32(sp)
   37ab0:	df000804 	addi	fp,sp,32
   37ab4:	e13ffa15 	stw	r4,-24(fp)
   37ab8:	e17ff915 	stw	r5,-28(fp)
   37abc:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   37ac0:	00bfffc4 	movi	r2,-1
   37ac4:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   37ac8:	00bffb44 	movi	r2,-19
   37acc:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   37ad0:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   37ad4:	d1600f04 	addi	r5,gp,-32708
   37ad8:	e13ffa17 	ldw	r4,-24(fp)
   37adc:	0037c280 	call	37c28 <alt_find_dev>
   37ae0:	e0bfff15 	stw	r2,-4(fp)
   37ae4:	e0bfff17 	ldw	r2,-4(fp)
   37ae8:	1000051e 	bne	r2,zero,37b00 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   37aec:	e13ffa17 	ldw	r4,-24(fp)
   37af0:	0037cb80 	call	37cb8 <alt_find_file>
   37af4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   37af8:	00800044 	movi	r2,1
   37afc:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   37b00:	e0bfff17 	ldw	r2,-4(fp)
   37b04:	10002c26 	beq	r2,zero,37bb8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   37b08:	e13fff17 	ldw	r4,-4(fp)
   37b0c:	0037dc00 	call	37dc0 <alt_get_fd>
   37b10:	e0bffe15 	stw	r2,-8(fp)
   37b14:	e0bffe17 	ldw	r2,-8(fp)
   37b18:	1000030e 	bge	r2,zero,37b28 <open+0x84>
    {
      status = index;
   37b1c:	e0bffe17 	ldw	r2,-8(fp)
   37b20:	e0bffd15 	stw	r2,-12(fp)
   37b24:	00002606 	br	37bc0 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   37b28:	e0fffe17 	ldw	r3,-8(fp)
   37b2c:	1805883a 	mov	r2,r3
   37b30:	1085883a 	add	r2,r2,r2
   37b34:	10c5883a 	add	r2,r2,r3
   37b38:	100490ba 	slli	r2,r2,2
   37b3c:	00c00134 	movhi	r3,4
   37b40:	18e69704 	addi	r3,r3,-26020
   37b44:	10c5883a 	add	r2,r2,r3
   37b48:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   37b4c:	e0fff917 	ldw	r3,-28(fp)
   37b50:	00900034 	movhi	r2,16384
   37b54:	10bfffc4 	addi	r2,r2,-1
   37b58:	1886703a 	and	r3,r3,r2
   37b5c:	e0bffb17 	ldw	r2,-20(fp)
   37b60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   37b64:	e0bffc17 	ldw	r2,-16(fp)
   37b68:	1000051e 	bne	r2,zero,37b80 <open+0xdc>
   37b6c:	e13ffb17 	ldw	r4,-20(fp)
   37b70:	00379c80 	call	379c8 <alt_file_locked>
   37b74:	e0bffd15 	stw	r2,-12(fp)
   37b78:	e0bffd17 	ldw	r2,-12(fp)
   37b7c:	10001016 	blt	r2,zero,37bc0 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   37b80:	e0bfff17 	ldw	r2,-4(fp)
   37b84:	10800317 	ldw	r2,12(r2)
   37b88:	10000826 	beq	r2,zero,37bac <open+0x108>
   37b8c:	e0bfff17 	ldw	r2,-4(fp)
   37b90:	10800317 	ldw	r2,12(r2)
   37b94:	e1fff817 	ldw	r7,-32(fp)
   37b98:	e1bff917 	ldw	r6,-28(fp)
   37b9c:	e17ffa17 	ldw	r5,-24(fp)
   37ba0:	e13ffb17 	ldw	r4,-20(fp)
   37ba4:	103ee83a 	callr	r2
   37ba8:	00000106 	br	37bb0 <open+0x10c>
   37bac:	0005883a 	mov	r2,zero
   37bb0:	e0bffd15 	stw	r2,-12(fp)
   37bb4:	00000206 	br	37bc0 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   37bb8:	00bffb44 	movi	r2,-19
   37bbc:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   37bc0:	e0bffd17 	ldw	r2,-12(fp)
   37bc4:	1000090e 	bge	r2,zero,37bec <open+0x148>
  {
    alt_release_fd (index);  
   37bc8:	e13ffe17 	ldw	r4,-8(fp)
   37bcc:	0035e940 	call	35e94 <alt_release_fd>
    ALT_ERRNO = -status;
   37bd0:	003798c0 	call	3798c <alt_get_errno>
   37bd4:	1007883a 	mov	r3,r2
   37bd8:	e0bffd17 	ldw	r2,-12(fp)
   37bdc:	0085c83a 	sub	r2,zero,r2
   37be0:	18800015 	stw	r2,0(r3)
    return -1;
   37be4:	00bfffc4 	movi	r2,-1
   37be8:	00000106 	br	37bf0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   37bec:	e0bffe17 	ldw	r2,-8(fp)
}
   37bf0:	e037883a 	mov	sp,fp
   37bf4:	dfc00117 	ldw	ra,4(sp)
   37bf8:	df000017 	ldw	fp,0(sp)
   37bfc:	dec00204 	addi	sp,sp,8
   37c00:	f800283a 	ret

00037c04 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   37c04:	deffff04 	addi	sp,sp,-4
   37c08:	df000015 	stw	fp,0(sp)
   37c0c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   37c10:	000170fa 	wrctl	ienable,zero
}
   37c14:	0001883a 	nop
   37c18:	e037883a 	mov	sp,fp
   37c1c:	df000017 	ldw	fp,0(sp)
   37c20:	dec00104 	addi	sp,sp,4
   37c24:	f800283a 	ret

00037c28 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   37c28:	defffa04 	addi	sp,sp,-24
   37c2c:	dfc00515 	stw	ra,20(sp)
   37c30:	df000415 	stw	fp,16(sp)
   37c34:	df000404 	addi	fp,sp,16
   37c38:	e13ffd15 	stw	r4,-12(fp)
   37c3c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   37c40:	e0bffc17 	ldw	r2,-16(fp)
   37c44:	10800017 	ldw	r2,0(r2)
   37c48:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   37c4c:	e13ffd17 	ldw	r4,-12(fp)
   37c50:	002aa580 	call	2aa58 <strlen>
   37c54:	10800044 	addi	r2,r2,1
   37c58:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   37c5c:	00000d06 	br	37c94 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   37c60:	e0bfff17 	ldw	r2,-4(fp)
   37c64:	10800217 	ldw	r2,8(r2)
   37c68:	e0fffe17 	ldw	r3,-8(fp)
   37c6c:	180d883a 	mov	r6,r3
   37c70:	e17ffd17 	ldw	r5,-12(fp)
   37c74:	1009883a 	mov	r4,r2
   37c78:	0037f580 	call	37f58 <memcmp>
   37c7c:	1000021e 	bne	r2,zero,37c88 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   37c80:	e0bfff17 	ldw	r2,-4(fp)
   37c84:	00000706 	br	37ca4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   37c88:	e0bfff17 	ldw	r2,-4(fp)
   37c8c:	10800017 	ldw	r2,0(r2)
   37c90:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   37c94:	e0ffff17 	ldw	r3,-4(fp)
   37c98:	e0bffc17 	ldw	r2,-16(fp)
   37c9c:	18bff01e 	bne	r3,r2,37c60 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   37ca0:	0005883a 	mov	r2,zero
}
   37ca4:	e037883a 	mov	sp,fp
   37ca8:	dfc00117 	ldw	ra,4(sp)
   37cac:	df000017 	ldw	fp,0(sp)
   37cb0:	dec00204 	addi	sp,sp,8
   37cb4:	f800283a 	ret

00037cb8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   37cb8:	defffb04 	addi	sp,sp,-20
   37cbc:	dfc00415 	stw	ra,16(sp)
   37cc0:	df000315 	stw	fp,12(sp)
   37cc4:	df000304 	addi	fp,sp,12
   37cc8:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   37ccc:	d0a00d17 	ldw	r2,-32716(gp)
   37cd0:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   37cd4:	00003106 	br	37d9c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   37cd8:	e0bfff17 	ldw	r2,-4(fp)
   37cdc:	10800217 	ldw	r2,8(r2)
   37ce0:	1009883a 	mov	r4,r2
   37ce4:	002aa580 	call	2aa58 <strlen>
   37ce8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   37cec:	e0bfff17 	ldw	r2,-4(fp)
   37cf0:	10c00217 	ldw	r3,8(r2)
   37cf4:	e0bffe17 	ldw	r2,-8(fp)
   37cf8:	10bfffc4 	addi	r2,r2,-1
   37cfc:	1885883a 	add	r2,r3,r2
   37d00:	10800003 	ldbu	r2,0(r2)
   37d04:	10803fcc 	andi	r2,r2,255
   37d08:	1080201c 	xori	r2,r2,128
   37d0c:	10bfe004 	addi	r2,r2,-128
   37d10:	10800bd8 	cmpnei	r2,r2,47
   37d14:	1000031e 	bne	r2,zero,37d24 <alt_find_file+0x6c>
    {
      len -= 1;
   37d18:	e0bffe17 	ldw	r2,-8(fp)
   37d1c:	10bfffc4 	addi	r2,r2,-1
   37d20:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   37d24:	e0bffe17 	ldw	r2,-8(fp)
   37d28:	e0fffd17 	ldw	r3,-12(fp)
   37d2c:	1885883a 	add	r2,r3,r2
   37d30:	10800003 	ldbu	r2,0(r2)
   37d34:	10803fcc 	andi	r2,r2,255
   37d38:	1080201c 	xori	r2,r2,128
   37d3c:	10bfe004 	addi	r2,r2,-128
   37d40:	10800be0 	cmpeqi	r2,r2,47
   37d44:	1000081e 	bne	r2,zero,37d68 <alt_find_file+0xb0>
   37d48:	e0bffe17 	ldw	r2,-8(fp)
   37d4c:	e0fffd17 	ldw	r3,-12(fp)
   37d50:	1885883a 	add	r2,r3,r2
   37d54:	10800003 	ldbu	r2,0(r2)
   37d58:	10803fcc 	andi	r2,r2,255
   37d5c:	1080201c 	xori	r2,r2,128
   37d60:	10bfe004 	addi	r2,r2,-128
   37d64:	10000a1e 	bne	r2,zero,37d90 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   37d68:	e0bfff17 	ldw	r2,-4(fp)
   37d6c:	10800217 	ldw	r2,8(r2)
   37d70:	e0fffe17 	ldw	r3,-8(fp)
   37d74:	180d883a 	mov	r6,r3
   37d78:	e17ffd17 	ldw	r5,-12(fp)
   37d7c:	1009883a 	mov	r4,r2
   37d80:	0037f580 	call	37f58 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   37d84:	1000021e 	bne	r2,zero,37d90 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   37d88:	e0bfff17 	ldw	r2,-4(fp)
   37d8c:	00000706 	br	37dac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   37d90:	e0bfff17 	ldw	r2,-4(fp)
   37d94:	10800017 	ldw	r2,0(r2)
   37d98:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   37d9c:	e0ffff17 	ldw	r3,-4(fp)
   37da0:	d0a00d04 	addi	r2,gp,-32716
   37da4:	18bfcc1e 	bne	r3,r2,37cd8 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   37da8:	0005883a 	mov	r2,zero
}
   37dac:	e037883a 	mov	sp,fp
   37db0:	dfc00117 	ldw	ra,4(sp)
   37db4:	df000017 	ldw	fp,0(sp)
   37db8:	dec00204 	addi	sp,sp,8
   37dbc:	f800283a 	ret

00037dc0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   37dc0:	defffc04 	addi	sp,sp,-16
   37dc4:	df000315 	stw	fp,12(sp)
   37dc8:	df000304 	addi	fp,sp,12
   37dcc:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   37dd0:	00bffa04 	movi	r2,-24
   37dd4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   37dd8:	e03fff15 	stw	zero,-4(fp)
   37ddc:	00001d06 	br	37e54 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   37de0:	e0ffff17 	ldw	r3,-4(fp)
   37de4:	1805883a 	mov	r2,r3
   37de8:	1085883a 	add	r2,r2,r2
   37dec:	10c5883a 	add	r2,r2,r3
   37df0:	100490ba 	slli	r2,r2,2
   37df4:	00c00134 	movhi	r3,4
   37df8:	10c7883a 	add	r3,r2,r3
   37dfc:	18a69717 	ldw	r2,-26020(r3)
   37e00:	1000111e 	bne	r2,zero,37e48 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   37e04:	e0ffff17 	ldw	r3,-4(fp)
   37e08:	1805883a 	mov	r2,r3
   37e0c:	1085883a 	add	r2,r2,r2
   37e10:	10c5883a 	add	r2,r2,r3
   37e14:	100490ba 	slli	r2,r2,2
   37e18:	e13ffd17 	ldw	r4,-12(fp)
   37e1c:	00c00134 	movhi	r3,4
   37e20:	10c7883a 	add	r3,r2,r3
   37e24:	19269715 	stw	r4,-26020(r3)
      if (i > alt_max_fd)
   37e28:	d0e01117 	ldw	r3,-32700(gp)
   37e2c:	e0bfff17 	ldw	r2,-4(fp)
   37e30:	1880020e 	bge	r3,r2,37e3c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   37e34:	e0bfff17 	ldw	r2,-4(fp)
   37e38:	d0a01115 	stw	r2,-32700(gp)
      }
      rc = i;
   37e3c:	e0bfff17 	ldw	r2,-4(fp)
   37e40:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   37e44:	00000706 	br	37e64 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   37e48:	e0bfff17 	ldw	r2,-4(fp)
   37e4c:	10800044 	addi	r2,r2,1
   37e50:	e0bfff15 	stw	r2,-4(fp)
   37e54:	e0bfff17 	ldw	r2,-4(fp)
   37e58:	10800810 	cmplti	r2,r2,32
   37e5c:	103fe01e 	bne	r2,zero,37de0 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   37e60:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   37e64:	e0bffe17 	ldw	r2,-8(fp)
}
   37e68:	e037883a 	mov	sp,fp
   37e6c:	df000017 	ldw	fp,0(sp)
   37e70:	dec00104 	addi	sp,sp,4
   37e74:	f800283a 	ret

00037e78 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   37e78:	defffe04 	addi	sp,sp,-8
   37e7c:	df000115 	stw	fp,4(sp)
   37e80:	df000104 	addi	fp,sp,4
   37e84:	e13fff15 	stw	r4,-4(fp)
   37e88:	e0bfff17 	ldw	r2,-4(fp)
   37e8c:	10bffe84 	addi	r2,r2,-6
   37e90:	10c00428 	cmpgeui	r3,r2,16
   37e94:	1800191e 	bne	r3,zero,37efc <alt_exception_cause_generated_bad_addr+0x84>
   37e98:	100690ba 	slli	r3,r2,2
   37e9c:	008000f4 	movhi	r2,3
   37ea0:	1885883a 	add	r2,r3,r2
   37ea4:	109fab17 	ldw	r2,32428(r2)
   37ea8:	1000683a 	jmp	r2
   37eac:	00037eec 	andhi	zero,zero,3579
   37eb0:	00037eec 	andhi	zero,zero,3579
   37eb4:	00037efc 	xorhi	zero,zero,3579
   37eb8:	00037efc 	xorhi	zero,zero,3579
   37ebc:	00037efc 	xorhi	zero,zero,3579
   37ec0:	00037eec 	andhi	zero,zero,3579
   37ec4:	00037ef4 	movhi	zero,3579
   37ec8:	00037efc 	xorhi	zero,zero,3579
   37ecc:	00037eec 	andhi	zero,zero,3579
   37ed0:	00037eec 	andhi	zero,zero,3579
   37ed4:	00037efc 	xorhi	zero,zero,3579
   37ed8:	00037eec 	andhi	zero,zero,3579
   37edc:	00037ef4 	movhi	zero,3579
   37ee0:	00037efc 	xorhi	zero,zero,3579
   37ee4:	00037efc 	xorhi	zero,zero,3579
   37ee8:	00037eec 	andhi	zero,zero,3579
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   37eec:	00800044 	movi	r2,1
   37ef0:	00000306 	br	37f00 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   37ef4:	0005883a 	mov	r2,zero
   37ef8:	00000106 	br	37f00 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   37efc:	0005883a 	mov	r2,zero
  }
}
   37f00:	e037883a 	mov	sp,fp
   37f04:	df000017 	ldw	fp,0(sp)
   37f08:	dec00104 	addi	sp,sp,4
   37f0c:	f800283a 	ret

00037f10 <atexit>:
   37f10:	200b883a 	mov	r5,r4
   37f14:	000f883a 	mov	r7,zero
   37f18:	000d883a 	mov	r6,zero
   37f1c:	0009883a 	mov	r4,zero
   37f20:	0037fd01 	jmpi	37fd0 <__register_exitproc>

00037f24 <exit>:
   37f24:	defffe04 	addi	sp,sp,-8
   37f28:	000b883a 	mov	r5,zero
   37f2c:	dc000015 	stw	r16,0(sp)
   37f30:	dfc00115 	stw	ra,4(sp)
   37f34:	2021883a 	mov	r16,r4
   37f38:	00380600 	call	38060 <__call_exitprocs>
   37f3c:	00800134 	movhi	r2,4
   37f40:	112b2317 	ldw	r4,-21364(r2)
   37f44:	20800f17 	ldw	r2,60(r4)
   37f48:	10000126 	beq	r2,zero,37f50 <exit+0x2c>
   37f4c:	103ee83a 	callr	r2
   37f50:	8009883a 	mov	r4,r16
   37f54:	00356e00 	call	356e0 <_exit>

00037f58 <memcmp>:
   37f58:	30800130 	cmpltui	r2,r6,4
   37f5c:	10000b1e 	bne	r2,zero,37f8c <memcmp+0x34>
   37f60:	2144b03a 	or	r2,r4,r5
   37f64:	108000cc 	andi	r2,r2,3
   37f68:	1000171e 	bne	r2,zero,37fc8 <memcmp+0x70>
   37f6c:	20c00017 	ldw	r3,0(r4)
   37f70:	28800017 	ldw	r2,0(r5)
   37f74:	1880141e 	bne	r3,r2,37fc8 <memcmp+0x70>
   37f78:	31bfff04 	addi	r6,r6,-4
   37f7c:	30800128 	cmpgeui	r2,r6,4
   37f80:	21000104 	addi	r4,r4,4
   37f84:	29400104 	addi	r5,r5,4
   37f88:	103ff81e 	bne	r2,zero,37f6c <memcmp+0x14>
   37f8c:	30bfffc4 	addi	r2,r6,-1
   37f90:	30000b26 	beq	r6,zero,37fc0 <memcmp+0x68>
   37f94:	11800044 	addi	r6,r2,1
   37f98:	218d883a 	add	r6,r4,r6
   37f9c:	00000106 	br	37fa4 <memcmp+0x4c>
   37fa0:	21800726 	beq	r4,r6,37fc0 <memcmp+0x68>
   37fa4:	20800003 	ldbu	r2,0(r4)
   37fa8:	28c00003 	ldbu	r3,0(r5)
   37fac:	21000044 	addi	r4,r4,1
   37fb0:	29400044 	addi	r5,r5,1
   37fb4:	10fffa26 	beq	r2,r3,37fa0 <memcmp+0x48>
   37fb8:	10c5c83a 	sub	r2,r2,r3
   37fbc:	f800283a 	ret
   37fc0:	0005883a 	mov	r2,zero
   37fc4:	f800283a 	ret
   37fc8:	30bfffc4 	addi	r2,r6,-1
   37fcc:	003ff106 	br	37f94 <memcmp+0x3c>

00037fd0 <__register_exitproc>:
   37fd0:	00800134 	movhi	r2,4
   37fd4:	10eb2317 	ldw	r3,-21364(r2)
   37fd8:	18805217 	ldw	r2,328(r3)
   37fdc:	10001726 	beq	r2,zero,3803c <__register_exitproc+0x6c>
   37fe0:	10c00117 	ldw	r3,4(r2)
   37fe4:	1a000808 	cmpgei	r8,r3,32
   37fe8:	40001b1e 	bne	r8,zero,38058 <__register_exitproc+0x88>
   37fec:	20000b26 	beq	r4,zero,3801c <__register_exitproc+0x4c>
   37ff0:	181090ba 	slli	r8,r3,2
   37ff4:	02400044 	movi	r9,1
   37ff8:	48d2983a 	sll	r9,r9,r3
   37ffc:	1211883a 	add	r8,r2,r8
   38000:	41802215 	stw	r6,136(r8)
   38004:	11806217 	ldw	r6,392(r2)
   38008:	21000098 	cmpnei	r4,r4,2
   3800c:	324cb03a 	or	r6,r6,r9
   38010:	11806215 	stw	r6,392(r2)
   38014:	41c04215 	stw	r7,264(r8)
   38018:	20000b26 	beq	r4,zero,38048 <__register_exitproc+0x78>
   3801c:	19000084 	addi	r4,r3,2
   38020:	200890ba 	slli	r4,r4,2
   38024:	18c00044 	addi	r3,r3,1
   38028:	10c00115 	stw	r3,4(r2)
   3802c:	1105883a 	add	r2,r2,r4
   38030:	11400015 	stw	r5,0(r2)
   38034:	0005883a 	mov	r2,zero
   38038:	f800283a 	ret
   3803c:	18805304 	addi	r2,r3,332
   38040:	18805215 	stw	r2,328(r3)
   38044:	003fe606 	br	37fe0 <__register_exitproc+0x10>
   38048:	11006317 	ldw	r4,396(r2)
   3804c:	2252b03a 	or	r9,r4,r9
   38050:	12406315 	stw	r9,396(r2)
   38054:	003ff106 	br	3801c <__register_exitproc+0x4c>
   38058:	00bfffc4 	movi	r2,-1
   3805c:	f800283a 	ret

00038060 <__call_exitprocs>:
   38060:	defff704 	addi	sp,sp,-36
   38064:	00800134 	movhi	r2,4
   38068:	dcc00315 	stw	r19,12(sp)
   3806c:	14eb2317 	ldw	r19,-21364(r2)
   38070:	dc800215 	stw	r18,8(sp)
   38074:	dfc00815 	stw	ra,32(sp)
   38078:	9c805217 	ldw	r18,328(r19)
   3807c:	ddc00715 	stw	r23,28(sp)
   38080:	dd800615 	stw	r22,24(sp)
   38084:	dd400515 	stw	r21,20(sp)
   38088:	dd000415 	stw	r20,16(sp)
   3808c:	dc400115 	stw	r17,4(sp)
   38090:	dc000015 	stw	r16,0(sp)
   38094:	90001026 	beq	r18,zero,380d8 <__call_exitprocs+0x78>
   38098:	202b883a 	mov	r21,r4
   3809c:	282d883a 	mov	r22,r5
   380a0:	05000044 	movi	r20,1
   380a4:	94000117 	ldw	r16,4(r18)
   380a8:	847fffc4 	addi	r17,r16,-1
   380ac:	88000a16 	blt	r17,zero,380d8 <__call_exitprocs+0x78>
   380b0:	84000044 	addi	r16,r16,1
   380b4:	802090ba 	slli	r16,r16,2
   380b8:	9421883a 	add	r16,r18,r16
   380bc:	b0001126 	beq	r22,zero,38104 <__call_exitprocs+0xa4>
   380c0:	80804017 	ldw	r2,256(r16)
   380c4:	15800f26 	beq	r2,r22,38104 <__call_exitprocs+0xa4>
   380c8:	8c7fffc4 	addi	r17,r17,-1
   380cc:	88bfffd8 	cmpnei	r2,r17,-1
   380d0:	843fff04 	addi	r16,r16,-4
   380d4:	103ff91e 	bne	r2,zero,380bc <__call_exitprocs+0x5c>
   380d8:	dfc00817 	ldw	ra,32(sp)
   380dc:	ddc00717 	ldw	r23,28(sp)
   380e0:	dd800617 	ldw	r22,24(sp)
   380e4:	dd400517 	ldw	r21,20(sp)
   380e8:	dd000417 	ldw	r20,16(sp)
   380ec:	dcc00317 	ldw	r19,12(sp)
   380f0:	dc800217 	ldw	r18,8(sp)
   380f4:	dc400117 	ldw	r17,4(sp)
   380f8:	dc000017 	ldw	r16,0(sp)
   380fc:	dec00904 	addi	sp,sp,36
   38100:	f800283a 	ret
   38104:	90800117 	ldw	r2,4(r18)
   38108:	81800017 	ldw	r6,0(r16)
   3810c:	10bfffc4 	addi	r2,r2,-1
   38110:	14401726 	beq	r2,r17,38170 <__call_exitprocs+0x110>
   38114:	80000015 	stw	zero,0(r16)
   38118:	303feb26 	beq	r6,zero,380c8 <__call_exitprocs+0x68>
   3811c:	a446983a 	sll	r3,r20,r17
   38120:	90806217 	ldw	r2,392(r18)
   38124:	95c00117 	ldw	r23,4(r18)
   38128:	1884703a 	and	r2,r3,r2
   3812c:	1000081e 	bne	r2,zero,38150 <__call_exitprocs+0xf0>
   38130:	303ee83a 	callr	r6
   38134:	90c00117 	ldw	r3,4(r18)
   38138:	98805217 	ldw	r2,328(r19)
   3813c:	1dc0011e 	bne	r3,r23,38144 <__call_exitprocs+0xe4>
   38140:	90bfe126 	beq	r18,r2,380c8 <__call_exitprocs+0x68>
   38144:	103fe426 	beq	r2,zero,380d8 <__call_exitprocs+0x78>
   38148:	1025883a 	mov	r18,r2
   3814c:	003fd506 	br	380a4 <__call_exitprocs+0x44>
   38150:	90806317 	ldw	r2,396(r18)
   38154:	81002017 	ldw	r4,128(r16)
   38158:	1886703a 	and	r3,r3,r2
   3815c:	1800061e 	bne	r3,zero,38178 <__call_exitprocs+0x118>
   38160:	200b883a 	mov	r5,r4
   38164:	a809883a 	mov	r4,r21
   38168:	303ee83a 	callr	r6
   3816c:	003ff106 	br	38134 <__call_exitprocs+0xd4>
   38170:	94400115 	stw	r17,4(r18)
   38174:	003fe806 	br	38118 <__call_exitprocs+0xb8>
   38178:	303ee83a 	callr	r6
   3817c:	003fed06 	br	38134 <__call_exitprocs+0xd4>
